
build/bin/melox.bin:     file format elf32-i386


Disassembly of section .virk_init_text:

00100000 <start-0xc>:
  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fb                   	sti    
  100009:	4f                   	dec    %edi
  10000a:	52                   	push   %edx
  10000b:	e4                   	.byte 0xe4

0010000c <start>:
  10000c:	fa                   	cli    
  10000d:	bc 00 60 10 00       	mov    $0x106000,%esp
  100012:	68 00 10 10 00       	push   $0x101000
  100017:	53                   	push   %ebx
  100018:	e8 64 00 00 00       	call   100081 <save_multiboot_info>
  10001d:	58                   	pop    %eax
  10001e:	58                   	pop    %eax
  10001f:	68 00 a0 00 00       	push   $0xa000
  100024:	68 00 e0 d0 00       	push   $0xd0e000
  100029:	e8 a4 02 00 00       	call   1002d2 <kerner_init>
  10002e:	8b 04 24             	mov    (%esp),%eax
  100031:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100036:	0f 22 d8             	mov    %eax,%cr3
  100039:	0f 20 c0             	mov    %cr0,%eax
  10003c:	0d 00 00 00 80       	or     $0x80000000,%eax
  100041:	0f 22 c0             	mov    %eax,%cr0
  100044:	58                   	pop    %eax
  100045:	58                   	pop    %eax
  100046:	68 84 89 10 c0       	push   $0xc0108984
  10004b:	c3                   	ret    

0010004c <_save_>:
extern uint8_t virkernel_start;
extern uint8_t virkernel_end ;
extern uint8_t __init_phykernel_end;
extern uint8_t _kernel_stack;

uint32_t _save_(uint8_t* destination, uint8_t* base, multiboot_uint32_t size) {
  10004c:	55                   	push   %ebp
  10004d:	89 e5                	mov    %esp,%ebp
  10004f:	83 ec 10             	sub    $0x10,%esp
    multiboot_uint32_t i = 0;
  100052:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (; i < size; i++)
  100059:	eb 19                	jmp    100074 <_save_+0x28>
    {
        *(destination + i) = *(base + i);
  10005b:	8b 55 0c             	mov    0xc(%ebp),%edx
  10005e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100061:	01 d0                	add    %edx,%eax
  100063:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100066:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100069:	01 ca                	add    %ecx,%edx
  10006b:	0f b6 00             	movzbl (%eax),%eax
  10006e:	88 02                	mov    %al,(%edx)
    for (; i < size; i++)
  100070:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100074:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100077:	3b 45 10             	cmp    0x10(%ebp),%eax
  10007a:	72 df                	jb     10005b <_save_+0xf>
    }
    return i;
  10007c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10007f:	c9                   	leave  
  100080:	c3                   	ret    

00100081 <save_multiboot_info>:

void save_multiboot_info(multiboot_info_t* mb_info, multiboot_uint8_t* dest)
{
  100081:	55                   	push   %ebp
  100082:	89 e5                	mov    %esp,%ebp
  100084:	53                   	push   %ebx
  100085:	83 ec 10             	sub    $0x10,%esp
    uint32_t current = 0;
  100088:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    uint8_t* info_b = (uint8_t*) mb_info;
  10008f:	8b 45 08             	mov    0x8(%ebp),%eax
  100092:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; current < sizeof(multiboot_info_t); current++)
  100095:	eb 19                	jmp    1000b0 <save_multiboot_info+0x2f>
    {
        *(dest + current) = *(info_b + current);
  100097:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10009a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10009d:	01 d0                	add    %edx,%eax
  10009f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1000a2:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000a5:	01 ca                	add    %ecx,%edx
  1000a7:	0f b6 00             	movzbl (%eax),%eax
  1000aa:	88 02                	mov    %al,(%edx)
    for (; current < sizeof(multiboot_info_t); current++)
  1000ac:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1000b0:	83 7d f8 77          	cmpl   $0x77,-0x8(%ebp)
  1000b4:	76 e1                	jbe    100097 <save_multiboot_info+0x16>
    }

    ((multiboot_info_t*) dest)->mmap_addr = (uintptr_t)dest + current;
  1000b6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000bc:	01 c2                	add    %eax,%edx
  1000be:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000c1:	89 50 30             	mov    %edx,0x30(%eax)
    current += _save_(dest + current, (uint8_t*)mb_info->mmap_addr, mb_info->mmap_length);
  1000c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1000c7:	8b 40 2c             	mov    0x2c(%eax),%eax
  1000ca:	8b 55 08             	mov    0x8(%ebp),%edx
  1000cd:	8b 52 30             	mov    0x30(%edx),%edx
  1000d0:	89 d1                	mov    %edx,%ecx
  1000d2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1000d5:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000d8:	01 da                	add    %ebx,%edx
  1000da:	50                   	push   %eax
  1000db:	51                   	push   %ecx
  1000dc:	52                   	push   %edx
  1000dd:	e8 6a ff ff ff       	call   10004c <_save_>
  1000e2:	83 c4 0c             	add    $0xc,%esp
  1000e5:	01 45 f8             	add    %eax,-0x8(%ebp)

    if (present(mb_info->flags, MULTIBOOT_INFO_DRIVE_INFO)) {
  1000e8:	8b 45 08             	mov    0x8(%ebp),%eax
  1000eb:	8b 00                	mov    (%eax),%eax
  1000ed:	25 80 00 00 00       	and    $0x80,%eax
  1000f2:	85 c0                	test   %eax,%eax
  1000f4:	74 32                	je     100128 <save_multiboot_info+0xa7>
        ((multiboot_info_t*) dest)->drives_addr = (uintptr_t)dest + current;
  1000f6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000fc:	01 c2                	add    %eax,%edx
  1000fe:	8b 45 0c             	mov    0xc(%ebp),%eax
  100101:	89 50 38             	mov    %edx,0x38(%eax)
        current += _save_(dest + current, (uint8_t*)mb_info->drives_addr, mb_info->drives_length);
  100104:	8b 45 08             	mov    0x8(%ebp),%eax
  100107:	8b 40 34             	mov    0x34(%eax),%eax
  10010a:	8b 55 08             	mov    0x8(%ebp),%edx
  10010d:	8b 52 38             	mov    0x38(%edx),%edx
  100110:	89 d1                	mov    %edx,%ecx
  100112:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  100115:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100118:	01 da                	add    %ebx,%edx
  10011a:	50                   	push   %eax
  10011b:	51                   	push   %ecx
  10011c:	52                   	push   %edx
  10011d:	e8 2a ff ff ff       	call   10004c <_save_>
  100122:	83 c4 0c             	add    $0xc,%esp
  100125:	01 45 f8             	add    %eax,-0x8(%ebp)
    }
    multiboot_info_t* test = (multiboot_info_t*) dest;
  100128:	8b 45 0c             	mov    0xc(%ebp),%eax
  10012b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    multiboot_memory_map_t* testmap = (multiboot_memory_map_t*)mb_info->mmap_addr;
  10012e:	8b 45 08             	mov    0x8(%ebp),%eax
  100131:	8b 40 30             	mov    0x30(%eax),%eax
  100134:	89 45 ec             	mov    %eax,-0x14(%ebp)
}
  100137:	90                   	nop
  100138:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10013b:	c9                   	leave  
  10013c:	c3                   	ret    

0010013d <init_page>:

void init_page(ptd_t* pt)
{
  10013d:	55                   	push   %ebp
  10013e:	89 e5                	mov    %esp,%ebp
  100140:	83 ec 30             	sub    $0x30,%esp
    SET_PDE(pt, 0, PDE(PG_PREM_RW, pt + PG_MAX_ENTRIES));
  100143:	8b 45 08             	mov    0x8(%ebp),%eax
  100146:	05 00 10 00 00       	add    $0x1000,%eax
  10014b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100150:	83 c8 0b             	or     $0xb,%eax
  100153:	89 c2                	mov    %eax,%edx
  100155:	8b 45 08             	mov    0x8(%ebp),%eax
  100158:	89 10                	mov    %edx,(%eax)
    ptd_t * tmp_paged_phy_addr = pt;
  10015a:	8b 45 08             	mov    0x8(%ebp),%eax
  10015d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptd_t * tmp_paget_phy_addr = pt + 1024;
  100160:	8b 45 08             	mov    0x8(%ebp),%eax
  100163:	05 00 10 00 00       	add    $0x1000,%eax
  100168:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //identity map 1M memory
    for(uint32_t i = 0; i < 256; i++)
  10016b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100172:	eb 20                	jmp    100194 <init_page+0x57>
        *(tmp_paget_phy_addr + i) = (((i << 12) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100174:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100177:	c1 e0 0c             	shl    $0xc,%eax
  10017a:	89 c2                	mov    %eax,%edx
  10017c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10017f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100186:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100189:	01 c8                	add    %ecx,%eax
  10018b:	83 ca 03             	or     $0x3,%edx
  10018e:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < 256; i++)
  100190:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100194:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
  10019b:	76 d7                	jbe    100174 <init_page+0x37>

    //identity map virkernel_init memory
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  10019d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001a4:	eb 29                	jmp    1001cf <init_page+0x92>
        *(tmp_paget_phy_addr + i + 256) = ((((i << 12) + MEM_1M) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  1001a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001a9:	c1 e0 0c             	shl    $0xc,%eax
  1001ac:	8d 90 00 00 10 00    	lea    0x100000(%eax),%edx
  1001b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001b5:	05 00 01 00 00       	add    $0x100,%eax
  1001ba:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1001c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1001c4:	01 c8                	add    %ecx,%eax
  1001c6:	83 ca 03             	or     $0x3,%edx
  1001c9:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  1001cb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1001cf:	b8 00 60 10 00       	mov    $0x106000,%eax
  1001d4:	2d 01 f0 0f 00       	sub    $0xff001,%eax
  1001d9:	c1 e8 0c             	shr    $0xc,%eax
  1001dc:	39 45 f8             	cmp    %eax,-0x8(%ebp)
  1001df:	72 c5                	jb     1001a6 <init_page+0x69>

    //now we map the kernel
    //calculate the virtrue kernrl page index
    uint32_t virk_pde_index = PD_INDEX(sym_val(virkernel_start));
  1001e1:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001e6:	c1 e8 16             	shr    $0x16,%eax
  1001e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t virk_pte_index = PT_INDEX(sym_val(virkernel_start));
  1001ec:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001f1:	c1 e8 0c             	shr    $0xc,%eax
  1001f4:	25 ff 03 00 00       	and    $0x3ff,%eax
  1001f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t virk_pg_counts = KERNEL_PAGE_COUNT;
  1001fc:	b8 00 80 d1 c0       	mov    $0xc0d18000,%eax
  100201:	05 00 10 00 00       	add    $0x1000,%eax
  100206:	83 e8 01             	sub    $0x1,%eax
  100209:	ba 00 60 10 c0       	mov    $0xc0106000,%edx
  10020e:	29 d0                	sub    %edx,%eax
  100210:	c1 e8 0c             	shr    $0xc,%eax
  100213:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //regist the vir_kernel page to page direction
    //we give 3 pagetable to virkel, is 3 * 4 = 12 mib size
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  100216:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10021d:	eb 34                	jmp    100253 <init_page+0x116>
    {
        *(pt + virk_pde_index + i) = PDE(PG_PREM_RW, PT_ADDR(pt, PG_TABLE_KERNEL + i));
  10021f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100222:	83 c0 02             	add    $0x2,%eax
  100225:	c1 e0 0c             	shl    $0xc,%eax
  100228:	89 c2                	mov    %eax,%edx
  10022a:	8b 45 08             	mov    0x8(%ebp),%eax
  10022d:	01 d0                	add    %edx,%eax
  10022f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100234:	89 c2                	mov    %eax,%edx
  100236:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100239:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10023c:	01 c8                	add    %ecx,%eax
  10023e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100245:	8b 45 08             	mov    0x8(%ebp),%eax
  100248:	01 c8                	add    %ecx,%eax
  10024a:	83 ca 0b             	or     $0xb,%edx
  10024d:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  10024f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100253:	83 7d f4 06          	cmpl   $0x6,-0xc(%ebp)
  100257:	76 c6                	jbe    10021f <init_page+0xe2>
    }

    //avoid kernel size > prepared page count
    if(virk_pg_counts > (PG_TABLE_STACK - PG_TABLE_KERNEL) * 1024)
  100259:	81 7d dc 00 1c 00 00 	cmpl   $0x1c00,-0x24(%ebp)
  100260:	76 02                	jbe    100264 <init_page+0x127>
    {
        asm ("ud2");
  100262:	0f 0b                	ud2    
    }

    //calcul the phy address
    uint32_t virk_phy_addr = V2P(&virkernel_start);
  100264:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  100269:	05 00 00 00 40       	add    $0x40000000,%eax
  10026e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    //map virtrue kernel page
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  100271:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100278:	eb 36                	jmp    1002b0 <init_page+0x173>
    {
        *(tmp_paget_phy_addr + 1024 + virk_pte_index + i) = (((virk_phy_addr + (i << 12)) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  10027a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10027d:	c1 e0 0c             	shl    $0xc,%eax
  100280:	89 c2                	mov    %eax,%edx
  100282:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100285:	01 d0                	add    %edx,%eax
  100287:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10028c:	89 c2                	mov    %eax,%edx
  10028e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100291:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100294:	01 c8                	add    %ecx,%eax
  100296:	05 00 04 00 00       	add    $0x400,%eax
  10029b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1002a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1002a5:	01 c8                	add    %ecx,%eax
  1002a7:	83 ca 03             	or     $0x3,%edx
  1002aa:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  1002ac:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1002b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1002b3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1002b6:	72 c2                	jb     10027a <init_page+0x13d>
    }

    //self map pd, to give the pd virture address
    SET_PDE(pt, 1023, PDE(T_SELF_REF_PERM, pt));
  1002b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1002bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1002c0:	89 c2                	mov    %eax,%edx
  1002c2:	8b 45 08             	mov    0x8(%ebp),%eax
  1002c5:	05 fc 0f 00 00       	add    $0xffc,%eax
  1002ca:	83 ca 1b             	or     $0x1b,%edx
  1002cd:	89 10                	mov    %edx,(%eax)
}
  1002cf:	90                   	nop
  1002d0:	c9                   	leave  
  1002d1:	c3                   	ret    

001002d2 <kerner_init>:

void kerner_init(ptd_t* pt, uint32_t pt_size)
{
  1002d2:	55                   	push   %ebp
  1002d3:	89 e5                	mov    %esp,%ebp
  1002d5:	83 ec 10             	sub    $0x10,%esp
    uint8_t* kpg = (uint8_t*) pt;
  1002d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1002db:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (uint32_t i = 0; i < pt_size; i++)
  1002de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1002e5:	eb 0f                	jmp    1002f6 <kerner_init+0x24>
    {
        *(kpg + i) = 0;
  1002e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1002ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ed:	01 d0                	add    %edx,%eax
  1002ef:	c6 00 00             	movb   $0x0,(%eax)
    for (uint32_t i = 0; i < pt_size; i++)
  1002f2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1002f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002f9:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1002fc:	72 e9                	jb     1002e7 <kerner_init+0x15>
    }
    init_page(pt);
  1002fe:	ff 75 08             	push   0x8(%ebp)
  100301:	e8 37 fe ff ff       	call   10013d <init_page>
  100306:	83 c4 04             	add    $0x4,%esp
  100309:	90                   	nop
  10030a:	c9                   	leave  
  10030b:	c3                   	ret    

Disassembly of section .text:

c0106000 <init_vga_buffer>:
int XPOS = 0;

vga_attr *video;

void init_vga_buffer()
{
c0106000:	55                   	push   %ebp
c0106001:	89 e5                	mov    %esp,%ebp
    video = (vga_attr *) VIDEO;
c0106003:	c7 05 0c a0 10 c0 00 	movl   $0xb8000,0xc010a00c
c010600a:	80 0b 00 
}
c010600d:	90                   	nop
c010600e:	5d                   	pop    %ebp
c010600f:	c3                   	ret    

c0106010 <set_vga_buffer>:

void set_vga_buffer(void* vga_buf)
{
c0106010:	55                   	push   %ebp
c0106011:	89 e5                	mov    %esp,%ebp
    video = (vga_attr*)vga_buf;
c0106013:	8b 45 08             	mov    0x8(%ebp),%eax
c0106016:	a3 0c a0 10 c0       	mov    %eax,0xc010a00c
}
c010601b:	90                   	nop
c010601c:	5d                   	pop    %ebp
c010601d:	c3                   	ret    

c010601e <vga_put_char>:

void vga_put_char(char c)
{
c010601e:	55                   	push   %ebp
c010601f:	89 e5                	mov    %esp,%ebp
c0106021:	53                   	push   %ebx
c0106022:	83 ec 14             	sub    $0x14,%esp
c0106025:	8b 45 08             	mov    0x8(%ebp),%eax
c0106028:	88 45 f4             	mov    %al,-0xc(%ebp)
    if(c == '\n')
c010602b:	80 7d f4 0a          	cmpb   $0xa,-0xc(%ebp)
c010602f:	75 19                	jne    c010604a <vga_put_char+0x2c>
    {
        YPOS++;
c0106031:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c0106036:	83 c0 01             	add    $0x1,%eax
c0106039:	a3 04 a0 10 c0       	mov    %eax,0xc010a004
        XPOS = 0;
c010603e:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c0106045:	00 00 00 
c0106048:	eb 54                	jmp    c010609e <vga_put_char+0x80>
    }else if(c == '\r')
c010604a:	80 7d f4 0d          	cmpb   $0xd,-0xc(%ebp)
c010604e:	75 0c                	jne    c010605c <vga_put_char+0x3e>
        XPOS = 0;
c0106050:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c0106057:	00 00 00 
c010605a:	eb 42                	jmp    c010609e <vga_put_char+0x80>
    else{
        *(video + XPOS + YPOS * WIDTH) = (theme_color | c);
c010605c:	66 0f be 55 f4       	movsbw -0xc(%ebp),%dx
c0106061:	0f b7 05 00 a0 10 c0 	movzwl 0xc010a000,%eax
c0106068:	09 c2                	or     %eax,%edx
c010606a:	8b 0d 0c a0 10 c0    	mov    0xc010a00c,%ecx
c0106070:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c0106075:	89 c3                	mov    %eax,%ebx
c0106077:	89 d8                	mov    %ebx,%eax
c0106079:	c1 e0 02             	shl    $0x2,%eax
c010607c:	01 d8                	add    %ebx,%eax
c010607e:	c1 e0 04             	shl    $0x4,%eax
c0106081:	89 c3                	mov    %eax,%ebx
c0106083:	a1 08 a0 10 c0       	mov    0xc010a008,%eax
c0106088:	01 d8                	add    %ebx,%eax
c010608a:	01 c0                	add    %eax,%eax
c010608c:	01 c8                	add    %ecx,%eax
c010608e:	66 89 10             	mov    %dx,(%eax)
        XPOS++;
c0106091:	a1 08 a0 10 c0       	mov    0xc010a008,%eax
c0106096:	83 c0 01             	add    $0x1,%eax
c0106099:	a3 08 a0 10 c0       	mov    %eax,0xc010a008
    }
    if (XPOS >= WIDTH)
c010609e:	a1 08 a0 10 c0       	mov    0xc010a008,%eax
c01060a3:	83 f8 4f             	cmp    $0x4f,%eax
c01060a6:	7e 17                	jle    c01060bf <vga_put_char+0xa1>
    {
        YPOS++;
c01060a8:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c01060ad:	83 c0 01             	add    $0x1,%eax
c01060b0:	a3 04 a0 10 c0       	mov    %eax,0xc010a004
        XPOS = 0;
c01060b5:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c01060bc:	00 00 00 
    }
    if(YPOS >= HIGHT)
c01060bf:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c01060c4:	83 f8 18             	cmp    $0x18,%eax
c01060c7:	7e 05                	jle    c01060ce <vga_put_char+0xb0>
        vga_scrollup();
c01060c9:	e8 be 00 00 00       	call   c010618c <vga_scrollup>
}
c01060ce:	90                   	nop
c01060cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01060d2:	c9                   	leave  
c01060d3:	c3                   	ret    

c01060d4 <vga_set_show>:

void vga_set_show(vga_attr flashing, vga_attr backgroud, vga_attr frontcolor)
{
c01060d4:	55                   	push   %ebp
c01060d5:	89 e5                	mov    %esp,%ebp
c01060d7:	83 ec 0c             	sub    $0xc,%esp
c01060da:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01060dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01060e3:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
c01060e7:	66 89 55 f8          	mov    %dx,-0x8(%ebp)
c01060eb:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    theme_color = (flashing << 7 | backgroud << 4 | frontcolor) << 8;
c01060ef:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01060f3:	c1 e0 07             	shl    $0x7,%eax
c01060f6:	89 c2                	mov    %eax,%edx
c01060f8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c01060fc:	c1 e0 04             	shl    $0x4,%eax
c01060ff:	09 c2                	or     %eax,%edx
c0106101:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0106105:	09 d0                	or     %edx,%eax
c0106107:	c1 e0 08             	shl    $0x8,%eax
c010610a:	66 a3 00 a0 10 c0    	mov    %ax,0xc010a000
}
c0106110:	90                   	nop
c0106111:	c9                   	leave  
c0106112:	c3                   	ret    

c0106113 <vga_put_str>:

void vga_put_str(char* str)
{
c0106113:	55                   	push   %ebp
c0106114:	89 e5                	mov    %esp,%ebp
c0106116:	83 ec 08             	sub    $0x8,%esp
    while (*str != '\0')
c0106119:	eb 19                	jmp    c0106134 <vga_put_str+0x21>
    {
        vga_put_char(*str);
c010611b:	8b 45 08             	mov    0x8(%ebp),%eax
c010611e:	0f b6 00             	movzbl (%eax),%eax
c0106121:	0f be c0             	movsbl %al,%eax
c0106124:	83 ec 0c             	sub    $0xc,%esp
c0106127:	50                   	push   %eax
c0106128:	e8 f1 fe ff ff       	call   c010601e <vga_put_char>
c010612d:	83 c4 10             	add    $0x10,%esp
        str++;
c0106130:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*str != '\0')
c0106134:	8b 45 08             	mov    0x8(%ebp),%eax
c0106137:	0f b6 00             	movzbl (%eax),%eax
c010613a:	84 c0                	test   %al,%al
c010613c:	75 dd                	jne    c010611b <vga_put_str+0x8>
    }
}
c010613e:	90                   	nop
c010613f:	90                   	nop
c0106140:	c9                   	leave  
c0106141:	c3                   	ret    

c0106142 <vga_clear>:

void vga_clear()
{
c0106142:	55                   	push   %ebp
c0106143:	89 e5                	mov    %esp,%ebp
c0106145:	83 ec 10             	sub    $0x10,%esp
  
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106148:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010614f:	eb 1b                	jmp    c010616c <vga_clear+0x2a>
        *(video + i) = theme_color;
c0106151:	8b 15 0c a0 10 c0    	mov    0xc010a00c,%edx
c0106157:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010615a:	01 c0                	add    %eax,%eax
c010615c:	01 c2                	add    %eax,%edx
c010615e:	0f b7 05 00 a0 10 c0 	movzwl 0xc010a000,%eax
c0106165:	66 89 02             	mov    %ax,(%edx)
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106168:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010616c:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
c0106173:	7e dc                	jle    c0106151 <vga_clear+0xf>

    XPOS = 0;
c0106175:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c010617c:	00 00 00 
    YPOS = 0;
c010617f:	c7 05 04 a0 10 c0 00 	movl   $0x0,0xc010a004
c0106186:	00 00 00 
}
c0106189:	90                   	nop
c010618a:	c9                   	leave  
c010618b:	c3                   	ret    

c010618c <vga_scrollup>:

void vga_scrollup()
{
c010618c:	55                   	push   %ebp
c010618d:	89 e5                	mov    %esp,%ebp
c010618f:	83 ec 10             	sub    $0x10,%esp
    unsigned int last_line = WIDTH * (HIGHT - 1);
c0106192:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
    for (unsigned int i = 0; i < last_line; i++) {
c0106199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01061a0:	eb 27                	jmp    c01061c9 <vga_scrollup+0x3d>
        *(video + i) = *(video + WIDTH + i);
c01061a2:	8b 15 0c a0 10 c0    	mov    0xc010a00c,%edx
c01061a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061ab:	83 c0 50             	add    $0x50,%eax
c01061ae:	01 c0                	add    %eax,%eax
c01061b0:	01 d0                	add    %edx,%eax
c01061b2:	8b 0d 0c a0 10 c0    	mov    0xc010a00c,%ecx
c01061b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01061bb:	01 d2                	add    %edx,%edx
c01061bd:	01 ca                	add    %ecx,%edx
c01061bf:	0f b7 00             	movzwl (%eax),%eax
c01061c2:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < last_line; i++) {
c01061c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01061c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061cf:	72 d1                	jb     c01061a2 <vga_scrollup+0x16>
    }
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01061d8:	eb 20                	jmp    c01061fa <vga_scrollup+0x6e>
        *(video + i + last_line) = theme_color;
c01061da:	8b 15 0c a0 10 c0    	mov    0xc010a00c,%edx
c01061e0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c01061e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061e6:	01 c8                	add    %ecx,%eax
c01061e8:	01 c0                	add    %eax,%eax
c01061ea:	01 c2                	add    %eax,%edx
c01061ec:	0f b7 05 00 a0 10 c0 	movzwl 0xc010a000,%eax
c01061f3:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061f6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01061fa:	83 7d f8 4f          	cmpl   $0x4f,-0x8(%ebp)
c01061fe:	76 da                	jbe    c01061da <vga_scrollup+0x4e>
    }
    YPOS = YPOS == 0 ? 0 : HIGHT - 1;
c0106200:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c0106205:	85 c0                	test   %eax,%eax
c0106207:	75 07                	jne    c0106210 <vga_scrollup+0x84>
c0106209:	b8 00 00 00 00       	mov    $0x0,%eax
c010620e:	eb 05                	jmp    c0106215 <vga_scrollup+0x89>
c0106210:	b8 18 00 00 00       	mov    $0x18,%eax
c0106215:	a3 04 a0 10 c0       	mov    %eax,0xc010a004
c010621a:	90                   	nop
c010621b:	c9                   	leave  
c010621c:	c3                   	ret    

c010621d <cpu_rcr3>:
{
    asm("mov %0, %%cr3" ::"r"(v));
}

static inline reg32 cpu_rcr3()
{
c010621d:	55                   	push   %ebp
c010621e:	89 e5                	mov    %esp,%ebp
c0106220:	83 ec 10             	sub    $0x10,%esp
    uintptr_t val;
    asm volatile("movl %%cr3,%0" : "=r" (val));
c0106223:	0f 20 d8             	mov    %cr3,%eax
c0106226:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return val;
c0106229:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010622c:	c9                   	leave  
c010622d:	c3                   	ret    

c010622e <cpu_reflags>:

static inline reg32 cpu_reflags()
{
c010622e:	55                   	push   %ebp
c010622f:	89 e5                	mov    %esp,%ebp
c0106231:	83 ec 10             	sub    $0x10,%esp
    uintptr_t val;
    asm volatile(
c0106234:	9c                   	pushf  
c0106235:	58                   	pop    %eax
c0106236:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "pushf\n"
        "popl %0\n"
        :"=r"(val)::);
    return val;
c0106239:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010623c:	c9                   	leave  
c010623d:	c3                   	ret    

c010623e <_vir_kernel_init>:
/* Forward declarations. */
void _vir_kernel_init (unsigned long addr);
extern void __proc0(); /* proc0.c */

void _vir_kernel_init(unsigned long addr)
{
c010623e:	55                   	push   %ebp
c010623f:	89 e5                	mov    %esp,%ebp
c0106241:	57                   	push   %edi
c0106242:	56                   	push   %esi
c0106243:	53                   	push   %ebx
c0106244:	81 ec bc 00 00 00    	sub    $0xbc,%esp
    multiboot_info_t *mbi;
    mbi = (multiboot_info_t *) addr;
c010624a:	8b 45 08             	mov    0x8(%ebp),%eax
c010624d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    multiboot_memory_map_t* map = (multiboot_memory_map_t*)mbi->mmap_addr;
c0106250:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106253:	8b 40 30             	mov    0x30(%eax),%eax
c0106256:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    _init_idt();
c0106259:	e8 d5 25 00 00       	call   c0108833 <_init_idt>
    pmm_init(MEM_1MB + (mbi->mem_upper << 10));
c010625e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106261:	8b 40 08             	mov    0x8(%eax),%eax
c0106264:	c1 e0 0a             	shl    $0xa,%eax
c0106267:	05 00 00 10 00       	add    $0x100000,%eax
c010626c:	83 ec 0c             	sub    $0xc,%esp
c010626f:	50                   	push   %eax
c0106270:	e8 64 04 00 00       	call   c01066d9 <pmm_init>
c0106275:	83 c4 10             	add    $0x10,%esp
    vmm_init();
c0106278:	e8 49 11 00 00       	call   c01073c6 <vmm_init>

    init_vga_buffer();
c010627d:	e8 7e fd ff ff       	call   c0106000 <init_vga_buffer>
    vga_set_show(0,VGA_COLOR_BLACK,VGA_COLOR_LIGHT_WHITE);
c0106282:	83 ec 04             	sub    $0x4,%esp
c0106285:	6a 0f                	push   $0xf
c0106287:	6a 00                	push   $0x0
c0106289:	6a 00                	push   $0x0
c010628b:	e8 44 fe ff ff       	call   c01060d4 <vga_set_show>
c0106290:	83 c4 10             	add    $0x10,%esp
    /* Clear the screen. */
    vga_clear();
c0106293:	e8 aa fe ff ff       	call   c0106142 <vga_clear>

    __kernel_ptd = cpu_rcr3();
c0106298:	e8 80 ff ff ff       	call   c010621d <cpu_rcr3>
c010629d:	a3 20 a0 10 c0       	mov    %eax,0xc010a020

    tmp = (struct m_pcb){ .page_table = __kernel_ptd };
c01062a2:	8b 35 20 a0 10 c0    	mov    0xc010a020,%esi
c01062a8:	bb 40 a0 10 c0       	mov    $0xc010a040,%ebx
c01062ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01062b2:	ba 1b 00 00 00       	mov    $0x1b,%edx
c01062b7:	89 df                	mov    %ebx,%edi
c01062b9:	89 d1                	mov    %edx,%ecx
c01062bb:	f3 ab                	rep stos %eax,%es:(%edi)
c01062bd:	89 35 a4 a0 10 c0    	mov    %esi,0xc010a0a4

    __current = &tmp;
c01062c3:	c7 05 60 b1 d0 c0 40 	movl   $0xc010a040,0xc0d0b160
c01062ca:	a0 10 c0 
    // }

    /* Set MBI to the address of the Multiboot information structure. */

    /* Print out the flags. */
    kprintf("flags = 0x%x\n", (unsigned) mbi->flags);
c01062cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062d0:	8b 00                	mov    (%eax),%eax
c01062d2:	83 ec 08             	sub    $0x8,%esp
c01062d5:	50                   	push   %eax
c01062d6:	68 00 d0 d0 c0       	push   $0xc0d0d000
c01062db:	e8 ef 38 00 00       	call   c0109bcf <kprintf>
c01062e0:	83 c4 10             	add    $0x10,%esp

    /* Are mem_* valid? */
    if (CHECK_FLAG(mbi->flags, 0))
c01062e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062e6:	8b 00                	mov    (%eax),%eax
c01062e8:	83 e0 01             	and    $0x1,%eax
c01062eb:	85 c0                	test   %eax,%eax
c01062ed:	74 1e                	je     c010630d <_vir_kernel_init+0xcf>
        kprintf("mem_lower = %uKB, mem_upper = %uKB\n",(unsigned) mbi->mem_lower, (unsigned) mbi->mem_upper);
c01062ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062f2:	8b 50 08             	mov    0x8(%eax),%edx
c01062f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062f8:	8b 40 04             	mov    0x4(%eax),%eax
c01062fb:	83 ec 04             	sub    $0x4,%esp
c01062fe:	52                   	push   %edx
c01062ff:	50                   	push   %eax
c0106300:	68 10 d0 d0 c0       	push   $0xc0d0d010
c0106305:	e8 c5 38 00 00       	call   c0109bcf <kprintf>
c010630a:	83 c4 10             	add    $0x10,%esp
    
    unsigned int map_size = mbi->mmap_length / sizeof(multiboot_memory_map_t);
c010630d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106310:	8b 40 2c             	mov    0x2c(%eax),%eax
c0106313:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
c0106318:	f7 e2                	mul    %edx
c010631a:	89 d0                	mov    %edx,%eax
c010631c:	c1 e8 04             	shr    $0x4,%eax
c010631f:	89 45 d0             	mov    %eax,-0x30(%ebp)
    for (unsigned int i = 0; i < map_size; i++) {
c0106322:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0106329:	e9 33 01 00 00       	jmp    c0106461 <_vir_kernel_init+0x223>
        multiboot_memory_map_t mmap = map[i];
c010632e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106331:	89 d0                	mov    %edx,%eax
c0106333:	01 c0                	add    %eax,%eax
c0106335:	01 d0                	add    %edx,%eax
c0106337:	c1 e0 03             	shl    $0x3,%eax
c010633a:	89 c2                	mov    %eax,%edx
c010633c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010633f:	01 d0                	add    %edx,%eax
c0106341:	8b 10                	mov    (%eax),%edx
c0106343:	89 95 38 ff ff ff    	mov    %edx,-0xc8(%ebp)
c0106349:	8b 50 04             	mov    0x4(%eax),%edx
c010634c:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
c0106352:	8b 50 08             	mov    0x8(%eax),%edx
c0106355:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%ebp)
c010635b:	8b 50 0c             	mov    0xc(%eax),%edx
c010635e:	89 95 44 ff ff ff    	mov    %edx,-0xbc(%ebp)
c0106364:	8b 50 10             	mov    0x10(%eax),%edx
c0106367:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
c010636d:	8b 40 14             	mov    0x14(%eax),%eax
c0106370:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
               map[i].addr_low,
               map[i].len_low >> 10,
               map[i].type);
c0106376:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106379:	89 d0                	mov    %edx,%eax
c010637b:	01 c0                	add    %eax,%eax
c010637d:	01 d0                	add    %edx,%eax
c010637f:	c1 e0 03             	shl    $0x3,%eax
c0106382:	89 c2                	mov    %eax,%edx
c0106384:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106387:	01 d0                	add    %edx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c0106389:	8b 50 14             	mov    0x14(%eax),%edx
               map[i].len_low >> 10,
c010638c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010638f:	89 c8                	mov    %ecx,%eax
c0106391:	01 c0                	add    %eax,%eax
c0106393:	01 c8                	add    %ecx,%eax
c0106395:	c1 e0 03             	shl    $0x3,%eax
c0106398:	89 c1                	mov    %eax,%ecx
c010639a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010639d:	01 c8                	add    %ecx,%eax
c010639f:	8b 40 0c             	mov    0xc(%eax),%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c01063a2:	c1 e8 0a             	shr    $0xa,%eax
c01063a5:	89 c3                	mov    %eax,%ebx
               map[i].addr_low,
c01063a7:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01063aa:	89 c8                	mov    %ecx,%eax
c01063ac:	01 c0                	add    %eax,%eax
c01063ae:	01 c8                	add    %ecx,%eax
c01063b0:	c1 e0 03             	shl    $0x3,%eax
c01063b3:	89 c1                	mov    %eax,%ecx
c01063b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063b8:	01 c8                	add    %ecx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c01063ba:	8b 40 04             	mov    0x4(%eax),%eax
c01063bd:	52                   	push   %edx
c01063be:	53                   	push   %ebx
c01063bf:	50                   	push   %eax
c01063c0:	68 34 d0 d0 c0       	push   $0xc0d0d034
c01063c5:	e8 05 38 00 00       	call   c0109bcf <kprintf>
c01063ca:	83 c4 10             	add    $0x10,%esp
        if (mmap.type == MULTIBOOT_MEMORY_AVAILABLE) {
c01063cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
c01063d3:	83 f8 01             	cmp    $0x1,%eax
c01063d6:	0f 85 81 00 00 00    	jne    c010645d <_vir_kernel_init+0x21f>
            // 整数向上取整除法
            uintptr_t pg = map[i].addr_low + 0x0fffU;
c01063dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063df:	89 d0                	mov    %edx,%eax
c01063e1:	01 c0                	add    %eax,%eax
c01063e3:	01 d0                	add    %edx,%eax
c01063e5:	c1 e0 03             	shl    $0x3,%eax
c01063e8:	89 c2                	mov    %eax,%edx
c01063ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063ed:	01 d0                	add    %edx,%eax
c01063ef:	8b 40 04             	mov    0x4(%eax),%eax
c01063f2:	05 ff 0f 00 00       	add    $0xfff,%eax
c01063f7:	89 45 bc             	mov    %eax,-0x44(%ebp)
            pmm_mark_chunk_free(pg >> 12, map[i].len_low >> 12);
c01063fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063fd:	89 d0                	mov    %edx,%eax
c01063ff:	01 c0                	add    %eax,%eax
c0106401:	01 d0                	add    %edx,%eax
c0106403:	c1 e0 03             	shl    $0x3,%eax
c0106406:	89 c2                	mov    %eax,%edx
c0106408:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010640b:	01 d0                	add    %edx,%eax
c010640d:	8b 40 0c             	mov    0xc(%eax),%eax
c0106410:	c1 e8 0c             	shr    $0xc,%eax
c0106413:	89 c2                	mov    %eax,%edx
c0106415:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106418:	c1 e8 0c             	shr    $0xc,%eax
c010641b:	83 ec 08             	sub    $0x8,%esp
c010641e:	52                   	push   %edx
c010641f:	50                   	push   %eax
c0106420:	e8 99 03 00 00       	call   c01067be <pmm_mark_chunk_free>
c0106425:	83 c4 10             	add    $0x10,%esp
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c0106428:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010642b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106430:	89 c1                	mov    %eax,%ecx
                   map[i].len_low >> 12,
c0106432:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106435:	89 d0                	mov    %edx,%eax
c0106437:	01 c0                	add    %eax,%eax
c0106439:	01 d0                	add    %edx,%eax
c010643b:	c1 e0 03             	shl    $0x3,%eax
c010643e:	89 c2                	mov    %eax,%edx
c0106440:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106443:	01 d0                	add    %edx,%eax
c0106445:	8b 40 0c             	mov    0xc(%eax),%eax
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c0106448:	c1 e8 0c             	shr    $0xc,%eax
c010644b:	83 ec 04             	sub    $0x4,%esp
c010644e:	51                   	push   %ecx
c010644f:	50                   	push   %eax
c0106450:	68 5c d0 d0 c0       	push   $0xc0d0d05c
c0106455:	e8 75 37 00 00       	call   c0109bcf <kprintf>
c010645a:	83 c4 10             	add    $0x10,%esp
    for (unsigned int i = 0; i < map_size; i++) {
c010645d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c0106461:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106464:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0106467:	0f 82 c1 fe ff ff    	jb     c010632e <_vir_kernel_init+0xf0>
                   pg & ~0x0fffU);
        }
    }

    // 将内核占据的页设为已占用
    size_t pg_count = (uintptr_t)(&virkernel_end  - &virkernel_start) >> 12;
c010646d:	b8 00 80 d1 c0       	mov    $0xc0d18000,%eax
c0106472:	2d 00 60 10 c0       	sub    $0xc0106000,%eax
c0106477:	c1 e8 0c             	shr    $0xc,%eax
c010647a:	89 45 cc             	mov    %eax,-0x34(%ebp)
    pmm_mark_chunk_occupied(KERNEL_PID, V2P(&virkernel_start) >> 12, pg_count, 0);
c010647d:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
c0106482:	05 00 00 00 40       	add    $0x40000000,%eax
c0106487:	c1 e8 0c             	shr    $0xc,%eax
c010648a:	6a 00                	push   $0x0
c010648c:	ff 75 cc             	push   -0x34(%ebp)
c010648f:	50                   	push   %eax
c0106490:	6a ff                	push   $0xffffffff
c0106492:	e8 6a 03 00 00       	call   c0106801 <pmm_mark_chunk_occupied>
c0106497:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Allocated %d pages for kernel.\n", pg_count);
c010649a:	83 ec 08             	sub    $0x8,%esp
c010649d:	ff 75 cc             	push   -0x34(%ebp)
c01064a0:	68 84 d0 d0 c0       	push   $0xc0d0d084
c01064a5:	e8 25 37 00 00       	call   c0109bcf <kprintf>
c01064aa:	83 c4 10             	add    $0x10,%esp

    size_t vga_buf_pgs = VGA_BUFFER_SIZE >> 12;
c01064ad:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
    
    // 首先，标记VGA部分为已占用
    pmm_mark_chunk_occupied(KERNEL_PID, VIDEO >> 12, vga_buf_pgs, 0);
c01064b4:	6a 00                	push   $0x0
c01064b6:	ff 75 c8             	push   -0x38(%ebp)
c01064b9:	68 b8 00 00 00       	push   $0xb8
c01064be:	6a ff                	push   $0xffffffff
c01064c0:	e8 3c 03 00 00       	call   c0106801 <pmm_mark_chunk_occupied>
c01064c5:	83 c4 10             	add    $0x10,%esp
    
    // 重映射VGA文本缓冲区（以后会变成显存，i.e., framebuffer）
    for (size_t i = 0; i < vga_buf_pgs; i++)
c01064c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01064cf:	eb 32                	jmp    c0106503 <_vir_kernel_init+0x2c5>
    {
        pt_t* test = vmm_map_page(KERNEL_PID, VGA_BUFFER_VADDR + (i << 12), VIDEO + (i << 12), PG_PREM_RW, PG_PREM_RW);
c01064d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01064d4:	c1 e0 0c             	shl    $0xc,%eax
c01064d7:	05 00 80 0b 00       	add    $0xb8000,%eax
c01064dc:	89 c2                	mov    %eax,%edx
c01064de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01064e1:	c1 e0 0c             	shl    $0xc,%eax
c01064e4:	2d 00 00 00 50       	sub    $0x50000000,%eax
c01064e9:	83 ec 0c             	sub    $0xc,%esp
c01064ec:	6a 03                	push   $0x3
c01064ee:	6a 03                	push   $0x3
c01064f0:	52                   	push   %edx
c01064f1:	50                   	push   %eax
c01064f2:	6a ff                	push   $0xffffffff
c01064f4:	e8 8e 10 00 00       	call   c0107587 <vmm_map_page>
c01064f9:	83 c4 20             	add    $0x20,%esp
c01064fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
    for (size_t i = 0; i < vga_buf_pgs; i++)
c01064ff:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0106503:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106506:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0106509:	72 c6                	jb     c01064d1 <_vir_kernel_init+0x293>
        //kprintf("[MM] vga vaddr %x\n", test);
    }
    set_vga_buffer(VGA_BUFFER_VADDR);
c010650b:	83 ec 0c             	sub    $0xc,%esp
c010650e:	68 00 00 00 b0       	push   $0xb0000000
c0106513:	e8 f8 fa ff ff       	call   c0106010 <set_vga_buffer>
c0106518:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Mapped VGA to %x.\n", VGA_BUFFER_VADDR);
c010651b:	83 ec 08             	sub    $0x8,%esp
c010651e:	68 00 00 00 b0       	push   $0xb0000000
c0106523:	68 a9 d0 d0 c0       	push   $0xc0d0d0a9
c0106528:	e8 a2 36 00 00       	call   c0109bcf <kprintf>
c010652d:	83 c4 10             	add    $0x10,%esp

    // 为内核创建一个专属栈空间。
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c0106530:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0106537:	eb 26                	jmp    c010655f <_vir_kernel_init+0x321>
        pt_t* test = vmm_alloc_page(KERNEL_PID, (void*)K_STACK_START + (i << 12), NULL, PG_PREM_RW, PG_PREM_RW);
c0106539:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010653c:	c1 e0 0c             	shl    $0xc,%eax
c010653f:	2d 00 00 41 00       	sub    $0x410000,%eax
c0106544:	83 ec 0c             	sub    $0xc,%esp
c0106547:	6a 03                	push   $0x3
c0106549:	6a 03                	push   $0x3
c010654b:	6a 00                	push   $0x0
c010654d:	50                   	push   %eax
c010654e:	6a ff                	push   $0xffffffff
c0106550:	e8 d9 11 00 00       	call   c010772e <vmm_alloc_page>
c0106555:	83 c4 20             	add    $0x20,%esp
c0106558:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c010655b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010655f:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
c0106563:	76 d4                	jbe    c0106539 <_vir_kernel_init+0x2fb>
        //kprintf("[MM] kernel paddr %x", test);
    }
    kprintf("[MM] Allocated %d pages for stack start at 0x%x\n", K_STACK_SIZE>>12, K_STACK_START);
c0106565:	83 ec 04             	sub    $0x4,%esp
c0106568:	68 00 00 bf ff       	push   $0xffbf0000
c010656d:	6a 10                	push   $0x10
c010656f:	68 c4 d0 d0 c0       	push   $0xc0d0d0c4
c0106574:	e8 56 36 00 00       	call   c0109bcf <kprintf>
c0106579:	83 c4 10             	add    $0x10,%esp

    //give malloc init
    //mem_init();
    //kprintf("[MM] Malloc Init Success \n");
    kprintf("[KERNEL] === Initialization Done === \n\n");
c010657c:	83 ec 0c             	sub    $0xc,%esp
c010657f:	68 f8 d0 d0 c0       	push   $0xc0d0d0f8
c0106584:	e8 46 36 00 00       	call   c0109bcf <kprintf>
c0106589:	83 c4 10             	add    $0x10,%esp

    vga_put_str("MELOX OS\n");
c010658c:	83 ec 0c             	sub    $0xc,%esp
c010658f:	68 20 d1 d0 c0       	push   $0xc0d0d120
c0106594:	e8 7a fb ff ff       	call   c0106113 <vga_put_str>
c0106599:	83 c4 10             	add    $0x10,%esp
     //__asm__("int $1");
}
c010659c:	90                   	nop
c010659d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01065a0:	5b                   	pop    %ebx
c01065a1:	5e                   	pop    %esi
c01065a2:	5f                   	pop    %edi
c01065a3:	5d                   	pop    %ebp
c01065a4:	c3                   	ret    

c01065a5 <_kernel_main>:
//     //kprintf("[KERNEL] === Post Initialization Done === \n\n");
// }

void creat_proc0();
void _kernel_main()
{
c01065a5:	55                   	push   %ebp
c01065a6:	89 e5                	mov    %esp,%ebp
c01065a8:	81 ec 18 01 00 00    	sub    $0x118,%esp
    char* buf[64];
    
    kprintf("We are now running in virtual address space!\n\n");
c01065ae:	83 ec 0c             	sub    $0xc,%esp
c01065b1:	68 2c d1 d0 c0       	push   $0xc0d0d12c
c01065b6:	e8 14 36 00 00       	call   c0109bcf <kprintf>
c01065bb:	83 c4 10             	add    $0x10,%esp
    
    cpu_get_brand(buf);
c01065be:	83 ec 0c             	sub    $0xc,%esp
c01065c1:	8d 85 f4 fe ff ff    	lea    -0x10c(%ebp),%eax
c01065c7:	50                   	push   %eax
c01065c8:	e8 40 1f 00 00       	call   c010850d <cpu_get_brand>
c01065cd:	83 c4 10             	add    $0x10,%esp
    kprintf("CPU: %s\n\n", buf);
c01065d0:	83 ec 08             	sub    $0x8,%esp
c01065d3:	8d 85 f4 fe ff ff    	lea    -0x10c(%ebp),%eax
c01065d9:	50                   	push   %eax
c01065da:	68 5b d1 d0 c0       	push   $0xc0d0d15b
c01065df:	e8 eb 35 00 00       	call   c0109bcf <kprintf>
c01065e4:	83 c4 10             	add    $0x10,%esp

    uintptr_t k_start = vmm_v2p(&virkernel_start);
c01065e7:	83 ec 0c             	sub    $0xc,%esp
c01065ea:	68 00 60 10 c0       	push   $0xc0106000
c01065ef:	e8 7f 14 00 00       	call   c0107a73 <vmm_v2p>
c01065f4:	83 c4 10             	add    $0x10,%esp
c01065f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf("The kernel's base address mapping: %x->%x\n", &virkernel_start, k_start);
c01065fa:	83 ec 04             	sub    $0x4,%esp
c01065fd:	ff 75 f4             	push   -0xc(%ebp)
c0106600:	68 00 60 10 c0       	push   $0xc0106000
c0106605:	68 68 d1 d0 c0       	push   $0xc0d0d168
c010660a:	e8 c0 35 00 00       	call   c0109bcf <kprintf>
c010660f:	83 c4 10             	add    $0x10,%esp

    // timer_init();
    // init_keyboard();

    //now we move ourself into proc0, and fork proc1
    if(sched_init())
c0106612:	e8 2e 31 00 00       	call   c0109745 <sched_init>
c0106617:	85 c0                	test   %eax,%eax
c0106619:	74 05                	je     c0106620 <_kernel_main+0x7b>
        //kprintf("process sched init!");

    creat_proc0();
c010661b:	e8 03 00 00 00       	call   c0106623 <creat_proc0>
}
c0106620:	90                   	nop
c0106621:	c9                   	leave  
c0106622:	c3                   	ret    

c0106623 <creat_proc0>:


void creat_proc0()
{
c0106623:	55                   	push   %ebp
c0106624:	89 e5                	mov    %esp,%ebp
c0106626:	57                   	push   %edi
c0106627:	53                   	push   %ebx
c0106628:	81 ec b0 00 00 00    	sub    $0xb0,%esp
    /**
     *      1. 在创建proc0进程前关闭中断
     *
     */

    init_proc(&proc0);
c010662e:	83 ec 0c             	sub    $0xc,%esp
c0106631:	8d 45 8c             	lea    -0x74(%ebp),%eax
c0106634:	50                   	push   %eax
c0106635:	e8 9b 2a 00 00       	call   c01090d5 <init_proc>
c010663a:	83 c4 10             	add    $0x10,%esp
    proc0.intr_contxt = (isr_param){ .registers.esp = KSTACK_TOP,
                                  .cs = KCODE_SEG,
                                  .eip = (void*)__proc0,
                                  .ss = KDATA_SEG,
                                  .eflags = cpu_reflags() };
c010663d:	e8 ec fb ff ff       	call   c010622e <cpu_reflags>
c0106642:	89 c3                	mov    %eax,%ebx
    proc0.intr_contxt = (isr_param){ .registers.esp = KSTACK_TOP,
c0106644:	8d 55 94             	lea    -0x6c(%ebp),%edx
c0106647:	b8 00 00 00 00       	mov    $0x0,%eax
c010664c:	b9 0f 00 00 00       	mov    $0xf,%ecx
c0106651:	89 d7                	mov    %edx,%edi
c0106653:	f3 ab                	rep stos %eax,%es:(%edi)
c0106655:	c7 45 b0 f0 ff bf ff 	movl   $0xffbffff0,-0x50(%ebp)
c010665c:	b8 ad 7d 10 c0       	mov    $0xc0107dad,%eax
c0106661:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0106664:	c7 45 c0 08 00 00 00 	movl   $0x8,-0x40(%ebp)
c010666b:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
c010666e:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%ebp)

    // 必须在读取eflags之后禁用。否则当进程被调度时，中断依然是关闭的！
    asm volatile("cli");
c0106675:	fa                   	cli    
    setup_proc_mem(&proc0, PD_REFERENCED);
c0106676:	83 ec 08             	sub    $0x8,%esp
c0106679:	68 00 00 c0 ff       	push   $0xffc00000
c010667e:	8d 45 8c             	lea    -0x74(%ebp),%eax
c0106681:	50                   	push   %eax
c0106682:	e8 e3 2b 00 00       	call   c010926a <setup_proc_mem>
c0106687:	83 c4 10             	add    $0x10,%esp
                 "movl %%esp, %0\n"
                 "movl %%eax, %%cr3\n"
                 "movl %%ebx, %%esp\n"
                 : "=m"(proc0.intr_contxt.registers.esp)// it must have, it give us the correct esp,
                 //so we can soft iret get in to push $0 pos, then we esp + 8 get cs:ip->proc0!
                 : "r"(proc0.page_table),
c010668a:	8b 55 f0             	mov    -0x10(%ebp),%edx
                   "i"(KSTACK_TOP),
                   "i"(KCODE_SEG),
                   "r"(proc0.intr_contxt.eip)
c010668d:	8b 4d bc             	mov    -0x44(%ebp),%ecx
    asm volatile("movl %%cr3, %%eax\n"
c0106690:	0f 20 d8             	mov    %cr3,%eax
c0106693:	89 e3                	mov    %esp,%ebx
c0106695:	0f 22 da             	mov    %edx,%cr3
c0106698:	bc f0 ff bf ff       	mov    $0xffbffff0,%esp
c010669d:	9c                   	pushf  
c010669e:	6a 08                	push   $0x8
c01066a0:	51                   	push   %ecx
c01066a1:	6a 00                	push   $0x0
c01066a3:	6a 00                	push   $0x0
c01066a5:	89 65 b0             	mov    %esp,-0x50(%ebp)
c01066a8:	0f 22 d8             	mov    %eax,%cr3
c01066ab:	89 dc                	mov    %ebx,%esp
                 : "%eax", "%ebx", "memory");

    // 向调度器注册进程。
    push_process(&proc0);
c01066ad:	83 ec 0c             	sub    $0xc,%esp
c01066b0:	8d 45 8c             	lea    -0x74(%ebp),%eax
c01066b3:	50                   	push   %eax
c01066b4:	e8 2e 32 00 00       	call   c01098e7 <push_process>
c01066b9:	83 c4 10             	add    $0x10,%esp

    // 由于时钟中断未就绪，我们需要手动通知调度器进行第一次调度。这里也会同时隐式地恢复我们的eflags.IF位
    schedule();
c01066bc:	e8 61 31 00 00       	call   c0109822 <schedule>

    /* Should not return */
    kprintf("Unexpected Return");
c01066c1:	83 ec 0c             	sub    $0xc,%esp
c01066c4:	68 93 d1 d0 c0       	push   $0xc0d0d193
c01066c9:	e8 01 35 00 00       	call   c0109bcf <kprintf>
c01066ce:	83 c4 10             	add    $0x10,%esp
c01066d1:	90                   	nop
c01066d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01066d5:	5b                   	pop    %ebx
c01066d6:	5f                   	pop    %edi
c01066d7:	5d                   	pop    %ebp
c01066d8:	c3                   	ret    

c01066d9 <pmm_init>:

#ifdef MEMSTRUCT
static struct pp_struct pm_table[PM_STRUCT_MAX_SIZE];

void pmm_init(uintptr_t mem_upper_lim)
{
c01066d9:	55                   	push   %ebp
c01066da:	89 e5                	mov    %esp,%ebp
c01066dc:	83 ec 10             	sub    $0x10,%esp
    pg_lookup_ptr = LOOKUP_START;
c01066df:	c7 05 c0 a0 10 c0 01 	movl   $0x1,0xc010a0c0
c01066e6:	00 00 00 
    max_pg = (PG_ALIGN(mem_upper_lim) >> 12);
c01066e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01066ec:	c1 e8 0c             	shr    $0xc,%eax
c01066ef:	a3 c4 a0 10 c0       	mov    %eax,0xc010a0c4

    for (size_t i = 0; i < PM_STRUCT_MAX_SIZE; i++) {
c01066f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01066fb:	eb 49                	jmp    c0106746 <pmm_init+0x6d>
        pm_table[i] = (struct pp_struct) {
c01066fd:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106700:	89 d0                	mov    %edx,%eax
c0106702:	01 c0                	add    %eax,%eax
c0106704:	01 d0                	add    %edx,%eax
c0106706:	c1 e0 02             	shl    $0x2,%eax
c0106709:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c010670e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0106714:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106717:	89 d0                	mov    %edx,%eax
c0106719:	01 c0                	add    %eax,%eax
c010671b:	01 d0                	add    %edx,%eax
c010671d:	c1 e0 02             	shl    $0x2,%eax
c0106720:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106725:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010672b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010672e:	89 d0                	mov    %edx,%eax
c0106730:	01 c0                	add    %eax,%eax
c0106732:	01 d0                	add    %edx,%eax
c0106734:	c1 e0 02             	shl    $0x2,%eax
c0106737:	05 e8 a0 10 c0       	add    $0xc010a0e8,%eax
c010673c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < PM_STRUCT_MAX_SIZE; i++) {
c0106742:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106746:	81 7d fc ff ff 0f 00 	cmpl   $0xfffff,-0x4(%ebp)
c010674d:	76 ae                	jbe    c01066fd <pmm_init+0x24>
            .owner = 0,
            .attr = 0,
            .ref_counts = 1
        };
    }
}
c010674f:	90                   	nop
c0106750:	90                   	nop
c0106751:	c9                   	leave  
c0106752:	c3                   	ret    

c0106753 <pmm_mark_page_free>:

void pmm_mark_page_free(uintptr_t ppn)
{
c0106753:	55                   	push   %ebp
c0106754:	89 e5                	mov    %esp,%ebp
    pm_table[ppn].ref_counts = 0;
c0106756:	8b 55 08             	mov    0x8(%ebp),%edx
c0106759:	89 d0                	mov    %edx,%eax
c010675b:	01 c0                	add    %eax,%eax
c010675d:	01 d0                	add    %edx,%eax
c010675f:	c1 e0 02             	shl    $0x2,%eax
c0106762:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106767:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010676d:	90                   	nop
c010676e:	5d                   	pop    %ebp
c010676f:	c3                   	ret    

c0106770 <pmm_mark_page_occupied>:

void pmm_mark_page_occupied(pid_t owner, uintptr_t ppn, pp_attr_t attr)
{
c0106770:	55                   	push   %ebp
c0106771:	89 e5                	mov    %esp,%ebp
c0106773:	83 ec 10             	sub    $0x10,%esp
    pm_table[ppn] = (struct pp_struct) {
c0106776:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106779:	89 d0                	mov    %edx,%eax
c010677b:	01 c0                	add    %eax,%eax
c010677d:	01 d0                	add    %edx,%eax
c010677f:	c1 e0 02             	shl    $0x2,%eax
c0106782:	8d 90 e0 a0 10 c0    	lea    -0x3fef5f20(%eax),%edx
c0106788:	8b 45 08             	mov    0x8(%ebp),%eax
c010678b:	89 02                	mov    %eax,(%edx)
c010678d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106790:	89 d0                	mov    %edx,%eax
c0106792:	01 c0                	add    %eax,%eax
c0106794:	01 d0                	add    %edx,%eax
c0106796:	c1 e0 02             	shl    $0x2,%eax
c0106799:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c010679e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01067a4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01067a7:	89 d0                	mov    %edx,%eax
c01067a9:	01 c0                	add    %eax,%eax
c01067ab:	01 d0                	add    %edx,%eax
c01067ad:	c1 e0 02             	shl    $0x2,%eax
c01067b0:	8d 90 e8 a0 10 c0    	lea    -0x3fef5f18(%eax),%edx
c01067b6:	8b 45 10             	mov    0x10(%ebp),%eax
c01067b9:	89 02                	mov    %eax,(%edx)
        .owner = owner,
        .ref_counts = 1,
        .attr = attr
    };
}
c01067bb:	90                   	nop
c01067bc:	c9                   	leave  
c01067bd:	c3                   	ret    

c01067be <pmm_mark_chunk_free>:

void pmm_mark_chunk_free(uintptr_t start_ppn, size_t page_count)
{
c01067be:	55                   	push   %ebp
c01067bf:	89 e5                	mov    %esp,%ebp
c01067c1:	83 ec 10             	sub    $0x10,%esp
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c01067c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01067c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01067ca:	eb 1b                	jmp    c01067e7 <pmm_mark_chunk_free+0x29>
    {
        pm_table[i].ref_counts = 0;
c01067cc:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01067cf:	89 d0                	mov    %edx,%eax
c01067d1:	01 c0                	add    %eax,%eax
c01067d3:	01 d0                	add    %edx,%eax
c01067d5:	c1 e0 02             	shl    $0x2,%eax
c01067d8:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c01067dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c01067e3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01067e7:	8b 55 08             	mov    0x8(%ebp),%edx
c01067ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01067ed:	01 d0                	add    %edx,%eax
c01067ef:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01067f2:	73 0a                	jae    c01067fe <pmm_mark_chunk_free+0x40>
c01067f4:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c01067f9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01067fc:	72 ce                	jb     c01067cc <pmm_mark_chunk_free+0xe>
    }
}
c01067fe:	90                   	nop
c01067ff:	c9                   	leave  
c0106800:	c3                   	ret    

c0106801 <pmm_mark_chunk_occupied>:

void pmm_mark_chunk_occupied(pid_t owner, uint32_t start_ppn, size_t page_count, pp_attr_t attr)
{
c0106801:	55                   	push   %ebp
c0106802:	89 e5                	mov    %esp,%ebp
c0106804:	83 ec 10             	sub    $0x10,%esp
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c0106807:	8b 45 0c             	mov    0xc(%ebp),%eax
c010680a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010680d:	eb 49                	jmp    c0106858 <pmm_mark_chunk_occupied+0x57>
    {
        pm_table[i] = (struct pp_struct) {
c010680f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106812:	89 d0                	mov    %edx,%eax
c0106814:	01 c0                	add    %eax,%eax
c0106816:	01 d0                	add    %edx,%eax
c0106818:	c1 e0 02             	shl    $0x2,%eax
c010681b:	8d 90 e0 a0 10 c0    	lea    -0x3fef5f20(%eax),%edx
c0106821:	8b 45 08             	mov    0x8(%ebp),%eax
c0106824:	89 02                	mov    %eax,(%edx)
c0106826:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106829:	89 d0                	mov    %edx,%eax
c010682b:	01 c0                	add    %eax,%eax
c010682d:	01 d0                	add    %edx,%eax
c010682f:	c1 e0 02             	shl    $0x2,%eax
c0106832:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106837:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010683d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106840:	89 d0                	mov    %edx,%eax
c0106842:	01 c0                	add    %eax,%eax
c0106844:	01 d0                	add    %edx,%eax
c0106846:	c1 e0 02             	shl    $0x2,%eax
c0106849:	8d 90 e8 a0 10 c0    	lea    -0x3fef5f18(%eax),%edx
c010684f:	8b 45 14             	mov    0x14(%ebp),%eax
c0106852:	89 02                	mov    %eax,(%edx)
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c0106854:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106858:	8b 55 0c             	mov    0xc(%ebp),%edx
c010685b:	8b 45 10             	mov    0x10(%ebp),%eax
c010685e:	01 d0                	add    %edx,%eax
c0106860:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0106863:	73 0a                	jae    c010686f <pmm_mark_chunk_occupied+0x6e>
c0106865:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c010686a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010686d:	72 a0                	jb     c010680f <pmm_mark_chunk_occupied+0xe>
            .owner = owner,
            .ref_counts = 1,
            .attr = attr
        };
    }
}
c010686f:	90                   	nop
c0106870:	c9                   	leave  
c0106871:	c3                   	ret    

c0106872 <pmm_alloc_page>:

void* pmm_alloc_page(pid_t owner, pp_attr_t attr)
{
c0106872:	55                   	push   %ebp
c0106873:	89 e5                	mov    %esp,%ebp
c0106875:	83 ec 20             	sub    $0x20,%esp
        // Next fit approach. Maximize the throughput!
    uintptr_t good_page_found = NULL;
c0106878:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    size_t old_pg_ptr = pg_lookup_ptr;
c010687f:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c0106884:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t upper_lim = max_pg;
c0106887:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c010688c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct pp_struct* pm;
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c010688f:	eb 7d                	jmp    c010690e <pmm_alloc_page+0x9c>
        pm = &pm_table[pg_lookup_ptr];
c0106891:	8b 15 c0 a0 10 c0    	mov    0xc010a0c0,%edx
c0106897:	89 d0                	mov    %edx,%eax
c0106899:	01 c0                	add    %eax,%eax
c010689b:	01 d0                	add    %edx,%eax
c010689d:	c1 e0 02             	shl    $0x2,%eax
c01068a0:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c01068a5:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // skip the fully occupied chunk, reduce # of iterations
        if (!pm->ref_counts) {
c01068a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068ab:	8b 40 04             	mov    0x4(%eax),%eax
c01068ae:	85 c0                	test   %eax,%eax
c01068b0:	75 28                	jne    c01068da <pmm_alloc_page+0x68>
                *pm = (struct pp_struct) {
c01068b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068b5:	8b 55 08             	mov    0x8(%ebp),%edx
c01068b8:	89 10                	mov    %edx,(%eax)
c01068ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068bd:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
c01068c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068c7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01068ca:	89 50 08             	mov    %edx,0x8(%eax)
                .attr = attr,
                .owner = owner,
                .ref_counts = 1
            };
            good_page_found = pg_lookup_ptr << 12;
c01068cd:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c01068d2:	c1 e0 0c             	shl    $0xc,%eax
c01068d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01068d8:	eb 34                	jmp    c010690e <pmm_alloc_page+0x9c>
        } else {
            pg_lookup_ptr ++;
c01068da:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c01068df:	83 c0 01             	add    $0x1,%eax
c01068e2:	a3 c0 a0 10 c0       	mov    %eax,0xc010a0c0

            // We've searched the interval [old_pg_ptr, max_pg) but failed
            //   may be chances in [1, old_pg_ptr) ?
            // Let's find out!
            if (pg_lookup_ptr >= upper_lim && old_pg_ptr != LOOKUP_START) {
c01068e7:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c01068ec:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01068ef:	77 1d                	ja     c010690e <pmm_alloc_page+0x9c>
c01068f1:	83 7d f8 01          	cmpl   $0x1,-0x8(%ebp)
c01068f5:	74 17                	je     c010690e <pmm_alloc_page+0x9c>
                upper_lim = old_pg_ptr;
c01068f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01068fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
                pg_lookup_ptr = LOOKUP_START;
c01068fd:	c7 05 c0 a0 10 c0 01 	movl   $0x1,0xc010a0c0
c0106904:	00 00 00 
                old_pg_ptr = LOOKUP_START;
c0106907:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c010690e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106912:	75 0e                	jne    c0106922 <pmm_alloc_page+0xb0>
c0106914:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c0106919:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010691c:	0f 87 6f ff ff ff    	ja     c0106891 <pmm_alloc_page+0x1f>
            }
        }
    }
    if (!good_page_found) {
c0106922:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106926:	75 0c                	jne    c0106934 <pmm_alloc_page+0xc2>
        __current->k_status = MXOUTOFMEM;
c0106928:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010692d:	c7 40 68 fd ff ff ff 	movl   $0xfffffffd,0x68(%eax)
    }
    return (void*)good_page_found;
c0106934:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106937:	c9                   	leave  
c0106938:	c3                   	ret    

c0106939 <pmm_alloc_cpage>:

void* pmm_alloc_cpage(pid_t owner, size_t num_pages, pp_attr_t attr) {
c0106939:	55                   	push   %ebp
c010693a:	89 e5                	mov    %esp,%ebp
c010693c:	83 ec 10             	sub    $0x10,%esp
    size_t p1 = 0;
c010693f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    size_t p2 = 0;
c0106946:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    while (p2 < max_pg && p2 - p1 < num_pages)
c010694d:	eb 28                	jmp    c0106977 <pmm_alloc_cpage+0x3e>
    {
        (!(&pm_table[p2])->ref_counts) ? (p2++) : (p1 = p2);
c010694f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106952:	89 d0                	mov    %edx,%eax
c0106954:	01 c0                	add    %eax,%eax
c0106956:	01 d0                	add    %edx,%eax
c0106958:	c1 e0 02             	shl    $0x2,%eax
c010695b:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106960:	8b 00                	mov    (%eax),%eax
c0106962:	85 c0                	test   %eax,%eax
c0106964:	75 0b                	jne    c0106971 <pmm_alloc_cpage+0x38>
c0106966:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106969:	83 c0 01             	add    $0x1,%eax
c010696c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010696f:	eb 06                	jmp    c0106977 <pmm_alloc_cpage+0x3e>
c0106971:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106974:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (p2 < max_pg && p2 - p1 < num_pages)
c0106977:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c010697c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c010697f:	73 0b                	jae    c010698c <pmm_alloc_cpage+0x53>
c0106981:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106984:	2b 45 fc             	sub    -0x4(%ebp),%eax
c0106987:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010698a:	77 c3                	ja     c010694f <pmm_alloc_cpage+0x16>
    }

    if (p2 < max_pg) {
c010698c:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c0106991:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c0106994:	73 07                	jae    c010699d <pmm_alloc_cpage+0x64>
        return NULL;
c0106996:	b8 00 00 00 00       	mov    $0x0,%eax
c010699b:	eb 1a                	jmp    c01069b7 <pmm_alloc_cpage+0x7e>
    }

    pmm_mark_chunk_occupied(owner, p1, num_pages, attr);
c010699d:	ff 75 10             	push   0x10(%ebp)
c01069a0:	ff 75 0c             	push   0xc(%ebp)
c01069a3:	ff 75 fc             	push   -0x4(%ebp)
c01069a6:	ff 75 08             	push   0x8(%ebp)
c01069a9:	e8 53 fe ff ff       	call   c0106801 <pmm_mark_chunk_occupied>
c01069ae:	83 c4 10             	add    $0x10,%esp

    return p1 << 12;
c01069b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069b4:	c1 e0 0c             	shl    $0xc,%eax
}
c01069b7:	c9                   	leave  
c01069b8:	c3                   	ret    

c01069b9 <pmm_free_page>:

int pmm_free_page(pid_t owner, void* page)
{
c01069b9:	55                   	push   %ebp
c01069ba:	89 e5                	mov    %esp,%ebp
c01069bc:	83 ec 10             	sub    $0x10,%esp
    struct pp_struct* pm = &pm_table[(intptr_t)page >> 12];
c01069bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069c2:	c1 f8 0c             	sar    $0xc,%eax
c01069c5:	89 c2                	mov    %eax,%edx
c01069c7:	89 d0                	mov    %edx,%eax
c01069c9:	01 c0                	add    %eax,%eax
c01069cb:	01 d0                	add    %edx,%eax
c01069cd:	c1 e0 02             	shl    $0x2,%eax
c01069d0:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c01069d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    //     pm->ref_counts--;
    //     return 1;
    // }

        // Is this a MMIO mapping or double free?
    if (((intptr_t)page >> 12) >= max_pg || !(pm->ref_counts)) {
c01069d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069db:	c1 f8 0c             	sar    $0xc,%eax
c01069de:	89 c2                	mov    %eax,%edx
c01069e0:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c01069e5:	39 c2                	cmp    %eax,%edx
c01069e7:	73 0a                	jae    c01069f3 <pmm_free_page+0x3a>
c01069e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069ec:	8b 40 04             	mov    0x4(%eax),%eax
c01069ef:	85 c0                	test   %eax,%eax
c01069f1:	75 07                	jne    c01069fa <pmm_free_page+0x41>
        return 0;
c01069f3:	b8 00 00 00 00       	mov    $0x0,%eax
c01069f8:	eb 14                	jmp    c0106a0e <pmm_free_page+0x55>
    }

    // TODO: 检查权限，保证：1) 只有正在使用该页（包括被分享者）的进程可以释放； 2) 内核可释放所有页。
    pm->ref_counts--;
c01069fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069fd:	8b 40 04             	mov    0x4(%eax),%eax
c0106a00:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106a03:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106a06:	89 50 04             	mov    %edx,0x4(%eax)
    return 1;
c0106a09:	b8 01 00 00 00       	mov    $0x1,%eax
    //return 0;
    
}
c0106a0e:	c9                   	leave  
c0106a0f:	c3                   	ret    

c0106a10 <pmm_query>:

struct pp_struct* pmm_query(void* pa) {
c0106a10:	55                   	push   %ebp
c0106a11:	89 e5                	mov    %esp,%ebp
c0106a13:	83 ec 10             	sub    $0x10,%esp
    uint32_t ppn = (uintptr_t)pa >> 12;
c0106a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a19:	c1 e8 0c             	shr    $0xc,%eax
c0106a1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    if (ppn >= PM_STRUCT_MAX_SIZE) {
c0106a1f:	81 7d fc ff ff 0f 00 	cmpl   $0xfffff,-0x4(%ebp)
c0106a26:	76 07                	jbe    c0106a2f <pmm_query+0x1f>
        return NULL;
c0106a28:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a2d:	eb 11                	jmp    c0106a40 <pmm_query+0x30>
    }

    return &pm_table[ppn];
c0106a2f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106a32:	89 d0                	mov    %edx,%eax
c0106a34:	01 c0                	add    %eax,%eax
c0106a36:	01 d0                	add    %edx,%eax
c0106a38:	c1 e0 02             	shl    $0x2,%eax
c0106a3b:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
}
c0106a40:	c9                   	leave  
c0106a41:	c3                   	ret    

c0106a42 <pmm_ref_page>:

int pmm_ref_page(pid_t owner, void* page) {
c0106a42:	55                   	push   %ebp
c0106a43:	89 e5                	mov    %esp,%ebp
c0106a45:	83 ec 10             	sub    $0x10,%esp
    //(void*) owner;      // TODO: do smth with owner
    
    uint32_t ppn = (uintptr_t)page >> 12;
c0106a48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a4b:	c1 e8 0c             	shr    $0xc,%eax
c0106a4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    if (ppn >= PM_STRUCT_MAX_SIZE) {
c0106a51:	81 7d fc ff ff 0f 00 	cmpl   $0xfffff,-0x4(%ebp)
c0106a58:	76 07                	jbe    c0106a61 <pmm_ref_page+0x1f>
        return 0;
c0106a5a:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a5f:	eb 43                	jmp    c0106aa4 <pmm_ref_page+0x62>
    }

    struct pp_struct* pm = &pm_table[ppn];
c0106a61:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106a64:	89 d0                	mov    %edx,%eax
c0106a66:	01 c0                	add    %eax,%eax
c0106a68:	01 d0                	add    %edx,%eax
c0106a6a:	c1 e0 02             	shl    $0x2,%eax
c0106a6d:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c0106a72:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (ppn >= max_pg || !pm->ref_counts) {
c0106a75:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c0106a7a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0106a7d:	73 0a                	jae    c0106a89 <pmm_ref_page+0x47>
c0106a7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a82:	8b 40 04             	mov    0x4(%eax),%eax
c0106a85:	85 c0                	test   %eax,%eax
c0106a87:	75 07                	jne    c0106a90 <pmm_ref_page+0x4e>
        return 0;
c0106a89:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a8e:	eb 14                	jmp    c0106aa4 <pmm_ref_page+0x62>
    }

    pm->ref_counts++;
c0106a90:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a93:	8b 40 04             	mov    0x4(%eax),%eax
c0106a96:	8d 50 01             	lea    0x1(%eax),%edx
c0106a99:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a9c:	89 50 04             	mov    %edx,0x4(%eax)
    return 1;
c0106a9f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106aa4:	c9                   	leave  
c0106aa5:	c3                   	ret    

c0106aa6 <extend_heap>:
 * @brief extend heap
 * 
 * @param extend size
 */
static void* extend_heap(size_t words)
{
c0106aa6:	55                   	push   %ebp
c0106aa7:	89 e5                	mov    %esp,%ebp
c0106aa9:	83 ec 18             	sub    $0x18,%esp
    char* bp = mem_brk;
c0106aac:	a1 e8 a0 d0 c0       	mov    0xc0d0a0e8,%eax
c0106ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size;
    //align
    size = (words % 2) ? words * WSIZE : (words + 1) * WSIZE;
c0106ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ab7:	83 e0 01             	and    $0x1,%eax
c0106aba:	85 c0                	test   %eax,%eax
c0106abc:	74 08                	je     c0106ac6 <extend_heap+0x20>
c0106abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ac1:	c1 e0 02             	shl    $0x2,%eax
c0106ac4:	eb 09                	jmp    c0106acf <extend_heap+0x29>
c0106ac6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ac9:	83 c0 01             	add    $0x1,%eax
c0106acc:	c1 e0 02             	shl    $0x2,%eax
c0106acf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_sbrk(size + WSIZE);
c0106ad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ad5:	83 c0 04             	add    $0x4,%eax
c0106ad8:	83 ec 0c             	sub    $0xc,%esp
c0106adb:	50                   	push   %eax
c0106adc:	e8 64 03 00 00       	call   c0106e45 <mem_sbrk>
c0106ae1:	83 c4 10             	add    $0x10,%esp

    //initialize free block header/footer and the epilogue header
    PUT(HDRP(bp), PACK(size, 0)); // free block header
c0106ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ae7:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106aea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aed:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0)); // free block foot //TODO CRUSH HERE, ADD ONE PAGE OUT OF RANGE, WE ONLY GIVE ONE PAGE, MEYBE PAGE FAULT
c0106aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106af2:	83 e8 04             	sub    $0x4,%eax
c0106af5:	8b 00                	mov    (%eax),%eax
c0106af7:	83 e0 f8             	and    $0xfffffff8,%eax
c0106afa:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b00:	01 c2                	add    %eax,%edx
c0106b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b05:	89 02                	mov    %eax,(%edx)
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); //NEW Epilogue header
c0106b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b0a:	83 e8 04             	sub    $0x4,%eax
c0106b0d:	8b 00                	mov    (%eax),%eax
c0106b0f:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b12:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b18:	01 d0                	add    %edx,%eax
c0106b1a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //Coalesce if previous block is free
    return coalesce(bp);
c0106b20:	83 ec 0c             	sub    $0xc,%esp
c0106b23:	ff 75 f4             	push   -0xc(%ebp)
c0106b26:	e8 05 00 00 00       	call   c0106b30 <coalesce>
c0106b2b:	83 c4 10             	add    $0x10,%esp
}
c0106b2e:	c9                   	leave  
c0106b2f:	c3                   	ret    

c0106b30 <coalesce>:
 * @brief Coalesce free blk
 * 
 * @param Coalesce bp pointer
 */
static void* coalesce(void* bp)
{
c0106b30:	55                   	push   %ebp
c0106b31:	89 e5                	mov    %esp,%ebp
c0106b33:	83 ec 10             	sub    $0x10,%esp
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
c0106b36:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b39:	83 e8 04             	sub    $0x4,%eax
c0106b3c:	8b 00                	mov    (%eax),%eax
c0106b3e:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b41:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106b44:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b47:	01 d0                	add    %edx,%eax
c0106b49:	8b 00                	mov    (%eax),%eax
c0106b4b:	83 e0 01             	and    $0x1,%eax
c0106b4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
c0106b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b54:	83 e8 04             	sub    $0x4,%eax
c0106b57:	8b 00                	mov    (%eax),%eax
c0106b59:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b5c:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b62:	01 d0                	add    %edx,%eax
c0106b64:	8b 00                	mov    (%eax),%eax
c0106b66:	83 e0 01             	and    $0x1,%eax
c0106b69:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t size = GET_SIZE(HDRP(bp));
c0106b6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b6f:	83 e8 04             	sub    $0x4,%eax
c0106b72:	8b 00                	mov    (%eax),%eax
c0106b74:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b77:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(prev_alloc && next_alloc)
c0106b7a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b7e:	74 0e                	je     c0106b8e <coalesce+0x5e>
c0106b80:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b84:	74 08                	je     c0106b8e <coalesce+0x5e>
        return bp;
c0106b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b89:	e9 3e 01 00 00       	jmp    c0106ccc <coalesce+0x19c>

    else if(prev_alloc && !next_alloc)
c0106b8e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b92:	74 49                	je     c0106bdd <coalesce+0xad>
c0106b94:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b98:	75 43                	jne    c0106bdd <coalesce+0xad>
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
c0106b9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b9d:	83 e8 04             	sub    $0x4,%eax
c0106ba0:	8b 00                	mov    (%eax),%eax
c0106ba2:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ba5:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bab:	01 d0                	add    %edx,%eax
c0106bad:	8b 00                	mov    (%eax),%eax
c0106baf:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bb2:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(HDRP(bp), PACK(size, 0));
c0106bb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bb8:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bbe:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(bp), PACK(size, 0));
c0106bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bc3:	83 e8 04             	sub    $0x4,%eax
c0106bc6:	8b 00                	mov    (%eax),%eax
c0106bc8:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bcb:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bd1:	01 c2                	add    %eax,%edx
c0106bd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bd6:	89 02                	mov    %eax,(%edx)
c0106bd8:	e9 ec 00 00 00       	jmp    c0106cc9 <coalesce+0x199>
    }

    else if(!prev_alloc && next_alloc)
c0106bdd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106be1:	75 6b                	jne    c0106c4e <coalesce+0x11e>
c0106be3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106be7:	74 65                	je     c0106c4e <coalesce+0x11e>
    {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));//TO DO ,THERE IS PEOBLEM, CRUSH HERE
c0106be9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bec:	83 e8 08             	sub    $0x8,%eax
c0106bef:	8b 00                	mov    (%eax),%eax
c0106bf1:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bf4:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106bf9:	29 c2                	sub    %eax,%edx
c0106bfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bfe:	01 d0                	add    %edx,%eax
c0106c00:	8b 00                	mov    (%eax),%eax
c0106c02:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c05:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(bp), PACK(size, 0));
c0106c08:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c0b:	83 e8 04             	sub    $0x4,%eax
c0106c0e:	8b 00                	mov    (%eax),%eax
c0106c10:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c13:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c19:	01 c2                	add    %eax,%edx
c0106c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c1e:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
c0106c20:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c23:	83 e8 08             	sub    $0x8,%eax
c0106c26:	8b 00                	mov    (%eax),%eax
c0106c28:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c2b:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106c30:	29 c2                	sub    %eax,%edx
c0106c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c35:	01 c2                	add    %eax,%edx
c0106c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c3a:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106c3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c3f:	83 e8 08             	sub    $0x8,%eax
c0106c42:	8b 00                	mov    (%eax),%eax
c0106c44:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c47:	f7 d8                	neg    %eax
c0106c49:	01 45 08             	add    %eax,0x8(%ebp)
c0106c4c:	eb 7b                	jmp    c0106cc9 <coalesce+0x199>
    }

    else{
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
c0106c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c51:	83 e8 08             	sub    $0x8,%eax
c0106c54:	8b 00                	mov    (%eax),%eax
c0106c56:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c59:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106c5e:	29 c2                	sub    %eax,%edx
c0106c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c63:	01 d0                	add    %edx,%eax
c0106c65:	8b 00                	mov    (%eax),%eax
c0106c67:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c6a:	89 c2                	mov    %eax,%edx
c0106c6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c6f:	83 e8 04             	sub    $0x4,%eax
c0106c72:	8b 00                	mov    (%eax),%eax
c0106c74:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c77:	8d 48 f8             	lea    -0x8(%eax),%ecx
c0106c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c7d:	01 c8                	add    %ecx,%eax
c0106c7f:	8b 00                	mov    (%eax),%eax
c0106c81:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c84:	01 d0                	add    %edx,%eax
c0106c86:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(PREV_BLKP(bp)), PACK(size, 0));
c0106c89:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c8c:	83 e8 04             	sub    $0x4,%eax
c0106c8f:	8b 00                	mov    (%eax),%eax
c0106c91:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c94:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c97:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c9a:	01 c2                	add    %eax,%edx
c0106c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c9f:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(size, 0));
c0106ca1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ca4:	83 e8 04             	sub    $0x4,%eax
c0106ca7:	8b 00                	mov    (%eax),%eax
c0106ca9:	83 e0 f8             	and    $0xfffffff8,%eax
c0106cac:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106caf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cb2:	01 c2                	add    %eax,%edx
c0106cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cb7:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cbc:	83 e8 08             	sub    $0x8,%eax
c0106cbf:	8b 00                	mov    (%eax),%eax
c0106cc1:	83 e0 f8             	and    $0xfffffff8,%eax
c0106cc4:	f7 d8                	neg    %eax
c0106cc6:	01 45 08             	add    %eax,0x8(%ebp)
    }
    return bp;
c0106cc9:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106ccc:	c9                   	leave  
c0106ccd:	c3                   	ret    

c0106cce <find_fit>:
 * @brief find free blk
 * 
 * @param find size
 */
static void* find_fit(size_t asize)// we just traverse heap
{
c0106cce:	55                   	push   %ebp
c0106ccf:	89 e5                	mov    %esp,%ebp
c0106cd1:	83 ec 10             	sub    $0x10,%esp
    void* bp = heap_listp;
c0106cd4:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106cd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106cdc:	eb 2f                	jmp    c0106d0d <find_fit+0x3f>
    {
        if(GET_SIZE(bp) != 0 && GET_ALLOC(bp) != 1)
c0106cde:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ce1:	8b 00                	mov    (%eax),%eax
c0106ce3:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ce6:	85 c0                	test   %eax,%eax
c0106ce8:	74 1c                	je     c0106d06 <find_fit+0x38>
c0106cea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ced:	8b 00                	mov    (%eax),%eax
c0106cef:	83 e0 01             	and    $0x1,%eax
c0106cf2:	85 c0                	test   %eax,%eax
c0106cf4:	75 10                	jne    c0106d06 <find_fit+0x38>
            bp = NEXT_BLKP(bp);
c0106cf6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cf9:	83 e8 04             	sub    $0x4,%eax
c0106cfc:	8b 00                	mov    (%eax),%eax
c0106cfe:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d01:	01 45 fc             	add    %eax,-0x4(%ebp)
c0106d04:	eb 07                	jmp    c0106d0d <find_fit+0x3f>
        else
            return NULL;
c0106d06:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d0b:	eb 22                	jmp    c0106d2f <find_fit+0x61>
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106d0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d10:	83 e8 04             	sub    $0x4,%eax
c0106d13:	8b 00                	mov    (%eax),%eax
c0106d15:	83 e0 01             	and    $0x1,%eax
c0106d18:	85 c0                	test   %eax,%eax
c0106d1a:	75 c2                	jne    c0106cde <find_fit+0x10>
c0106d1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d1f:	83 e8 04             	sub    $0x4,%eax
c0106d22:	8b 00                	mov    (%eax),%eax
c0106d24:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d27:	39 45 08             	cmp    %eax,0x8(%ebp)
c0106d2a:	77 b2                	ja     c0106cde <find_fit+0x10>
    }
    return bp;
c0106d2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106d2f:	c9                   	leave  
c0106d30:	c3                   	ret    

c0106d31 <place>:
 * @brief place the blk
 * 
 * @param blk,size
 */
static void place(void* bp, size_t asize)
{
c0106d31:	55                   	push   %ebp
c0106d32:	89 e5                	mov    %esp,%ebp
c0106d34:	83 ec 10             	sub    $0x10,%esp
    size_t bp_allsize = GET_SIZE(HDRP(bp));
c0106d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d3a:	83 e8 04             	sub    $0x4,%eax
c0106d3d:	8b 00                	mov    (%eax),%eax
c0106d3f:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d42:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t remain_size = bp_allsize - asize;
c0106d45:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d48:	2b 45 0c             	sub    0xc(%ebp),%eax
c0106d4b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(remain_size >= 2*DSIZE)
c0106d4e:	83 7d f8 0f          	cmpl   $0xf,-0x8(%ebp)
c0106d52:	76 5b                	jbe    c0106daf <place+0x7e>
    {
        PUT(HDRP(bp), PACK(asize, 1));
c0106d54:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d57:	83 e8 04             	sub    $0x4,%eax
c0106d5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106d5d:	83 ca 01             	or     $0x1,%edx
c0106d60:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(asize, 1));
c0106d62:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d65:	83 e8 04             	sub    $0x4,%eax
c0106d68:	8b 00                	mov    (%eax),%eax
c0106d6a:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d6d:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106d70:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d73:	01 d0                	add    %edx,%eax
c0106d75:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106d78:	83 ca 01             	or     $0x1,%edx
c0106d7b:	89 10                	mov    %edx,(%eax)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106d7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d80:	83 e8 04             	sub    $0x4,%eax
c0106d83:	8b 00                	mov    (%eax),%eax
c0106d85:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d88:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106d8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d8e:	01 c2                	add    %eax,%edx
c0106d90:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106d93:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106d95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d98:	83 e8 04             	sub    $0x4,%eax
c0106d9b:	8b 00                	mov    (%eax),%eax
c0106d9d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106da0:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106da3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106da6:	01 c2                	add    %eax,%edx
c0106da8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106dab:	89 02                	mov    %eax,(%edx)
    }else{
        PUT(HDRP(bp), PACK(bp_allsize, 1));
        PUT(FTRP(bp), PACK(bp_allsize, 1));
    }
}
c0106dad:	eb 29                	jmp    c0106dd8 <place+0xa7>
        PUT(HDRP(bp), PACK(bp_allsize, 1));
c0106daf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106db2:	83 e8 04             	sub    $0x4,%eax
c0106db5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106db8:	83 ca 01             	or     $0x1,%edx
c0106dbb:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(bp_allsize, 1));
c0106dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dc0:	83 e8 04             	sub    $0x4,%eax
c0106dc3:	8b 00                	mov    (%eax),%eax
c0106dc5:	83 e0 f8             	and    $0xfffffff8,%eax
c0106dc8:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106dcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dce:	01 d0                	add    %edx,%eax
c0106dd0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106dd3:	83 ca 01             	or     $0x1,%edx
c0106dd6:	89 10                	mov    %edx,(%eax)
}
c0106dd8:	90                   	nop
c0106dd9:	c9                   	leave  
c0106dda:	c3                   	ret    

c0106ddb <mem_init>:

//following is head file function

void mem_init()
{
c0106ddb:	55                   	push   %ebp
c0106ddc:	89 e5                	mov    %esp,%ebp
c0106dde:	83 ec 18             	sub    $0x18,%esp
    mem_heap = &__heap_start;
c0106de1:	c7 05 e4 a0 d0 c0 00 	movl   $0xc1118000,0xc0d0a0e4
c0106de8:	80 11 c1 
    //mem_heap = (char*)Malloc(MAX_HEAP);
    mem_brk = mem_heap;
c0106deb:	a1 e4 a0 d0 c0       	mov    0xc0d0a0e4,%eax
c0106df0:	a3 e8 a0 d0 c0       	mov    %eax,0xc0d0a0e8
    //mem_max_addr = (char*)(mem_heap + MAX_HEAP);
    mem_max_addr = (char*)K_STACK_START;
c0106df5:	c7 05 ec a0 d0 c0 00 	movl   $0xffbf0000,0xc0d0a0ec
c0106dfc:	00 bf ff 
    uint8_t* pgaddr = 0;
c0106dff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if((pgaddr = vmm_alloc_page(KERNEL_PID, mem_brk, NULL, PG_PREM_RW, PG_PREM_RW)) == NULL)
c0106e06:	a1 e8 a0 d0 c0       	mov    0xc0d0a0e8,%eax
c0106e0b:	83 ec 0c             	sub    $0xc,%esp
c0106e0e:	6a 03                	push   $0x3
c0106e10:	6a 03                	push   $0x3
c0106e12:	6a 00                	push   $0x0
c0106e14:	50                   	push   %eax
c0106e15:	6a ff                	push   $0xffffffff
c0106e17:	e8 12 09 00 00       	call   c010772e <vmm_alloc_page>
c0106e1c:	83 c4 20             	add    $0x20,%esp
c0106e1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e26:	74 1a                	je     c0106e42 <mem_init+0x67>
        return;
    kprintf("malloc init phy address is 0x%x\n", pgaddr);
c0106e28:	83 ec 08             	sub    $0x8,%esp
c0106e2b:	ff 75 f4             	push   -0xc(%ebp)
c0106e2e:	68 a8 d1 d0 c0       	push   $0xc0d0d1a8
c0106e33:	e8 97 2d 00 00       	call   c0109bcf <kprintf>
c0106e38:	83 c4 10             	add    $0x10,%esp
    malloc_init();
c0106e3b:	e8 bb 00 00 00       	call   c0106efb <malloc_init>
c0106e40:	eb 01                	jmp    c0106e43 <mem_init+0x68>
        return;
c0106e42:	90                   	nop
}
c0106e43:	c9                   	leave  
c0106e44:	c3                   	ret    

c0106e45 <mem_sbrk>:

void* mem_sbrk(int incr)
{
c0106e45:	55                   	push   %ebp
c0106e46:	89 e5                	mov    %esp,%ebp
c0106e48:	83 ec 18             	sub    $0x18,%esp
    char* old = mem_brk;
c0106e4b:	a1 e8 a0 d0 c0       	mov    0xc0d0a0e8,%eax
c0106e50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if((incr < 0) || ((mem_brk + incr) > mem_max_addr))
c0106e53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106e57:	78 14                	js     c0106e6d <mem_sbrk+0x28>
c0106e59:	8b 15 e8 a0 d0 c0    	mov    0xc0d0a0e8,%edx
c0106e5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e62:	01 c2                	add    %eax,%edx
c0106e64:	a1 ec a0 d0 c0       	mov    0xc0d0a0ec,%eax
c0106e69:	39 c2                	cmp    %eax,%edx
c0106e6b:	76 0a                	jbe    c0106e77 <mem_sbrk+0x32>
    {
        return (void*)-1;
c0106e6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106e72:	e9 82 00 00 00       	jmp    c0106ef9 <mem_sbrk+0xb4>
    }
    char* new = mem_brk + incr;
c0106e77:	8b 15 e8 a0 d0 c0    	mov    0xc0d0a0e8,%edx
c0106e7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e80:	01 d0                	add    %edx,%eax
c0106e82:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned int diff = PG_ALIGN(new) - PG_ALIGN(old);
c0106e85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e88:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e8d:	89 c2                	mov    %eax,%edx
c0106e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e97:	89 c1                	mov    %eax,%ecx
c0106e99:	89 d0                	mov    %edx,%eax
c0106e9b:	29 c8                	sub    %ecx,%eax
c0106e9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(diff)
c0106ea0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106ea4:	74 40                	je     c0106ee6 <mem_sbrk+0xa1>
    {
        uint8_t* pgaddr = -1;
c0106ea6:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
        if(!(pgaddr = vmm_alloc_page(KERNEL_PID, new, NULL, PG_PREM_RW,PG_PREM_RW)))
c0106ead:	83 ec 0c             	sub    $0xc,%esp
c0106eb0:	6a 03                	push   $0x3
c0106eb2:	6a 03                	push   $0x3
c0106eb4:	6a 00                	push   $0x0
c0106eb6:	ff 75 f0             	push   -0x10(%ebp)
c0106eb9:	6a ff                	push   $0xffffffff
c0106ebb:	e8 6e 08 00 00       	call   c010772e <vmm_alloc_page>
c0106ec0:	83 c4 20             	add    $0x20,%esp
c0106ec3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106ec6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106eca:	75 07                	jne    c0106ed3 <mem_sbrk+0x8e>
        {
            return NULL;
c0106ecc:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ed1:	eb 26                	jmp    c0106ef9 <mem_sbrk+0xb4>
        }
        kprintf("head new page is 0x%x\n", pgaddr);
c0106ed3:	83 ec 08             	sub    $0x8,%esp
c0106ed6:	ff 75 e8             	push   -0x18(%ebp)
c0106ed9:	68 c9 d1 d0 c0       	push   $0xc0d0d1c9
c0106ede:	e8 ec 2c 00 00       	call   c0109bcf <kprintf>
c0106ee3:	83 c4 10             	add    $0x10,%esp
    }
    mem_brk += incr;
c0106ee6:	8b 15 e8 a0 d0 c0    	mov    0xc0d0a0e8,%edx
c0106eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eef:	01 d0                	add    %edx,%eax
c0106ef1:	a3 e8 a0 d0 c0       	mov    %eax,0xc0d0a0e8
    return (void*)old;
c0106ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106ef9:	c9                   	leave  
c0106efa:	c3                   	ret    

c0106efb <malloc_init>:

int malloc_init()
{
c0106efb:	55                   	push   %ebp
c0106efc:	89 e5                	mov    %esp,%ebp
c0106efe:	83 ec 08             	sub    $0x8,%esp
    if((heap_listp = mem_sbrk(4 * WSIZE)) == (void*) - 1)
c0106f01:	83 ec 0c             	sub    $0xc,%esp
c0106f04:	6a 10                	push   $0x10
c0106f06:	e8 3a ff ff ff       	call   c0106e45 <mem_sbrk>
c0106f0b:	83 c4 10             	add    $0x10,%esp
c0106f0e:	a3 e0 a0 d0 c0       	mov    %eax,0xc0d0a0e0
c0106f13:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f18:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106f1b:	75 07                	jne    c0106f24 <malloc_init+0x29>
        return -1;
c0106f1d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106f22:	eb 62                	jmp    c0106f86 <malloc_init+0x8b>
    PUT(heap_listp, 0);
c0106f24:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));
c0106f2f:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f34:	83 c0 04             	add    $0x4,%eax
c0106f37:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));
c0106f3d:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f42:	83 c0 08             	add    $0x8,%eax
c0106f45:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));
c0106f4b:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f50:	83 c0 0c             	add    $0xc,%eax
c0106f53:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    heap_listp += (2*WSIZE);
c0106f59:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f5e:	83 c0 08             	add    $0x8,%eax
c0106f61:	a3 e0 a0 d0 c0       	mov    %eax,0xc0d0a0e0

    //extend free heap with free blk og CHUNKSIZE size
    //mem_sbrk((CHUNKSIZE - WSIZE));
    if(extend_heap((CHUNKSIZE - WSIZE)  / WSIZE) == NULL)
c0106f66:	83 ec 0c             	sub    $0xc,%esp
c0106f69:	68 ff 03 00 00       	push   $0x3ff
c0106f6e:	e8 33 fb ff ff       	call   c0106aa6 <extend_heap>
c0106f73:	83 c4 10             	add    $0x10,%esp
c0106f76:	85 c0                	test   %eax,%eax
c0106f78:	75 07                	jne    c0106f81 <malloc_init+0x86>
        return -1;
c0106f7a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106f7f:	eb 05                	jmp    c0106f86 <malloc_init+0x8b>
    return 0;
c0106f81:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f86:	c9                   	leave  
c0106f87:	c3                   	ret    

c0106f88 <malloc_free>:

void malloc_free(void* bp)
{
c0106f88:	55                   	push   %ebp
c0106f89:	89 e5                	mov    %esp,%ebp
c0106f8b:	83 ec 10             	sub    $0x10,%esp
    size_t size = GET_SIZE(HDRP(bp));
c0106f8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f91:	83 e8 04             	sub    $0x4,%eax
c0106f94:	8b 00                	mov    (%eax),%eax
c0106f96:	83 e0 f8             	and    $0xfffffff8,%eax
c0106f99:	89 45 fc             	mov    %eax,-0x4(%ebp)

    PUT(HDRP(bp), PACK(size, 0));
c0106f9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f9f:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106fa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fa5:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0));
c0106fa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106faa:	83 e8 04             	sub    $0x4,%eax
c0106fad:	8b 00                	mov    (%eax),%eax
c0106faf:	83 e0 f8             	and    $0xfffffff8,%eax
c0106fb2:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fb8:	01 c2                	add    %eax,%edx
c0106fba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fbd:	89 02                	mov    %eax,(%edx)
    coalesce(bp);
c0106fbf:	ff 75 08             	push   0x8(%ebp)
c0106fc2:	e8 69 fb ff ff       	call   c0106b30 <coalesce>
c0106fc7:	83 c4 04             	add    $0x4,%esp
}
c0106fca:	90                   	nop
c0106fcb:	c9                   	leave  
c0106fcc:	c3                   	ret    

c0106fcd <k_malloc>:

void* k_malloc(size_t size)
{
c0106fcd:	55                   	push   %ebp
c0106fce:	89 e5                	mov    %esp,%ebp
c0106fd0:	83 ec 18             	sub    $0x18,%esp
    size_t asize;
    size_t extendsize;
    char* bp;

    if(size == 0)
c0106fd3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106fd7:	75 0a                	jne    c0106fe3 <k_malloc+0x16>
        return NULL;
c0106fd9:	b8 00 00 00 00       	mov    $0x0,%eax
c0106fde:	e9 8a 00 00 00       	jmp    c010706d <k_malloc+0xa0>
    
    //THE MIN blk is 2*DSIZE, ONE DSIZE means head and foot, one is align
    if(size <= DSIZE)
c0106fe3:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0106fe7:	77 09                	ja     c0106ff2 <k_malloc+0x25>
        asize = 2 * DSIZE;
c0106fe9:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c0106ff0:	eb 0e                	jmp    c0107000 <k_malloc+0x33>
    else
        asize = DSIZE * ((size + DSIZE) + (DSIZE - 1)) / DSIZE; // Round up 
c0106ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ff5:	83 c0 0f             	add    $0xf,%eax
c0106ff8:	25 ff ff ff 1f       	and    $0x1fffffff,%eax
c0106ffd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //search the free list of fit
    if((bp = find_fit(asize)) != NULL)
c0107000:	ff 75 f4             	push   -0xc(%ebp)
c0107003:	e8 c6 fc ff ff       	call   c0106cce <find_fit>
c0107008:	83 c4 04             	add    $0x4,%esp
c010700b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010700e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107012:	74 13                	je     c0107027 <k_malloc+0x5a>
    {
        place(bp, asize);
c0107014:	ff 75 f4             	push   -0xc(%ebp)
c0107017:	ff 75 f0             	push   -0x10(%ebp)
c010701a:	e8 12 fd ff ff       	call   c0106d31 <place>
c010701f:	83 c4 08             	add    $0x8,%esp
        return bp;
c0107022:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107025:	eb 46                	jmp    c010706d <k_malloc+0xa0>
    }

    //no fit found try to extend head mem
    extendsize = MAX(asize, CHUNKSIZE);
c0107027:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010702a:	ba 00 10 00 00       	mov    $0x1000,%edx
c010702f:	39 d0                	cmp    %edx,%eax
c0107031:	0f 42 c2             	cmovb  %edx,%eax
c0107034:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((bp = extend_heap(extendsize / WSIZE)) == NULL)
c0107037:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010703a:	c1 e8 02             	shr    $0x2,%eax
c010703d:	83 ec 0c             	sub    $0xc,%esp
c0107040:	50                   	push   %eax
c0107041:	e8 60 fa ff ff       	call   c0106aa6 <extend_heap>
c0107046:	83 c4 10             	add    $0x10,%esp
c0107049:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010704c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107050:	75 07                	jne    c0107059 <k_malloc+0x8c>
        return NULL;
c0107052:	b8 00 00 00 00       	mov    $0x0,%eax
c0107057:	eb 14                	jmp    c010706d <k_malloc+0xa0>
    place(bp, asize);
c0107059:	83 ec 08             	sub    $0x8,%esp
c010705c:	ff 75 f4             	push   -0xc(%ebp)
c010705f:	ff 75 f0             	push   -0x10(%ebp)
c0107062:	e8 ca fc ff ff       	call   c0106d31 <place>
c0107067:	83 c4 10             	add    $0x10,%esp
    return bp;
c010706a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010706d:	c9                   	leave  
c010706e:	c3                   	ret    

c010706f <cpu_rcr2>:
{
c010706f:	55                   	push   %ebp
c0107070:	89 e5                	mov    %esp,%ebp
c0107072:	83 ec 10             	sub    $0x10,%esp
    asm volatile("movl %%cr2,%0" : "=r" (val));
c0107075:	0f 20 d0             	mov    %cr2,%eax
c0107078:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return val;
c010707b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010707e:	c9                   	leave  
c010707f:	c3                   	ret    

c0107080 <cpu_invplg>:

reg32 cpu_r_cr3();


static inline void cpu_invplg(void* va)
{
c0107080:	55                   	push   %ebp
c0107081:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c0107083:	8b 45 08             	mov    0x8(%ebp),%eax
c0107086:	0f 01 38             	invlpg (%eax)
};
c0107089:	90                   	nop
c010708a:	5d                   	pop    %ebp
c010708b:	c3                   	ret    

c010708c <do_page_fault>:
#include <kernel/memory/phy_mem.h>
#include <libs/mstdio.h>
#include <status.h>

void do_page_fault(unsigned long err_code, unsigned long address)
{
c010708c:	55                   	push   %ebp
c010708d:	89 e5                	mov    %esp,%ebp
c010708f:	83 ec 28             	sub    $0x28,%esp
    uintptr_t ptr = cpu_rcr2();
c0107092:	e8 d8 ff ff ff       	call   c010706f <cpu_rcr2>
c0107097:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!ptr) {
c010709a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010709e:	0f 84 ea 00 00 00    	je     c010718e <do_page_fault+0x102>
        goto segv_term;
    }

    struct mm_region* hit_region = region_get(__current, ptr);
c01070a4:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01070a9:	83 ec 08             	sub    $0x8,%esp
c01070ac:	ff 75 f4             	push   -0xc(%ebp)
c01070af:	50                   	push   %eax
c01070b0:	e8 8a 02 00 00       	call   c010733f <region_get>
c01070b5:	83 c4 10             	add    $0x10,%esp
c01070b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!hit_region) {
c01070bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01070bf:	0f 84 cc 00 00 00    	je     c0107191 <do_page_fault+0x105>
        // Into the void...
        goto segv_term;
    }

    ptd_t* pte = PTE_MOUNTED(PD_REFERENCED, ptr >> 12);
c01070c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070c8:	c1 e8 0c             	shr    $0xc,%eax
c01070cb:	25 ff 03 00 00       	and    $0x3ff,%eax
c01070d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01070d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070da:	c1 e8 0c             	shr    $0xc,%eax
c01070dd:	c1 e0 02             	shl    $0x2,%eax
c01070e0:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c01070e5:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01070ea:	01 d0                	add    %edx,%eax
c01070ec:	8b 00                	mov    (%eax),%eax
c01070ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (*pte & PG_PRESENT) {
c01070f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070f4:	8b 00                	mov    (%eax),%eax
c01070f6:	83 e0 01             	and    $0x1,%eax
c01070f9:	85 c0                	test   %eax,%eax
c01070fb:	0f 85 93 00 00 00    	jne    c0107194 <do_page_fault+0x108>
        }
        // impossible cases or accessing privileged page
        goto segv_term;
    }

    if (!(*pte)) {
c0107101:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107104:	8b 00                	mov    (%eax),%eax
c0107106:	85 c0                	test   %eax,%eax
c0107108:	0f 84 89 00 00 00    	je     c0107197 <do_page_fault+0x10b>
        // Invalid location
        goto segv_term;
    }
    uintptr_t loc = *pte & ~0xfff;
c010710e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107111:	8b 00                	mov    (%eax),%eax
c0107113:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107118:	89 45 e8             	mov    %eax,-0x18(%ebp)
    // a writable page, not present, pte attr is not null
    //   and no indication of cached page -> a new page need to be alloc
    if ((hit_region->attr & REGION_WRITE) && (*pte & 0xfff) && !loc) {
c010711b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010711e:	8b 40 10             	mov    0x10(%eax),%eax
c0107121:	83 e0 08             	and    $0x8,%eax
c0107124:	85 c0                	test   %eax,%eax
c0107126:	74 4e                	je     c0107176 <do_page_fault+0xea>
c0107128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010712b:	8b 00                	mov    (%eax),%eax
c010712d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107132:	85 c0                	test   %eax,%eax
c0107134:	74 40                	je     c0107176 <do_page_fault+0xea>
c0107136:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010713a:	75 3a                	jne    c0107176 <do_page_fault+0xea>
        cpu_invplg(pte);
c010713c:	83 ec 0c             	sub    $0xc,%esp
c010713f:	ff 75 ec             	push   -0x14(%ebp)
c0107142:	e8 39 ff ff ff       	call   c0107080 <cpu_invplg>
c0107147:	83 c4 10             	add    $0x10,%esp
        uintptr_t pa = pmm_alloc_page(__current->pid, 0);
c010714a:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010714f:	8b 00                	mov    (%eax),%eax
c0107151:	83 ec 08             	sub    $0x8,%esp
c0107154:	6a 00                	push   $0x0
c0107156:	50                   	push   %eax
c0107157:	e8 16 f7 ff ff       	call   c0106872 <pmm_alloc_page>
c010715c:	83 c4 10             	add    $0x10,%esp
c010715f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *pte = *pte | pa | PG_PRESENT;
c0107162:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107165:	8b 00                	mov    (%eax),%eax
c0107167:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010716a:	83 c8 01             	or     $0x1,%eax
c010716d:	89 c2                	mov    %eax,%edx
c010716f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107172:	89 10                	mov    %edx,(%eax)
        return;
c0107174:	eb 4c                	jmp    c01071c2 <do_page_fault+0x136>
    }
    // page not present, bring it from disk or somewhere else
    kprintf("WIP page fault route,errcode = 0x%x,wrong address = 0x%x, pageaddress is 0x%x",err_code, address, ptr);
c0107176:	ff 75 f4             	push   -0xc(%ebp)
c0107179:	ff 75 0c             	push   0xc(%ebp)
c010717c:	ff 75 08             	push   0x8(%ebp)
c010717f:	68 e0 d1 d0 c0       	push   $0xc0d0d1e0
c0107184:	e8 46 2a 00 00       	call   c0109bcf <kprintf>
c0107189:	83 c4 10             	add    $0x10,%esp
    while (1)
c010718c:	eb fe                	jmp    c010718c <do_page_fault+0x100>
        goto segv_term;
c010718e:	90                   	nop
c010718f:	eb 07                	jmp    c0107198 <do_page_fault+0x10c>
        goto segv_term;
c0107191:	90                   	nop
c0107192:	eb 04                	jmp    c0107198 <do_page_fault+0x10c>
        goto segv_term;
c0107194:	90                   	nop
c0107195:	eb 01                	jmp    c0107198 <do_page_fault+0x10c>
        goto segv_term;
c0107197:	90                   	nop
        ;

segv_term:
    kprintf("[KERROR] (pid: %d) Segmentation fault on %x (%x)\n",
            __current->pid,
c0107198:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010719d:	8b 00                	mov    (%eax),%eax
    kprintf("[KERROR] (pid: %d) Segmentation fault on %x (%x)\n",
c010719f:	ff 75 0c             	push   0xc(%ebp)
c01071a2:	ff 75 f4             	push   -0xc(%ebp)
c01071a5:	50                   	push   %eax
c01071a6:	68 30 d2 d0 c0       	push   $0xc0d0d230
c01071ab:	e8 1f 2a 00 00       	call   c0109bcf <kprintf>
c01071b0:	83 c4 10             	add    $0x10,%esp
            ptr,
            address);
    terminate_proc(MXSEGFAULT);
c01071b3:	83 ec 0c             	sub    $0xc,%esp
c01071b6:	6a fb                	push   $0xfffffffb
c01071b8:	e8 f9 27 00 00       	call   c01099b6 <terminate_proc>
c01071bd:	83 c4 10             	add    $0x10,%esp
    while(1);
c01071c0:	eb fe                	jmp    c01071c0 <do_page_fault+0x134>
    // should not reach
c01071c2:	c9                   	leave  
c01071c3:	c3                   	ret    

c01071c4 <page_fault>:
c01071c4:	87 04 24             	xchg   %eax,(%esp)
c01071c7:	51                   	push   %ecx
c01071c8:	52                   	push   %edx
c01071c9:	1e                   	push   %ds
c01071ca:	06                   	push   %es
c01071cb:	0f a0                	push   %fs
c01071cd:	ba 10 00 00 00       	mov    $0x10,%edx
c01071d2:	8e da                	mov    %edx,%ds
c01071d4:	8e c2                	mov    %edx,%es
c01071d6:	8e e2                	mov    %edx,%fs
c01071d8:	8d 54 24 18          	lea    0x18(%esp),%edx
c01071dc:	52                   	push   %edx
c01071dd:	50                   	push   %eax
c01071de:	e8 a9 fe ff ff       	call   c010708c <do_page_fault>
c01071e3:	0f a1                	pop    %fs
c01071e5:	07                   	pop    %es
c01071e6:	1f                   	pop    %ds
c01071e7:	5a                   	pop    %edx
c01071e8:	59                   	pop    %ecx
c01071e9:	58                   	pop    %eax
c01071ea:	cf                   	iret   

c01071eb <__llist_add>:
};

static inline void __llist_add(struct llist_header* elem,
            struct llist_header* prev,
            struct llist_header* next)
{
c01071eb:	55                   	push   %ebp
c01071ec:	89 e5                	mov    %esp,%ebp
    next->prev = elem;
c01071ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01071f1:	8b 55 08             	mov    0x8(%ebp),%edx
c01071f4:	89 10                	mov    %edx,(%eax)
    elem->next = next;
c01071f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01071f9:	8b 55 10             	mov    0x10(%ebp),%edx
c01071fc:	89 50 04             	mov    %edx,0x4(%eax)
    elem->prev = prev;
c01071ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0107202:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107205:	89 10                	mov    %edx,(%eax)
    prev->next = elem;
c0107207:	8b 45 0c             	mov    0xc(%ebp),%eax
c010720a:	8b 55 08             	mov    0x8(%ebp),%edx
c010720d:	89 50 04             	mov    %edx,0x4(%eax)
}
c0107210:	90                   	nop
c0107211:	5d                   	pop    %ebp
c0107212:	c3                   	ret    

c0107213 <llist_init_head>:

static inline void llist_init_head(struct llist_header* head) {
c0107213:	55                   	push   %ebp
c0107214:	89 e5                	mov    %esp,%ebp
    head->next = head;
c0107216:	8b 45 08             	mov    0x8(%ebp),%eax
c0107219:	8b 55 08             	mov    0x8(%ebp),%edx
c010721c:	89 50 04             	mov    %edx,0x4(%eax)
    head->prev = head;
c010721f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107222:	8b 55 08             	mov    0x8(%ebp),%edx
c0107225:	89 10                	mov    %edx,(%eax)
}
c0107227:	90                   	nop
c0107228:	5d                   	pop    %ebp
c0107229:	c3                   	ret    

c010722a <llist_append>:

static inline void llist_append(struct llist_header* head, struct llist_header* elem)
{
c010722a:	55                   	push   %ebp
c010722b:	89 e5                	mov    %esp,%ebp
    __llist_add(elem, head, head->next);
c010722d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107230:	8b 40 04             	mov    0x4(%eax),%eax
c0107233:	50                   	push   %eax
c0107234:	ff 75 08             	push   0x8(%ebp)
c0107237:	ff 75 0c             	push   0xc(%ebp)
c010723a:	e8 ac ff ff ff       	call   c01071eb <__llist_add>
c010723f:	83 c4 0c             	add    $0xc,%esp
}
c0107242:	90                   	nop
c0107243:	c9                   	leave  
c0107244:	c3                   	ret    

c0107245 <region_add>:
#include <kernel/memory/region.h>
#include <kernel/memory/malloc.h>
#include <libs/list.h>
void region_add(struct m_pcb* proc,unsigned long start, unsigned long end, unsigned int attr) {
c0107245:	55                   	push   %ebp
c0107246:	89 e5                	mov    %esp,%ebp
c0107248:	83 ec 28             	sub    $0x28,%esp
    struct mm_region* region = k_malloc(sizeof(struct mm_region));
c010724b:	83 ec 0c             	sub    $0xc,%esp
c010724e:	6a 14                	push   $0x14
c0107250:	e8 78 fd ff ff       	call   c0106fcd <k_malloc>
c0107255:	83 c4 10             	add    $0x10,%esp
c0107258:	89 45 f4             	mov    %eax,-0xc(%ebp)

    *region = (struct mm_region) {
c010725b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010725e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0107264:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c010726b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0107272:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
c0107279:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c0107280:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107283:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107286:	89 50 08             	mov    %edx,0x8(%eax)
c0107289:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010728c:	8b 55 10             	mov    0x10(%ebp),%edx
c010728f:	89 50 0c             	mov    %edx,0xc(%eax)
c0107292:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107295:	8b 55 14             	mov    0x14(%ebp),%edx
c0107298:	89 50 10             	mov    %edx,0x10(%eax)
        .attr = attr,
        .end = end,
        .start = start
    };
    if (!proc->process_mm) {
c010729b:	8b 45 08             	mov    0x8(%ebp),%eax
c010729e:	8b 40 58             	mov    0x58(%eax),%eax
c01072a1:	85 c0                	test   %eax,%eax
c01072a3:	75 1a                	jne    c01072bf <region_add+0x7a>
        llist_init_head(&region->head);
c01072a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072a8:	83 ec 0c             	sub    $0xc,%esp
c01072ab:	50                   	push   %eax
c01072ac:	e8 62 ff ff ff       	call   c0107213 <llist_init_head>
c01072b1:	83 c4 10             	add    $0x10,%esp
        proc->process_mm = region;
c01072b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01072b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072ba:	89 50 58             	mov    %edx,0x58(%eax)
    }
    else {
        llist_append(&proc->process_mm->head, &region->head);
    }
}
c01072bd:	eb 16                	jmp    c01072d5 <region_add+0x90>
        llist_append(&proc->process_mm->head, &region->head);
c01072bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01072c5:	8b 52 58             	mov    0x58(%edx),%edx
c01072c8:	83 ec 08             	sub    $0x8,%esp
c01072cb:	50                   	push   %eax
c01072cc:	52                   	push   %edx
c01072cd:	e8 58 ff ff ff       	call   c010722a <llist_append>
c01072d2:	83 c4 10             	add    $0x10,%esp
}
c01072d5:	90                   	nop
c01072d6:	c9                   	leave  
c01072d7:	c3                   	ret    

c01072d8 <region_release_all>:

void region_release_all(struct m_pcb* proc) {
c01072d8:	55                   	push   %ebp
c01072d9:	89 e5                	mov    %esp,%ebp
c01072db:	83 ec 28             	sub    $0x28,%esp
    struct mm_region* head = proc->process_mm;
c01072de:	8b 45 08             	mov    0x8(%ebp),%eax
c01072e1:	8b 40 58             	mov    0x58(%eax),%eax
c01072e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct mm_region *pos, *n;

    llist_for_each(pos, n, &head->head, head) {
c01072e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01072ea:	8b 40 04             	mov    0x4(%eax),%eax
c01072ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01072f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01072f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072f9:	8b 40 04             	mov    0x4(%eax),%eax
c01072fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01072ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107302:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107305:	eb 23                	jmp    c010732a <region_release_all+0x52>
        malloc_free(pos);
c0107307:	83 ec 0c             	sub    $0xc,%esp
c010730a:	ff 75 f4             	push   -0xc(%ebp)
c010730d:	e8 76 fc ff ff       	call   c0106f88 <malloc_free>
c0107312:	83 c4 10             	add    $0x10,%esp
    llist_for_each(pos, n, &head->head, head) {
c0107315:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107318:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010731b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010731e:	8b 40 04             	mov    0x4(%eax),%eax
c0107321:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107324:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107327:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010732a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010732d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107330:	75 d5                	jne    c0107307 <region_release_all+0x2f>
    }

    proc->process_mm = NULL;
c0107332:	8b 45 08             	mov    0x8(%ebp),%eax
c0107335:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
}
c010733c:	90                   	nop
c010733d:	c9                   	leave  
c010733e:	c3                   	ret    

c010733f <region_get>:

struct mm_region* region_get(struct m_pcb* proc, unsigned long vaddr) {
c010733f:	55                   	push   %ebp
c0107340:	89 e5                	mov    %esp,%ebp
c0107342:	83 ec 20             	sub    $0x20,%esp
    struct mm_region* head = proc->process_mm;
c0107345:	8b 45 08             	mov    0x8(%ebp),%eax
c0107348:	8b 40 58             	mov    0x58(%eax),%eax
c010734b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!head) {
c010734e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107352:	75 07                	jne    c010735b <region_get+0x1c>
        return NULL;
c0107354:	b8 00 00 00 00       	mov    $0x0,%eax
c0107359:	eb 5d                	jmp    c01073b8 <region_get+0x79>
    }

    struct mm_region *pos, *n;

    llist_for_each(pos, n, &head->head, head) {
c010735b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010735e:	8b 40 04             	mov    0x4(%eax),%eax
c0107361:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107367:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010736a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010736d:	8b 40 04             	mov    0x4(%eax),%eax
c0107370:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107373:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107376:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107379:	eb 30                	jmp    c01073ab <region_get+0x6c>
        if (vaddr >= pos->start && vaddr < pos->end) {
c010737b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010737e:	8b 40 08             	mov    0x8(%eax),%eax
c0107381:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0107384:	72 10                	jb     c0107396 <region_get+0x57>
c0107386:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107389:	8b 40 0c             	mov    0xc(%eax),%eax
c010738c:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010738f:	73 05                	jae    c0107396 <region_get+0x57>
            return pos;
c0107391:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107394:	eb 22                	jmp    c01073b8 <region_get+0x79>
    llist_for_each(pos, n, &head->head, head) {
c0107396:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107399:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010739c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010739f:	8b 40 04             	mov    0x4(%eax),%eax
c01073a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01073a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01073ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01073b1:	75 c8                	jne    c010737b <region_get+0x3c>
        }
    }
    return NULL;
c01073b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01073b8:	c9                   	leave  
c01073b9:	c3                   	ret    

c01073ba <cpu_invplg>:
{
c01073ba:	55                   	push   %ebp
c01073bb:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c01073bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01073c0:	0f 01 38             	invlpg (%eax)
};
c01073c3:	90                   	nop
c01073c4:	5d                   	pop    %ebp
c01073c5:	c3                   	ret    

c01073c6 <vmm_init>:
#include <kernel/memory/vir_mem.h>
#include <libs/mstring.h>
#include <libs/mstdio.h>

void vmm_init() {
c01073c6:	55                   	push   %ebp
c01073c7:	89 e5                	mov    %esp,%ebp
    // TODO: something here?
}
c01073c9:	90                   	nop
c01073ca:	5d                   	pop    %ebp
c01073cb:	c3                   	ret    

c01073cc <get_pd>:

// TODO: Move these nasty inline asm stuff into hal
//      These should be arch dependent
ptd_t* get_pd() {
c01073cc:	55                   	push   %ebp
c01073cd:	89 e5                	mov    %esp,%ebp
c01073cf:	83 ec 10             	sub    $0x10,%esp
    ptd_t* pd;
    #ifdef __ARCH_IA32
    __asm__(
c01073d2:	0f 20 d8             	mov    %cr3,%eax
c01073d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01073da:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "movl %%cr3, %0\n"
        "andl $0xfffff000, %0"
        : "=r"(pd)
    );
    #endif
    return P2V(pd);
c01073dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073e0:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01073e5:	c9                   	leave  
c01073e6:	c3                   	ret    

c01073e7 <set_pd>:

void set_pd(ptd_t* pd) {
c01073e7:	55                   	push   %ebp
c01073e8:	89 e5                	mov    %esp,%ebp
    #ifdef __ARCH_IA32
    __asm__(
c01073ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01073ed:	89 c0                	mov    %eax,%eax
c01073ef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01073f4:	0f 22 d8             	mov    %eax,%cr3
        "movl %%eax, %%cr3\n"
        :
        : "r" (pd)
    );
    #endif
}
c01073f7:	90                   	nop
c01073f8:	5d                   	pop    %ebp
c01073f9:	c3                   	ret    

c01073fa <vmm_init_pd>:

ptd_t* vmm_init_pd() {
c01073fa:	55                   	push   %ebp
c01073fb:	89 e5                	mov    %esp,%ebp
c01073fd:	83 ec 18             	sub    $0x18,%esp
    ptd_t* dir = pmm_alloc_page(KERNEL_PID, PP_FGPERSIST);
c0107400:	83 ec 08             	sub    $0x8,%esp
c0107403:	6a 01                	push   $0x1
c0107405:	6a ff                	push   $0xffffffff
c0107407:	e8 66 f4 ff ff       	call   c0106872 <pmm_alloc_page>
c010740c:	83 c4 10             	add    $0x10,%esp
c010740f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (size_t i = 0; i < 1024; i++)
c0107412:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107419:	eb 19                	jmp    c0107434 <vmm_init_pd+0x3a>
    {
        dir[i] = 0;
c010741b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010741e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107425:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107428:	01 d0                	add    %edx,%eax
c010742a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < 1024; i++)
c0107430:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107434:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010743b:	76 de                	jbe    c010741b <vmm_init_pd+0x21>
    }
    
    // 自己映射自己，方便我们在软件层面进行查表地址转换
    dir[1023] = PDE(T_SELF_REF_PERM, dir);
c010743d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107440:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107445:	89 c2                	mov    %eax,%edx
c0107447:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010744a:	05 fc 0f 00 00       	add    $0xffc,%eax
c010744f:	83 ca 1b             	or     $0x1b,%edx
c0107452:	89 10                	mov    %edx,(%eax)

    return dir;
c0107454:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107457:	c9                   	leave  
c0107458:	c3                   	ret    

c0107459 <__vmm_map_alloc>:
                   uint32_t l1_inx,
                   uint32_t l2_inx,
                   uintptr_t pa,
                   pt_attr attr,
                   int forced)
{
c0107459:	55                   	push   %ebp
c010745a:	89 e5                	mov    %esp,%ebp
c010745c:	53                   	push   %ebx
c010745d:	83 ec 14             	sub    $0x14,%esp
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c0107460:	c7 45 f4 00 f0 ff ff 	movl   $0xfffff000,-0xc(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(l1_inx);
c0107467:	8b 45 0c             	mov    0xc(%ebp),%eax
c010746a:	c1 e0 0c             	shl    $0xc,%eax
c010746d:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107472:	89 45 f0             	mov    %eax,-0x10(%ebp)


    // See if attr make sense
    if(attr > 128)
c0107475:	81 7d 18 80 00 00 00 	cmpl   $0x80,0x18(%ebp)
c010747c:	76 1a                	jbe    c0107498 <__vmm_map_alloc+0x3f>
    {
        kprintf("__vmm_map_alloc false, attr > 128!");
c010747e:	83 ec 0c             	sub    $0xc,%esp
c0107481:	68 64 d2 d0 c0       	push   $0xc0d0d264
c0107486:	e8 44 27 00 00       	call   c0109bcf <kprintf>
c010748b:	83 c4 10             	add    $0x10,%esp
        return 0;
c010748e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107493:	e9 ea 00 00 00       	jmp    c0107582 <__vmm_map_alloc+0x129>
    }

    if (!ptd[l1_inx]) {
c0107498:	8b 45 0c             	mov    0xc(%ebp),%eax
c010749b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01074a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074a5:	01 d0                	add    %edx,%eax
c01074a7:	8b 00                	mov    (%eax),%eax
c01074a9:	85 c0                	test   %eax,%eax
c01074ab:	75 6b                	jne    c0107518 <__vmm_map_alloc+0xbf>
        uint8_t* new_pt_pa = pmm_alloc_page(pid, PP_FGPERSIST);
c01074ad:	83 ec 08             	sub    $0x8,%esp
c01074b0:	6a 01                	push   $0x1
c01074b2:	ff 75 08             	push   0x8(%ebp)
c01074b5:	e8 b8 f3 ff ff       	call   c0106872 <pmm_alloc_page>
c01074ba:	83 c4 10             	add    $0x10,%esp
c01074bd:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 物理内存已满！
        if (!new_pt_pa) {
c01074c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01074c4:	75 0a                	jne    c01074d0 <__vmm_map_alloc+0x77>
            return 0;
c01074c6:	b8 00 00 00 00       	mov    $0x0,%eax
c01074cb:	e9 b2 00 00 00       	jmp    c0107582 <__vmm_map_alloc+0x129>
        }

        // This must be writable
        ptd[l1_inx] = PDE(attr | PG_WRITE, new_pt_pa);
c01074d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01074d8:	89 c1                	mov    %eax,%ecx
c01074da:	8b 45 18             	mov    0x18(%ebp),%eax
c01074dd:	83 c8 0a             	or     $0xa,%eax
c01074e0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01074e5:	89 c2                	mov    %eax,%edx
c01074e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01074ea:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01074f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074f4:	01 d8                	add    %ebx,%eax
c01074f6:	09 ca                	or     %ecx,%edx
c01074f8:	89 10                	mov    %edx,(%eax)
        memset((void*)PT_VADDR(l1_inx), 0, PM_PAGE_SIZE);
c01074fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01074fd:	c1 e0 0c             	shl    $0xc,%eax
c0107500:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107505:	83 ec 04             	sub    $0x4,%esp
c0107508:	68 00 10 00 00       	push   $0x1000
c010750d:	6a 00                	push   $0x0
c010750f:	50                   	push   %eax
c0107510:	e8 51 29 00 00       	call   c0109e66 <memset>
c0107515:	83 c4 10             	add    $0x10,%esp
    }

    if (pt[l2_inx]) {
c0107518:	8b 45 10             	mov    0x10(%ebp),%eax
c010751b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107522:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107525:	01 d0                	add    %edx,%eax
c0107527:	8b 00                	mov    (%eax),%eax
c0107529:	85 c0                	test   %eax,%eax
c010752b:	74 0d                	je     c010753a <__vmm_map_alloc+0xe1>
        if (!forced) {
c010752d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0107531:	75 07                	jne    c010753a <__vmm_map_alloc+0xe1>
            return 0;
c0107533:	b8 00 00 00 00       	mov    $0x0,%eax
c0107538:	eb 48                	jmp    c0107582 <__vmm_map_alloc+0x129>
        }
    }

    if ((HAS_FLAGS(attr, PG_PRESENT))) {
c010753a:	8b 45 18             	mov    0x18(%ebp),%eax
c010753d:	83 e0 01             	and    $0x1,%eax
c0107540:	85 c0                	test   %eax,%eax
c0107542:	74 12                	je     c0107556 <__vmm_map_alloc+0xfd>
        // add one on reference count, regardless of existence.
        pmm_ref_page(pid, pa);
c0107544:	8b 45 14             	mov    0x14(%ebp),%eax
c0107547:	83 ec 08             	sub    $0x8,%esp
c010754a:	50                   	push   %eax
c010754b:	ff 75 08             	push   0x8(%ebp)
c010754e:	e8 ef f4 ff ff       	call   c0106a42 <pmm_ref_page>
c0107553:	83 c4 10             	add    $0x10,%esp
    }

    pt[l2_inx] = PTE(attr, pa);
c0107556:	8b 45 14             	mov    0x14(%ebp),%eax
c0107559:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010755e:	89 c1                	mov    %eax,%ecx
c0107560:	8b 45 18             	mov    0x18(%ebp),%eax
c0107563:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107568:	89 c2                	mov    %eax,%edx
c010756a:	8b 45 10             	mov    0x10(%ebp),%eax
c010756d:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c0107574:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107577:	01 d8                	add    %ebx,%eax
c0107579:	09 ca                	or     %ecx,%edx
c010757b:	89 10                	mov    %edx,(%eax)

    return 1;
c010757d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0107582:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107585:	c9                   	leave  
c0107586:	c3                   	ret    

c0107587 <vmm_map_page>:

void* vmm_map_page(pid_t pid, void* va, void* pa, pt_attr dattr, pt_attr tattr) {
c0107587:	55                   	push   %ebp
c0107588:	89 e5                	mov    %esp,%ebp
c010758a:	83 ec 28             	sub    $0x28,%esp
    // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c010758d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107591:	74 06                	je     c0107599 <vmm_map_page+0x12>
c0107593:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107597:	75 0a                	jne    c01075a3 <vmm_map_page+0x1c>
        return NULL;
c0107599:	b8 00 00 00 00       	mov    $0x0,%eax
c010759e:	e9 1e 01 00 00       	jmp    c01076c1 <vmm_map_page+0x13a>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c01075a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075a6:	c1 e8 16             	shr    $0x16,%eax
c01075a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c01075ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075af:	c1 e8 0c             	shr    $0xc,%eax
c01075b2:	25 ff 03 00 00       	and    $0x3ff,%eax
c01075b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01075ba:	c7 45 e8 00 f0 ff ff 	movl   $0xfffff000,-0x18(%ebp)

    // 在页表与页目录中找到一个可用的空位进行映射（位于va或其附近）
    ptd_t* pde = ptd[pd_offset];
c01075c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01075cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01075ce:	01 d0                	add    %edx,%eax
c01075d0:	8b 00                	mov    (%eax),%eax
c01075d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(pd_offset);
c01075d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075d8:	c1 e0 0c             	shl    $0xc,%eax
c01075db:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01075e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while (pde && pd_offset < 1024) {
c01075e3:	eb 77                	jmp    c010765c <vmm_map_page+0xd5>
        if (pt_offset == 1024) {
c01075e5:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
c01075ec:	75 2d                	jne    c010761b <vmm_map_page+0x94>
            pd_offset++;
c01075ee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            pt_offset = 0;
c01075f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
            pde = ptd[pd_offset];
c01075f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107603:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107606:	01 d0                	add    %edx,%eax
c0107608:	8b 00                	mov    (%eax),%eax
c010760a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            pt = (pt_t*)PT_VADDR(pd_offset);
c010760d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107610:	c1 e0 0c             	shl    $0xc,%eax
c0107613:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107618:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        // 页表有空位，只需要开辟一个新的 PTE
        if (__vmm_map_alloc(pid, pd_offset, pt_offset, pa, dattr, false)) {
c010761b:	8b 45 10             	mov    0x10(%ebp),%eax
c010761e:	83 ec 08             	sub    $0x8,%esp
c0107621:	6a 00                	push   $0x0
c0107623:	ff 75 14             	push   0x14(%ebp)
c0107626:	50                   	push   %eax
c0107627:	ff 75 f0             	push   -0x10(%ebp)
c010762a:	ff 75 f4             	push   -0xc(%ebp)
c010762d:	ff 75 08             	push   0x8(%ebp)
c0107630:	e8 24 fe ff ff       	call   c0107459 <__vmm_map_alloc>
c0107635:	83 c4 20             	add    $0x20,%esp
c0107638:	85 c0                	test   %eax,%eax
c010763a:	74 1c                	je     c0107658 <vmm_map_page+0xd1>
            return (void*)V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c010763c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010763f:	c1 e0 16             	shl    $0x16,%eax
c0107642:	89 c2                	mov    %eax,%edx
c0107644:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107647:	c1 e0 0c             	shl    $0xc,%eax
c010764a:	09 c2                	or     %eax,%edx
c010764c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010764f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107654:	09 d0                	or     %edx,%eax
c0107656:	eb 69                	jmp    c01076c1 <vmm_map_page+0x13a>
        }
        pt_offset++;
c0107658:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    while (pde && pd_offset < 1024) {
c010765c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107660:	74 0d                	je     c010766f <vmm_map_page+0xe8>
c0107662:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107669:	0f 86 76 ff ff ff    	jbe    c01075e5 <vmm_map_page+0x5e>
    }
    
    // 页目录与所有页表已满！
    if (pd_offset > 1024) {
c010766f:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%ebp)
c0107676:	76 07                	jbe    c010767f <vmm_map_page+0xf8>
        return NULL;
c0107678:	b8 00 00 00 00       	mov    $0x0,%eax
c010767d:	eb 42                	jmp    c01076c1 <vmm_map_page+0x13a>
    }

    if (!__vmm_map_alloc(pid, pd_offset, pt_offset, (uintptr_t)pa, dattr, false))
c010767f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107682:	83 ec 08             	sub    $0x8,%esp
c0107685:	6a 00                	push   $0x0
c0107687:	ff 75 14             	push   0x14(%ebp)
c010768a:	50                   	push   %eax
c010768b:	ff 75 f0             	push   -0x10(%ebp)
c010768e:	ff 75 f4             	push   -0xc(%ebp)
c0107691:	ff 75 08             	push   0x8(%ebp)
c0107694:	e8 c0 fd ff ff       	call   c0107459 <__vmm_map_alloc>
c0107699:	83 c4 20             	add    $0x20,%esp
c010769c:	85 c0                	test   %eax,%eax
c010769e:	75 07                	jne    c01076a7 <vmm_map_page+0x120>
        return NULL;
c01076a0:	b8 00 00 00 00       	mov    $0x0,%eax
c01076a5:	eb 1a                	jmp    c01076c1 <vmm_map_page+0x13a>
    //     // add one on reference count, regardless of existence.
    //     pmm_ref_page(pid, pa);
    // }
    // pt[pt_offset] = PTE(tattr, pa);

    return (void*)V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c01076a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076aa:	c1 e0 16             	shl    $0x16,%eax
c01076ad:	89 c2                	mov    %eax,%edx
c01076af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076b2:	c1 e0 0c             	shl    $0xc,%eax
c01076b5:	09 c2                	or     %eax,%edx
c01076b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076ba:	25 ff 0f 00 00       	and    $0xfff,%eax
c01076bf:	09 d0                	or     %edx,%eax
}
c01076c1:	c9                   	leave  
c01076c2:	c3                   	ret    

c01076c3 <vmm_cover_map_page>:

void* vmm_cover_map_page(pid_t pid, void* va, void* pa, pt_attr dattr, pt_attr tattr)
{
c01076c3:	55                   	push   %ebp
c01076c4:	89 e5                	mov    %esp,%ebp
c01076c6:	83 ec 18             	sub    $0x18,%esp
        // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c01076c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01076cd:	74 06                	je     c01076d5 <vmm_cover_map_page+0x12>
c01076cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01076d3:	75 07                	jne    c01076dc <vmm_cover_map_page+0x19>
        return NULL;
c01076d5:	b8 00 00 00 00       	mov    $0x0,%eax
c01076da:	eb 50                	jmp    c010772c <vmm_cover_map_page+0x69>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c01076dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076df:	c1 e8 16             	shr    $0x16,%eax
c01076e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c01076e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076e8:	c1 e8 0c             	shr    $0xc,%eax
c01076eb:	25 ff 03 00 00       	and    $0x3ff,%eax
c01076f0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(!__vmm_map_alloc(pid, pd_offset, pt_offset, (uintptr_t)pa, dattr, true)) return NULL;
c01076f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01076f6:	83 ec 08             	sub    $0x8,%esp
c01076f9:	6a 01                	push   $0x1
c01076fb:	ff 75 14             	push   0x14(%ebp)
c01076fe:	50                   	push   %eax
c01076ff:	ff 75 f0             	push   -0x10(%ebp)
c0107702:	ff 75 f4             	push   -0xc(%ebp)
c0107705:	ff 75 08             	push   0x8(%ebp)
c0107708:	e8 4c fd ff ff       	call   c0107459 <__vmm_map_alloc>
c010770d:	83 c4 20             	add    $0x20,%esp
c0107710:	85 c0                	test   %eax,%eax
c0107712:	75 07                	jne    c010771b <vmm_cover_map_page+0x58>
c0107714:	b8 00 00 00 00       	mov    $0x0,%eax
c0107719:	eb 11                	jmp    c010772c <vmm_cover_map_page+0x69>
    //     // add one on reference count, regardless of existence.
    //     pmm_ref_page(pid, pa);
    // }
    // pt[pt_offset] = PTE(tattr, pa);

    cpu_invplg(va);
c010771b:	83 ec 0c             	sub    $0xc,%esp
c010771e:	ff 75 0c             	push   0xc(%ebp)
c0107721:	e8 94 fc ff ff       	call   c01073ba <cpu_invplg>
c0107726:	83 c4 10             	add    $0x10,%esp

    return va;
c0107729:	8b 45 0c             	mov    0xc(%ebp),%eax
}
c010772c:	c9                   	leave  
c010772d:	c3                   	ret    

c010772e <vmm_alloc_page>:

void* vmm_alloc_page(pid_t pid, void* vpn, void** pa, pt_attr dattr, pt_attr tattr)
{
c010772e:	55                   	push   %ebp
c010772f:	89 e5                	mov    %esp,%ebp
c0107731:	83 ec 18             	sub    $0x18,%esp
    void* pp = pmm_alloc_page(pid, tattr);
c0107734:	83 ec 08             	sub    $0x8,%esp
c0107737:	ff 75 18             	push   0x18(%ebp)
c010773a:	ff 75 08             	push   0x8(%ebp)
c010773d:	e8 30 f1 ff ff       	call   c0106872 <pmm_alloc_page>
c0107742:	83 c4 10             	add    $0x10,%esp
c0107745:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* result = vmm_map_page(pid, vpn, pp, dattr, tattr);
c0107748:	83 ec 0c             	sub    $0xc,%esp
c010774b:	ff 75 18             	push   0x18(%ebp)
c010774e:	ff 75 14             	push   0x14(%ebp)
c0107751:	ff 75 f4             	push   -0xc(%ebp)
c0107754:	ff 75 0c             	push   0xc(%ebp)
c0107757:	ff 75 08             	push   0x8(%ebp)
c010775a:	e8 28 fe ff ff       	call   c0107587 <vmm_map_page>
c010775f:	83 c4 20             	add    $0x20,%esp
c0107762:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!result) {
c0107765:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107769:	75 11                	jne    c010777c <vmm_alloc_page+0x4e>
        pmm_free_page(pid, pp);
c010776b:	83 ec 08             	sub    $0x8,%esp
c010776e:	ff 75 f4             	push   -0xc(%ebp)
c0107771:	ff 75 08             	push   0x8(%ebp)
c0107774:	e8 40 f2 ff ff       	call   c01069b9 <pmm_free_page>
c0107779:	83 c4 10             	add    $0x10,%esp
    }
    pa ? (*pa = pp) : 0;
c010777c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107780:	74 08                	je     c010778a <vmm_alloc_page+0x5c>
c0107782:	8b 45 10             	mov    0x10(%ebp),%eax
c0107785:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107788:	89 10                	mov    %edx,(%eax)
    return result;
c010778a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010778d:	c9                   	leave  
c010778e:	c3                   	ret    

c010778f <vmm_alloc_pages>:

int vmm_alloc_pages(pid_t pid, void* va, size_t sz, pt_attr tattr, pp_attr_t pattr)
{
c010778f:	55                   	push   %ebp
c0107790:	89 e5                	mov    %esp,%ebp
c0107792:	83 ec 28             	sub    $0x28,%esp
    //assert((uintptr_t)va % PG_SIZE == 0) assert(sz % PG_SIZE == 0);

    void* va_ = va;
c0107795:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (size_t i = 0; i < (sz >> PG_SIZE_BITS); i++, va_ += PG_SIZE) {
c010779b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01077a2:	e9 97 00 00 00       	jmp    c010783e <vmm_alloc_pages+0xaf>
        void* pp = pmm_alloc_page(pid, pattr);
c01077a7:	83 ec 08             	sub    $0x8,%esp
c01077aa:	ff 75 18             	push   0x18(%ebp)
c01077ad:	ff 75 08             	push   0x8(%ebp)
c01077b0:	e8 bd f0 ff ff       	call   c0106872 <pmm_alloc_page>
c01077b5:	83 c4 10             	add    $0x10,%esp
c01077b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t l1_index = PD_INDEX(va_);
c01077bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077be:	c1 e8 16             	shr    $0x16,%eax
c01077c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        uint32_t l2_index = PT_INDEX(va_);
c01077c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077c7:	c1 e8 0c             	shr    $0xc,%eax
c01077ca:	25 ff 03 00 00       	and    $0x3ff,%eax
c01077cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!pp || !__vmm_map_alloc(
c01077d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01077d6:	74 21                	je     c01077f9 <vmm_alloc_pages+0x6a>
c01077d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077db:	83 ec 08             	sub    $0x8,%esp
c01077de:	6a 00                	push   $0x0
c01077e0:	ff 75 14             	push   0x14(%ebp)
c01077e3:	50                   	push   %eax
c01077e4:	ff 75 e0             	push   -0x20(%ebp)
c01077e7:	ff 75 e4             	push   -0x1c(%ebp)
c01077ea:	ff 75 08             	push   0x8(%ebp)
c01077ed:	e8 67 fc ff ff       	call   c0107459 <__vmm_map_alloc>
c01077f2:	83 c4 20             	add    $0x20,%esp
c01077f5:	85 c0                	test   %eax,%eax
c01077f7:	75 3a                	jne    c0107833 <vmm_alloc_pages+0xa4>
                     pid,
                     l1_index, l2_index, (uintptr_t)pp, tattr, false)) {
            // if one failed, release previous allocated pages.
            va_ = va;
c01077f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
            for (size_t j = 0; j < i; j++, va_ += PG_SIZE) {
c01077ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107806:	eb 1c                	jmp    c0107824 <vmm_alloc_pages+0x95>
                vmm_unmap_page(pid, va_);
c0107808:	83 ec 08             	sub    $0x8,%esp
c010780b:	ff 75 f4             	push   -0xc(%ebp)
c010780e:	ff 75 08             	push   0x8(%ebp)
c0107811:	e8 41 01 00 00       	call   c0107957 <vmm_unmap_page>
c0107816:	83 c4 10             	add    $0x10,%esp
            for (size_t j = 0; j < i; j++, va_ += PG_SIZE) {
c0107819:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010781d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0107824:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107827:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010782a:	72 dc                	jb     c0107808 <vmm_alloc_pages+0x79>
            }

            return false;
c010782c:	b8 00 00 00 00       	mov    $0x0,%eax
c0107831:	eb 1f                	jmp    c0107852 <vmm_alloc_pages+0xc3>
    for (size_t i = 0; i < (sz >> PG_SIZE_BITS); i++, va_ += PG_SIZE) {
c0107833:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0107837:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010783e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107841:	c1 e8 0c             	shr    $0xc,%eax
c0107844:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0107847:	0f 82 5a ff ff ff    	jb     c01077a7 <vmm_alloc_pages+0x18>
        }
    }

    return true;
c010784d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0107852:	c9                   	leave  
c0107853:	c3                   	ret    

c0107854 <vmm_set_mapping>:

int vmm_set_mapping(pid_t pid, void* va, void* pa, pt_attr attr)
{
c0107854:	55                   	push   %ebp
c0107855:	89 e5                	mov    %esp,%ebp
c0107857:	83 ec 18             	sub    $0x18,%esp
    //assert(((uintptr_t)va & 0xFFFU) == 0);

    uint32_t l1_index = PD_INDEX(va);
c010785a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010785d:	c1 e8 16             	shr    $0x16,%eax
c0107860:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c0107863:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107866:	c1 e8 0c             	shr    $0xc,%eax
c0107869:	25 ff 03 00 00       	and    $0x3ff,%eax
c010786e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // prevent map of recursive mapping region
    if (l1_index == 1023) {
c0107871:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107878:	75 07                	jne    c0107881 <vmm_set_mapping+0x2d>
        return 0;
c010787a:	b8 00 00 00 00       	mov    $0x0,%eax
c010787f:	eb 22                	jmp    c01078a3 <vmm_set_mapping+0x4f>
    }
    
    __vmm_map_alloc(pid, l1_index, l2_index, (uintptr_t)pa, attr, false);
c0107881:	8b 45 10             	mov    0x10(%ebp),%eax
c0107884:	83 ec 08             	sub    $0x8,%esp
c0107887:	6a 00                	push   $0x0
c0107889:	ff 75 14             	push   0x14(%ebp)
c010788c:	50                   	push   %eax
c010788d:	ff 75 f0             	push   -0x10(%ebp)
c0107890:	ff 75 f4             	push   -0xc(%ebp)
c0107893:	ff 75 08             	push   0x8(%ebp)
c0107896:	e8 be fb ff ff       	call   c0107459 <__vmm_map_alloc>
c010789b:	83 c4 20             	add    $0x20,%esp
    return 1;
c010789e:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01078a3:	c9                   	leave  
c01078a4:	c3                   	ret    

c01078a5 <__vmm_unmap_unalloc>:

void __vmm_unmap_unalloc(pid_t pid, void* va, int free_ppage)
{
c01078a5:	55                   	push   %ebp
c01078a6:	89 e5                	mov    %esp,%ebp
c01078a8:	83 ec 28             	sub    $0x28,%esp
    //assert(((uintptr_t)va & 0xFFFU) == 0);

    uint32_t l1_index = PD_INDEX(va);
c01078ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078ae:	c1 e8 16             	shr    $0x16,%eax
c01078b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c01078b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078b7:	c1 e8 0c             	shr    $0xc,%eax
c01078ba:	25 ff 03 00 00       	and    $0x3ff,%eax
c01078bf:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // prevent unmap of recursive mapping region
    if (l1_index == 1023) {
c01078c2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c01078c9:	0f 84 85 00 00 00    	je     c0107954 <__vmm_unmap_unalloc+0xaf>
        return;
    }

    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01078cf:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    if (ptd[l1_index]) {
c01078d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01078e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078e3:	01 d0                	add    %edx,%eax
c01078e5:	8b 00                	mov    (%eax),%eax
c01078e7:	85 c0                	test   %eax,%eax
c01078e9:	74 6a                	je     c0107955 <__vmm_unmap_unalloc+0xb0>
        pt_t* pt = (uintptr_t)PT_VADDR(l1_index);
c01078eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078ee:	c1 e0 0c             	shl    $0xc,%eax
c01078f1:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01078f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        pt_t pte = pt[l2_index];
c01078f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107903:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107906:	01 d0                	add    %edx,%eax
c0107908:	8b 00                	mov    (%eax),%eax
c010790a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (IS_PRESENT(pte) && free_ppage) {
c010790d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107910:	83 e0 01             	and    $0x1,%eax
c0107913:	85 c0                	test   %eax,%eax
c0107915:	74 18                	je     c010792f <__vmm_unmap_unalloc+0x8a>
c0107917:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010791b:	74 12                	je     c010792f <__vmm_unmap_unalloc+0x8a>
            pmm_free_page(pid, (void*)pte);
c010791d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107920:	83 ec 08             	sub    $0x8,%esp
c0107923:	50                   	push   %eax
c0107924:	ff 75 08             	push   0x8(%ebp)
c0107927:	e8 8d f0 ff ff       	call   c01069b9 <pmm_free_page>
c010792c:	83 c4 10             	add    $0x10,%esp
        }
        cpu_invplg(va);
c010792f:	83 ec 0c             	sub    $0xc,%esp
c0107932:	ff 75 0c             	push   0xc(%ebp)
c0107935:	e8 80 fa ff ff       	call   c01073ba <cpu_invplg>
c010793a:	83 c4 10             	add    $0x10,%esp
        //kprintf("%d ", l2_index);
        pt[l2_index] = NULL;
c010793d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107940:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107947:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010794a:	01 d0                	add    %edx,%eax
c010794c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0107952:	eb 01                	jmp    c0107955 <__vmm_unmap_unalloc+0xb0>
        return;
c0107954:	90                   	nop
    }
}
c0107955:	c9                   	leave  
c0107956:	c3                   	ret    

c0107957 <vmm_unmap_page>:

void vmm_unmap_page(pid_t pid, void* va)
{
c0107957:	55                   	push   %ebp
c0107958:	89 e5                	mov    %esp,%ebp
c010795a:	83 ec 08             	sub    $0x8,%esp
    __vmm_unmap_unalloc(pid, va, true);
c010795d:	83 ec 04             	sub    $0x4,%esp
c0107960:	6a 01                	push   $0x1
c0107962:	ff 75 0c             	push   0xc(%ebp)
c0107965:	ff 75 08             	push   0x8(%ebp)
c0107968:	e8 38 ff ff ff       	call   c01078a5 <__vmm_unmap_unalloc>
c010796d:	83 c4 10             	add    $0x10,%esp
}
c0107970:	90                   	nop
c0107971:	c9                   	leave  
c0107972:	c3                   	ret    

c0107973 <vmm_unset_mapping>:

void vmm_unset_mapping(void* va)
{
c0107973:	55                   	push   %ebp
c0107974:	89 e5                	mov    %esp,%ebp
c0107976:	83 ec 08             	sub    $0x8,%esp
    __vmm_unmap_unalloc(0, va, false);
c0107979:	83 ec 04             	sub    $0x4,%esp
c010797c:	6a 00                	push   $0x0
c010797e:	ff 75 08             	push   0x8(%ebp)
c0107981:	6a 00                	push   $0x0
c0107983:	e8 1d ff ff ff       	call   c01078a5 <__vmm_unmap_unalloc>
c0107988:	83 c4 10             	add    $0x10,%esp
}
c010798b:	90                   	nop
c010798c:	c9                   	leave  
c010798d:	c3                   	ret    

c010798e <vmm_lookup>:

v_mapping vmm_lookup(void* va)
{
c010798e:	55                   	push   %ebp
c010798f:	89 e5                	mov    %esp,%ebp
c0107991:	83 ec 28             	sub    $0x28,%esp
    assert(((uintptr_t)va & 0xFFFU) == 0);
c0107994:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107997:	25 ff 0f 00 00       	and    $0xfff,%eax
c010799c:	85 c0                	test   %eax,%eax
c010799e:	74 1a                	je     c01079ba <vmm_lookup+0x2c>
c01079a0:	83 ec 04             	sub    $0x4,%esp
c01079a3:	68 87 01 00 00       	push   $0x187
c01079a8:	68 87 d2 d0 c0       	push   $0xc0d0d287
c01079ad:	68 a0 d2 d0 c0       	push   $0xc0d0d2a0
c01079b2:	e8 92 16 00 00       	call   c0109049 <__assert_fail>
c01079b7:	83 c4 10             	add    $0x10,%esp

    uint32_t l1_index = PD_INDEX(va);
c01079ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079bd:	c1 e8 16             	shr    $0x16,%eax
c01079c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c01079c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079c6:	c1 e8 0c             	shr    $0xc,%eax
c01079c9:	25 ff 03 00 00       	and    $0x3ff,%eax
c01079ce:	89 45 f0             	mov    %eax,-0x10(%ebp)

    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01079d1:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    v_mapping mapping = { .flags = 0, .pa = 0, .pn = 0 };
c01079d8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c01079df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01079e6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01079ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    if (ptd[l1_index]) {
c01079f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01079fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a01:	01 d0                	add    %edx,%eax
c0107a03:	8b 00                	mov    (%eax),%eax
c0107a05:	85 c0                	test   %eax,%eax
c0107a07:	74 49                	je     c0107a52 <vmm_lookup+0xc4>
        //pt_t* pt = (uintptr_t)PT_VADDR(l1_index);
        pt_t* l2pte = &(((pt_t*)PT_VADDR(l1_index))[l2_index]);
c0107a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a16:	c1 e0 0c             	shl    $0xc,%eax
c0107a19:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107a1e:	01 d0                	add    %edx,%eax
c0107a20:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //pt_t* l2pte = &pt[l2_index];
        if (l2pte) {
c0107a23:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107a27:	74 29                	je     c0107a52 <vmm_lookup+0xc4>
            mapping.flags = PG_ENTRY_FLAGS(*l2pte);
c0107a29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a2c:	8b 00                	mov    (%eax),%eax
c0107a2e:	66 25 ff 0f          	and    $0xfff,%ax
c0107a32:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
            mapping.pa = PG_ENTRY_ADDR(*l2pte);
c0107a36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a39:	8b 00                	mov    (%eax),%eax
c0107a3b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107a40:	89 45 dc             	mov    %eax,-0x24(%ebp)
            mapping.pn = mapping.pa >> PG_SIZE_BITS;
c0107a43:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a46:	c1 e8 0c             	shr    $0xc,%eax
c0107a49:	89 45 d8             	mov    %eax,-0x28(%ebp)
            mapping.pte = l2pte;
c0107a4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
    }

    return mapping;
c0107a52:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a55:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107a58:	89 10                	mov    %edx,(%eax)
c0107a5a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a5d:	89 50 04             	mov    %edx,0x4(%eax)
c0107a60:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a63:	89 50 08             	mov    %edx,0x8(%eax)
c0107a66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a69:	89 50 0c             	mov    %edx,0xc(%eax)
}
c0107a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a6f:	c9                   	leave  
c0107a70:	c2 04 00             	ret    $0x4

c0107a73 <vmm_v2p>:

void* vmm_v2p(void* va)
{
c0107a73:	55                   	push   %ebp
c0107a74:	89 e5                	mov    %esp,%ebp
c0107a76:	83 ec 18             	sub    $0x18,%esp
    return (void*)vmm_lookup(va).pa;
c0107a79:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107a7c:	83 ec 08             	sub    $0x8,%esp
c0107a7f:	ff 75 08             	push   0x8(%ebp)
c0107a82:	50                   	push   %eax
c0107a83:	e8 06 ff ff ff       	call   c010798e <vmm_lookup>
c0107a88:	83 c4 0c             	add    $0xc,%esp
c0107a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0107a8e:	c9                   	leave  
c0107a8f:	c3                   	ret    

c0107a90 <vmm_dup_page>:

void* vmm_dup_page(pid_t pid, void* pa)
{
c0107a90:	55                   	push   %ebp
c0107a91:	89 e5                	mov    %esp,%ebp
c0107a93:	57                   	push   %edi
c0107a94:	56                   	push   %esi
c0107a95:	53                   	push   %ebx
c0107a96:	83 ec 1c             	sub    $0x1c,%esp
    void* new_ppg = pmm_alloc_page(pid, 0);
c0107a99:	83 ec 08             	sub    $0x8,%esp
c0107a9c:	6a 00                	push   $0x0
c0107a9e:	ff 75 08             	push   0x8(%ebp)
c0107aa1:	e8 cc ed ff ff       	call   c0106872 <pmm_alloc_page>
c0107aa6:	83 c4 10             	add    $0x10,%esp
c0107aa9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    vmm_cover_map_page(pid, PG_MOUNT_3, new_ppg, PG_PREM_RW,PG_PREM_RW);
c0107aac:	83 ec 0c             	sub    $0xc,%esp
c0107aaf:	6a 03                	push   $0x3
c0107ab1:	6a 03                	push   $0x3
c0107ab3:	ff 75 e4             	push   -0x1c(%ebp)
c0107ab6:	68 00 d0 7f af       	push   $0xaf7fd000
c0107abb:	ff 75 08             	push   0x8(%ebp)
c0107abe:	e8 00 fc ff ff       	call   c01076c3 <vmm_cover_map_page>
c0107ac3:	83 c4 20             	add    $0x20,%esp
    vmm_cover_map_page(pid, PG_MOUNT_4, pa, PG_PREM_RW,PG_PREM_RW);
c0107ac6:	83 ec 0c             	sub    $0xc,%esp
c0107ac9:	6a 03                	push   $0x3
c0107acb:	6a 03                	push   $0x3
c0107acd:	ff 75 0c             	push   0xc(%ebp)
c0107ad0:	68 00 c0 7f af       	push   $0xaf7fc000
c0107ad5:	ff 75 08             	push   0x8(%ebp)
c0107ad8:	e8 e6 fb ff ff       	call   c01076c3 <vmm_cover_map_page>
c0107add:	83 c4 20             	add    $0x20,%esp

    asm volatile (
c0107ae0:	b8 00 04 00 00       	mov    $0x400,%eax
c0107ae5:	ba 00 d0 7f af       	mov    $0xaf7fd000,%edx
c0107aea:	bb 00 c0 7f af       	mov    $0xaf7fc000,%ebx
c0107aef:	89 c1                	mov    %eax,%ecx
c0107af1:	89 d7                	mov    %edx,%edi
c0107af3:	89 de                	mov    %ebx,%esi
c0107af5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        "movl %2, %%esi\n"
        "rep movsl\n"
        :: "c"(1024), "r"(PG_MOUNT_3), "r"(PG_MOUNT_4)
        : "memory", "%edi", "%esi");

    vmm_unset_mapping(PG_MOUNT_3);
c0107af7:	83 ec 0c             	sub    $0xc,%esp
c0107afa:	68 00 d0 7f af       	push   $0xaf7fd000
c0107aff:	e8 6f fe ff ff       	call   c0107973 <vmm_unset_mapping>
c0107b04:	83 c4 10             	add    $0x10,%esp
    vmm_unset_mapping(PG_MOUNT_4);
c0107b07:	83 ec 0c             	sub    $0xc,%esp
c0107b0a:	68 00 c0 7f af       	push   $0xaf7fc000
c0107b0f:	e8 5f fe ff ff       	call   c0107973 <vmm_unset_mapping>
c0107b14:	83 c4 10             	add    $0x10,%esp

    return new_ppg;
c0107b17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0107b1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107b1d:	5b                   	pop    %ebx
c0107b1e:	5e                   	pop    %esi
c0107b1f:	5f                   	pop    %edi
c0107b20:	5d                   	pop    %ebp
c0107b21:	c3                   	ret    

c0107b22 <vmm_mount_pd>:

void* vmm_mount_pd(uintptr_t mnt, void* pde)
{
c0107b22:	55                   	push   %ebp
c0107b23:	89 e5                	mov    %esp,%ebp
c0107b25:	83 ec 10             	sub    $0x10,%esp
    ptd_t* l1pt = (ptd_t*)PTD_BASE_VADDR;
c0107b28:	c7 45 fc 00 f0 ff ff 	movl   $0xfffff000,-0x4(%ebp)
    l1pt[(mnt >> 22)] = PDE(T_SELF_REF_PERM, pde);
c0107b2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107b37:	89 c2                	mov    %eax,%edx
c0107b39:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b3c:	c1 e8 16             	shr    $0x16,%eax
c0107b3f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0107b46:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b49:	01 c8                	add    %ecx,%eax
c0107b4b:	83 ca 1b             	or     $0x1b,%edx
c0107b4e:	89 10                	mov    %edx,(%eax)
    cpu_invplg(mnt);
c0107b50:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b53:	50                   	push   %eax
c0107b54:	e8 61 f8 ff ff       	call   c01073ba <cpu_invplg>
c0107b59:	83 c4 04             	add    $0x4,%esp
    return mnt;
c0107b5c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0107b5f:	c9                   	leave  
c0107b60:	c3                   	ret    

c0107b61 <vmm_unmount_pd>:

void* vmm_unmount_pd(uintptr_t mnt)
{
c0107b61:	55                   	push   %ebp
c0107b62:	89 e5                	mov    %esp,%ebp
c0107b64:	83 ec 10             	sub    $0x10,%esp
    ptd_t* l1pt = (ptd_t*)PTD_BASE_VADDR;
c0107b67:	c7 45 fc 00 f0 ff ff 	movl   $0xfffff000,-0x4(%ebp)
    l1pt[(mnt >> 22)] = 0;
c0107b6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b71:	c1 e8 16             	shr    $0x16,%eax
c0107b74:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b7e:	01 d0                	add    %edx,%eax
c0107b80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    cpu_invplg(mnt);
c0107b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b89:	50                   	push   %eax
c0107b8a:	e8 2b f8 ff ff       	call   c01073ba <cpu_invplg>
c0107b8f:	83 c4 04             	add    $0x4,%esp
}
c0107b92:	90                   	nop
c0107b93:	c9                   	leave  
c0107b94:	c3                   	ret    

c0107b95 <io_outb>:
                 : "memory", "cc");
}

static inline void
io_outb(int port, uint8_t data)
{
c0107b95:	55                   	push   %ebp
c0107b96:	89 e5                	mov    %esp,%ebp
c0107b98:	83 ec 04             	sub    $0x4,%esp
c0107b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b9e:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0107ba1:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107ba5:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ba8:	ee                   	out    %al,(%dx)
}
c0107ba9:	90                   	nop
c0107baa:	c9                   	leave  
c0107bab:	c3                   	ret    

c0107bac <frequence_set>:
uint32_t sched_ticks;
void do_intr_time_handler(isr_param int_param);

static void frequence_set(uint8_t counter_port, uint8_t counter_no, 
                         uint8_t rwl, uint8_t counter_mode, uint16_t counter_value)
{
c0107bac:	55                   	push   %ebp
c0107bad:	89 e5                	mov    %esp,%ebp
c0107baf:	57                   	push   %edi
c0107bb0:	56                   	push   %esi
c0107bb1:	53                   	push   %ebx
c0107bb2:	83 ec 14             	sub    $0x14,%esp
c0107bb5:	8b 75 08             	mov    0x8(%ebp),%esi
c0107bb8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0107bbb:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0107bbe:	8b 55 14             	mov    0x14(%ebp),%edx
c0107bc1:	8b 7d 18             	mov    0x18(%ebp),%edi
c0107bc4:	89 f0                	mov    %esi,%eax
c0107bc6:	88 45 f0             	mov    %al,-0x10(%ebp)
c0107bc9:	88 5d ec             	mov    %bl,-0x14(%ebp)
c0107bcc:	88 4d e8             	mov    %cl,-0x18(%ebp)
c0107bcf:	88 55 e4             	mov    %dl,-0x1c(%ebp)
c0107bd2:	89 f8                	mov    %edi,%eax
c0107bd4:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    io_outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0107bd8:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0107bdc:	c1 e0 06             	shl    $0x6,%eax
c0107bdf:	89 c2                	mov    %eax,%edx
c0107be1:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0107be5:	c1 e0 04             	shl    $0x4,%eax
c0107be8:	09 c2                	or     %eax,%edx
c0107bea:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0107bee:	01 c0                	add    %eax,%eax
c0107bf0:	09 d0                	or     %edx,%eax
c0107bf2:	0f b6 c0             	movzbl %al,%eax
c0107bf5:	50                   	push   %eax
c0107bf6:	6a 43                	push   $0x43
c0107bf8:	e8 98 ff ff ff       	call   c0107b95 <io_outb>
c0107bfd:	83 c4 08             	add    $0x8,%esp
    io_outb(counter_port, (uint8_t)counter_value);
c0107c00:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0107c04:	0f b6 d0             	movzbl %al,%edx
c0107c07:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0107c0b:	52                   	push   %edx
c0107c0c:	50                   	push   %eax
c0107c0d:	e8 83 ff ff ff       	call   c0107b95 <io_outb>
c0107c12:	83 c4 08             	add    $0x8,%esp
    io_outb(counter_port, (uint8_t)(counter_value >> 8));
c0107c15:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0107c19:	66 c1 e8 08          	shr    $0x8,%ax
c0107c1d:	0f b6 d0             	movzbl %al,%edx
c0107c20:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0107c24:	52                   	push   %edx
c0107c25:	50                   	push   %eax
c0107c26:	e8 6a ff ff ff       	call   c0107b95 <io_outb>
c0107c2b:	83 c4 08             	add    $0x8,%esp
}
c0107c2e:	90                   	nop
c0107c2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107c32:	5b                   	pop    %ebx
c0107c33:	5e                   	pop    %esi
c0107c34:	5f                   	pop    %edi
c0107c35:	5d                   	pop    %ebp
c0107c36:	c3                   	ret    

c0107c37 <timer_init>:

void timer_init(){
c0107c37:	55                   	push   %ebp
c0107c38:	89 e5                	mov    %esp,%ebp
c0107c3a:	83 ec 08             	sub    $0x8,%esp
    ticks = 0;
c0107c3d:	c7 05 f0 a0 d0 c0 00 	movl   $0x0,0xc0d0a0f0
c0107c44:	00 00 00 
    kprintf("timer intr start\n");
c0107c47:	83 ec 0c             	sub    $0xc,%esp
c0107c4a:	68 be d2 d0 c0       	push   $0xc0d0d2be
c0107c4f:	e8 7b 1f 00 00       	call   c0109bcf <kprintf>
c0107c54:	83 c4 10             	add    $0x10,%esp
    frequence_set(CURRENTR0_PORT, CURRENTR0_NO, READ_WRITE_LATCH, CURRENTR_MODE, CURRENTR0_VALUE);
c0107c57:	83 ec 0c             	sub    $0xc,%esp
c0107c5a:	68 9b 2e 00 00       	push   $0x2e9b
c0107c5f:	6a 02                	push   $0x2
c0107c61:	6a 03                	push   $0x3
c0107c63:	6a 00                	push   $0x0
c0107c65:	6a 40                	push   $0x40
c0107c67:	e8 40 ff ff ff       	call   c0107bac <frequence_set>
c0107c6c:	83 c4 20             	add    $0x20,%esp
    _set_idt_entry(HARDWARE_TIME_INT, 0x08, &intr_time_handler, 0);
c0107c6f:	6a 00                	push   $0x0
c0107c71:	68 b7 82 10 c0       	push   $0xc01082b7
c0107c76:	6a 08                	push   $0x8
c0107c78:	6a 20                	push   $0x20
c0107c7a:	e8 eb 0a 00 00       	call   c010876a <_set_idt_entry>
c0107c7f:	83 c4 10             	add    $0x10,%esp
    intr_subscribe(MELOX_SYS_CALL, do_intr_time_handler);
c0107c82:	83 ec 08             	sub    $0x8,%esp
c0107c85:	68 ab 7c 10 c0       	push   $0xc0107cab
c0107c8a:	68 80 00 00 00       	push   $0x80
c0107c8f:	e8 ff 02 00 00       	call   c0107f93 <intr_subscribe>
c0107c94:	83 c4 10             	add    $0x10,%esp
    kprintf("timer init down\n");
c0107c97:	83 ec 0c             	sub    $0xc,%esp
c0107c9a:	68 d0 d2 d0 c0       	push   $0xc0d0d2d0
c0107c9f:	e8 2b 1f 00 00       	call   c0109bcf <kprintf>
c0107ca4:	83 c4 10             	add    $0x10,%esp
    asm("sti");
c0107ca7:	fb                   	sti    
}
c0107ca8:	90                   	nop
c0107ca9:	c9                   	leave  
c0107caa:	c3                   	ret    

c0107cab <do_intr_time_handler>:

void do_intr_time_handler(isr_param int_param)
{
c0107cab:	55                   	push   %ebp
c0107cac:	89 e5                	mov    %esp,%ebp
c0107cae:	83 ec 08             	sub    $0x8,%esp
    ticks++;
c0107cb1:	a1 f0 a0 d0 c0       	mov    0xc0d0a0f0,%eax
c0107cb6:	83 c0 01             	add    $0x1,%eax
c0107cb9:	a3 f0 a0 d0 c0       	mov    %eax,0xc0d0a0f0
    __current->intr_contxt = int_param;
c0107cbe:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107cc3:	8b 55 08             	mov    0x8(%ebp),%edx
c0107cc6:	89 50 08             	mov    %edx,0x8(%eax)
c0107cc9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ccc:	89 50 0c             	mov    %edx,0xc(%eax)
c0107ccf:	8b 55 10             	mov    0x10(%ebp),%edx
c0107cd2:	89 50 10             	mov    %edx,0x10(%eax)
c0107cd5:	8b 55 14             	mov    0x14(%ebp),%edx
c0107cd8:	89 50 14             	mov    %edx,0x14(%eax)
c0107cdb:	8b 55 18             	mov    0x18(%ebp),%edx
c0107cde:	89 50 18             	mov    %edx,0x18(%eax)
c0107ce1:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0107ce4:	89 50 1c             	mov    %edx,0x1c(%eax)
c0107ce7:	8b 55 20             	mov    0x20(%ebp),%edx
c0107cea:	89 50 20             	mov    %edx,0x20(%eax)
c0107ced:	8b 55 24             	mov    0x24(%ebp),%edx
c0107cf0:	89 50 24             	mov    %edx,0x24(%eax)
c0107cf3:	8b 55 28             	mov    0x28(%ebp),%edx
c0107cf6:	89 50 28             	mov    %edx,0x28(%eax)
c0107cf9:	8b 55 2c             	mov    0x2c(%ebp),%edx
c0107cfc:	89 50 2c             	mov    %edx,0x2c(%eax)
c0107cff:	8b 55 30             	mov    0x30(%ebp),%edx
c0107d02:	89 50 30             	mov    %edx,0x30(%eax)
c0107d05:	8b 55 34             	mov    0x34(%ebp),%edx
c0107d08:	89 50 34             	mov    %edx,0x34(%eax)
c0107d0b:	8b 55 38             	mov    0x38(%ebp),%edx
c0107d0e:	89 50 38             	mov    %edx,0x38(%eax)
c0107d11:	8b 55 3c             	mov    0x3c(%ebp),%edx
c0107d14:	89 50 3c             	mov    %edx,0x3c(%eax)
c0107d17:	8b 55 40             	mov    0x40(%ebp),%edx
c0107d1a:	89 50 40             	mov    %edx,0x40(%eax)
    if(__current->pro_ticks == 0)
c0107d1d:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107d22:	8b 40 5c             	mov    0x5c(%eax),%eax
c0107d25:	85 c0                	test   %eax,%eax
c0107d27:	75 07                	jne    c0107d30 <do_intr_time_handler+0x85>
        schedule();
c0107d29:	e8 f4 1a 00 00       	call   c0109822 <schedule>
    else
        __current->pro_ticks--;
c0107d2e:	eb 0e                	jmp    c0107d3e <do_intr_time_handler+0x93>
        __current->pro_ticks--;
c0107d30:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107d35:	8b 50 5c             	mov    0x5c(%eax),%edx
c0107d38:	83 ea 01             	sub    $0x1,%edx
c0107d3b:	89 50 5c             	mov    %edx,0x5c(%eax)
c0107d3e:	90                   	nop
c0107d3f:	c9                   	leave  
c0107d40:	c3                   	ret    

c0107d41 <syscall>:
void
syscall_install();

static void*
syscall(unsigned int callcode)
{
c0107d41:	55                   	push   %ebp
c0107d42:	89 e5                	mov    %esp,%ebp
c0107d44:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0107d45:	8b 55 08             	mov    0x8(%ebp),%edx
c0107d48:	89 d7                	mov    %edx,%edi
c0107d4a:	cd 80                	int    $0x80
}
c0107d4c:	90                   	nop
c0107d4d:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0107d50:	c9                   	leave  
c0107d51:	c3                   	ret    

c0107d52 <fork>:
#include <syscall/syscall.h>
#include <stdint.h>

typedef int32_t pid_t;

__MXSYSCALL(pid_t, fork)
c0107d52:	55                   	push   %ebp
c0107d53:	89 e5                	mov    %esp,%ebp
c0107d55:	83 ec 10             	sub    $0x10,%esp
c0107d58:	b8 01 00 00 00       	mov    $0x1,%eax
c0107d5d:	cd 80                	int    $0x80
c0107d5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107d62:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d65:	c9                   	leave  
c0107d66:	c3                   	ret    

c0107d67 <getpid>:

// __MXSYSCALL1(int, sbrk, void*, addr)

// __MXSYSCALL1(void*, brk, unsigned long, size)

__MXSYSCALL(pid_t, getpid)
c0107d67:	55                   	push   %ebp
c0107d68:	89 e5                	mov    %esp,%ebp
c0107d6a:	83 ec 10             	sub    $0x10,%esp
c0107d6d:	b8 02 00 00 00       	mov    $0x2,%eax
c0107d72:	cd 80                	int    $0x80
c0107d74:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107d77:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d7a:	c9                   	leave  
c0107d7b:	c3                   	ret    

c0107d7c <getppid>:

__MXSYSCALL(pid_t, getppid)
c0107d7c:	55                   	push   %ebp
c0107d7d:	89 e5                	mov    %esp,%ebp
c0107d7f:	83 ec 10             	sub    $0x10,%esp
c0107d82:	b8 03 00 00 00       	mov    $0x3,%eax
c0107d87:	cd 80                	int    $0x80
c0107d89:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107d8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d8f:	c9                   	leave  
c0107d90:	c3                   	ret    

c0107d91 <_exit>:

__MXSYSCALL1(void, _exit, int, status)
c0107d91:	55                   	push   %ebp
c0107d92:	89 e5                	mov    %esp,%ebp
c0107d94:	53                   	push   %ebx
c0107d95:	83 ec 10             	sub    $0x10,%esp
c0107d98:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d9b:	89 c3                	mov    %eax,%ebx
c0107d9d:	b8 04 00 00 00       	mov    $0x4,%eax
c0107da2:	cd 80                	int    $0x80
c0107da4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107da7:	90                   	nop
c0107da8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107dab:	c9                   	leave  
c0107dac:	c3                   	ret    

c0107dad <__proc0>:
#include <syscall/meloxstd.h>
extern void __init_phykernel_end;
void init_platform();
extern void _mxinit_main(); /* mxinit.c */
void __proc0()
{
c0107dad:	55                   	push   %ebp
c0107dae:	89 e5                	mov    %esp,%ebp
c0107db0:	83 ec 08             	sub    $0x8,%esp
    init_platform();
c0107db3:	e8 33 00 00 00       	call   c0107deb <init_platform>
    kprintf("This is proc0!");
c0107db8:	83 ec 0c             	sub    $0xc,%esp
c0107dbb:	68 e4 d2 d0 c0       	push   $0xc0d0d2e4
c0107dc0:	e8 0a 1e 00 00       	call   c0109bcf <kprintf>
c0107dc5:	83 c4 10             	add    $0x10,%esp
    if (!fork()) {
c0107dc8:	e8 85 ff ff ff       	call   c0107d52 <fork>
c0107dcd:	85 c0                	test   %eax,%eax
c0107dcf:	75 15                	jne    c0107de6 <__proc0+0x39>
        kprintf("fork sucess!");
c0107dd1:	83 ec 0c             	sub    $0xc,%esp
c0107dd4:	68 f3 d2 d0 c0       	push   $0xc0d0d2f3
c0107dd9:	e8 f1 1d 00 00       	call   c0109bcf <kprintf>
c0107dde:	83 c4 10             	add    $0x10,%esp
        asm("jmp _mxinit_main");
c0107de1:	e9 e8 00 00 00       	jmp    c0107ece <_mxinit_main>
    }

    asm("1: jmp 1b");
c0107de6:	eb fe                	jmp    c0107de6 <__proc0+0x39>
}
c0107de8:	90                   	nop
c0107de9:	c9                   	leave  
c0107dea:	c3                   	ret    

c0107deb <init_platform>:

void init_platform()
{
c0107deb:	55                   	push   %ebp
c0107dec:	89 e5                	mov    %esp,%ebp
c0107dee:	83 ec 18             	sub    $0x18,%esp
    size_t virk_init_pg_count = ((uintptr_t)(&__init_phykernel_end)) >> 12;
c0107df1:	b8 00 60 10 00       	mov    $0x106000,%eax
c0107df6:	c1 e8 0c             	shr    $0xc,%eax
c0107df9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //init malloc
    mem_init();
c0107dfc:	e8 da ef ff ff       	call   c0106ddb <mem_init>
    //
    kprintf("[MM] Releaseing %d pages from 0x0.\n", virk_init_pg_count);
c0107e01:	83 ec 08             	sub    $0x8,%esp
c0107e04:	ff 75 f0             	push   -0x10(%ebp)
c0107e07:	68 00 d3 d0 c0       	push   $0xc0d0d300
c0107e0c:	e8 be 1d 00 00       	call   c0109bcf <kprintf>
c0107e11:	83 c4 10             	add    $0x10,%esp
    timer_init();
c0107e14:	e8 1e fe ff ff       	call   c0107c37 <timer_init>
    init_keyboard();
c0107e19:	e8 d3 0e 00 00       	call   c0108cf1 <init_keyboard>

    syscall_install();
c0107e1e:	e8 cc 11 00 00       	call   c0108fef <syscall_install>
    // 清除 hhk_init 与前1MiB的映射
    for (size_t i = 0; i < virk_init_pg_count; i++) {
c0107e23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107e2a:	eb 18                	jmp    c0107e44 <init_platform+0x59>

        vmm_unmap_page(KERNEL_PID, (i << 12));
c0107e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e2f:	c1 e0 0c             	shl    $0xc,%eax
c0107e32:	83 ec 08             	sub    $0x8,%esp
c0107e35:	50                   	push   %eax
c0107e36:	6a ff                	push   $0xffffffff
c0107e38:	e8 1a fb ff ff       	call   c0107957 <vmm_unmap_page>
c0107e3d:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < virk_init_pg_count; i++) {
c0107e40:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e47:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107e4a:	72 e0                	jb     c0107e2c <init_platform+0x41>
    }
    kprintf("[MM] Releaseing %d pages from 0x0.\n", virk_init_pg_count);
c0107e4c:	83 ec 08             	sub    $0x8,%esp
c0107e4f:	ff 75 f0             	push   -0x10(%ebp)
c0107e52:	68 00 d3 d0 c0       	push   $0xc0d0d300
c0107e57:	e8 73 1d 00 00       	call   c0109bcf <kprintf>
c0107e5c:	83 c4 10             	add    $0x10,%esp
c0107e5f:	90                   	nop
c0107e60:	c9                   	leave  
c0107e61:	c3                   	ret    

c0107e62 <syscall>:
{
c0107e62:	55                   	push   %ebp
c0107e63:	89 e5                	mov    %esp,%ebp
c0107e65:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0107e66:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e69:	89 d7                	mov    %edx,%edi
c0107e6b:	cd 80                	int    $0x80
}
c0107e6d:	90                   	nop
c0107e6e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0107e71:	c9                   	leave  
c0107e72:	c3                   	ret    

c0107e73 <fork>:
__MXSYSCALL(pid_t, fork)
c0107e73:	55                   	push   %ebp
c0107e74:	89 e5                	mov    %esp,%ebp
c0107e76:	83 ec 10             	sub    $0x10,%esp
c0107e79:	b8 01 00 00 00       	mov    $0x1,%eax
c0107e7e:	cd 80                	int    $0x80
c0107e80:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107e83:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e86:	c9                   	leave  
c0107e87:	c3                   	ret    

c0107e88 <getpid>:
__MXSYSCALL(pid_t, getpid)
c0107e88:	55                   	push   %ebp
c0107e89:	89 e5                	mov    %esp,%ebp
c0107e8b:	83 ec 10             	sub    $0x10,%esp
c0107e8e:	b8 02 00 00 00       	mov    $0x2,%eax
c0107e93:	cd 80                	int    $0x80
c0107e95:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107e98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e9b:	c9                   	leave  
c0107e9c:	c3                   	ret    

c0107e9d <getppid>:
__MXSYSCALL(pid_t, getppid)
c0107e9d:	55                   	push   %ebp
c0107e9e:	89 e5                	mov    %esp,%ebp
c0107ea0:	83 ec 10             	sub    $0x10,%esp
c0107ea3:	b8 03 00 00 00       	mov    $0x3,%eax
c0107ea8:	cd 80                	int    $0x80
c0107eaa:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107ead:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107eb0:	c9                   	leave  
c0107eb1:	c3                   	ret    

c0107eb2 <_exit>:
__MXSYSCALL1(void, _exit, int, status)
c0107eb2:	55                   	push   %ebp
c0107eb3:	89 e5                	mov    %esp,%ebp
c0107eb5:	53                   	push   %ebx
c0107eb6:	83 ec 10             	sub    $0x10,%esp
c0107eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ebc:	89 c3                	mov    %eax,%ebx
c0107ebe:	b8 04 00 00 00       	mov    $0x4,%eax
c0107ec3:	cd 80                	int    $0x80
c0107ec5:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107ec8:	90                   	nop
c0107ec9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107ecc:	c9                   	leave  
c0107ecd:	c3                   	ret    

c0107ece <_mxinit_main>:
#include <kernel/process/sched.h>
#include <syscall/meloxstd.h>
#include <syscall/syscall.h>

void _mxinit_main()
{
c0107ece:	55                   	push   %ebp
c0107ecf:	89 e5                	mov    %esp,%ebp
c0107ed1:	83 ec 58             	sub    $0x58,%esp
    pid_t child = wait(&status);
    kprintf(
      "I am parent, my child (%d) terminated with code: %d.\n", child, status);
#endif

    for(int i = 0; i < 10000; i++);
c0107ed4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107edb:	eb 04                	jmp    c0107ee1 <_mxinit_main+0x13>
c0107edd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107ee1:	81 7d f4 0f 27 00 00 	cmpl   $0x270f,-0xc(%ebp)
c0107ee8:	7e f3                	jle    c0107edd <_mxinit_main+0xf>

    for (size_t i = 0; i < 10; i++) {
c0107eea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0107ef1:	e9 81 00 00 00       	jmp    c0107f77 <_mxinit_main+0xa9>
        pid_t pid = 0;
c0107ef6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
        if (!(pid = fork())) {
c0107efd:	e8 71 ff ff ff       	call   c0107e73 <fork>
c0107f02:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107f05:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107f09:	75 55                	jne    c0107f60 <_mxinit_main+0x92>
            for(int i = 0; i < 10000; i++);
c0107f0b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107f12:	eb 04                	jmp    c0107f18 <_mxinit_main+0x4a>
c0107f14:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107f18:	81 7d ec 0f 27 00 00 	cmpl   $0x270f,-0x14(%ebp)
c0107f1f:	7e f3                	jle    c0107f14 <_mxinit_main+0x46>
            if (i == 3) {
c0107f21:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
c0107f25:	75 0a                	jne    c0107f31 <_mxinit_main+0x63>
                i = *(int*)0xdeadc0de; // seg fault!
c0107f27:	b8 de c0 ad de       	mov    $0xdeadc0de,%eax
c0107f2c:	8b 00                	mov    (%eax),%eax
c0107f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }
            vga_put_char('0' + i);
c0107f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f34:	83 c0 30             	add    $0x30,%eax
c0107f37:	0f be c0             	movsbl %al,%eax
c0107f3a:	83 ec 0c             	sub    $0xc,%esp
c0107f3d:	50                   	push   %eax
c0107f3e:	e8 db e0 ff ff       	call   c010601e <vga_put_char>
c0107f43:	83 c4 10             	add    $0x10,%esp
            vga_put_char('\n');
c0107f46:	83 ec 0c             	sub    $0xc,%esp
c0107f49:	6a 0a                	push   $0xa
c0107f4b:	e8 ce e0 ff ff       	call   c010601e <vga_put_char>
c0107f50:	83 c4 10             	add    $0x10,%esp
            _exit(0);
c0107f53:	83 ec 0c             	sub    $0xc,%esp
c0107f56:	6a 00                	push   $0x0
c0107f58:	e8 55 ff ff ff       	call   c0107eb2 <_exit>
c0107f5d:	83 c4 10             	add    $0x10,%esp
        }
        kprintf("Forked %d\n", pid);
c0107f60:	83 ec 08             	sub    $0x8,%esp
c0107f63:	ff 75 e8             	push   -0x18(%ebp)
c0107f66:	68 24 d3 d0 c0       	push   $0xc0d0d324
c0107f6b:	e8 5f 1c 00 00       	call   c0109bcf <kprintf>
c0107f70:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < 10; i++) {
c0107f73:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0107f77:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
c0107f7b:	0f 86 75 ff ff ff    	jbe    c0107ef6 <_mxinit_main+0x28>
    }

    char buf[64];

    kprintf("Hello processes!\n");
c0107f81:	83 ec 0c             	sub    $0xc,%esp
c0107f84:	68 2f d3 d0 c0       	push   $0xc0d0d32f
c0107f89:	e8 41 1c 00 00       	call   c0109bcf <kprintf>
c0107f8e:	83 c4 10             	add    $0x10,%esp

    while(1);
c0107f91:	eb fe                	jmp    c0107f91 <_mxinit_main+0xc3>

c0107f93 <intr_subscribe>:
#include <kernel/process/peocess.h>
#include <kernel/cpu/io.h>

static int_subscriber subscribers[256];

void intr_subscribe(const uint8_t vector, int_subscriber subscriber) {
c0107f93:	55                   	push   %ebp
c0107f94:	89 e5                	mov    %esp,%ebp
c0107f96:	83 ec 04             	sub    $0x4,%esp
c0107f99:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f9c:	88 45 fc             	mov    %al,-0x4(%ebp)
    subscribers[vector] = subscriber;
c0107f9f:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107fa3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107fa6:	89 14 85 00 a1 d0 c0 	mov    %edx,-0x3f2f5f00(,%eax,4)
}
c0107fad:	90                   	nop
c0107fae:	c9                   	leave  
c0107faf:	c3                   	ret    

c0107fb0 <intr_unsubscribe>:

void intr_unsubscribe(const uint8_t vector, int_subscriber subscriber) {
c0107fb0:	55                   	push   %ebp
c0107fb1:	89 e5                	mov    %esp,%ebp
c0107fb3:	83 ec 04             	sub    $0x4,%esp
c0107fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fb9:	88 45 fc             	mov    %al,-0x4(%ebp)
    if (subscribers[vector] == subscriber) {
c0107fbc:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107fc0:	8b 04 85 00 a1 d0 c0 	mov    -0x3f2f5f00(,%eax,4),%eax
c0107fc7:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0107fca:	75 0f                	jne    c0107fdb <intr_unsubscribe+0x2b>
        subscribers[vector] = (int_subscriber) 0;
c0107fcc:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107fd0:	c7 04 85 00 a1 d0 c0 	movl   $0x0,-0x3f2f5f00(,%eax,4)
c0107fd7:	00 00 00 00 
    }
}
c0107fdb:	90                   	nop
c0107fdc:	c9                   	leave  
c0107fdd:	c3                   	ret    

c0107fde <intr_handler>:

void intr_handler(isr_param* param)
{
c0107fde:	55                   	push   %ebp
c0107fdf:	89 e5                	mov    %esp,%ebp
c0107fe1:	53                   	push   %ebx
c0107fe2:	83 ec 14             	sub    $0x14,%esp
	__current->intr_contxt = *param;
c0107fe5:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107fea:	8b 55 08             	mov    0x8(%ebp),%edx
c0107fed:	8b 0a                	mov    (%edx),%ecx
c0107fef:	89 48 08             	mov    %ecx,0x8(%eax)
c0107ff2:	8b 4a 04             	mov    0x4(%edx),%ecx
c0107ff5:	89 48 0c             	mov    %ecx,0xc(%eax)
c0107ff8:	8b 4a 08             	mov    0x8(%edx),%ecx
c0107ffb:	89 48 10             	mov    %ecx,0x10(%eax)
c0107ffe:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0108001:	89 48 14             	mov    %ecx,0x14(%eax)
c0108004:	8b 4a 10             	mov    0x10(%edx),%ecx
c0108007:	89 48 18             	mov    %ecx,0x18(%eax)
c010800a:	8b 4a 14             	mov    0x14(%edx),%ecx
c010800d:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0108010:	8b 4a 18             	mov    0x18(%edx),%ecx
c0108013:	89 48 20             	mov    %ecx,0x20(%eax)
c0108016:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0108019:	89 48 24             	mov    %ecx,0x24(%eax)
c010801c:	8b 4a 20             	mov    0x20(%edx),%ecx
c010801f:	89 48 28             	mov    %ecx,0x28(%eax)
c0108022:	8b 4a 24             	mov    0x24(%edx),%ecx
c0108025:	89 48 2c             	mov    %ecx,0x2c(%eax)
c0108028:	8b 4a 28             	mov    0x28(%edx),%ecx
c010802b:	89 48 30             	mov    %ecx,0x30(%eax)
c010802e:	8b 4a 2c             	mov    0x2c(%edx),%ecx
c0108031:	89 48 34             	mov    %ecx,0x34(%eax)
c0108034:	8b 4a 30             	mov    0x30(%edx),%ecx
c0108037:	89 48 38             	mov    %ecx,0x38(%eax)
c010803a:	8b 4a 34             	mov    0x34(%edx),%ecx
c010803d:	89 48 3c             	mov    %ecx,0x3c(%eax)
c0108040:	8b 52 38             	mov    0x38(%edx),%edx
c0108043:	89 50 40             	mov    %edx,0x40(%eax)
    cpu_lcr3(__kernel_ptd);

    vmm_mount_pd(PD_MOUNT_1, __current->page_table);
#endif

    isr_param *lparam = &__current->intr_contxt;
c0108046:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010804b:	83 c0 08             	add    $0x8,%eax
c010804e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (lparam->vector <= 255) {
c0108051:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108054:	8b 40 20             	mov    0x20(%eax),%eax
c0108057:	3d ff 00 00 00       	cmp    $0xff,%eax
c010805c:	77 26                	ja     c0108084 <intr_handler+0xa6>
        int_subscriber subscriber = subscribers[lparam->vector];
c010805e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108061:	8b 40 20             	mov    0x20(%eax),%eax
c0108064:	8b 04 85 00 a1 d0 c0 	mov    -0x3f2f5f00(,%eax,4),%eax
c010806b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (subscriber) {
c010806e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108072:	74 10                	je     c0108084 <intr_handler+0xa6>
            subscriber(param);
c0108074:	83 ec 0c             	sub    $0xc,%esp
c0108077:	ff 75 08             	push   0x8(%ebp)
c010807a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010807d:	ff d0                	call   *%eax
c010807f:	83 c4 10             	add    $0x10,%esp
            goto done;
c0108082:	eb 2c                	jmp    c01080b0 <intr_handler+0xd2>
    // if (fallback) {
    //     fallback(lparam);
    //     goto done;
    // }
    
    kprintf("INT %x: (%x) [%x: %x] Unknown",
c0108084:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108087:	8b 58 28             	mov    0x28(%eax),%ebx
c010808a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808d:	8b 48 2c             	mov    0x2c(%eax),%ecx
c0108090:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108093:	8b 50 24             	mov    0x24(%eax),%edx
c0108096:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108099:	8b 40 20             	mov    0x20(%eax),%eax
c010809c:	83 ec 0c             	sub    $0xc,%esp
c010809f:	53                   	push   %ebx
c01080a0:	51                   	push   %ecx
c01080a1:	52                   	push   %edx
c01080a2:	50                   	push   %eax
c01080a3:	68 44 d3 d0 c0       	push   $0xc0d0d344
c01080a8:	e8 22 1b 00 00       	call   c0109bcf <kprintf>
c01080ad:	83 c4 20             	add    $0x20,%esp
	// }

#ifdef USE_KERNEL_PT
    cpu_lcr3(__current->page_table);
#endif
    return;
c01080b0:	90                   	nop
}
c01080b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01080b4:	c9                   	leave  
c01080b5:	c3                   	ret    

c01080b6 <_divide_err>:

void _divide_err(unsigned long addr, int err_code)
{
c01080b6:	55                   	push   %ebp
c01080b7:	89 e5                	mov    %esp,%ebp
c01080b9:	83 ec 08             	sub    $0x8,%esp
    vga_set_show(1,VGA_COLOR_BLACK,VGA_COLOR_BLUE);
c01080bc:	83 ec 04             	sub    $0x4,%esp
c01080bf:	6a 01                	push   $0x1
c01080c1:	6a 00                	push   $0x0
c01080c3:	6a 01                	push   $0x1
c01080c5:	e8 0a e0 ff ff       	call   c01060d4 <vga_set_show>
c01080ca:	83 c4 10             	add    $0x10,%esp
    kprintf("divide err addr = 0x%x,err code = %d\n", addr,err_code);
c01080cd:	83 ec 04             	sub    $0x4,%esp
c01080d0:	ff 75 0c             	push   0xc(%ebp)
c01080d3:	ff 75 08             	push   0x8(%ebp)
c01080d6:	68 64 d3 d0 c0       	push   $0xc0d0d364
c01080db:	e8 ef 1a 00 00       	call   c0109bcf <kprintf>
c01080e0:	83 c4 10             	add    $0x10,%esp
}
c01080e3:	90                   	nop
c01080e4:	c9                   	leave  
c01080e5:	c3                   	ret    

c01080e6 <do_double_fault>:

void do_double_fault(unsigned long addr, int err_code)
{
c01080e6:	55                   	push   %ebp
c01080e7:	89 e5                	mov    %esp,%ebp
c01080e9:	83 ec 08             	sub    $0x8,%esp
	kprintf("double_fault addr = 0x%x,err code = %d\n", addr,err_code);
c01080ec:	83 ec 04             	sub    $0x4,%esp
c01080ef:	ff 75 0c             	push   0xc(%ebp)
c01080f2:	ff 75 08             	push   0x8(%ebp)
c01080f5:	68 8c d3 d0 c0       	push   $0xc0d0d38c
c01080fa:	e8 d0 1a 00 00       	call   c0109bcf <kprintf>
c01080ff:	83 c4 10             	add    $0x10,%esp
}
c0108102:	90                   	nop
c0108103:	c9                   	leave  
c0108104:	c3                   	ret    

c0108105 <do_general_protection>:

void do_general_protection(unsigned long addr, int err_code)
{
c0108105:	55                   	push   %ebp
c0108106:	89 e5                	mov    %esp,%ebp
c0108108:	83 ec 08             	sub    $0x8,%esp
	kprintf("general_protection addr = 0x%x,err code = %d\n", addr,err_code);
c010810b:	83 ec 04             	sub    $0x4,%esp
c010810e:	ff 75 0c             	push   0xc(%ebp)
c0108111:	ff 75 08             	push   0x8(%ebp)
c0108114:	68 b4 d3 d0 c0       	push   $0xc0d0d3b4
c0108119:	e8 b1 1a 00 00       	call   c0109bcf <kprintf>
c010811e:	83 c4 10             	add    $0x10,%esp
}
c0108121:	90                   	nop
c0108122:	c9                   	leave  
c0108123:	c3                   	ret    

c0108124 <do_int3>:


void do_int3(unsigned long addr, int err_code)
{
c0108124:	55                   	push   %ebp
c0108125:	89 e5                	mov    %esp,%ebp
c0108127:	83 ec 08             	sub    $0x8,%esp
    kprintf("int3 addr = 0x%x,err code = %d\n", addr,err_code);
c010812a:	83 ec 04             	sub    $0x4,%esp
c010812d:	ff 75 0c             	push   0xc(%ebp)
c0108130:	ff 75 08             	push   0x8(%ebp)
c0108133:	68 e4 d3 d0 c0       	push   $0xc0d0d3e4
c0108138:	e8 92 1a 00 00       	call   c0109bcf <kprintf>
c010813d:	83 c4 10             	add    $0x10,%esp
}
c0108140:	90                   	nop
c0108141:	c9                   	leave  
c0108142:	c3                   	ret    

c0108143 <do_nmi>:

void do_nmi(unsigned long addr, int err_code)
{
c0108143:	55                   	push   %ebp
c0108144:	89 e5                	mov    %esp,%ebp
c0108146:	83 ec 08             	sub    $0x8,%esp
	kprintf("nmi addr = 0x%x,err code = %d\n", addr,err_code);
c0108149:	83 ec 04             	sub    $0x4,%esp
c010814c:	ff 75 0c             	push   0xc(%ebp)
c010814f:	ff 75 08             	push   0x8(%ebp)
c0108152:	68 04 d4 d0 c0       	push   $0xc0d0d404
c0108157:	e8 73 1a 00 00       	call   c0109bcf <kprintf>
c010815c:	83 c4 10             	add    $0x10,%esp
}
c010815f:	90                   	nop
c0108160:	c9                   	leave  
c0108161:	c3                   	ret    

c0108162 <do_debug>:

void do_debug(unsigned long addr, int err_code)
{
c0108162:	55                   	push   %ebp
c0108163:	89 e5                	mov    %esp,%ebp
c0108165:	83 ec 08             	sub    $0x8,%esp
	kprintf("debug addr = 0x%x,err code = %d\n", addr,err_code);
c0108168:	83 ec 04             	sub    $0x4,%esp
c010816b:	ff 75 0c             	push   0xc(%ebp)
c010816e:	ff 75 08             	push   0x8(%ebp)
c0108171:	68 24 d4 d0 c0       	push   $0xc0d0d424
c0108176:	e8 54 1a 00 00       	call   c0109bcf <kprintf>
c010817b:	83 c4 10             	add    $0x10,%esp
}
c010817e:	90                   	nop
c010817f:	c9                   	leave  
c0108180:	c3                   	ret    

c0108181 <do_overflow>:

void do_overflow(unsigned long addr, int err_code)
{
c0108181:	55                   	push   %ebp
c0108182:	89 e5                	mov    %esp,%ebp
c0108184:	83 ec 08             	sub    $0x8,%esp
	kprintf("overflow addr = 0x%x,err code = %d\n", addr,err_code);
c0108187:	83 ec 04             	sub    $0x4,%esp
c010818a:	ff 75 0c             	push   0xc(%ebp)
c010818d:	ff 75 08             	push   0x8(%ebp)
c0108190:	68 48 d4 d0 c0       	push   $0xc0d0d448
c0108195:	e8 35 1a 00 00       	call   c0109bcf <kprintf>
c010819a:	83 c4 10             	add    $0x10,%esp
}
c010819d:	90                   	nop
c010819e:	c9                   	leave  
c010819f:	c3                   	ret    

c01081a0 <do_bounds>:

void do_bounds(unsigned long addr, int err_code)
{
c01081a0:	55                   	push   %ebp
c01081a1:	89 e5                	mov    %esp,%ebp
c01081a3:	83 ec 08             	sub    $0x8,%esp
	kprintf("bounds addr = 0x%x,err code = %d\n", addr,err_code);
c01081a6:	83 ec 04             	sub    $0x4,%esp
c01081a9:	ff 75 0c             	push   0xc(%ebp)
c01081ac:	ff 75 08             	push   0x8(%ebp)
c01081af:	68 6c d4 d0 c0       	push   $0xc0d0d46c
c01081b4:	e8 16 1a 00 00       	call   c0109bcf <kprintf>
c01081b9:	83 c4 10             	add    $0x10,%esp
}
c01081bc:	90                   	nop
c01081bd:	c9                   	leave  
c01081be:	c3                   	ret    

c01081bf <do_invalid_op>:

void do_invalid_op(unsigned long addr, int err_code)
{
c01081bf:	55                   	push   %ebp
c01081c0:	89 e5                	mov    %esp,%ebp
c01081c2:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_op addr = 0x%x,err code = %d\n", addr,err_code);
c01081c5:	83 ec 04             	sub    $0x4,%esp
c01081c8:	ff 75 0c             	push   0xc(%ebp)
c01081cb:	ff 75 08             	push   0x8(%ebp)
c01081ce:	68 90 d4 d0 c0       	push   $0xc0d0d490
c01081d3:	e8 f7 19 00 00       	call   c0109bcf <kprintf>
c01081d8:	83 c4 10             	add    $0x10,%esp
}
c01081db:	90                   	nop
c01081dc:	c9                   	leave  
c01081dd:	c3                   	ret    

c01081de <do_device_not_available>:

void do_device_not_available(unsigned long addr, int err_code)
{
c01081de:	55                   	push   %ebp
c01081df:	89 e5                	mov    %esp,%ebp
c01081e1:	83 ec 08             	sub    $0x8,%esp
	kprintf("device_not_availabel addr = 0x%x,err code = %d\n", addr,err_code);
c01081e4:	83 ec 04             	sub    $0x4,%esp
c01081e7:	ff 75 0c             	push   0xc(%ebp)
c01081ea:	ff 75 08             	push   0x8(%ebp)
c01081ed:	68 b8 d4 d0 c0       	push   $0xc0d0d4b8
c01081f2:	e8 d8 19 00 00       	call   c0109bcf <kprintf>
c01081f7:	83 c4 10             	add    $0x10,%esp
}
c01081fa:	90                   	nop
c01081fb:	c9                   	leave  
c01081fc:	c3                   	ret    

c01081fd <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(unsigned long addr, int err_code)
{
c01081fd:	55                   	push   %ebp
c01081fe:	89 e5                	mov    %esp,%ebp
c0108200:	83 ec 08             	sub    $0x8,%esp
	kprintf("coprprocessor_segment_overrun addr = 0x%x,err code = %d\n", addr,err_code);
c0108203:	83 ec 04             	sub    $0x4,%esp
c0108206:	ff 75 0c             	push   0xc(%ebp)
c0108209:	ff 75 08             	push   0x8(%ebp)
c010820c:	68 e8 d4 d0 c0       	push   $0xc0d0d4e8
c0108211:	e8 b9 19 00 00       	call   c0109bcf <kprintf>
c0108216:	83 c4 10             	add    $0x10,%esp
}
c0108219:	90                   	nop
c010821a:	c9                   	leave  
c010821b:	c3                   	ret    

c010821c <do_invalid_TSS>:

void do_invalid_TSS(unsigned long addr, int err_code)
{
c010821c:	55                   	push   %ebp
c010821d:	89 e5                	mov    %esp,%ebp
c010821f:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_TSS addr = 0x%x,err code = %d\n", addr,err_code);
c0108222:	83 ec 04             	sub    $0x4,%esp
c0108225:	ff 75 0c             	push   0xc(%ebp)
c0108228:	ff 75 08             	push   0x8(%ebp)
c010822b:	68 24 d5 d0 c0       	push   $0xc0d0d524
c0108230:	e8 9a 19 00 00       	call   c0109bcf <kprintf>
c0108235:	83 c4 10             	add    $0x10,%esp
}
c0108238:	90                   	nop
c0108239:	c9                   	leave  
c010823a:	c3                   	ret    

c010823b <do_segment_not_present>:

void do_segment_not_present(unsigned long addr, int err_code)
{
c010823b:	55                   	push   %ebp
c010823c:	89 e5                	mov    %esp,%ebp
c010823e:	83 ec 08             	sub    $0x8,%esp
	kprintf("segment not present addr = 0x%x,err code = %d\n", addr,err_code);
c0108241:	83 ec 04             	sub    $0x4,%esp
c0108244:	ff 75 0c             	push   0xc(%ebp)
c0108247:	ff 75 08             	push   0x8(%ebp)
c010824a:	68 4c d5 d0 c0       	push   $0xc0d0d54c
c010824f:	e8 7b 19 00 00       	call   c0109bcf <kprintf>
c0108254:	83 c4 10             	add    $0x10,%esp
}
c0108257:	90                   	nop
c0108258:	c9                   	leave  
c0108259:	c3                   	ret    

c010825a <do_stack_segment>:

void do_stack_segment(unsigned long addr, int err_code)
{
c010825a:	55                   	push   %ebp
c010825b:	89 e5                	mov    %esp,%ebp
c010825d:	83 ec 08             	sub    $0x8,%esp
	kprintf("stack_segment addr = 0x%x,err code = %d\n", addr,err_code);
c0108260:	83 ec 04             	sub    $0x4,%esp
c0108263:	ff 75 0c             	push   0xc(%ebp)
c0108266:	ff 75 08             	push   0x8(%ebp)
c0108269:	68 7c d5 d0 c0       	push   $0xc0d0d57c
c010826e:	e8 5c 19 00 00       	call   c0109bcf <kprintf>
c0108273:	83 c4 10             	add    $0x10,%esp
}
c0108276:	90                   	nop
c0108277:	c9                   	leave  
c0108278:	c3                   	ret    

c0108279 <do_coprocessor_error>:

void do_coprocessor_error(unsigned long addr, int err_code)
{
c0108279:	55                   	push   %ebp
c010827a:	89 e5                	mov    %esp,%ebp
c010827c:	83 ec 08             	sub    $0x8,%esp
    kprintf("coprocessor_err addr = 0x%x,err code = %d\n", addr,err_code);
c010827f:	83 ec 04             	sub    $0x4,%esp
c0108282:	ff 75 0c             	push   0xc(%ebp)
c0108285:	ff 75 08             	push   0x8(%ebp)
c0108288:	68 a8 d5 d0 c0       	push   $0xc0d0d5a8
c010828d:	e8 3d 19 00 00       	call   c0109bcf <kprintf>
c0108292:	83 c4 10             	add    $0x10,%esp
}
c0108295:	90                   	nop
c0108296:	c9                   	leave  
c0108297:	c3                   	ret    

c0108298 <do_reserved>:

void do_reserved(unsigned long addr, int err_code)
{
c0108298:	55                   	push   %ebp
c0108299:	89 e5                	mov    %esp,%ebp
c010829b:	83 ec 08             	sub    $0x8,%esp
	kprintf("reserved addr = 0x%x,err code = %d\n", addr,err_code);
c010829e:	83 ec 04             	sub    $0x4,%esp
c01082a1:	ff 75 0c             	push   0xc(%ebp)
c01082a4:	ff 75 08             	push   0x8(%ebp)
c01082a7:	68 d4 d5 d0 c0       	push   $0xc0d0d5d4
c01082ac:	e8 1e 19 00 00       	call   c0109bcf <kprintf>
c01082b1:	83 c4 10             	add    $0x10,%esp
}
c01082b4:	90                   	nop
c01082b5:	c9                   	leave  
c01082b6:	c3                   	ret    

c01082b7 <intr_time_handler>:
c01082b7:	6a 00                	push   $0x0
c01082b9:	6a 20                	push   $0x20
c01082bb:	eb 09                	jmp    c01082c6 <interrupt_wrapper>

c01082bd <intr_syscall_handler>:
c01082bd:	6a 00                	push   $0x0
c01082bf:	68 80 00 00 00       	push   $0x80
c01082c4:	eb 00                	jmp    c01082c6 <interrupt_wrapper>

c01082c6 <interrupt_wrapper>:
c01082c6:	54                   	push   %esp
c01082c7:	56                   	push   %esi
c01082c8:	55                   	push   %ebp
c01082c9:	57                   	push   %edi
c01082ca:	52                   	push   %edx
c01082cb:	51                   	push   %ecx
c01082cc:	53                   	push   %ebx
c01082cd:	50                   	push   %eax
c01082ce:	89 e0                	mov    %esp,%eax
c01082d0:	83 e4 f0             	and    $0xfffffff0,%esp
c01082d3:	83 ec 10             	sub    $0x10,%esp
c01082d6:	89 04 24             	mov    %eax,(%esp)
c01082d9:	e8 00 fd ff ff       	call   c0107fde <intr_handler>

c01082de <soft_iret>:
c01082de:	5c                   	pop    %esp
c01082df:	58                   	pop    %eax
c01082e0:	5b                   	pop    %ebx
c01082e1:	59                   	pop    %ecx
c01082e2:	5a                   	pop    %edx
c01082e3:	5f                   	pop    %edi
c01082e4:	5d                   	pop    %ebp
c01082e5:	5e                   	pop    %esi
c01082e6:	5c                   	pop    %esp
c01082e7:	83 c4 08             	add    $0x8,%esp
c01082ea:	cf                   	iret   

c01082eb <_no_err_code>:
c01082eb:	87 04 24             	xchg   %eax,(%esp)
c01082ee:	53                   	push   %ebx
c01082ef:	51                   	push   %ecx
c01082f0:	52                   	push   %edx
c01082f1:	57                   	push   %edi
c01082f2:	56                   	push   %esi
c01082f3:	55                   	push   %ebp
c01082f4:	1e                   	push   %ds
c01082f5:	06                   	push   %es
c01082f6:	0f a0                	push   %fs
c01082f8:	6a 00                	push   $0x0
c01082fa:	8d 54 24 2c          	lea    0x2c(%esp),%edx
c01082fe:	52                   	push   %edx
c01082ff:	ba 10 00 00 00       	mov    $0x10,%edx
c0108304:	8e da                	mov    %edx,%ds
c0108306:	8e c2                	mov    %edx,%es
c0108308:	8e e2                	mov    %edx,%fs
c010830a:	ff d0                	call   *%eax
c010830c:	83 c4 08             	add    $0x8,%esp
c010830f:	0f a1                	pop    %fs
c0108311:	07                   	pop    %es
c0108312:	1f                   	pop    %ds
c0108313:	5d                   	pop    %ebp
c0108314:	5e                   	pop    %esi
c0108315:	5f                   	pop    %edi
c0108316:	5a                   	pop    %edx
c0108317:	59                   	pop    %ecx
c0108318:	5b                   	pop    %ebx
c0108319:	58                   	pop    %eax
c010831a:	cf                   	iret   

c010831b <_err_code>:
c010831b:	87 44 24 04          	xchg   %eax,0x4(%esp)
c010831f:	87 1c 24             	xchg   %ebx,(%esp)
c0108322:	51                   	push   %ecx
c0108323:	52                   	push   %edx
c0108324:	57                   	push   %edi
c0108325:	56                   	push   %esi
c0108326:	55                   	push   %ebp
c0108327:	1e                   	push   %ds
c0108328:	06                   	push   %es
c0108329:	0f a0                	push   %fs
c010832b:	50                   	push   %eax
c010832c:	8d 44 24 2c          	lea    0x2c(%esp),%eax
c0108330:	50                   	push   %eax
c0108331:	b8 10 00 00 00       	mov    $0x10,%eax
c0108336:	8e d8                	mov    %eax,%ds
c0108338:	8e c0                	mov    %eax,%es
c010833a:	8e e0                	mov    %eax,%fs
c010833c:	ff d3                	call   *%ebx
c010833e:	83 c4 08             	add    $0x8,%esp
c0108341:	0f a1                	pop    %fs
c0108343:	07                   	pop    %es
c0108344:	1f                   	pop    %ds
c0108345:	5d                   	pop    %ebp
c0108346:	5e                   	pop    %esi
c0108347:	5f                   	pop    %edi
c0108348:	5a                   	pop    %edx
c0108349:	59                   	pop    %ecx
c010834a:	5b                   	pop    %ebx
c010834b:	58                   	pop    %eax
c010834c:	cf                   	iret   

c010834d <divide_error>:
c010834d:	68 b6 80 10 c0       	push   $0xc01080b6
c0108352:	eb 97                	jmp    c01082eb <_no_err_code>

c0108354 <debug>:
c0108354:	68 24 81 10 c0       	push   $0xc0108124
c0108359:	eb 90                	jmp    c01082eb <_no_err_code>

c010835b <nmi>:
c010835b:	68 43 81 10 c0       	push   $0xc0108143
c0108360:	eb 89                	jmp    c01082eb <_no_err_code>

c0108362 <int3>:
c0108362:	68 24 81 10 c0       	push   $0xc0108124
c0108367:	eb 82                	jmp    c01082eb <_no_err_code>

c0108369 <overflow>:
c0108369:	68 81 81 10 c0       	push   $0xc0108181
c010836e:	e9 78 ff ff ff       	jmp    c01082eb <_no_err_code>

c0108373 <bounds>:
c0108373:	68 a0 81 10 c0       	push   $0xc01081a0
c0108378:	e9 6e ff ff ff       	jmp    c01082eb <_no_err_code>

c010837d <invalid_op>:
c010837d:	68 bf 81 10 c0       	push   $0xc01081bf
c0108382:	e9 64 ff ff ff       	jmp    c01082eb <_no_err_code>

c0108387 <coprocessor_segment_overrun>:
c0108387:	68 fd 81 10 c0       	push   $0xc01081fd
c010838c:	e9 5a ff ff ff       	jmp    c01082eb <_no_err_code>

c0108391 <reserved>:
c0108391:	68 98 82 10 c0       	push   $0xc0108298
c0108396:	e9 50 ff ff ff       	jmp    c01082eb <_no_err_code>

c010839b <invalid_TSS>:
c010839b:	68 1c 82 10 c0       	push   $0xc010821c
c01083a0:	e9 76 ff ff ff       	jmp    c010831b <_err_code>

c01083a5 <segment_not_present>:
c01083a5:	68 3b 82 10 c0       	push   $0xc010823b
c01083aa:	e9 6c ff ff ff       	jmp    c010831b <_err_code>

c01083af <stack_segment>:
c01083af:	68 5a 82 10 c0       	push   $0xc010825a
c01083b4:	e9 62 ff ff ff       	jmp    c010831b <_err_code>

c01083b9 <general_protection>:
c01083b9:	68 05 81 10 c0       	push   $0xc0108105
c01083be:	e9 58 ff ff ff       	jmp    c010831b <_err_code>

c01083c3 <__get_cpuid_max>:
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
c01083c3:	55                   	push   %ebp
c01083c4:	89 e5                	mov    %esp,%ebp
c01083c6:	53                   	push   %ebx
c01083c7:	83 ec 10             	sub    $0x10,%esp
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
c01083ca:	9c                   	pushf  
c01083cb:	9c                   	pushf  
c01083cc:	5a                   	pop    %edx
c01083cd:	89 d0                	mov    %edx,%eax
c01083cf:	81 f2 00 00 20 00    	xor    $0x200000,%edx
c01083d5:	52                   	push   %edx
c01083d6:	9d                   	popf   
c01083d7:	9c                   	pushf  
c01083d8:	5a                   	pop    %edx
c01083d9:	9d                   	popf   
c01083da:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01083dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
c01083e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01083e3:	33 45 f4             	xor    -0xc(%ebp),%eax
c01083e6:	25 00 00 20 00       	and    $0x200000,%eax
c01083eb:	85 c0                	test   %eax,%eax
c01083ed:	75 07                	jne    c01083f6 <__get_cpuid_max+0x33>
    return 0;
c01083ef:	b8 00 00 00 00       	mov    $0x0,%eax
c01083f4:	eb 30                	jmp    c0108426 <__get_cpuid_max+0x63>
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
c01083f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01083f9:	b9 00 00 00 00       	mov    $0x0,%ecx
c01083fe:	ba 00 00 00 00       	mov    $0x0,%edx
c0108403:	89 cb                	mov    %ecx,%ebx
c0108405:	89 d1                	mov    %edx,%ecx
c0108407:	0f a2                	cpuid  
c0108409:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010840c:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c010840f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0108412:	89 55 ec             	mov    %edx,-0x14(%ebp)

  if (__sig)
c0108415:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108419:	74 08                	je     c0108423 <__get_cpuid_max+0x60>
    *__sig = __ebx;
c010841b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010841e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108421:	89 10                	mov    %edx,(%eax)

  return __eax;
c0108423:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0108426:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0108429:	c9                   	leave  
c010842a:	c3                   	ret    

c010842b <__get_cpuid>:

static __inline int
__get_cpuid (unsigned int __leaf,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
c010842b:	55                   	push   %ebp
c010842c:	89 e5                	mov    %esp,%ebp
c010842e:	56                   	push   %esi
c010842f:	53                   	push   %ebx
c0108430:	83 ec 10             	sub    $0x10,%esp
  unsigned int __ext = __leaf & 0x80000000;
c0108433:	8b 45 08             	mov    0x8(%ebp),%eax
c0108436:	25 00 00 00 80       	and    $0x80000000,%eax
c010843b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  unsigned int __maxlevel = __get_cpuid_max (__ext, 0);
c010843e:	6a 00                	push   $0x0
c0108440:	ff 75 f4             	push   -0xc(%ebp)
c0108443:	e8 7b ff ff ff       	call   c01083c3 <__get_cpuid_max>
c0108448:	83 c4 08             	add    $0x8,%esp
c010844b:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (__maxlevel == 0 || __maxlevel < __leaf)
c010844e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108452:	74 08                	je     c010845c <__get_cpuid+0x31>
c0108454:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108457:	3b 45 08             	cmp    0x8(%ebp),%eax
c010845a:	73 07                	jae    c0108463 <__get_cpuid+0x38>
    return 0;
c010845c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108461:	eb 2c                	jmp    c010848f <__get_cpuid+0x64>

  __cpuid (__leaf, *__eax, *__ebx, *__ecx, *__edx);
c0108463:	8b 45 08             	mov    0x8(%ebp),%eax
c0108466:	b9 00 00 00 00       	mov    $0x0,%ecx
c010846b:	ba 00 00 00 00       	mov    $0x0,%edx
c0108470:	89 cb                	mov    %ecx,%ebx
c0108472:	89 d1                	mov    %edx,%ecx
c0108474:	0f a2                	cpuid  
c0108476:	8b 75 0c             	mov    0xc(%ebp),%esi
c0108479:	89 06                	mov    %eax,(%esi)
c010847b:	8b 45 10             	mov    0x10(%ebp),%eax
c010847e:	89 18                	mov    %ebx,(%eax)
c0108480:	8b 45 14             	mov    0x14(%ebp),%eax
c0108483:	89 08                	mov    %ecx,(%eax)
c0108485:	8b 45 18             	mov    0x18(%ebp),%eax
c0108488:	89 10                	mov    %edx,(%eax)
  return 1;
c010848a:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010848f:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0108492:	5b                   	pop    %ebx
c0108493:	5e                   	pop    %esi
c0108494:	5d                   	pop    %ebp
c0108495:	c3                   	ret    

c0108496 <cpu_get_model>:
#include <kernel/cpu/cpu.h>
#include <stdint.h>
#include <cpuid.h>

void cpu_get_model(char* model_out) {
c0108496:	55                   	push   %ebp
c0108497:	89 e5                	mov    %esp,%ebp
c0108499:	83 ec 20             	sub    $0x20,%esp
    uint32_t* out = (uint32_t*)model_out;
c010849c:	8b 45 08             	mov    0x8(%ebp),%eax
c010849f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    reg32 eax, ebx, edx, ecx;
    
    __get_cpuid(0, &eax, &ebx, &ecx, &edx);
c01084a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01084a5:	50                   	push   %eax
c01084a6:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01084a9:	50                   	push   %eax
c01084aa:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01084ad:	50                   	push   %eax
c01084ae:	8d 45 f8             	lea    -0x8(%ebp),%eax
c01084b1:	50                   	push   %eax
c01084b2:	6a 00                	push   $0x0
c01084b4:	e8 72 ff ff ff       	call   c010842b <__get_cpuid>
c01084b9:	83 c4 14             	add    $0x14,%esp

    out[0] = ebx;
c01084bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01084c2:	89 10                	mov    %edx,(%eax)
    out[1] = edx;
c01084c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01084c7:	8d 50 04             	lea    0x4(%eax),%edx
c01084ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084cd:	89 02                	mov    %eax,(%edx)
    out[2] = ecx;
c01084cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01084d2:	8d 50 08             	lea    0x8(%eax),%edx
c01084d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084d8:	89 02                	mov    %eax,(%edx)
    model_out[12] = '\0';
c01084da:	8b 45 08             	mov    0x8(%ebp),%eax
c01084dd:	83 c0 0c             	add    $0xc,%eax
c01084e0:	c6 00 00             	movb   $0x0,(%eax)
}
c01084e3:	90                   	nop
c01084e4:	c9                   	leave  
c01084e5:	c3                   	ret    

c01084e6 <cpu_brand_string_supported>:

#define BRAND_LEAF 0x80000000UL

int cpu_brand_string_supported() {
c01084e6:	55                   	push   %ebp
c01084e7:	89 e5                	mov    %esp,%ebp
c01084e9:	83 ec 10             	sub    $0x10,%esp
    reg32 supported = __get_cpuid_max(BRAND_LEAF, 0);
c01084ec:	6a 00                	push   $0x0
c01084ee:	68 00 00 00 80       	push   $0x80000000
c01084f3:	e8 cb fe ff ff       	call   c01083c3 <__get_cpuid_max>
c01084f8:	83 c4 08             	add    $0x8,%esp
c01084fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (supported >= 0x80000004UL);
c01084fe:	81 7d fc 03 00 00 80 	cmpl   $0x80000003,-0x4(%ebp)
c0108505:	0f 97 c0             	seta   %al
c0108508:	0f b6 c0             	movzbl %al,%eax
}
c010850b:	c9                   	leave  
c010850c:	c3                   	ret    

c010850d <cpu_get_brand>:

void cpu_get_brand(char* brand_out) {
c010850d:	55                   	push   %ebp
c010850e:	89 e5                	mov    %esp,%ebp
c0108510:	83 ec 20             	sub    $0x20,%esp
    if(!cpu_brand_string_supported()) {
c0108513:	e8 ce ff ff ff       	call   c01084e6 <cpu_brand_string_supported>
c0108518:	85 c0                	test   %eax,%eax
c010851a:	75 0f                	jne    c010852b <cpu_get_brand+0x1e>
        brand_out[0] = '?';
c010851c:	8b 45 08             	mov    0x8(%ebp),%eax
c010851f:	c6 00 3f             	movb   $0x3f,(%eax)
        brand_out[1] = '\0';
c0108522:	8b 45 08             	mov    0x8(%ebp),%eax
c0108525:	83 c0 01             	add    $0x1,%eax
c0108528:	c6 00 00             	movb   $0x0,(%eax)
    }
    uint32_t* out = (uint32_t*) brand_out;
c010852b:	8b 45 08             	mov    0x8(%ebp),%eax
c010852e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    reg32 eax, ebx, edx, ecx;
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0108531:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
c0108538:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010853f:	e9 83 00 00 00       	jmp    c01085c7 <cpu_get_brand+0xba>
    {
        __get_cpuid(BRAND_LEAF + i, &eax, &ebx, &ecx, &edx);
c0108544:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108547:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
c010854d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0108550:	50                   	push   %eax
c0108551:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0108554:	50                   	push   %eax
c0108555:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108558:	50                   	push   %eax
c0108559:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010855c:	50                   	push   %eax
c010855d:	52                   	push   %edx
c010855e:	e8 c8 fe ff ff       	call   c010842b <__get_cpuid>
c0108563:	83 c4 14             	add    $0x14,%esp
        out[j] = eax;
c0108566:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108569:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108573:	01 c2                	add    %eax,%edx
c0108575:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108578:	89 02                	mov    %eax,(%edx)
        out[j + 1] = ebx;
c010857a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010857d:	83 c0 01             	add    $0x1,%eax
c0108580:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108587:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010858a:	01 c2                	add    %eax,%edx
c010858c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010858f:	89 02                	mov    %eax,(%edx)
        out[j + 2] = ecx;
c0108591:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108594:	83 c0 02             	add    $0x2,%eax
c0108597:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010859e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085a1:	01 c2                	add    %eax,%edx
c01085a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085a6:	89 02                	mov    %eax,(%edx)
        out[j + 3] = edx;
c01085a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01085ab:	83 c0 03             	add    $0x3,%eax
c01085ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01085b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b8:	01 c2                	add    %eax,%edx
c01085ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085bd:	89 02                	mov    %eax,(%edx)
        j+=4;
c01085bf:	83 45 f8 04          	addl   $0x4,-0x8(%ebp)
    for (uint32_t i = 2, j = 0; i < 5; i++)
c01085c3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01085c7:	83 7d fc 04          	cmpl   $0x4,-0x4(%ebp)
c01085cb:	0f 86 73 ff ff ff    	jbe    c0108544 <cpu_get_brand+0x37>
    }
    brand_out[48] = '\0';
c01085d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01085d4:	83 c0 30             	add    $0x30,%eax
c01085d7:	c6 00 00             	movb   $0x0,(%eax)
}
c01085da:	90                   	nop
c01085db:	c9                   	leave  
c01085dc:	c3                   	ret    

c01085dd <cpu_r_cr0>:

reg32 cpu_r_cr0() {
c01085dd:	55                   	push   %ebp
c01085de:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr0, %eax");
c01085e0:	0f 20 c0             	mov    %cr0,%eax
}
c01085e3:	90                   	nop
c01085e4:	5d                   	pop    %ebp
c01085e5:	c3                   	ret    

c01085e6 <cpu_r_cr2>:

reg32 cpu_r_cr2() {
c01085e6:	55                   	push   %ebp
c01085e7:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr2, %eax");
c01085e9:	0f 20 d0             	mov    %cr2,%eax
}
c01085ec:	90                   	nop
c01085ed:	5d                   	pop    %ebp
c01085ee:	c3                   	ret    

c01085ef <cpu_r_cr3>:

reg32 cpu_r_cr3() {
c01085ef:	55                   	push   %ebp
c01085f0:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr3, %eax");
c01085f2:	0f 20 d8             	mov    %cr3,%eax
}
c01085f5:	90                   	nop
c01085f6:	5d                   	pop    %ebp
c01085f7:	c3                   	ret    

c01085f8 <cpu_w_cr0>:

void cpu_w_cr0(reg32 v) {
c01085f8:	55                   	push   %ebp
c01085f9:	89 e5                	mov    %esp,%ebp
    asm volatile (
c01085fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01085fe:	0f 22 c0             	mov    %eax,%cr0
        "mov %0, %%cr0"
        :: "r"(v)
    );
}
c0108601:	90                   	nop
c0108602:	5d                   	pop    %ebp
c0108603:	c3                   	ret    

c0108604 <cpu_w_cr2>:

void cpu_w_cr2(reg32 v) {
c0108604:	55                   	push   %ebp
c0108605:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0108607:	8b 45 08             	mov    0x8(%ebp),%eax
c010860a:	0f 22 d0             	mov    %eax,%cr2
        "mov %0, %%cr2"
        :: "r"(v)
    );
}
c010860d:	90                   	nop
c010860e:	5d                   	pop    %ebp
c010860f:	c3                   	ret    

c0108610 <cpu_w_cr3>:

void cpu_w_cr3(reg32 v) {
c0108610:	55                   	push   %ebp
c0108611:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0108613:	8b 45 08             	mov    0x8(%ebp),%eax
c0108616:	0f 22 d8             	mov    %eax,%cr3
        "mov %0, %%cr3"
        :: "r"(v)
    );
}
c0108619:	90                   	nop
c010861a:	5d                   	pop    %ebp
c010861b:	c3                   	ret    

c010861c <_set_gdt_entry>:
uint64_t _gdt[GDT_ENTRY];
uint16_t _gdt_limit = sizeof(_gdt) - 1;

extern struct x86_tss _tss;

void _set_gdt_entry(uint32_t index, uint32_t base, uint32_t limit, uint32_t flags) {
c010861c:	55                   	push   %ebp
c010861d:	89 e5                	mov    %esp,%ebp
c010861f:	57                   	push   %edi
c0108620:	56                   	push   %esi
c0108621:	53                   	push   %ebx
c0108622:	83 ec 0c             	sub    $0xc,%esp
    _gdt[index] = SEG_BASE_H(base) | flags | SEG_LIM_H(limit) | SEG_BASE_M(base);
c0108625:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108628:	25 00 00 00 ff       	and    $0xff000000,%eax
c010862d:	0b 45 14             	or     0x14(%ebp),%eax
c0108630:	89 c2                	mov    %eax,%edx
c0108632:	8b 45 10             	mov    0x10(%ebp),%eax
c0108635:	25 00 00 0f 00       	and    $0xf0000,%eax
c010863a:	09 c2                	or     %eax,%edx
c010863c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010863f:	c1 e8 10             	shr    $0x10,%eax
c0108642:	0f b6 c0             	movzbl %al,%eax
c0108645:	09 d0                	or     %edx,%eax
c0108647:	ba 00 00 00 00       	mov    $0x0,%edx
c010864c:	8b 75 08             	mov    0x8(%ebp),%esi
c010864f:	89 04 f5 00 a5 d0 c0 	mov    %eax,-0x3f2f5b00(,%esi,8)
c0108656:	89 14 f5 04 a5 d0 c0 	mov    %edx,-0x3f2f5afc(,%esi,8)
    _gdt[index] <<= 32;
c010865d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108660:	8b 14 c5 04 a5 d0 c0 	mov    -0x3f2f5afc(,%eax,8),%edx
c0108667:	8b 04 c5 00 a5 d0 c0 	mov    -0x3f2f5b00(,%eax,8),%eax
c010866e:	89 c2                	mov    %eax,%edx
c0108670:	b8 00 00 00 00       	mov    $0x0,%eax
c0108675:	8b 75 08             	mov    0x8(%ebp),%esi
c0108678:	89 04 f5 00 a5 d0 c0 	mov    %eax,-0x3f2f5b00(,%esi,8)
c010867f:	89 14 f5 04 a5 d0 c0 	mov    %edx,-0x3f2f5afc(,%esi,8)
    _gdt[index] |= SEG_BASE_L(base) | SEG_LIM_L(limit);
c0108686:	8b 45 08             	mov    0x8(%ebp),%eax
c0108689:	8b 14 c5 04 a5 d0 c0 	mov    -0x3f2f5afc(,%eax,8),%edx
c0108690:	8b 04 c5 00 a5 d0 c0 	mov    -0x3f2f5b00(,%eax,8),%eax
c0108697:	8b 75 0c             	mov    0xc(%ebp),%esi
c010869a:	89 f7                	mov    %esi,%edi
c010869c:	c1 e7 10             	shl    $0x10,%edi
c010869f:	8b 75 10             	mov    0x10(%ebp),%esi
c01086a2:	0f b7 f6             	movzwl %si,%esi
c01086a5:	09 fe                	or     %edi,%esi
c01086a7:	bf 00 00 00 00       	mov    $0x0,%edi
c01086ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01086af:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01086b2:	09 f0                	or     %esi,%eax
c01086b4:	89 c1                	mov    %eax,%ecx
c01086b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086b9:	09 f8                	or     %edi,%eax
c01086bb:	89 c3                	mov    %eax,%ebx
c01086bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01086c0:	89 0c c5 00 a5 d0 c0 	mov    %ecx,-0x3f2f5b00(,%eax,8)
c01086c7:	89 1c c5 04 a5 d0 c0 	mov    %ebx,-0x3f2f5afc(,%eax,8)
}
c01086ce:	90                   	nop
c01086cf:	83 c4 0c             	add    $0xc,%esp
c01086d2:	5b                   	pop    %ebx
c01086d3:	5e                   	pop    %esi
c01086d4:	5f                   	pop    %edi
c01086d5:	5d                   	pop    %ebp
c01086d6:	c3                   	ret    

c01086d7 <_init_gdt>:
// 
void
_init_gdt() {
c01086d7:	55                   	push   %ebp
c01086d8:	89 e5                	mov    %esp,%ebp
    _set_gdt_entry(0, 0, 0, 0);
c01086da:	6a 00                	push   $0x0
c01086dc:	6a 00                	push   $0x0
c01086de:	6a 00                	push   $0x0
c01086e0:	6a 00                	push   $0x0
c01086e2:	e8 35 ff ff ff       	call   c010861c <_set_gdt_entry>
c01086e7:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(1, 0, 0xfffff, SEG_R0_CODE);
c01086ea:	68 00 9a c0 00       	push   $0xc09a00
c01086ef:	68 ff ff 0f 00       	push   $0xfffff
c01086f4:	6a 00                	push   $0x0
c01086f6:	6a 01                	push   $0x1
c01086f8:	e8 1f ff ff ff       	call   c010861c <_set_gdt_entry>
c01086fd:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(2, 0, 0xfffff, SEG_R0_DATA);
c0108700:	68 00 92 c0 00       	push   $0xc09200
c0108705:	68 ff ff 0f 00       	push   $0xfffff
c010870a:	6a 00                	push   $0x0
c010870c:	6a 02                	push   $0x2
c010870e:	e8 09 ff ff ff       	call   c010861c <_set_gdt_entry>
c0108713:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(3, 0, 0xfffff, SEG_R3_CODE);
c0108716:	68 00 fa c0 00       	push   $0xc0fa00
c010871b:	68 ff ff 0f 00       	push   $0xfffff
c0108720:	6a 00                	push   $0x0
c0108722:	6a 03                	push   $0x3
c0108724:	e8 f3 fe ff ff       	call   c010861c <_set_gdt_entry>
c0108729:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(4, 0, 0xfffff, SEG_R3_DATA);
c010872c:	68 00 f2 c0 00       	push   $0xc0f200
c0108731:	68 ff ff 0f 00       	push   $0xfffff
c0108736:	6a 00                	push   $0x0
c0108738:	6a 04                	push   $0x4
c010873a:	e8 dd fe ff ff       	call   c010861c <_set_gdt_entry>
c010873f:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(5, &_tss, sizeof(struct x86_tss) - 1, SEG_TSS);
c0108742:	b8 20 c0 d0 c0       	mov    $0xc0d0c020,%eax
c0108747:	68 00 89 00 00       	push   $0x8900
c010874c:	6a 67                	push   $0x67
c010874e:	50                   	push   %eax
c010874f:	6a 05                	push   $0x5
c0108751:	e8 c6 fe ff ff       	call   c010861c <_set_gdt_entry>
c0108756:	83 c4 10             	add    $0x10,%esp
c0108759:	90                   	nop
c010875a:	c9                   	leave  
c010875b:	c3                   	ret    

c010875c <tss_update_esp>:
    .esp0 = KSTACK_START,
    .ss0  = KDATA_SEG,
    .__padding = {0}
};

void tss_update_esp(uint32_t esp0) {
c010875c:	55                   	push   %ebp
c010875d:	89 e5                	mov    %esp,%ebp
    _tss.esp0 = esp0;
c010875f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108762:	a3 24 c0 d0 c0       	mov    %eax,0xc0d0c024
c0108767:	90                   	nop
c0108768:	5d                   	pop    %ebp
c0108769:	c3                   	ret    

c010876a <_set_idt_entry>:
#define IDT_ENTRY 256

uint64_t _idt[IDT_ENTRY];
uint16_t _idt_limit = sizeof(_idt) - 1;

void _set_idt_entry(uint32_t vector, uint16_t seg_selector, void (*isr)(), uint8_t dpl) {
c010876a:	55                   	push   %ebp
c010876b:	89 e5                	mov    %esp,%ebp
c010876d:	57                   	push   %edi
c010876e:	56                   	push   %esi
c010876f:	53                   	push   %ebx
c0108770:	83 ec 24             	sub    $0x24,%esp
c0108773:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108776:	8b 55 14             	mov    0x14(%ebp),%edx
c0108779:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c010877d:	89 d0                	mov    %edx,%eax
c010877f:	88 45 d8             	mov    %al,-0x28(%ebp)
    uintptr_t offset = (uintptr_t)isr;
c0108782:	8b 45 10             	mov    0x10(%ebp),%eax
c0108785:	89 45 ec             	mov    %eax,-0x14(%ebp)
    _idt[vector] = (offset & 0xffff0000) | IDT_ATTR(dpl);
c0108788:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010878b:	66 b8 00 00          	mov    $0x0,%ax
c010878f:	89 c2                	mov    %eax,%edx
c0108791:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0108795:	c1 e0 0d             	shl    $0xd,%eax
c0108798:	25 00 60 00 00       	and    $0x6000,%eax
c010879d:	09 d0                	or     %edx,%eax
c010879f:	80 cc 8e             	or     $0x8e,%ah
c01087a2:	ba 00 00 00 00       	mov    $0x0,%edx
c01087a7:	8b 75 08             	mov    0x8(%ebp),%esi
c01087aa:	89 04 f5 40 a5 d0 c0 	mov    %eax,-0x3f2f5ac0(,%esi,8)
c01087b1:	89 14 f5 44 a5 d0 c0 	mov    %edx,-0x3f2f5abc(,%esi,8)
    _idt[vector] <<= 32;
c01087b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01087bb:	8b 14 c5 44 a5 d0 c0 	mov    -0x3f2f5abc(,%eax,8),%edx
c01087c2:	8b 04 c5 40 a5 d0 c0 	mov    -0x3f2f5ac0(,%eax,8),%eax
c01087c9:	89 c2                	mov    %eax,%edx
c01087cb:	b8 00 00 00 00       	mov    $0x0,%eax
c01087d0:	8b 75 08             	mov    0x8(%ebp),%esi
c01087d3:	89 04 f5 40 a5 d0 c0 	mov    %eax,-0x3f2f5ac0(,%esi,8)
c01087da:	89 14 f5 44 a5 d0 c0 	mov    %edx,-0x3f2f5abc(,%esi,8)
    _idt[vector] |= (seg_selector << 16) | (offset & 0x0000ffff);
c01087e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01087e4:	8b 14 c5 44 a5 d0 c0 	mov    -0x3f2f5abc(,%eax,8),%edx
c01087eb:	8b 04 c5 40 a5 d0 c0 	mov    -0x3f2f5ac0(,%eax,8),%eax
c01087f2:	0f b7 75 dc          	movzwl -0x24(%ebp),%esi
c01087f6:	c1 e6 10             	shl    $0x10,%esi
c01087f9:	89 f7                	mov    %esi,%edi
c01087fb:	8b 75 ec             	mov    -0x14(%ebp),%esi
c01087fe:	0f b7 f6             	movzwl %si,%esi
c0108801:	09 fe                	or     %edi,%esi
c0108803:	bf 00 00 00 00       	mov    $0x0,%edi
c0108808:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010880b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010880e:	09 f0                	or     %esi,%eax
c0108810:	89 c1                	mov    %eax,%ecx
c0108812:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108815:	09 f8                	or     %edi,%eax
c0108817:	89 c3                	mov    %eax,%ebx
c0108819:	8b 45 08             	mov    0x8(%ebp),%eax
c010881c:	89 0c c5 40 a5 d0 c0 	mov    %ecx,-0x3f2f5ac0(,%eax,8)
c0108823:	89 1c c5 44 a5 d0 c0 	mov    %ebx,-0x3f2f5abc(,%eax,8)
}
c010882a:	90                   	nop
c010882b:	83 c4 24             	add    $0x24,%esp
c010882e:	5b                   	pop    %ebx
c010882f:	5e                   	pop    %esi
c0108830:	5f                   	pop    %edi
c0108831:	5d                   	pop    %ebp
c0108832:	c3                   	ret    

c0108833 <_init_idt>:

void _init_idt()
{
c0108833:	55                   	push   %ebp
c0108834:	89 e5                	mov    %esp,%ebp
c0108836:	83 ec 10             	sub    $0x10,%esp
    _set_idt_entry(FAULT_DIVISION_ERROR, 0x08, &divide_error, 0);
c0108839:	6a 00                	push   $0x0
c010883b:	68 4d 83 10 c0       	push   $0xc010834d
c0108840:	6a 08                	push   $0x8
c0108842:	6a 00                	push   $0x0
c0108844:	e8 21 ff ff ff       	call   c010876a <_set_idt_entry>
c0108849:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_TRAP_DEBUG_EXCEPTION, 0x08, &debug, 0);
c010884c:	6a 00                	push   $0x0
c010884e:	68 54 83 10 c0       	push   $0xc0108354
c0108853:	6a 08                	push   $0x8
c0108855:	6a 01                	push   $0x1
c0108857:	e8 0e ff ff ff       	call   c010876a <_set_idt_entry>
c010885c:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(INT_NMI, 0x08, &nmi, 0);
c010885f:	6a 00                	push   $0x0
c0108861:	68 5b 83 10 c0       	push   $0xc010835b
c0108866:	6a 08                	push   $0x8
c0108868:	6a 02                	push   $0x2
c010886a:	e8 fb fe ff ff       	call   c010876a <_set_idt_entry>
c010886f:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_BREAKPOINT, 0x08, &int3, 0);
c0108872:	6a 00                	push   $0x0
c0108874:	68 62 83 10 c0       	push   $0xc0108362
c0108879:	6a 08                	push   $0x8
c010887b:	6a 03                	push   $0x3
c010887d:	e8 e8 fe ff ff       	call   c010876a <_set_idt_entry>
c0108882:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_OVERFLOW, 0x08, &overflow, 0);
c0108885:	6a 00                	push   $0x0
c0108887:	68 69 83 10 c0       	push   $0xc0108369
c010888c:	6a 08                	push   $0x8
c010888e:	6a 04                	push   $0x4
c0108890:	e8 d5 fe ff ff       	call   c010876a <_set_idt_entry>
c0108895:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_BOUND_EXCEED, 0x08, &bounds, 0);
c0108898:	6a 00                	push   $0x0
c010889a:	68 73 83 10 c0       	push   $0xc0108373
c010889f:	6a 08                	push   $0x8
c01088a1:	6a 05                	push   $0x5
c01088a3:	e8 c2 fe ff ff       	call   c010876a <_set_idt_entry>
c01088a8:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_OPCODE, 0x08, &invalid_op, 0);
c01088ab:	6a 00                	push   $0x0
c01088ad:	68 7d 83 10 c0       	push   $0xc010837d
c01088b2:	6a 08                	push   $0x8
c01088b4:	6a 06                	push   $0x6
c01088b6:	e8 af fe ff ff       	call   c010876a <_set_idt_entry>
c01088bb:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_NO_MATH_PROCESSOR, 0x08, &device_not_available, 0);
    //_set_idt_entry(ABORT_DOUBLE_FAULT, 0x08, &double_fault, 0);
    _set_idt_entry(FAULT_RESERVED_0, 0x08, &coprocessor_segment_overrun, 0);
c01088be:	6a 00                	push   $0x0
c01088c0:	68 87 83 10 c0       	push   $0xc0108387
c01088c5:	6a 08                	push   $0x8
c01088c7:	6a 09                	push   $0x9
c01088c9:	e8 9c fe ff ff       	call   c010876a <_set_idt_entry>
c01088ce:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_TSS, 0x08, &invalid_TSS, 0);
c01088d1:	6a 00                	push   $0x0
c01088d3:	68 9b 83 10 c0       	push   $0xc010839b
c01088d8:	6a 08                	push   $0x8
c01088da:	6a 0a                	push   $0xa
c01088dc:	e8 89 fe ff ff       	call   c010876a <_set_idt_entry>
c01088e1:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_SEG_NOT_PRESENT, 0x08, &segment_not_present, 0);
c01088e4:	6a 00                	push   $0x0
c01088e6:	68 a5 83 10 c0       	push   $0xc01083a5
c01088eb:	6a 08                	push   $0x8
c01088ed:	6a 0b                	push   $0xb
c01088ef:	e8 76 fe ff ff       	call   c010876a <_set_idt_entry>
c01088f4:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_STACK_SEG_FAULT, 0x08, &stack_segment, 0);
c01088f7:	6a 00                	push   $0x0
c01088f9:	68 af 83 10 c0       	push   $0xc01083af
c01088fe:	6a 08                	push   $0x8
c0108900:	6a 0c                	push   $0xc
c0108902:	e8 63 fe ff ff       	call   c010876a <_set_idt_entry>
c0108907:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_GENERAL_PROTECTION, 0x08, &general_protection, 0);
c010890a:	6a 00                	push   $0x0
c010890c:	68 b9 83 10 c0       	push   $0xc01083b9
c0108911:	6a 08                	push   $0x8
c0108913:	6a 0d                	push   $0xd
c0108915:	e8 50 fe ff ff       	call   c010876a <_set_idt_entry>
c010891a:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_PAGE_FAULT, 0x08, &page_fault, 0);
c010891d:	6a 00                	push   $0x0
c010891f:	68 c4 71 10 c0       	push   $0xc01071c4
c0108924:	6a 08                	push   $0x8
c0108926:	6a 0e                	push   $0xe
c0108928:	e8 3d fe ff ff       	call   c010876a <_set_idt_entry>
c010892d:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_RESERVED_1, 0x08, &reserved, 0);
c0108930:	6a 00                	push   $0x0
c0108932:	68 91 83 10 c0       	push   $0xc0108391
c0108937:	6a 08                	push   $0x8
c0108939:	6a 0f                	push   $0xf
c010893b:	e8 2a fe ff ff       	call   c010876a <_set_idt_entry>
c0108940:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_X87_FAULT, 0x08, coprocessor_error, 0);
    for (int i=17;i < 48;i++)
c0108943:	c7 45 fc 11 00 00 00 	movl   $0x11,-0x4(%ebp)
c010894a:	eb 19                	jmp    c0108965 <_init_idt+0x132>
		  _set_idt_entry(i, 0x08, &reserved, 0);
c010894c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010894f:	6a 00                	push   $0x0
c0108951:	68 91 83 10 c0       	push   $0xc0108391
c0108956:	6a 08                	push   $0x8
c0108958:	50                   	push   %eax
c0108959:	e8 0c fe ff ff       	call   c010876a <_set_idt_entry>
c010895e:	83 c4 10             	add    $0x10,%esp
    for (int i=17;i < 48;i++)
c0108961:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0108965:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%ebp)
c0108969:	7e e1                	jle    c010894c <_init_idt+0x119>
    //_set_idt_entry(45, 0x08, irq13, 0);
    _set_idt_entry(MELOX_SYS_CALL, 0x08, &intr_syscall_handler, 3);
c010896b:	6a 03                	push   $0x3
c010896d:	68 bd 82 10 c0       	push   $0xc01082bd
c0108972:	6a 08                	push   $0x8
c0108974:	68 80 00 00 00       	push   $0x80
c0108979:	e8 ec fd ff ff       	call   c010876a <_set_idt_entry>
c010897e:	83 c4 10             	add    $0x10,%esp
c0108981:	90                   	nop
c0108982:	c9                   	leave  
c0108983:	c3                   	ret    

c0108984 <_kernel_start>:
c0108984:	e8 4e fd ff ff       	call   c01086d7 <_init_gdt>
c0108989:	68 00 a5 d0 c0       	push   $0xc0d0a500
c010898e:	66 ff 35 00 c0 d0 c0 	pushw  0xc0d0c000
c0108995:	0f 01 14 24          	lgdtl  (%esp)
c0108999:	66 b9 10 00          	mov    $0x10,%cx
c010899d:	8e c1                	mov    %ecx,%es
c010899f:	8e d9                	mov    %ecx,%ds
c01089a1:	8e e1                	mov    %ecx,%fs
c01089a3:	8e e9                	mov    %ecx,%gs
c01089a5:	8e d1                	mov    %ecx,%ss
c01089a7:	66 6a 08             	pushw  $0x8
c01089aa:	68 b0 89 10 c0       	push   $0xc01089b0
c01089af:	cb                   	lret   

c01089b0 <_after_gdt>:
c01089b0:	c7 04 24 00 10 10 00 	movl   $0x101000,(%esp)
c01089b7:	e8 82 d8 ff ff       	call   c010623e <_vir_kernel_init>
c01089bc:	83 ec 06             	sub    $0x6,%esp
c01089bf:	c7 44 24 02 40 a5 d0 	movl   $0xc0d0a540,0x2(%esp)
c01089c6:	c0 
c01089c7:	66 a1 88 c0 d0 c0    	mov    0xc0d0c088,%ax
c01089cd:	66 89 04 24          	mov    %ax,(%esp)
c01089d1:	0f 01 1c 24          	lidtl  (%esp)
c01089d5:	66 b8 28 00          	mov    $0x28,%ax
c01089d9:	0f 00 d8             	ltr    %ax
c01089dc:	83 c4 06             	add    $0x6,%esp
c01089df:	e8 c1 db ff ff       	call   c01065a5 <_kernel_main>

c01089e4 <j_>:
c01089e4:	f4                   	hlt    
c01089e5:	eb fd                	jmp    c01089e4 <j_>

c01089e7 <io_inb>:
{
c01089e7:	55                   	push   %ebp
c01089e8:	89 e5                	mov    %esp,%ebp
c01089ea:	83 ec 10             	sub    $0x10,%esp
    asm volatile("inb %w1,%0" : "=a"(data) : "d"(port));
c01089ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01089f0:	89 c2                	mov    %eax,%edx
c01089f2:	ec                   	in     (%dx),%al
c01089f3:	88 45 ff             	mov    %al,-0x1(%ebp)
    return data;
c01089f6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
c01089fa:	c9                   	leave  
c01089fb:	c3                   	ret    

c01089fc <io_outb>:
{
c01089fc:	55                   	push   %ebp
c01089fd:	89 e5                	mov    %esp,%ebp
c01089ff:	83 ec 04             	sub    $0x4,%esp
c0108a02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a05:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0108a08:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0108a0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0108a0f:	ee                   	out    %al,(%dx)
}
c0108a10:	90                   	nop
c0108a11:	c9                   	leave  
c0108a12:	c3                   	ret    

c0108a13 <cpu_delay>:
io_outl(int port, uint32_t data)
{
    asm volatile("outl %0,%w1" : : "a"(data), "d"(port));
}

static inline void cpu_delay(){
c0108a13:	55                   	push   %ebp
c0108a14:	89 e5                	mov    %esp,%ebp
c0108a16:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; i < 3; i++);
c0108a19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0108a20:	eb 04                	jmp    c0108a26 <cpu_delay+0x13>
c0108a22:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0108a26:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
c0108a2a:	7e f6                	jle    c0108a22 <cpu_delay+0xf>
}
c0108a2c:	90                   	nop
c0108a2d:	90                   	nop
c0108a2e:	c9                   	leave  
c0108a2f:	c3                   	ret    

c0108a30 <init_8259>:
//other keys tmp do not hand
};
#endif

void init_8259()
{
c0108a30:	55                   	push   %ebp
c0108a31:	89 e5                	mov    %esp,%ebp
    asm volatile("cli");
c0108a33:	fa                   	cli    

    //ICW1
    io_outb(0x20, 0x11);
c0108a34:	6a 11                	push   $0x11
c0108a36:	6a 20                	push   $0x20
c0108a38:	e8 bf ff ff ff       	call   c01089fc <io_outb>
c0108a3d:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a40:	e8 ce ff ff ff       	call   c0108a13 <cpu_delay>
    io_outb(0xa0, 0x11);
c0108a45:	6a 11                	push   $0x11
c0108a47:	68 a0 00 00 00       	push   $0xa0
c0108a4c:	e8 ab ff ff ff       	call   c01089fc <io_outb>
c0108a51:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a54:	e8 ba ff ff ff       	call   c0108a13 <cpu_delay>

    //ICW2
    io_outb(0x21, 0x20);
c0108a59:	6a 20                	push   $0x20
c0108a5b:	6a 21                	push   $0x21
c0108a5d:	e8 9a ff ff ff       	call   c01089fc <io_outb>
c0108a62:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a65:	e8 a9 ff ff ff       	call   c0108a13 <cpu_delay>
    io_outb(0xa1, 0x28);
c0108a6a:	6a 28                	push   $0x28
c0108a6c:	68 a1 00 00 00       	push   $0xa1
c0108a71:	e8 86 ff ff ff       	call   c01089fc <io_outb>
c0108a76:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a79:	e8 95 ff ff ff       	call   c0108a13 <cpu_delay>

    //ICW3
    io_outb(0x21, 0x04);
c0108a7e:	6a 04                	push   $0x4
c0108a80:	6a 21                	push   $0x21
c0108a82:	e8 75 ff ff ff       	call   c01089fc <io_outb>
c0108a87:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a8a:	e8 84 ff ff ff       	call   c0108a13 <cpu_delay>
    io_outb(0xa1, 0x02);
c0108a8f:	6a 02                	push   $0x2
c0108a91:	68 a1 00 00 00       	push   $0xa1
c0108a96:	e8 61 ff ff ff       	call   c01089fc <io_outb>
c0108a9b:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a9e:	e8 70 ff ff ff       	call   c0108a13 <cpu_delay>

    //ICW4
    io_outb(0x21, 0x01);
c0108aa3:	6a 01                	push   $0x1
c0108aa5:	6a 21                	push   $0x21
c0108aa7:	e8 50 ff ff ff       	call   c01089fc <io_outb>
c0108aac:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108aaf:	e8 5f ff ff ff       	call   c0108a13 <cpu_delay>
    io_outb(0xa1, 0x01);
c0108ab4:	6a 01                	push   $0x1
c0108ab6:	68 a1 00 00 00       	push   $0xa1
c0108abb:	e8 3c ff ff ff       	call   c01089fc <io_outb>
c0108ac0:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108ac3:	e8 4b ff ff ff       	call   c0108a13 <cpu_delay>

    //OCW1
    io_outb(0x21, 0xff);
c0108ac8:	68 ff 00 00 00       	push   $0xff
c0108acd:	6a 21                	push   $0x21
c0108acf:	e8 28 ff ff ff       	call   c01089fc <io_outb>
c0108ad4:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108ad7:	e8 37 ff ff ff       	call   c0108a13 <cpu_delay>
    io_outb(0xa1, 0xff);
c0108adc:	68 ff 00 00 00       	push   $0xff
c0108ae1:	68 a1 00 00 00       	push   $0xa1
c0108ae6:	e8 11 ff ff ff       	call   c01089fc <io_outb>
c0108aeb:	83 c4 08             	add    $0x8,%esp

    asm volatile("sti");
c0108aee:	fb                   	sti    
}
c0108aef:	90                   	nop
c0108af0:	c9                   	leave  
c0108af1:	c3                   	ret    

c0108af2 <ps2_post_cmd>:


static void ps2_post_cmd(uint8_t port, char cmd, uint16_t arg) {
c0108af2:	55                   	push   %ebp
c0108af3:	89 e5                	mov    %esp,%ebp
c0108af5:	83 ec 1c             	sub    $0x1c,%esp
c0108af8:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0108afb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108afe:	8b 45 10             	mov    0x10(%ebp),%eax
c0108b01:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0108b04:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0108b07:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    char result;
    // 等待PS/2输入缓冲区清空，这样我们才可以写入命令
    while((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_IFULL);
c0108b0b:	90                   	nop
c0108b0c:	6a 64                	push   $0x64
c0108b0e:	e8 d4 fe ff ff       	call   c01089e7 <io_inb>
c0108b13:	83 c4 04             	add    $0x4,%esp
c0108b16:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108b19:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108b1d:	83 e0 02             	and    $0x2,%eax
c0108b20:	85 c0                	test   %eax,%eax
c0108b22:	75 e8                	jne    c0108b0c <ps2_post_cmd+0x1a>

    io_outb(port, cmd);
c0108b24:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0108b28:	0f b6 d0             	movzbl %al,%edx
c0108b2b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0108b2f:	52                   	push   %edx
c0108b30:	50                   	push   %eax
c0108b31:	e8 c6 fe ff ff       	call   c01089fc <io_outb>
c0108b36:	83 c4 08             	add    $0x8,%esp
    if (!(arg & PS2_NO_ARG)) {
c0108b39:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0108b3d:	25 00 ff 00 00       	and    $0xff00,%eax
c0108b42:	85 c0                	test   %eax,%eax
c0108b44:	75 12                	jne    c0108b58 <ps2_post_cmd+0x66>
        // 所有参数一律通过0x60传入。
        io_outb(PS2_PORT_ENC_CMDREG, (uint8_t)(arg & 0x00ff));
c0108b46:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0108b4a:	0f b6 c0             	movzbl %al,%eax
c0108b4d:	50                   	push   %eax
c0108b4e:	6a 60                	push   $0x60
c0108b50:	e8 a7 fe ff ff       	call   c01089fc <io_outb>
c0108b55:	83 c4 08             	add    $0x8,%esp
    }
}
c0108b58:	90                   	nop
c0108b59:	c9                   	leave  
c0108b5a:	c3                   	ret    

c0108b5b <ps2_issue_cmd>:

static uint8_t ps2_issue_cmd(char cmd, uint16_t arg) {
c0108b5b:	55                   	push   %ebp
c0108b5c:	89 e5                	mov    %esp,%ebp
c0108b5e:	83 ec 18             	sub    $0x18,%esp
c0108b61:	8b 55 08             	mov    0x8(%ebp),%edx
c0108b64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108b67:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0108b6a:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, cmd, arg);
c0108b6e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0108b72:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0108b76:	52                   	push   %edx
c0108b77:	50                   	push   %eax
c0108b78:	6a 64                	push   $0x64
c0108b7a:	e8 73 ff ff ff       	call   c0108af2 <ps2_post_cmd>
c0108b7f:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0108b82:	90                   	nop
c0108b83:	6a 64                	push   $0x64
c0108b85:	e8 5d fe ff ff       	call   c01089e7 <io_inb>
c0108b8a:	83 c4 04             	add    $0x4,%esp
c0108b8d:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108b90:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108b94:	83 e0 01             	and    $0x1,%eax
c0108b97:	85 c0                	test   %eax,%eax
c0108b99:	74 e8                	je     c0108b83 <ps2_issue_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0108b9b:	6a 60                	push   $0x60
c0108b9d:	e8 45 fe ff ff       	call   c01089e7 <io_inb>
c0108ba2:	83 c4 04             	add    $0x4,%esp
}
c0108ba5:	c9                   	leave  
c0108ba6:	c3                   	ret    

c0108ba7 <ps2_issue_dev_cmd>:

static uint8_t ps2_issue_dev_cmd(char cmd, uint16_t arg) {
c0108ba7:	55                   	push   %ebp
c0108ba8:	89 e5                	mov    %esp,%ebp
c0108baa:	83 ec 18             	sub    $0x18,%esp
c0108bad:	8b 55 08             	mov    0x8(%ebp),%edx
c0108bb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108bb3:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0108bb6:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_ENC_CMDREG, cmd, arg);
c0108bba:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0108bbe:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0108bc2:	52                   	push   %edx
c0108bc3:	50                   	push   %eax
c0108bc4:	6a 60                	push   $0x60
c0108bc6:	e8 27 ff ff ff       	call   c0108af2 <ps2_post_cmd>
c0108bcb:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0108bce:	90                   	nop
c0108bcf:	6a 64                	push   $0x64
c0108bd1:	e8 11 fe ff ff       	call   c01089e7 <io_inb>
c0108bd6:	83 c4 04             	add    $0x4,%esp
c0108bd9:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108bdc:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108be0:	83 e0 01             	and    $0x1,%eax
c0108be3:	85 c0                	test   %eax,%eax
c0108be5:	74 e8                	je     c0108bcf <ps2_issue_dev_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0108be7:	6a 60                	push   $0x60
c0108be9:	e8 f9 fd ff ff       	call   c01089e7 <io_inb>
c0108bee:	83 c4 04             	add    $0x4,%esp
}
c0108bf1:	c9                   	leave  
c0108bf2:	c3                   	ret    

c0108bf3 <init_ps2k>:

void init_ps2k()
{
c0108bf3:	55                   	push   %ebp
c0108bf4:	89 e5                	mov    %esp,%ebp
c0108bf6:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0108bf9:	fa                   	cli    

     // 1、禁用任何的PS/2设备
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_DISABLE, PS2_NO_ARG);
c0108bfa:	68 00 ff 00 00       	push   $0xff00
c0108bff:	6a ad                	push   $0xffffffad
c0108c01:	6a 64                	push   $0x64
c0108c03:	e8 ea fe ff ff       	call   c0108af2 <ps2_post_cmd>
c0108c08:	83 c4 0c             	add    $0xc,%esp
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT2_DISABLE, PS2_NO_ARG);
c0108c0b:	68 00 ff 00 00       	push   $0xff00
c0108c10:	6a a7                	push   $0xffffffa7
c0108c12:	6a 64                	push   $0x64
c0108c14:	e8 d9 fe ff ff       	call   c0108af2 <ps2_post_cmd>
c0108c19:	83 c4 0c             	add    $0xc,%esp
    
    // 2、清空控制器缓冲区
    io_inb(PS2_PORT_ENC_DATA);
c0108c1c:	6a 60                	push   $0x60
c0108c1e:	e8 c4 fd ff ff       	call   c01089e7 <io_inb>
c0108c23:	83 c4 04             	add    $0x4,%esp

    char result;

    // 3、屏蔽所有PS/2设备（端口1&2）IRQ，并且禁用键盘键码转换功能
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0108c26:	68 00 ff 00 00       	push   $0xff00
c0108c2b:	6a 20                	push   $0x20
c0108c2d:	e8 29 ff ff ff       	call   c0108b5b <ps2_issue_cmd>
c0108c32:	83 c4 08             	add    $0x8,%esp
c0108c35:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result & ~(PS2_CFG_P1INT | PS2_CFG_P2INT | PS2_CFG_TRANSLATION);
c0108c38:	80 65 f7 bc          	andb   $0xbc,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0108c3c:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0108c41:	0f b7 c0             	movzwl %ax,%eax
c0108c44:	50                   	push   %eax
c0108c45:	6a 60                	push   $0x60
c0108c47:	6a 64                	push   $0x64
c0108c49:	e8 a4 fe ff ff       	call   c0108af2 <ps2_post_cmd>
c0108c4e:	83 c4 0c             	add    $0xc,%esp

    // 4、控制器自检
    result = ps2_issue_cmd(PS2_CMD_SELFTEST, PS2_NO_ARG);
c0108c51:	68 00 ff 00 00       	push   $0xff00
c0108c56:	6a aa                	push   $0xffffffaa
c0108c58:	e8 fe fe ff ff       	call   c0108b5b <ps2_issue_cmd>
c0108c5d:	83 c4 08             	add    $0x8,%esp
c0108c60:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != PS2_RESULT_TEST_OK) {
c0108c63:	80 7d f7 55          	cmpb   $0x55,-0x9(%ebp)
c0108c67:	74 12                	je     c0108c7b <init_ps2k+0x88>
        kprintf("Controller self-test failed.");
c0108c69:	83 ec 0c             	sub    $0xc,%esp
c0108c6c:	68 f8 d5 d0 c0       	push   $0xc0d0d5f8
c0108c71:	e8 59 0f 00 00       	call   c0109bcf <kprintf>
c0108c76:	83 c4 10             	add    $0x10,%esp
        goto done;
c0108c79:	eb 72                	jmp    c0108ced <init_ps2k+0xfa>
    }

    // 5、设备自检（端口1自检，通常是我们的键盘）
    result = ps2_issue_cmd(PS2_CMD_SELFTEST_PORT1, PS2_NO_ARG);
c0108c7b:	83 ec 08             	sub    $0x8,%esp
c0108c7e:	68 00 ff 00 00       	push   $0xff00
c0108c83:	6a ab                	push   $0xffffffab
c0108c85:	e8 d1 fe ff ff       	call   c0108b5b <ps2_issue_cmd>
c0108c8a:	83 c4 10             	add    $0x10,%esp
c0108c8d:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != 0) {
c0108c90:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0108c94:	74 12                	je     c0108ca8 <init_ps2k+0xb5>
        kprintf("Interface test on port 1 failed.");
c0108c96:	83 ec 0c             	sub    $0xc,%esp
c0108c99:	68 18 d6 d0 c0       	push   $0xc0d0d618
c0108c9e:	e8 2c 0f 00 00       	call   c0109bcf <kprintf>
c0108ca3:	83 c4 10             	add    $0x10,%esp
        goto done;
c0108ca6:	eb 45                	jmp    c0108ced <init_ps2k+0xfa>
    }

    // 6、开启位于端口1的 IRQ，并启用端口1。不用理会端口2，那儿一般是鼠标。
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_ENABLE, PS2_NO_ARG);
c0108ca8:	83 ec 04             	sub    $0x4,%esp
c0108cab:	68 00 ff 00 00       	push   $0xff00
c0108cb0:	6a ae                	push   $0xffffffae
c0108cb2:	6a 64                	push   $0x64
c0108cb4:	e8 39 fe ff ff       	call   c0108af2 <ps2_post_cmd>
c0108cb9:	83 c4 10             	add    $0x10,%esp
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0108cbc:	83 ec 08             	sub    $0x8,%esp
c0108cbf:	68 00 ff 00 00       	push   $0xff00
c0108cc4:	6a 20                	push   $0x20
c0108cc6:	e8 90 fe ff ff       	call   c0108b5b <ps2_issue_cmd>
c0108ccb:	83 c4 10             	add    $0x10,%esp
c0108cce:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result | PS2_CFG_P1INT;
c0108cd1:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0108cd5:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0108cda:	0f b7 c0             	movzwl %ax,%eax
c0108cdd:	83 ec 04             	sub    $0x4,%esp
c0108ce0:	50                   	push   %eax
c0108ce1:	6a 60                	push   $0x60
c0108ce3:	6a 64                	push   $0x64
c0108ce5:	e8 08 fe ff ff       	call   c0108af2 <ps2_post_cmd>
c0108cea:	83 c4 10             	add    $0x10,%esp

    // 至此，PS/2控制器和设备已完成初始化，可以正常使用。

done:
    asm volatile("sti");
c0108ced:	fb                   	sti    
}
c0108cee:	90                   	nop
c0108cef:	c9                   	leave  
c0108cf0:	c3                   	ret    

c0108cf1 <init_keyboard>:



void init_keyboard()
{
c0108cf1:	55                   	push   %ebp
c0108cf2:	89 e5                	mov    %esp,%ebp
c0108cf4:	83 ec 18             	sub    $0x18,%esp
    asm("cli");
c0108cf7:	fa                   	cli    
    init_8259();
c0108cf8:	e8 33 fd ff ff       	call   c0108a30 <init_8259>

    uint8_t result = io_inb(0x21);
c0108cfd:	6a 21                	push   $0x21
c0108cff:	e8 e3 fc ff ff       	call   c01089e7 <io_inb>
c0108d04:	83 c4 04             	add    $0x4,%esp
c0108d07:	88 45 f7             	mov    %al,-0x9(%ebp)
    io_outb(0x21, result & 0xfd);
c0108d0a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0108d0e:	25 fd 00 00 00       	and    $0xfd,%eax
c0108d13:	50                   	push   %eax
c0108d14:	6a 21                	push   $0x21
c0108d16:	e8 e1 fc ff ff       	call   c01089fc <io_outb>
c0108d1b:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108d1e:	e8 f0 fc ff ff       	call   c0108a13 <cpu_delay>
    result = io_inb(0x21);
c0108d23:	6a 21                	push   $0x21
c0108d25:	e8 bd fc ff ff       	call   c01089e7 <io_inb>
c0108d2a:	83 c4 04             	add    $0x4,%esp
c0108d2d:	88 45 f7             	mov    %al,-0x9(%ebp)

    init_ps2k();
c0108d30:	e8 be fe ff ff       	call   c0108bf3 <init_ps2k>
    
    _set_idt_entry(0x21, 0x08, &handle_keywords, 0);
c0108d35:	6a 00                	push   $0x0
c0108d37:	68 4c 8d 10 c0       	push   $0xc0108d4c
c0108d3c:	6a 08                	push   $0x8
c0108d3e:	6a 21                	push   $0x21
c0108d40:	e8 25 fa ff ff       	call   c010876a <_set_idt_entry>
c0108d45:	83 c4 10             	add    $0x10,%esp
    asm("sti");
c0108d48:	fb                   	sti    
}
c0108d49:	90                   	nop
c0108d4a:	c9                   	leave  
c0108d4b:	c3                   	ret    

c0108d4c <handle_keywords>:

static void handle_keywords()
{
c0108d4c:	55                   	push   %ebp
c0108d4d:	89 e5                	mov    %esp,%ebp
c0108d4f:	83 ec 18             	sub    $0x18,%esp
    crtl_status, shift_status, alt_status, caps_lock_status, ext_scancode = 0;
c0108d52:	c6 05 44 ad d0 c0 00 	movb   $0x0,0xc0d0ad44
    asm volatile("cli");
c0108d59:	fa                   	cli    
    io_outb(0x61, 0x20);
c0108d5a:	6a 20                	push   $0x20
c0108d5c:	6a 61                	push   $0x61
c0108d5e:	e8 99 fc ff ff       	call   c01089fc <io_outb>
c0108d63:	83 c4 08             	add    $0x8,%esp
    uint8_t ctrl_down_last = crtl_status;
c0108d66:	0f b6 05 40 ad d0 c0 	movzbl 0xc0d0ad40,%eax
c0108d6d:	88 45 f4             	mov    %al,-0xc(%ebp)
    uint8_t shift_down_last = shift_status;
c0108d70:	0f b6 05 41 ad d0 c0 	movzbl 0xc0d0ad41,%eax
c0108d77:	88 45 f3             	mov    %al,-0xd(%ebp)
    uint8_t caps_lock_last = caps_lock_status;
c0108d7a:	0f b6 05 43 ad d0 c0 	movzbl 0xc0d0ad43,%eax
c0108d81:	88 45 f2             	mov    %al,-0xe(%ebp)

    uint8_t break_code;
    uint16_t scancode = io_inb(0x60);
c0108d84:	6a 60                	push   $0x60
c0108d86:	e8 5c fc ff ff       	call   c01089e7 <io_inb>
c0108d8b:	83 c4 04             	add    $0x4,%esp
c0108d8e:	0f b6 c0             	movzbl %al,%eax
c0108d91:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    
    if(scancode == 0xe0){
c0108d95:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0108d9b:	75 25                	jne    c0108dc2 <handle_keywords+0x76>
        ext_scancode = 1;
c0108d9d:	c6 05 44 ad d0 c0 01 	movb   $0x1,0xc0d0ad44
        io_outb(0x20, 0x20);
c0108da4:	6a 20                	push   $0x20
c0108da6:	6a 20                	push   $0x20
c0108da8:	e8 4f fc ff ff       	call   c01089fc <io_outb>
c0108dad:	83 c4 08             	add    $0x8,%esp
        io_outb(0x20, 0x20);
c0108db0:	6a 20                	push   $0x20
c0108db2:	6a 20                	push   $0x20
c0108db4:	e8 43 fc ff ff       	call   c01089fc <io_outb>
c0108db9:	83 c4 08             	add    $0x8,%esp
        asm volatile("sti");
c0108dbc:	fb                   	sti    
        return;
c0108dbd:	e9 1a 02 00 00       	jmp    c0108fdc <handle_keywords+0x290>
    }
    if(ext_scancode){
c0108dc2:	0f b6 05 44 ad d0 c0 	movzbl 0xc0d0ad44,%eax
c0108dc9:	84 c0                	test   %al,%al
c0108dcb:	74 0d                	je     c0108dda <handle_keywords+0x8e>
        scancode = ((0xe000) | scancode);
c0108dcd:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
        ext_scancode = 0;
c0108dd3:	c6 05 44 ad d0 c0 00 	movb   $0x0,0xc0d0ad44
    }

    break_code = ((0x0080 & scancode) != 0);
c0108dda:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108dde:	66 25 80 00          	and    $0x80,%ax
c0108de2:	66 85 c0             	test   %ax,%ax
c0108de5:	0f 95 c0             	setne  %al
c0108de8:	88 45 f1             	mov    %al,-0xf(%ebp)

    if(break_code)//tan qi ma
c0108deb:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c0108def:	74 6d                	je     c0108e5e <handle_keywords+0x112>
    {
        uint16_t make_code = (scancode & 0xff7f);
c0108df1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108df5:	24 7f                	and    $0x7f,%al
c0108df7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

        if(make_code == crtl_l_make || make_code == crtl_r_make)
c0108dfb:	66 83 7d ec 1d       	cmpw   $0x1d,-0x14(%ebp)
c0108e00:	74 08                	je     c0108e0a <handle_keywords+0xbe>
c0108e02:	66 81 7d ec 1d e0    	cmpw   $0xe01d,-0x14(%ebp)
c0108e08:	75 09                	jne    c0108e13 <handle_keywords+0xc7>
        {
            crtl_status = 0;
c0108e0a:	c6 05 40 ad d0 c0 00 	movb   $0x0,0xc0d0ad40
c0108e11:	eb 2d                	jmp    c0108e40 <handle_keywords+0xf4>
        }else if(make_code == shift_l_make || make_code == shift_r_make){
c0108e13:	66 83 7d ec 2a       	cmpw   $0x2a,-0x14(%ebp)
c0108e18:	74 07                	je     c0108e21 <handle_keywords+0xd5>
c0108e1a:	66 83 7d ec 36       	cmpw   $0x36,-0x14(%ebp)
c0108e1f:	75 09                	jne    c0108e2a <handle_keywords+0xde>
            shift_status = 0;
c0108e21:	c6 05 41 ad d0 c0 00 	movb   $0x0,0xc0d0ad41
c0108e28:	eb 16                	jmp    c0108e40 <handle_keywords+0xf4>
        }else if(make_code == alt_l_make || make_code == alt_r_make){
c0108e2a:	66 83 7d ec 38       	cmpw   $0x38,-0x14(%ebp)
c0108e2f:	74 08                	je     c0108e39 <handle_keywords+0xed>
c0108e31:	66 81 7d ec 38 e0    	cmpw   $0xe038,-0x14(%ebp)
c0108e37:	75 07                	jne    c0108e40 <handle_keywords+0xf4>
            alt_status = 0;
c0108e39:	c6 05 42 ad d0 c0 00 	movb   $0x0,0xc0d0ad42
        }
        io_outb(0x20, 0x20);
c0108e40:	6a 20                	push   $0x20
c0108e42:	6a 20                	push   $0x20
c0108e44:	e8 b3 fb ff ff       	call   c01089fc <io_outb>
c0108e49:	83 c4 08             	add    $0x8,%esp
        io_outb(0x20, 0x20);
c0108e4c:	6a 20                	push   $0x20
c0108e4e:	6a 20                	push   $0x20
c0108e50:	e8 a7 fb ff ff       	call   c01089fc <io_outb>
c0108e55:	83 c4 08             	add    $0x8,%esp
        asm volatile("sti");
c0108e58:	fb                   	sti    
        return;
c0108e59:	e9 7e 01 00 00       	jmp    c0108fdc <handle_keywords+0x290>
    }//if is common word, hand
    else if((scancode > 0x00 && scancode < 0x3b) ||\
c0108e5e:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0108e63:	74 07                	je     c0108e6c <handle_keywords+0x120>
c0108e65:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0108e6a:	76 14                	jbe    c0108e80 <handle_keywords+0x134>
c0108e6c:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0108e72:	74 0c                	je     c0108e80 <handle_keywords+0x134>
            (scancode == alt_r_make) || \
c0108e74:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0108e7a:	0f 85 20 01 00 00    	jne    c0108fa0 <handle_keywords+0x254>
            (scancode == crtl_r_make)){
        uint8_t shift = 0;
c0108e80:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        if((scancode < 0x0e) || (scancode == 0x29) || \
c0108e84:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0108e89:	76 3f                	jbe    c0108eca <handle_keywords+0x17e>
c0108e8b:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0108e90:	74 38                	je     c0108eca <handle_keywords+0x17e>
c0108e92:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0108e97:	74 31                	je     c0108eca <handle_keywords+0x17e>
           (scancode == 0x1a) || (scancode == 0x1b) ||\
c0108e99:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0108e9e:	74 2a                	je     c0108eca <handle_keywords+0x17e>
c0108ea0:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0108ea5:	74 23                	je     c0108eca <handle_keywords+0x17e>
           (scancode == 0x2b) || (scancode == 0x27) ||\
c0108ea7:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0108eac:	74 1c                	je     c0108eca <handle_keywords+0x17e>
c0108eae:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0108eb3:	74 15                	je     c0108eca <handle_keywords+0x17e>
           (scancode == 0x28) || (scancode == 0x33) ||\
c0108eb5:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0108eba:	74 0e                	je     c0108eca <handle_keywords+0x17e>
c0108ebc:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0108ec1:	74 07                	je     c0108eca <handle_keywords+0x17e>
           (scancode == 0x34) || (scancode == 0x35)){
c0108ec3:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0108ec8:	75 34                	jne    c0108efe <handle_keywords+0x1b2>
            if(shift_down_last)
c0108eca:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108ece:	74 06                	je     c0108ed6 <handle_keywords+0x18a>
                shift = 1;
c0108ed0:	c6 45 f5 01          	movb   $0x1,-0xb(%ebp)
c0108ed4:	eb 28                	jmp    c0108efe <handle_keywords+0x1b2>
            else{
                if(shift_down_last && caps_lock_last)
c0108ed6:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108eda:	74 0c                	je     c0108ee8 <handle_keywords+0x19c>
c0108edc:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c0108ee0:	74 06                	je     c0108ee8 <handle_keywords+0x19c>
                    shift = 0;
c0108ee2:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
c0108ee6:	eb 16                	jmp    c0108efe <handle_keywords+0x1b2>
                else if(shift_down_last || caps_lock_last)
c0108ee8:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108eec:	75 06                	jne    c0108ef4 <handle_keywords+0x1a8>
c0108eee:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c0108ef2:	74 06                	je     c0108efa <handle_keywords+0x1ae>
                    shift = 1;
c0108ef4:	c6 45 f5 01          	movb   $0x1,-0xb(%ebp)
c0108ef8:	eb 04                	jmp    c0108efe <handle_keywords+0x1b2>
                else
                    shift = 0;
c0108efa:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
                }
           }
        uint8_t index = (scancode &= 0x00ff);
c0108efe:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0108f04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108f08:	88 45 f0             	mov    %al,-0x10(%ebp)
        char cur_char = key_map[index][shift];
c0108f0b:	0f b6 55 f0          	movzbl -0x10(%ebp),%edx
c0108f0f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0108f13:	0f b6 84 50 a0 c0 d0 	movzbl -0x3f2f3f60(%eax,%edx,2),%eax
c0108f1a:	c0 
c0108f1b:	88 45 ef             	mov    %al,-0x11(%ebp)

        if(cur_char){
c0108f1e:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0108f22:	74 34                	je     c0108f58 <handle_keywords+0x20c>
            vga_put_char(cur_char);
c0108f24:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0108f28:	83 ec 0c             	sub    $0xc,%esp
c0108f2b:	50                   	push   %eax
c0108f2c:	e8 ed d0 ff ff       	call   c010601e <vga_put_char>
c0108f31:	83 c4 10             	add    $0x10,%esp
            io_outb(0x20, 0x20);
c0108f34:	83 ec 08             	sub    $0x8,%esp
c0108f37:	6a 20                	push   $0x20
c0108f39:	6a 20                	push   $0x20
c0108f3b:	e8 bc fa ff ff       	call   c01089fc <io_outb>
c0108f40:	83 c4 10             	add    $0x10,%esp
            io_outb(0x20, 0x20);
c0108f43:	83 ec 08             	sub    $0x8,%esp
c0108f46:	6a 20                	push   $0x20
c0108f48:	6a 20                	push   $0x20
c0108f4a:	e8 ad fa ff ff       	call   c01089fc <io_outb>
c0108f4f:	83 c4 10             	add    $0x10,%esp
            asm volatile("sti");
c0108f52:	fb                   	sti    
            return;
c0108f53:	e9 84 00 00 00       	jmp    c0108fdc <handle_keywords+0x290>
        }

        if(scancode == crtl_l_make || scancode == crtl_r_make)
c0108f58:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0108f5d:	74 08                	je     c0108f67 <handle_keywords+0x21b>
c0108f5f:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0108f65:	75 09                	jne    c0108f70 <handle_keywords+0x224>
            crtl_status = 1;
c0108f67:	c6 05 40 ad d0 c0 01 	movb   $0x1,0xc0d0ad40
c0108f6e:	eb 2e                	jmp    c0108f9e <handle_keywords+0x252>
        else if(scancode == shift_l_make || scancode == shift_r_make)
c0108f70:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0108f75:	74 07                	je     c0108f7e <handle_keywords+0x232>
c0108f77:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0108f7c:	75 09                	jne    c0108f87 <handle_keywords+0x23b>
            shift_status = 1;
c0108f7e:	c6 05 41 ad d0 c0 01 	movb   $0x1,0xc0d0ad41
c0108f85:	eb 17                	jmp    c0108f9e <handle_keywords+0x252>
        else if(scancode == caps_lock_make)
c0108f87:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0108f8c:	75 4d                	jne    c0108fdb <handle_keywords+0x28f>
            caps_lock_status = ~caps_lock_status;
c0108f8e:	0f b6 05 43 ad d0 c0 	movzbl 0xc0d0ad43,%eax
c0108f95:	f7 d0                	not    %eax
c0108f97:	a2 43 ad d0 c0       	mov    %al,0xc0d0ad43
            (scancode == crtl_r_make)){
c0108f9c:	eb 3d                	jmp    c0108fdb <handle_keywords+0x28f>
c0108f9e:	eb 3b                	jmp    c0108fdb <handle_keywords+0x28f>
    }else{
        vga_put_char((char)(scancode && 0x00ff));
c0108fa0:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0108fa5:	0f 95 c0             	setne  %al
c0108fa8:	0f b6 c0             	movzbl %al,%eax
c0108fab:	0f be c0             	movsbl %al,%eax
c0108fae:	83 ec 0c             	sub    $0xc,%esp
c0108fb1:	50                   	push   %eax
c0108fb2:	e8 67 d0 ff ff       	call   c010601e <vga_put_char>
c0108fb7:	83 c4 10             	add    $0x10,%esp
        io_outb(0x20, 0x20);
c0108fba:	83 ec 08             	sub    $0x8,%esp
c0108fbd:	6a 20                	push   $0x20
c0108fbf:	6a 20                	push   $0x20
c0108fc1:	e8 36 fa ff ff       	call   c01089fc <io_outb>
c0108fc6:	83 c4 10             	add    $0x10,%esp
        io_outb(0x20, 0x20);
c0108fc9:	83 ec 08             	sub    $0x8,%esp
c0108fcc:	6a 20                	push   $0x20
c0108fce:	6a 20                	push   $0x20
c0108fd0:	e8 27 fa ff ff       	call   c01089fc <io_outb>
c0108fd5:	83 c4 10             	add    $0x10,%esp
        asm volatile("sti");
c0108fd8:	fb                   	sti    
c0108fd9:	eb 01                	jmp    c0108fdc <handle_keywords+0x290>
            (scancode == crtl_r_make)){
c0108fdb:	90                   	nop
    }
c0108fdc:	c9                   	leave  
c0108fdd:	c3                   	ret    

c0108fde <syscall>:
{
c0108fde:	55                   	push   %ebp
c0108fdf:	89 e5                	mov    %esp,%ebp
c0108fe1:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0108fe2:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fe5:	89 d7                	mov    %edx,%edi
c0108fe7:	cd 80                	int    $0x80
}
c0108fe9:	90                   	nop
c0108fea:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0108fed:	c9                   	leave  
c0108fee:	c3                   	ret    

c0108fef <syscall_install>:
#include <kernel/process/peocess.h>
#include <syscall/syscall.h>

extern void syscall_handlr(isr_param* param);

void syscall_install() {
c0108fef:	55                   	push   %ebp
c0108ff0:	89 e5                	mov    %esp,%ebp
c0108ff2:	83 ec 08             	sub    $0x8,%esp
    intr_subscribe(MELOX_SYS_CALL, syscall_handlr);
c0108ff5:	83 ec 08             	sub    $0x8,%esp
c0108ff8:	68 0d 90 10 c0       	push   $0xc010900d
c0108ffd:	68 80 00 00 00       	push   $0x80
c0109002:	e8 8c ef ff ff       	call   c0107f93 <intr_subscribe>
c0109007:	83 c4 10             	add    $0x10,%esp
}
c010900a:	90                   	nop
c010900b:	c9                   	leave  
c010900c:	c3                   	ret    

c010900d <syscall_handlr>:
c010900d:	55                   	push   %ebp
c010900e:	8b 6c 24 08          	mov    0x8(%esp),%ebp
c0109012:	8b 45 00             	mov    0x0(%ebp),%eax
c0109015:	3d 00 01 00 00       	cmp    $0x100,%eax
c010901a:	73 0d                	jae    c0109029 <syscall_handlr+0x1c>
c010901c:	c1 e0 02             	shl    $0x2,%eax
c010901f:	05 74 c1 d0 c0       	add    $0xc0d0c174,%eax
c0109024:	83 38 00             	cmpl   $0x0,(%eax)
c0109027:	75 04                	jne    c010902d <syscall_handlr+0x20>
c0109029:	f7 d8                	neg    %eax
c010902b:	5d                   	pop    %ebp
c010902c:	c3                   	ret    
c010902d:	ff 75 18             	push   0x18(%ebp)
c0109030:	ff 75 14             	push   0x14(%ebp)
c0109033:	ff 75 10             	push   0x10(%ebp)
c0109036:	ff 75 0c             	push   0xc(%ebp)
c0109039:	ff 75 08             	push   0x8(%ebp)
c010903c:	ff 75 04             	push   0x4(%ebp)
c010903f:	ff 10                	call   *(%eax)
c0109041:	89 45 00             	mov    %eax,0x0(%ebp)
c0109044:	83 c4 18             	add    $0x18,%esp
c0109047:	5d                   	pop    %ebp
c0109048:	c3                   	ret    

c0109049 <__assert_fail>:
#include <common.h>
#include <libs/mstdio.h>

static char buffer[1024];

void __assert_fail(const char* expr, const char* file, unsigned int line) {
c0109049:	55                   	push   %ebp
c010904a:	89 e5                	mov    %esp,%ebp
c010904c:	57                   	push   %edi
c010904d:	83 ec 04             	sub    $0x4,%esp
    kprintf(buffer, "%s (%s:%u)", expr, file, line);
c0109050:	83 ec 0c             	sub    $0xc,%esp
c0109053:	ff 75 10             	push   0x10(%ebp)
c0109056:	ff 75 0c             	push   0xc(%ebp)
c0109059:	ff 75 08             	push   0x8(%ebp)
c010905c:	68 39 d6 d0 c0       	push   $0xc0d0d639
c0109061:	68 60 ad d0 c0       	push   $0xc0d0ad60
c0109066:	e8 64 0b 00 00       	call   c0109bcf <kprintf>
c010906b:	83 c4 20             	add    $0x20,%esp

    // Here we load the buffer's address into %edi ("D" constraint)
    //  This is a convention we made that the LUNAIX_SYS_PANIC syscall will
    //  print the panic message passed via %edi. (see kernel/asm/x86/interrupts.c)
    asm(
c010906e:	b8 60 ad d0 c0       	mov    $0xc0d0ad60,%eax
c0109073:	89 c7                	mov    %eax,%edi
c0109075:	cd 20                	int    $0x20
        "int %0"
        ::"i"(32), "D"(buffer)
    );

    while(1);     // never reach
c0109077:	eb fe                	jmp    c0109077 <__assert_fail+0x2e>

c0109079 <cpu_invplg>:
{
c0109079:	55                   	push   %ebp
c010907a:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c010907c:	8b 45 08             	mov    0x8(%ebp),%eax
c010907f:	0f 01 38             	invlpg (%eax)
};
c0109082:	90                   	nop
c0109083:	5d                   	pop    %ebp
c0109084:	c3                   	ret    

c0109085 <llist_init_head>:
static inline void llist_init_head(struct llist_header* head) {
c0109085:	55                   	push   %ebp
c0109086:	89 e5                	mov    %esp,%ebp
    head->next = head;
c0109088:	8b 45 08             	mov    0x8(%ebp),%eax
c010908b:	8b 55 08             	mov    0x8(%ebp),%edx
c010908e:	89 50 04             	mov    %edx,0x4(%eax)
    head->prev = head;
c0109091:	8b 45 08             	mov    0x8(%ebp),%eax
c0109094:	8b 55 08             	mov    0x8(%ebp),%edx
c0109097:	89 10                	mov    %edx,(%eax)
}
c0109099:	90                   	nop
c010909a:	5d                   	pop    %ebp
c010909b:	c3                   	ret    

c010909c <syscall>:
{
c010909c:	55                   	push   %ebp
c010909d:	89 e5                	mov    %esp,%ebp
c010909f:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c01090a0:	8b 55 08             	mov    0x8(%ebp),%edx
c01090a3:	89 d7                	mov    %edx,%edi
c01090a5:	cd 80                	int    $0x80
}
c01090a7:	90                   	nop
c01090a8:	8b 7d fc             	mov    -0x4(%ebp),%edi
c01090ab:	c9                   	leave  
c01090ac:	c3                   	ret    

c01090ad <__mxsys_fork>:
#include <libs/mstdio.h>

extern volatile struct m_pcb* __current;//TODO MOVE TO .H AND TODO SCHEDULE

__DEFINE_MXSYSCALL(pid_t, fork)
{
c01090ad:	55                   	push   %ebp
c01090ae:	89 e5                	mov    %esp,%ebp
c01090b0:	83 ec 08             	sub    $0x8,%esp
    return m_fork();
c01090b3:	e8 71 02 00 00       	call   c0109329 <m_fork>
}
c01090b8:	c9                   	leave  
c01090b9:	c3                   	ret    

c01090ba <__mxsys_getpid>:

__DEFINE_MXSYSCALL(pid_t, getpid)
{
c01090ba:	55                   	push   %ebp
c01090bb:	89 e5                	mov    %esp,%ebp
    return __current->pid;
c01090bd:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01090c2:	8b 00                	mov    (%eax),%eax
}
c01090c4:	5d                   	pop    %ebp
c01090c5:	c3                   	ret    

c01090c6 <__mxsys_getppid>:

__DEFINE_MXSYSCALL(pid_t, getppid)
{
c01090c6:	55                   	push   %ebp
c01090c7:	89 e5                	mov    %esp,%ebp
    return __current->parent->pid;
c01090c9:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01090ce:	8b 40 04             	mov    0x4(%eax),%eax
c01090d1:	8b 00                	mov    (%eax),%eax
}
c01090d3:	5d                   	pop    %ebp
c01090d4:	c3                   	ret    

c01090d5 <init_proc>:

void init_proc(struct m_pcb* pcb)
{
c01090d5:	55                   	push   %ebp
c01090d6:	89 e5                	mov    %esp,%ebp
c01090d8:	83 ec 08             	sub    $0x8,%esp
    memset(pcb, 0, sizeof(*pcb));
c01090db:	83 ec 04             	sub    $0x4,%esp
c01090de:	6a 6c                	push   $0x6c
c01090e0:	6a 00                	push   $0x0
c01090e2:	ff 75 08             	push   0x8(%ebp)
c01090e5:	e8 7c 0d 00 00       	call   c0109e66 <memset>
c01090ea:	83 c4 10             	add    $0x10,%esp

    pcb->pid = alloc_pid();
c01090ed:	e8 a1 07 00 00       	call   c0109893 <alloc_pid>
c01090f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01090f5:	89 02                	mov    %eax,(%edx)
    pcb->state = PROC_CREATED;
c01090f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01090fa:	c6 40 44 10          	movb   $0x10,0x44(%eax)
    pcb->pro_ticks = 10;
c01090fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109101:	c7 40 5c 0a 00 00 00 	movl   $0xa,0x5c(%eax)
}
c0109108:	90                   	nop
c0109109:	c9                   	leave  
c010910a:	c3                   	ret    

c010910b <copy_pagetable>:

void* copy_pagetable(pid_t pid, uintptr_t mount_point)
{
c010910b:	55                   	push   %ebp
c010910c:	89 e5                	mov    %esp,%ebp
c010910e:	83 ec 38             	sub    $0x38,%esp
    void* ptd_pp = pmm_alloc_page(pid, PP_FGPERSIST);
c0109111:	83 ec 08             	sub    $0x8,%esp
c0109114:	6a 01                	push   $0x1
c0109116:	ff 75 08             	push   0x8(%ebp)
c0109119:	e8 54 d7 ff ff       	call   c0106872 <pmm_alloc_page>
c010911e:	83 c4 10             	add    $0x10,%esp
c0109121:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt_t* ptd = vmm_cover_map_page(pid, PG_MOUNT_1, ptd_pp, PG_PREM_RW,PG_PREM_RW);
c0109124:	83 ec 0c             	sub    $0xc,%esp
c0109127:	6a 03                	push   $0x3
c0109129:	6a 03                	push   $0x3
c010912b:	ff 75 ec             	push   -0x14(%ebp)
c010912e:	68 00 f0 7f af       	push   $0xaf7ff000
c0109133:	ff 75 08             	push   0x8(%ebp)
c0109136:	e8 88 e5 ff ff       	call   c01076c3 <vmm_cover_map_page>
c010913b:	83 c4 20             	add    $0x20,%esp
c010913e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    ptd_t* pptd = (ptd_t*)(mount_point | (0x3FF << 12));
c0109141:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109144:	0d 00 f0 3f 00       	or     $0x3ff000,%eax
c0109149:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c010914c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109153:	e9 e9 00 00 00       	jmp    c0109241 <copy_pagetable+0x136>
        ptd_t ptde = pptd[i];
c0109158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010915b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109162:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109165:	01 d0                	add    %edx,%eax
c0109167:	8b 00                	mov    (%eax),%eax
c0109169:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!ptde || !(ptde & PG_PRESENT)) {
c010916c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0109170:	74 0a                	je     c010917c <copy_pagetable+0x71>
c0109172:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109175:	83 e0 01             	and    $0x1,%eax
c0109178:	85 c0                	test   %eax,%eax
c010917a:	75 19                	jne    c0109195 <copy_pagetable+0x8a>
            ptd[i] = ptde;
c010917c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010917f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109186:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109189:	01 c2                	add    %eax,%edx
c010918b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010918e:	89 02                	mov    %eax,(%edx)
            continue;
c0109190:	e9 a8 00 00 00       	jmp    c010923d <copy_pagetable+0x132>
        }

        pt_t* ppt = (pt_t*)(mount_point | (i << 12));
c0109195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109198:	c1 e0 0c             	shl    $0xc,%eax
c010919b:	0b 45 0c             	or     0xc(%ebp),%eax
c010919e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        void* pt_pp = pmm_alloc_page(pid, PP_FGPERSIST);
c01091a1:	83 ec 08             	sub    $0x8,%esp
c01091a4:	6a 01                	push   $0x1
c01091a6:	ff 75 08             	push   0x8(%ebp)
c01091a9:	e8 c4 d6 ff ff       	call   c0106872 <pmm_alloc_page>
c01091ae:	83 c4 10             	add    $0x10,%esp
c01091b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        pt_t* pt = vmm_cover_map_page(pid, PG_MOUNT_2, pt_pp, PG_PREM_RW,PG_PREM_RW);
c01091b4:	83 ec 0c             	sub    $0xc,%esp
c01091b7:	6a 03                	push   $0x3
c01091b9:	6a 03                	push   $0x3
c01091bb:	ff 75 d8             	push   -0x28(%ebp)
c01091be:	68 00 e0 7f af       	push   $0xaf7fe000
c01091c3:	ff 75 08             	push   0x8(%ebp)
c01091c6:	e8 f8 e4 ff ff       	call   c01076c3 <vmm_cover_map_page>
c01091cb:	83 c4 20             	add    $0x20,%esp
c01091ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c01091d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01091d8:	eb 43                	jmp    c010921d <copy_pagetable+0x112>
            pt_t pte = ppt[j];
c01091da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01091e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091e7:	01 d0                	add    %edx,%eax
c01091e9:	8b 00                	mov    (%eax),%eax
c01091eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
            pmm_ref_page(pid, PG_ENTRY_ADDR(pte));
c01091ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01091f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01091f6:	83 ec 08             	sub    $0x8,%esp
c01091f9:	50                   	push   %eax
c01091fa:	ff 75 08             	push   0x8(%ebp)
c01091fd:	e8 40 d8 ff ff       	call   c0106a42 <pmm_ref_page>
c0109202:	83 c4 10             	add    $0x10,%esp
            pt[j] = pte;
c0109205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109208:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010920f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109212:	01 c2                	add    %eax,%edx
c0109214:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109217:	89 02                	mov    %eax,(%edx)
        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c0109219:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010921d:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0109224:	76 b4                	jbe    c01091da <copy_pagetable+0xcf>
        }

        ptd[i] = (uintptr_t)pt_pp | PG_PREM_RW;
c0109226:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0109229:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010922c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0109233:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109236:	01 c8                	add    %ecx,%eax
c0109238:	83 ca 03             	or     $0x3,%edx
c010923b:	89 10                	mov    %edx,(%eax)
    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c010923d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109241:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0109248:	0f 86 0a ff ff ff    	jbe    c0109158 <copy_pagetable+0x4d>
    }

    ptd[PG_MAX_ENTRIES - 1] = PDE(T_SELF_REF_PERM, ptd_pp);
c010924e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109251:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109256:	89 c2                	mov    %eax,%edx
c0109258:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010925b:	05 fc 0f 00 00       	add    $0xffc,%eax
c0109260:	83 ca 1b             	or     $0x1b,%edx
c0109263:	89 10                	mov    %edx,(%eax)

    return ptd_pp;
c0109265:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0109268:	c9                   	leave  
c0109269:	c3                   	ret    

c010926a <setup_proc_mem>:

void* setup_proc_mem(struct m_pcb* proc, uintptr_t usedMnt)
{
c010926a:	55                   	push   %ebp
c010926b:	89 e5                	mov    %esp,%ebp
c010926d:	83 ec 28             	sub    $0x28,%esp
    // copy the entire kernel page table
    pid_t pid = proc->pid;
c0109270:	8b 45 08             	mov    0x8(%ebp),%eax
c0109273:	8b 00                	mov    (%eax),%eax
c0109275:	89 45 f0             	mov    %eax,-0x10(%ebp)
    void* pt_copy = copy_pagetable(pid, usedMnt);
c0109278:	83 ec 08             	sub    $0x8,%esp
c010927b:	ff 75 0c             	push   0xc(%ebp)
c010927e:	ff 75 f0             	push   -0x10(%ebp)
c0109281:	e8 85 fe ff ff       	call   c010910b <copy_pagetable>
c0109286:	83 c4 10             	add    $0x10,%esp
c0109289:	89 45 ec             	mov    %eax,-0x14(%ebp)

    vmm_mount_pd(PD_MOUNT_2, pt_copy); // 将新进程的页表挂载到挂载点#2
c010928c:	83 ec 08             	sub    $0x8,%esp
c010928f:	ff 75 ec             	push   -0x14(%ebp)
c0109292:	68 00 00 80 af       	push   $0xaf800000
c0109297:	e8 86 e8 ff ff       	call   c0107b22 <vmm_mount_pd>
c010929c:	83 c4 10             	add    $0x10,%esp

    // copy the kernel stack
    for (size_t i = KSTACK_START >> 12; i <= (KSTACK_TOP >> 12); i++) {
c010929f:	c7 45 f4 f0 fb 0f 00 	movl   $0xffbf0,-0xc(%ebp)
c01092a6:	eb 6c                	jmp    c0109314 <setup_proc_mem+0xaa>
        volatile pt_t* ppte = &PTE_MOUNTED(PD_MOUNT_2, i);
c01092a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092ab:	25 ff 03 00 00       	and    $0x3ff,%eax
c01092b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01092b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092ba:	c1 e0 02             	shl    $0x2,%eax
c01092bd:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c01092c2:	0d 00 00 80 af       	or     $0xaf800000,%eax
c01092c7:	01 d0                	add    %edx,%eax
c01092c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //kprintf("ppte0x%x", ppte);
        /*
            The TLB caching keep the rewrite to PTE
            from updating. 
        */
        cpu_invplg(ppte);
c01092cc:	83 ec 0c             	sub    $0xc,%esp
c01092cf:	ff 75 e8             	push   -0x18(%ebp)
c01092d2:	e8 a2 fd ff ff       	call   c0109079 <cpu_invplg>
c01092d7:	83 c4 10             	add    $0x10,%esp

        pt_t p = *ppte;
c01092da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01092dd:	8b 00                	mov    (%eax),%eax
c01092df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        void* ppa = vmm_dup_page(pid, PG_ENTRY_ADDR(p));
c01092e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01092ea:	83 ec 08             	sub    $0x8,%esp
c01092ed:	50                   	push   %eax
c01092ee:	ff 75 f0             	push   -0x10(%ebp)
c01092f1:	e8 9a e7 ff ff       	call   c0107a90 <vmm_dup_page>
c01092f6:	83 c4 10             	add    $0x10,%esp
c01092f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        //kprintf("ppa0x%x ", ppa);
        *ppte = (p & 0xfff) | (uintptr_t)ppa;
c01092fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092ff:	25 ff 0f 00 00       	and    $0xfff,%eax
c0109304:	89 c2                	mov    %eax,%edx
c0109306:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109309:	09 c2                	or     %eax,%edx
c010930b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010930e:	89 10                	mov    %edx,(%eax)
    for (size_t i = KSTACK_START >> 12; i <= (KSTACK_TOP >> 12); i++) {
c0109310:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109314:	81 7d f4 ff fb 0f 00 	cmpl   $0xffbff,-0xc(%ebp)
c010931b:	76 8b                	jbe    c01092a8 <setup_proc_mem+0x3e>
    // 定义用户栈区域，但是不分配实际的物理页。我们会在Page fault
    // handler里面实现动态分配物理页的逻辑。
    // if(pid == 0)
    //     proc->page_table = __current->page_table;
    // else
    proc->page_table = pt_copy;
c010931d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109320:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109323:	89 50 64             	mov    %edx,0x64(%eax)
}
c0109326:	90                   	nop
c0109327:	c9                   	leave  
c0109328:	c3                   	ret    

c0109329 <m_fork>:

pid_t m_fork()
{
c0109329:	55                   	push   %ebp
c010932a:	89 e5                	mov    %esp,%ebp
c010932c:	81 ec a8 00 00 00    	sub    $0xa8,%esp
    struct m_pcb curr_pcb;
    init_proc(&curr_pcb);
c0109332:	83 ec 0c             	sub    $0xc,%esp
c0109335:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010933b:	50                   	push   %eax
c010933c:	e8 94 fd ff ff       	call   c01090d5 <init_proc>
c0109341:	83 c4 10             	add    $0x10,%esp

    curr_pcb.process_mm = __current->process_mm;
c0109344:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109349:	8b 40 58             	mov    0x58(%eax),%eax
c010934c:	89 45 bc             	mov    %eax,-0x44(%ebp)
    curr_pcb.intr_contxt = __current->intr_contxt;
c010934f:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109354:	8b 50 08             	mov    0x8(%eax),%edx
c0109357:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
c010935d:	8b 50 0c             	mov    0xc(%eax),%edx
c0109360:	89 95 70 ff ff ff    	mov    %edx,-0x90(%ebp)
c0109366:	8b 50 10             	mov    0x10(%eax),%edx
c0109369:	89 95 74 ff ff ff    	mov    %edx,-0x8c(%ebp)
c010936f:	8b 50 14             	mov    0x14(%eax),%edx
c0109372:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
c0109378:	8b 50 18             	mov    0x18(%eax),%edx
c010937b:	89 95 7c ff ff ff    	mov    %edx,-0x84(%ebp)
c0109381:	8b 50 1c             	mov    0x1c(%eax),%edx
c0109384:	89 55 80             	mov    %edx,-0x80(%ebp)
c0109387:	8b 50 20             	mov    0x20(%eax),%edx
c010938a:	89 55 84             	mov    %edx,-0x7c(%ebp)
c010938d:	8b 50 24             	mov    0x24(%eax),%edx
c0109390:	89 55 88             	mov    %edx,-0x78(%ebp)
c0109393:	8b 50 28             	mov    0x28(%eax),%edx
c0109396:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0109399:	8b 50 2c             	mov    0x2c(%eax),%edx
c010939c:	89 55 90             	mov    %edx,-0x70(%ebp)
c010939f:	8b 50 30             	mov    0x30(%eax),%edx
c01093a2:	89 55 94             	mov    %edx,-0x6c(%ebp)
c01093a5:	8b 50 34             	mov    0x34(%eax),%edx
c01093a8:	89 55 98             	mov    %edx,-0x68(%ebp)
c01093ab:	8b 50 38             	mov    0x38(%eax),%edx
c01093ae:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01093b1:	8b 50 3c             	mov    0x3c(%eax),%edx
c01093b4:	89 55 a0             	mov    %edx,-0x60(%ebp)
c01093b7:	8b 40 40             	mov    0x40(%eax),%eax
c01093ba:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    curr_pcb.parent = __current;
c01093bd:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01093c2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

#ifdef USE_KERNEL_PG
    setup_proc_mem(&pcb, PD_MOUNT_1); //挂载点#1是当前进程的页表
#else
    setup_proc_mem(&curr_pcb, PD_REFERENCED);
c01093c8:	83 ec 08             	sub    $0x8,%esp
c01093cb:	68 00 00 c0 ff       	push   $0xffc00000
c01093d0:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c01093d6:	50                   	push   %eax
c01093d7:	e8 8e fe ff ff       	call   c010926a <setup_proc_mem>
c01093dc:	83 c4 10             	add    $0x10,%esp
#endif

        // 根据 mm_region 进一步配置页表
    if (!__current->process_mm) {
c01093df:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01093e4:	8b 40 58             	mov    0x58(%eax),%eax
c01093e7:	85 c0                	test   %eax,%eax
c01093e9:	0f 84 68 01 00 00    	je     c0109557 <m_fork+0x22e>
        goto not_copy;
    }

    llist_init_head(&curr_pcb.process_mm);
c01093ef:	83 ec 0c             	sub    $0xc,%esp
c01093f2:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c01093f8:	83 c0 58             	add    $0x58,%eax
c01093fb:	50                   	push   %eax
c01093fc:	e8 84 fc ff ff       	call   c0109085 <llist_init_head>
c0109401:	83 c4 10             	add    $0x10,%esp
    struct mm_region *pos, *n;
    llist_for_each(pos, n, &__current->process_mm->head, head)
c0109404:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109409:	8b 40 58             	mov    0x58(%eax),%eax
c010940c:	8b 40 04             	mov    0x4(%eax),%eax
c010940f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109412:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109415:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010941b:	8b 40 04             	mov    0x4(%eax),%eax
c010941e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109421:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109424:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109427:	e9 18 01 00 00       	jmp    c0109544 <m_fork+0x21b>
    {
        region_add(&curr_pcb, pos->start, pos->end, pos->attr);
c010942c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010942f:	8b 48 10             	mov    0x10(%eax),%ecx
c0109432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109435:	8b 50 0c             	mov    0xc(%eax),%edx
c0109438:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010943b:	8b 40 08             	mov    0x8(%eax),%eax
c010943e:	51                   	push   %ecx
c010943f:	52                   	push   %edx
c0109440:	50                   	push   %eax
c0109441:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c0109447:	50                   	push   %eax
c0109448:	e8 f8 dd ff ff       	call   c0107245 <region_add>
c010944d:	83 c4 10             	add    $0x10,%esp

        // 如果写共享，则不作处理。
        if ((pos->attr & REGION_WSHARED)) {
c0109450:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109453:	8b 40 10             	mov    0x10(%eax),%eax
c0109456:	83 e0 02             	and    $0x2,%eax
c0109459:	85 c0                	test   %eax,%eax
c010945b:	0f 85 cd 00 00 00    	jne    c010952e <m_fork+0x205>
            continue;
        }

        uintptr_t start_vpn = PG_ALIGN(pos->start) >> 12;
c0109461:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109464:	8b 40 08             	mov    0x8(%eax),%eax
c0109467:	c1 e8 0c             	shr    $0xc,%eax
c010946a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t end_vpn = PG_ALIGN(pos->end) >> 12;
c010946d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109470:	8b 40 0c             	mov    0xc(%eax),%eax
c0109473:	c1 e8 0c             	shr    $0xc,%eax
c0109476:	89 45 dc             	mov    %eax,-0x24(%ebp)
        for (size_t i = start_vpn; i < end_vpn; i++) {
c0109479:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010947c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010947f:	e9 9c 00 00 00       	jmp    c0109520 <m_fork+0x1f7>
            pt_t* curproc = &PTE_MOUNTED(PD_MOUNT_1, i);
c0109484:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109487:	25 ff 03 00 00       	and    $0x3ff,%eax
c010948c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109493:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109496:	c1 e0 02             	shl    $0x2,%eax
c0109499:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c010949e:	0d 00 00 c0 af       	or     $0xafc00000,%eax
c01094a3:	01 d0                	add    %edx,%eax
c01094a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
            pt_t* newproc = &PTE_MOUNTED(PD_MOUNT_2, i);
c01094a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094ab:	25 ff 03 00 00       	and    $0x3ff,%eax
c01094b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01094b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094ba:	c1 e0 02             	shl    $0x2,%eax
c01094bd:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c01094c2:	0d 00 00 80 af       	or     $0xaf800000,%eax
c01094c7:	01 d0                	add    %edx,%eax
c01094c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            cpu_invplg(newproc);
c01094cc:	83 ec 0c             	sub    $0xc,%esp
c01094cf:	ff 75 d4             	push   -0x2c(%ebp)
c01094d2:	e8 a2 fb ff ff       	call   c0109079 <cpu_invplg>
c01094d7:	83 c4 10             	add    $0x10,%esp

            if (pos->attr == REGION_RSHARED) {
c01094da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094dd:	8b 40 10             	mov    0x10(%eax),%eax
c01094e0:	83 f8 01             	cmp    $0x1,%eax
c01094e3:	75 2e                	jne    c0109513 <m_fork+0x1ea>
                // 如果读共享，则将两者的都标注为只读，那么任何写入都将会应用COW策略。
                cpu_invplg(curproc);
c01094e5:	83 ec 0c             	sub    $0xc,%esp
c01094e8:	ff 75 d8             	push   -0x28(%ebp)
c01094eb:	e8 89 fb ff ff       	call   c0109079 <cpu_invplg>
c01094f0:	83 c4 10             	add    $0x10,%esp
                *curproc = *curproc & ~PG_WRITE;
c01094f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01094f6:	8b 00                	mov    (%eax),%eax
c01094f8:	83 e0 fd             	and    $0xfffffffd,%eax
c01094fb:	89 c2                	mov    %eax,%edx
c01094fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109500:	89 10                	mov    %edx,(%eax)
                *newproc = *newproc & ~PG_WRITE;
c0109502:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109505:	8b 00                	mov    (%eax),%eax
c0109507:	83 e0 fd             	and    $0xfffffffd,%eax
c010950a:	89 c2                	mov    %eax,%edx
c010950c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010950f:	89 10                	mov    %edx,(%eax)
c0109511:	eb 09                	jmp    c010951c <m_fork+0x1f3>
            } else {
                // 如果是私有页，则将该页从新进程中移除。
                *newproc = 0;
c0109513:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109516:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        for (size_t i = start_vpn; i < end_vpn; i++) {
c010951c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0109520:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109523:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0109526:	0f 82 58 ff ff ff    	jb     c0109484 <m_fork+0x15b>
c010952c:	eb 01                	jmp    c010952f <m_fork+0x206>
            continue;
c010952e:	90                   	nop
    llist_for_each(pos, n, &__current->process_mm->head, head)
c010952f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109532:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109538:	8b 40 04             	mov    0x4(%eax),%eax
c010953b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010953e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109541:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109544:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109549:	8b 40 58             	mov    0x58(%eax),%eax
c010954c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010954f:	0f 85 d7 fe ff ff    	jne    c010942c <m_fork+0x103>
            }
        }
    }

not_copy:
c0109555:	eb 01                	jmp    c0109558 <m_fork+0x22f>
        goto not_copy;
c0109557:	90                   	nop
    vmm_unmount_pd(PD_MOUNT_2);
c0109558:	83 ec 0c             	sub    $0xc,%esp
c010955b:	68 00 00 80 af       	push   $0xaf800000
c0109560:	e8 fc e5 ff ff       	call   c0107b61 <vmm_unmount_pd>
c0109565:	83 c4 10             	add    $0x10,%esp

    // 正如同fork，返回两次。
    curr_pcb.intr_contxt.registers.eax = 0;
c0109568:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%ebp)
c010956f:	00 00 00 

    push_process(&curr_pcb);
c0109572:	83 ec 0c             	sub    $0xc,%esp
c0109575:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010957b:	50                   	push   %eax
c010957c:	e8 66 03 00 00       	call   c01098e7 <push_process>
c0109581:	83 c4 10             	add    $0x10,%esp

    return curr_pcb.pid;
c0109584:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
}
c010958a:	c9                   	leave  
c010958b:	c3                   	ret    

c010958c <__del_pagetable>:

void __del_pagetable(pid_t pid, uintptr_t mount_point)
{
c010958c:	55                   	push   %ebp
c010958d:	89 e5                	mov    %esp,%ebp
c010958f:	83 ec 28             	sub    $0x28,%esp
    ptd_t* pptd = (ptd_t*)(mount_point | (0x3FF << 12));
c0109592:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109595:	0d 00 f0 3f 00       	or     $0x3ff000,%eax
c010959a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c010959d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01095a4:	e9 99 00 00 00       	jmp    c0109642 <__del_pagetable+0xb6>
        ptd_t ptde = pptd[i];
c01095a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01095b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01095b6:	01 d0                	add    %edx,%eax
c01095b8:	8b 00                	mov    (%eax),%eax
c01095ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (!ptde || !(ptde & PG_PRESENT)) {
c01095bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01095c1:	74 7a                	je     c010963d <__del_pagetable+0xb1>
c01095c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01095c6:	83 e0 01             	and    $0x1,%eax
c01095c9:	85 c0                	test   %eax,%eax
c01095cb:	74 70                	je     c010963d <__del_pagetable+0xb1>
            continue;
        }

        pt_t* ppt = (pt_t*)(mount_point | (i << 12));
c01095cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095d0:	c1 e0 0c             	shl    $0xc,%eax
c01095d3:	0b 45 0c             	or     0xc(%ebp),%eax
c01095d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c01095d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01095e0:	eb 39                	jmp    c010961b <__del_pagetable+0x8f>
            pt_t pte = ppt[j];
c01095e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01095ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01095ef:	01 d0                	add    %edx,%eax
c01095f1:	8b 00                	mov    (%eax),%eax
c01095f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
            // free the 4KB data page
            if ((pte & PG_PRESENT)) {
c01095f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01095f9:	83 e0 01             	and    $0x1,%eax
c01095fc:	85 c0                	test   %eax,%eax
c01095fe:	74 17                	je     c0109617 <__del_pagetable+0x8b>
                pmm_free_page(pid, PG_ENTRY_ADDR(pte));
c0109600:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109603:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109608:	83 ec 08             	sub    $0x8,%esp
c010960b:	50                   	push   %eax
c010960c:	ff 75 08             	push   0x8(%ebp)
c010960f:	e8 a5 d3 ff ff       	call   c01069b9 <pmm_free_page>
c0109614:	83 c4 10             	add    $0x10,%esp
        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c0109617:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010961b:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0109622:	76 be                	jbe    c01095e2 <__del_pagetable+0x56>
            }
        }
        // free the L2 page table
        pmm_free_page(pid, PG_ENTRY_ADDR(ptde));
c0109624:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109627:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010962c:	83 ec 08             	sub    $0x8,%esp
c010962f:	50                   	push   %eax
c0109630:	ff 75 08             	push   0x8(%ebp)
c0109633:	e8 81 d3 ff ff       	call   c01069b9 <pmm_free_page>
c0109638:	83 c4 10             	add    $0x10,%esp
c010963b:	eb 01                	jmp    c010963e <__del_pagetable+0xb2>
            continue;
c010963d:	90                   	nop
    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c010963e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109642:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0109649:	0f 86 5a ff ff ff    	jbe    c01095a9 <__del_pagetable+0x1d>
    }
    // free the L1 directory
    pmm_free_page(pid, PG_ENTRY_ADDR(pptd[PG_MAX_ENTRIES - 1]));
c010964f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109652:	05 fc 0f 00 00       	add    $0xffc,%eax
c0109657:	8b 00                	mov    (%eax),%eax
c0109659:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010965e:	83 ec 08             	sub    $0x8,%esp
c0109661:	50                   	push   %eax
c0109662:	ff 75 08             	push   0x8(%ebp)
c0109665:	e8 4f d3 ff ff       	call   c01069b9 <pmm_free_page>
c010966a:	83 c4 10             	add    $0x10,%esp
c010966d:	90                   	nop
c010966e:	c9                   	leave  
c010966f:	c3                   	ret    

c0109670 <cpu_lcr3>:
{
c0109670:	55                   	push   %ebp
c0109671:	89 e5                	mov    %esp,%ebp
    asm("mov %0, %%cr3" ::"r"(v));
c0109673:	8b 45 08             	mov    0x8(%ebp),%eax
c0109676:	0f 22 d8             	mov    %eax,%cr3
}
c0109679:	90                   	nop
c010967a:	5d                   	pop    %ebp
c010967b:	c3                   	ret    

c010967c <__llist_add>:
{
c010967c:	55                   	push   %ebp
c010967d:	89 e5                	mov    %esp,%ebp
    next->prev = elem;
c010967f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109682:	8b 55 08             	mov    0x8(%ebp),%edx
c0109685:	89 10                	mov    %edx,(%eax)
    elem->next = next;
c0109687:	8b 45 08             	mov    0x8(%ebp),%eax
c010968a:	8b 55 10             	mov    0x10(%ebp),%edx
c010968d:	89 50 04             	mov    %edx,0x4(%eax)
    elem->prev = prev;
c0109690:	8b 45 08             	mov    0x8(%ebp),%eax
c0109693:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109696:	89 10                	mov    %edx,(%eax)
    prev->next = elem;
c0109698:	8b 45 0c             	mov    0xc(%ebp),%eax
c010969b:	8b 55 08             	mov    0x8(%ebp),%edx
c010969e:	89 50 04             	mov    %edx,0x4(%eax)
}
c01096a1:	90                   	nop
c01096a2:	5d                   	pop    %ebp
c01096a3:	c3                   	ret    

c01096a4 <llist_init_head>:
static inline void llist_init_head(struct llist_header* head) {
c01096a4:	55                   	push   %ebp
c01096a5:	89 e5                	mov    %esp,%ebp
    head->next = head;
c01096a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01096aa:	8b 55 08             	mov    0x8(%ebp),%edx
c01096ad:	89 50 04             	mov    %edx,0x4(%eax)
    head->prev = head;
c01096b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01096b3:	8b 55 08             	mov    0x8(%ebp),%edx
c01096b6:	89 10                	mov    %edx,(%eax)
}
c01096b8:	90                   	nop
c01096b9:	5d                   	pop    %ebp
c01096ba:	c3                   	ret    

c01096bb <llist_append>:
{
c01096bb:	55                   	push   %ebp
c01096bc:	89 e5                	mov    %esp,%ebp
    __llist_add(elem, head, head->next);
c01096be:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c1:	8b 40 04             	mov    0x4(%eax),%eax
c01096c4:	50                   	push   %eax
c01096c5:	ff 75 08             	push   0x8(%ebp)
c01096c8:	ff 75 0c             	push   0xc(%ebp)
c01096cb:	e8 ac ff ff ff       	call   c010967c <__llist_add>
c01096d0:	83 c4 0c             	add    $0xc,%esp
}
c01096d3:	90                   	nop
c01096d4:	c9                   	leave  
c01096d5:	c3                   	ret    

c01096d6 <llist_empty>:

static inline int llist_empty(struct llist_header* elem) {
c01096d6:	55                   	push   %ebp
c01096d7:	89 e5                	mov    %esp,%ebp
    return elem->next == elem;
c01096d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01096dc:	8b 40 04             	mov    0x4(%eax),%eax
c01096df:	39 45 08             	cmp    %eax,0x8(%ebp)
c01096e2:	0f 94 c0             	sete   %al
c01096e5:	0f b6 c0             	movzbl %al,%eax
}
c01096e8:	5d                   	pop    %ebp
c01096e9:	c3                   	ret    

c01096ea <llist_delete>:

static inline void
llist_delete(struct llist_header* elem) {
c01096ea:	55                   	push   %ebp
c01096eb:	89 e5                	mov    %esp,%ebp
    elem->prev->next = elem->next;
c01096ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01096f0:	8b 00                	mov    (%eax),%eax
c01096f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01096f5:	8b 52 04             	mov    0x4(%edx),%edx
c01096f8:	89 50 04             	mov    %edx,0x4(%eax)
    elem->next->prev = elem->next;
c01096fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01096fe:	8b 40 04             	mov    0x4(%eax),%eax
c0109701:	8b 55 08             	mov    0x8(%ebp),%edx
c0109704:	8b 52 04             	mov    0x4(%edx),%edx
c0109707:	89 10                	mov    %edx,(%eax)
    
    // make elem orphaned
    elem->prev = elem;
c0109709:	8b 45 08             	mov    0x8(%ebp),%eax
c010970c:	8b 55 08             	mov    0x8(%ebp),%edx
c010970f:	89 10                	mov    %edx,(%eax)
    elem->next = elem;
c0109711:	8b 45 08             	mov    0x8(%ebp),%eax
c0109714:	8b 55 08             	mov    0x8(%ebp),%edx
c0109717:	89 50 04             	mov    %edx,0x4(%eax)
}
c010971a:	90                   	nop
c010971b:	5d                   	pop    %ebp
c010971c:	c3                   	ret    

c010971d <io_outb>:
{
c010971d:	55                   	push   %ebp
c010971e:	89 e5                	mov    %esp,%ebp
c0109720:	83 ec 04             	sub    $0x4,%esp
c0109723:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109726:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0109729:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010972d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109730:	ee                   	out    %al,(%dx)
}
c0109731:	90                   	nop
c0109732:	c9                   	leave  
c0109733:	c3                   	ret    

c0109734 <syscall>:
{
c0109734:	55                   	push   %ebp
c0109735:	89 e5                	mov    %esp,%ebp
c0109737:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0109738:	8b 55 08             	mov    0x8(%ebp),%edx
c010973b:	89 d7                	mov    %edx,%edi
c010973d:	cd 80                	int    $0x80
}
c010973f:	90                   	nop
c0109740:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0109743:	c9                   	leave  
c0109744:	c3                   	ret    

c0109745 <sched_init>:
extern void __proc_table;

struct scheduler sched_ctx;

int sched_init()
{
c0109745:	55                   	push   %ebp
c0109746:	89 e5                	mov    %esp,%ebp
c0109748:	83 ec 18             	sub    $0x18,%esp
    size_t pg_size = ROUNDUP(sizeof(struct m_pcb) * MAX_PROCESS, 0x1000);
c010974b:	c7 45 f4 00 e0 00 00 	movl   $0xe000,-0xc(%ebp)
    if(vmm_alloc_pages(KERNEL_PID, &__proc_table, pg_size, PG_PREM_RW, PP_FGPERSIST)){
c0109752:	83 ec 0c             	sub    $0xc,%esp
c0109755:	6a 01                	push   $0x1
c0109757:	6a 03                	push   $0x3
c0109759:	ff 75 f4             	push   -0xc(%ebp)
c010975c:	68 00 80 d1 c0       	push   $0xc0d18000
c0109761:	6a ff                	push   $0xffffffff
c0109763:	e8 27 e0 ff ff       	call   c010778f <vmm_alloc_pages>
c0109768:	83 c4 20             	add    $0x20,%esp
c010976b:	85 c0                	test   %eax,%eax
c010976d:	74 25                	je     c0109794 <sched_init+0x4f>
        sched_ctx = (struct scheduler){ ._procs = (struct m_pcb*)&__proc_table,
c010976f:	c7 05 ec b1 d0 c0 00 	movl   $0xc0d18000,0xc0d0b1ec
c0109776:	80 d1 c0 
c0109779:	c7 05 f0 b1 d0 c0 00 	movl   $0x0,0xc0d0b1f0
c0109780:	00 00 00 
c0109783:	c7 05 f4 b1 d0 c0 00 	movl   $0x0,0xc0d0b1f4
c010978a:	00 00 00 
                                    .ptable_len = 0,
                                    .procs_index = 0 };
                                    return 1;}
c010978d:	b8 01 00 00 00       	mov    $0x1,%eax
c0109792:	eb 05                	jmp    c0109799 <sched_init+0x54>
    return 0;
c0109794:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
c0109799:	c9                   	leave  
c010979a:	c3                   	ret    

c010979b <run>:

void run(struct m_pcb* proc)
{
c010979b:	55                   	push   %ebp
c010979c:	89 e5                	mov    %esp,%ebp
    if (!(__current->state & ~PROC_RUNNING)) {
c010979e:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01097a3:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c01097a7:	0f b6 c0             	movzbl %al,%eax
c01097aa:	83 e0 fe             	and    $0xfffffffe,%eax
c01097ad:	85 c0                	test   %eax,%eax
c01097af:	75 09                	jne    c01097ba <run+0x1f>
        __current->state = PROC_STOPPED;
c01097b1:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01097b6:	c6 40 44 00          	movb   $0x0,0x44(%eax)
    }
    proc->state = PROC_RUNNING;
c01097ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01097bd:	c6 40 44 01          	movb   $0x1,0x44(%eax)


    if (__current->page_table != proc->page_table) {
c01097c1:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01097c6:	8b 50 64             	mov    0x64(%eax),%edx
c01097c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01097cc:	8b 40 64             	mov    0x64(%eax),%eax
c01097cf:	39 c2                	cmp    %eax,%edx
c01097d1:	74 1b                	je     c01097ee <run+0x53>
        __current = proc;
c01097d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d6:	a3 60 b1 d0 c0       	mov    %eax,0xc0d0b160
        cpu_lcr3(__current->page_table);
c01097db:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01097e0:	8b 40 64             	mov    0x64(%eax),%eax
c01097e3:	50                   	push   %eax
c01097e4:	e8 87 fe ff ff       	call   c0109670 <cpu_lcr3>
c01097e9:	83 c4 04             	add    $0x4,%esp
c01097ec:	eb 08                	jmp    c01097f6 <run+0x5b>
        // from now on, the we are in the kstack of another process
    } else {
        __current = proc;
c01097ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01097f1:	a3 60 b1 d0 c0       	mov    %eax,0xc0d0b160
    }

    io_outb(0x20, 0x20);
c01097f6:	6a 20                	push   $0x20
c01097f8:	6a 20                	push   $0x20
c01097fa:	e8 1e ff ff ff       	call   c010971d <io_outb>
c01097ff:	83 c4 08             	add    $0x8,%esp
    io_outb(0xa0, 0x20);//EOI end the int
c0109802:	6a 20                	push   $0x20
c0109804:	68 a0 00 00 00       	push   $0xa0
c0109809:	e8 0f ff ff ff       	call   c010971d <io_outb>
c010980e:	83 c4 08             	add    $0x8,%esp

    asm volatile("pushl %0\n"
                 "jmp soft_iret\n" ::"r"(&__current->intr_contxt)
c0109811:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109816:	83 c0 08             	add    $0x8,%eax
    asm volatile("pushl %0\n"
c0109819:	50                   	push   %eax
c010981a:	e9 bf ea ff ff       	jmp    c01082de <soft_iret>
                 : "memory");
}
c010981f:	90                   	nop
c0109820:	c9                   	leave  
c0109821:	c3                   	ret    

c0109822 <schedule>:

void schedule()
{
c0109822:	55                   	push   %ebp
c0109823:	89 e5                	mov    %esp,%ebp
c0109825:	83 ec 10             	sub    $0x10,%esp
    if (!sched_ctx.ptable_len) {
c0109828:	a1 f4 b1 d0 c0       	mov    0xc0d0b1f4,%eax
c010982d:	85 c0                	test   %eax,%eax
c010982f:	74 5f                	je     c0109890 <schedule+0x6e>
        return;
    }

    struct m_pcb* next;
    int prev_ptr = sched_ctx.procs_index;
c0109831:	a1 f0 b1 d0 c0       	mov    0xc0d0b1f0,%eax
c0109836:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int ptr = prev_ptr;
c0109839:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010983c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // round-robin scheduler
    do {
        ptr = (ptr + 1) % sched_ctx.ptable_len;
c010983f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109842:	83 c0 01             	add    $0x1,%eax
c0109845:	8b 0d f4 b1 d0 c0    	mov    0xc0d0b1f4,%ecx
c010984b:	ba 00 00 00 00       	mov    $0x0,%edx
c0109850:	f7 f1                	div    %ecx
c0109852:	89 d0                	mov    %edx,%eax
c0109854:	89 45 fc             	mov    %eax,-0x4(%ebp)
        next = &sched_ctx._procs[ptr];
c0109857:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c010985d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109860:	6b c0 6c             	imul   $0x6c,%eax,%eax
c0109863:	01 d0                	add    %edx,%eax
c0109865:	89 45 f4             	mov    %eax,-0xc(%ebp)
    } while (next->state != PROC_STOPPED && ptr != prev_ptr);
c0109868:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010986b:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c010986f:	84 c0                	test   %al,%al
c0109871:	74 08                	je     c010987b <schedule+0x59>
c0109873:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109876:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109879:	75 c4                	jne    c010983f <schedule+0x1d>

    sched_ctx.procs_index = ptr;
c010987b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010987e:	a3 f0 b1 d0 c0       	mov    %eax,0xc0d0b1f0

    run(next);
c0109883:	ff 75 f4             	push   -0xc(%ebp)
c0109886:	e8 10 ff ff ff       	call   c010979b <run>
c010988b:	83 c4 04             	add    $0x4,%esp
c010988e:	eb 01                	jmp    c0109891 <schedule+0x6f>
        return;
c0109890:	90                   	nop
}
c0109891:	c9                   	leave  
c0109892:	c3                   	ret    

c0109893 <alloc_pid>:

pid_t alloc_pid()
{
c0109893:	55                   	push   %ebp
c0109894:	89 e5                	mov    %esp,%ebp
c0109896:	83 ec 18             	sub    $0x18,%esp
    pid_t i = 0;
c0109899:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;
c01098a0:	eb 04                	jmp    c01098a6 <alloc_pid+0x13>
         i < sched_ctx.ptable_len && sched_ctx._procs[i].state != PROC_DESTROY;
         i++)
c01098a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
         i < sched_ctx.ptable_len && sched_ctx._procs[i].state != PROC_DESTROY;
c01098a6:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c01098ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098af:	39 c2                	cmp    %eax,%edx
c01098b1:	76 16                	jbe    c01098c9 <alloc_pid+0x36>
c01098b3:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c01098b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098bc:	6b c0 6c             	imul   $0x6c,%eax,%eax
c01098bf:	01 d0                	add    %edx,%eax
c01098c1:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c01098c5:	3c 04                	cmp    $0x4,%al
c01098c7:	75 d9                	jne    c01098a2 <alloc_pid+0xf>
        ;

    if (i == MAX_PROCESS) {
c01098c9:	81 7d f4 00 02 00 00 	cmpl   $0x200,-0xc(%ebp)
c01098d0:	75 10                	jne    c01098e2 <alloc_pid+0x4f>
        kprintf("Panic in Ponyville shimmer!");
c01098d2:	83 ec 0c             	sub    $0xc,%esp
c01098d5:	68 44 d6 d0 c0       	push   $0xc0d0d644
c01098da:	e8 f0 02 00 00       	call   c0109bcf <kprintf>
c01098df:	83 c4 10             	add    $0x10,%esp
    }
    return i;
c01098e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01098e5:	c9                   	leave  
c01098e6:	c3                   	ret    

c01098e7 <push_process>:

void
push_process(struct m_pcb* process)
{
c01098e7:	55                   	push   %ebp
c01098e8:	89 e5                	mov    %esp,%ebp
c01098ea:	57                   	push   %edi
c01098eb:	56                   	push   %esi
c01098ec:	53                   	push   %ebx
c01098ed:	83 ec 10             	sub    $0x10,%esp
    int index = process->pid;
c01098f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f3:	8b 00                	mov    (%eax),%eax
c01098f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (index < 0 || index > sched_ctx.ptable_len) {
c01098f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01098fc:	78 0d                	js     c010990b <push_process+0x24>
c01098fe:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c0109904:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109907:	39 c2                	cmp    %eax,%edx
c0109909:	73 11                	jae    c010991c <push_process+0x35>
        __current->k_status = MXINVLDPID;
c010990b:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109910:	c7 40 68 fc ff ff ff 	movl   $0xfffffffc,0x68(%eax)
        return;
c0109917:	e9 92 00 00 00       	jmp    c01099ae <push_process+0xc7>
    }

    if (index == sched_ctx.ptable_len) {
c010991c:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c0109922:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109925:	39 c2                	cmp    %eax,%edx
c0109927:	75 0d                	jne    c0109936 <push_process+0x4f>
        sched_ctx.ptable_len++;
c0109929:	a1 f4 b1 d0 c0       	mov    0xc0d0b1f4,%eax
c010992e:	83 c0 01             	add    $0x1,%eax
c0109931:	a3 f4 b1 d0 c0       	mov    %eax,0xc0d0b1f4
    }

    sched_ctx._procs[index] = *process;
c0109936:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c010993c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010993f:	6b c0 6c             	imul   $0x6c,%eax,%eax
c0109942:	01 c2                	add    %eax,%edx
c0109944:	8b 45 08             	mov    0x8(%ebp),%eax
c0109947:	89 c3                	mov    %eax,%ebx
c0109949:	b8 1b 00 00 00       	mov    $0x1b,%eax
c010994e:	89 d7                	mov    %edx,%edi
c0109950:	89 de                	mov    %ebx,%esi
c0109952:	89 c1                	mov    %eax,%ecx
c0109954:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

    process = &sched_ctx._procs[index];
c0109956:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c010995c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010995f:	6b c0 6c             	imul   $0x6c,%eax,%eax
c0109962:	01 d0                	add    %edx,%eax
c0109964:	89 45 08             	mov    %eax,0x8(%ebp)

    // make sure the address is in the range of process table
    llist_init_head(&process->children);
c0109967:	8b 45 08             	mov    0x8(%ebp),%eax
c010996a:	83 c0 50             	add    $0x50,%eax
c010996d:	50                   	push   %eax
c010996e:	e8 31 fd ff ff       	call   c01096a4 <llist_init_head>
c0109973:	83 c4 04             	add    $0x4,%esp
    // every process is the child of first process (pid=1)
    if (process->parent) {
c0109976:	8b 45 08             	mov    0x8(%ebp),%eax
c0109979:	8b 40 04             	mov    0x4(%eax),%eax
c010997c:	85 c0                	test   %eax,%eax
c010997e:	74 1b                	je     c010999b <push_process+0xb4>
        llist_append(&process->parent->children, &process->siblings);
c0109980:	8b 45 08             	mov    0x8(%ebp),%eax
c0109983:	8d 50 48             	lea    0x48(%eax),%edx
c0109986:	8b 45 08             	mov    0x8(%ebp),%eax
c0109989:	8b 40 04             	mov    0x4(%eax),%eax
c010998c:	83 c0 50             	add    $0x50,%eax
c010998f:	52                   	push   %edx
c0109990:	50                   	push   %eax
c0109991:	e8 25 fd ff ff       	call   c01096bb <llist_append>
c0109996:	83 c4 08             	add    $0x8,%esp
c0109999:	eb 0c                	jmp    c01099a7 <push_process+0xc0>
    } else {
        process->parent = &sched_ctx._procs[0];
c010999b:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c01099a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    process->state = PROC_STOPPED;
c01099a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01099aa:	c6 40 44 00          	movb   $0x0,0x44(%eax)
}
c01099ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01099b1:	5b                   	pop    %ebx
c01099b2:	5e                   	pop    %esi
c01099b3:	5f                   	pop    %edi
c01099b4:	5d                   	pop    %ebp
c01099b5:	c3                   	ret    

c01099b6 <terminate_proc>:

void terminate_proc(int exit_code)
{
c01099b6:	55                   	push   %ebp
c01099b7:	89 e5                	mov    %esp,%ebp
    __current->state = PROC_TERMNAT;
c01099b9:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01099be:	c6 40 44 02          	movb   $0x2,0x44(%eax)
    __current->exit_code = exit_code;
c01099c2:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01099c7:	8b 55 08             	mov    0x8(%ebp),%edx
c01099ca:	89 50 60             	mov    %edx,0x60(%eax)

    schedule();
c01099cd:	e8 50 fe ff ff       	call   c0109822 <schedule>
}
c01099d2:	90                   	nop
c01099d3:	5d                   	pop    %ebp
c01099d4:	c3                   	ret    

c01099d5 <__mxsys_sleep>:

__DEFINE_MXSYSCALL1(unsigned int, sleep, unsigned int, seconds)
{
c01099d5:	55                   	push   %ebp
c01099d6:	89 e5                	mov    %esp,%ebp
    if (!seconds) {
c01099d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099dc:	75 07                	jne    c01099e5 <__mxsys_sleep+0x10>
        return 0;
c01099de:	b8 00 00 00 00       	mov    $0x0,%eax
c01099e3:	eb 2f                	jmp    c0109a14 <__mxsys_sleep+0x3f>
    }
    if (__current->pro_ticks) {
c01099e5:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01099ea:	8b 40 5c             	mov    0x5c(%eax),%eax
c01099ed:	85 c0                	test   %eax,%eax
c01099ef:	74 0a                	je     c01099fb <__mxsys_sleep+0x26>
        return __current->pro_ticks;
c01099f1:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01099f6:	8b 40 5c             	mov    0x5c(%eax),%eax
c01099f9:	eb 19                	jmp    c0109a14 <__mxsys_sleep+0x3f>
    }

    __current->intr_contxt.registers.eax = seconds;
c01099fb:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a00:	8b 55 08             	mov    0x8(%ebp),%edx
c0109a03:	89 50 08             	mov    %edx,0x8(%eax)
    __current->state = PROC_BLOCKED;
c0109a06:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a0b:	c6 40 44 08          	movb   $0x8,0x44(%eax)
    schedule();
c0109a0f:	e8 0e fe ff ff       	call   c0109822 <schedule>
}
c0109a14:	5d                   	pop    %ebp
c0109a15:	c3                   	ret    

c0109a16 <__mxsys_exit>:

__DEFINE_MXSYSCALL1(void, exit, int, status)
{
c0109a16:	55                   	push   %ebp
c0109a17:	89 e5                	mov    %esp,%ebp
    terminate_proc(status);
c0109a19:	ff 75 08             	push   0x8(%ebp)
c0109a1c:	e8 95 ff ff ff       	call   c01099b6 <terminate_proc>
c0109a21:	83 c4 04             	add    $0x4,%esp
}
c0109a24:	90                   	nop
c0109a25:	c9                   	leave  
c0109a26:	c3                   	ret    

c0109a27 <__mxsys_yield>:

__DEFINE_MXSYSCALL(void, yield)
{
c0109a27:	55                   	push   %ebp
c0109a28:	89 e5                	mov    %esp,%ebp
    schedule();
c0109a2a:	e8 f3 fd ff ff       	call   c0109822 <schedule>
}
c0109a2f:	90                   	nop
c0109a30:	5d                   	pop    %ebp
c0109a31:	c3                   	ret    

c0109a32 <__mxsys_wait>:

__DEFINE_MXSYSCALL1(pid_t, wait, int*, status)
{
c0109a32:	55                   	push   %ebp
c0109a33:	89 e5                	mov    %esp,%ebp
c0109a35:	83 ec 28             	sub    $0x28,%esp
    pid_t cur = __current->pid;
c0109a38:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a3d:	8b 00                	mov    (%eax),%eax
c0109a3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct m_pcb *proc, *n;
    if (llist_empty(&__current->children)) {
c0109a42:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a47:	83 c0 50             	add    $0x50,%eax
c0109a4a:	50                   	push   %eax
c0109a4b:	e8 86 fc ff ff       	call   c01096d6 <llist_empty>
c0109a50:	83 c4 04             	add    $0x4,%esp
c0109a53:	85 c0                	test   %eax,%eax
c0109a55:	74 07                	je     c0109a5e <__mxsys_wait+0x2c>
        return -1;
c0109a57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0109a5c:	eb 7d                	jmp    c0109adb <__mxsys_wait+0xa9>
    }
repeat:
c0109a5e:	90                   	nop
    llist_for_each(proc, n, &__current->children, siblings)
c0109a5f:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a64:	8b 40 54             	mov    0x54(%eax),%eax
c0109a67:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109a6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a6d:	83 e8 48             	sub    $0x48,%eax
c0109a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a76:	8b 40 4c             	mov    0x4c(%eax),%eax
c0109a79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a7f:	83 e8 48             	sub    $0x48,%eax
c0109a82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a85:	eb 23                	jmp    c0109aaa <__mxsys_wait+0x78>
    {
        if (proc->state == PROC_TERMNAT) {
c0109a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a8a:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c0109a8e:	3c 02                	cmp    $0x2,%al
c0109a90:	74 2c                	je     c0109abe <__mxsys_wait+0x8c>
    llist_for_each(proc, n, &__current->children, siblings)
c0109a92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a9b:	8b 40 4c             	mov    0x4c(%eax),%eax
c0109a9e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109aa1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109aa4:	83 e8 48             	sub    $0x48,%eax
c0109aa7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109aad:	8d 50 48             	lea    0x48(%eax),%edx
c0109ab0:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109ab5:	83 c0 50             	add    $0x50,%eax
c0109ab8:	39 c2                	cmp    %eax,%edx
c0109aba:	75 cb                	jne    c0109a87 <__mxsys_wait+0x55>
            goto done;
        }
    }
    // FIXME: 除了循环，也许有更高效的办法……
    // (在这里进行schedule，需要重写context switch!)
    goto repeat;
c0109abc:	eb a1                	jmp    c0109a5f <__mxsys_wait+0x2d>
            goto done;
c0109abe:	90                   	nop

done:
    *status = proc->exit_code;
c0109abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ac2:	8b 50 60             	mov    0x60(%eax),%edx
c0109ac5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac8:	89 10                	mov    %edx,(%eax)
    return destroy_process(proc->pid);
c0109aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109acd:	8b 00                	mov    (%eax),%eax
c0109acf:	83 ec 0c             	sub    $0xc,%esp
c0109ad2:	50                   	push   %eax
c0109ad3:	e8 05 00 00 00       	call   c0109add <destroy_process>
c0109ad8:	83 c4 10             	add    $0x10,%esp
}
c0109adb:	c9                   	leave  
c0109adc:	c3                   	ret    

c0109add <destroy_process>:

extern void __del_pagetable(pid_t pid, uintptr_t mount_point);

pid_t destroy_process(pid_t pid)
{
c0109add:	55                   	push   %ebp
c0109ade:	89 e5                	mov    %esp,%ebp
c0109ae0:	83 ec 28             	sub    $0x28,%esp
    int index = pid;
c0109ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (index <= 0 || index > sched_ctx.ptable_len) {
c0109ae9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109aed:	7e 0d                	jle    c0109afc <destroy_process+0x1f>
c0109aef:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c0109af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109af8:	39 c2                	cmp    %eax,%edx
c0109afa:	73 12                	jae    c0109b0e <destroy_process+0x31>
        __current->k_status = MXINVLDPID;
c0109afc:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109b01:	c7 40 68 fc ff ff ff 	movl   $0xfffffffc,0x68(%eax)
        return;
c0109b08:	90                   	nop
c0109b09:	e9 bf 00 00 00       	jmp    c0109bcd <destroy_process+0xf0>
    }
    struct m_pcb* proc = &sched_ctx._procs[index];
c0109b0e:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c0109b14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b17:	6b c0 6c             	imul   $0x6c,%eax,%eax
c0109b1a:	01 d0                	add    %edx,%eax
c0109b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    proc->state = PROC_DESTROY;
c0109b1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b22:	c6 40 44 04          	movb   $0x4,0x44(%eax)
    llist_delete(&proc->siblings);
c0109b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b29:	83 c0 48             	add    $0x48,%eax
c0109b2c:	50                   	push   %eax
c0109b2d:	e8 b8 fb ff ff       	call   c01096ea <llist_delete>
c0109b32:	83 c4 04             	add    $0x4,%esp

    if (proc->process_mm) {
c0109b35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b38:	8b 40 58             	mov    0x58(%eax),%eax
c0109b3b:	85 c0                	test   %eax,%eax
c0109b3d:	74 51                	je     c0109b90 <destroy_process+0xb3>
        struct mm_region *pos, *n;
        llist_for_each(pos, n, &proc->process_mm->head, head)
c0109b3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b42:	8b 40 58             	mov    0x58(%eax),%eax
c0109b45:	8b 40 04             	mov    0x4(%eax),%eax
c0109b48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109b4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b54:	8b 40 04             	mov    0x4(%eax),%eax
c0109b57:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109b5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109b5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b60:	eb 23                	jmp    c0109b85 <destroy_process+0xa8>
        {
            malloc_free(pos);
c0109b62:	83 ec 0c             	sub    $0xc,%esp
c0109b65:	ff 75 f4             	push   -0xc(%ebp)
c0109b68:	e8 1b d4 ff ff       	call   c0106f88 <malloc_free>
c0109b6d:	83 c4 10             	add    $0x10,%esp
        llist_for_each(pos, n, &proc->process_mm->head, head)
c0109b70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b79:	8b 40 04             	mov    0x4(%eax),%eax
c0109b7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109b7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b88:	8b 40 58             	mov    0x58(%eax),%eax
c0109b8b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109b8e:	75 d2                	jne    c0109b62 <destroy_process+0x85>
        }
    }

    vmm_mount_pd(PD_MOUNT_2, proc->page_table);
c0109b90:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b93:	8b 40 64             	mov    0x64(%eax),%eax
c0109b96:	83 ec 08             	sub    $0x8,%esp
c0109b99:	50                   	push   %eax
c0109b9a:	68 00 00 80 af       	push   $0xaf800000
c0109b9f:	e8 7e df ff ff       	call   c0107b22 <vmm_mount_pd>
c0109ba4:	83 c4 10             	add    $0x10,%esp

    __del_pagetable(pid, PD_MOUNT_2);
c0109ba7:	83 ec 08             	sub    $0x8,%esp
c0109baa:	68 00 00 80 af       	push   $0xaf800000
c0109baf:	ff 75 08             	push   0x8(%ebp)
c0109bb2:	e8 d5 f9 ff ff       	call   c010958c <__del_pagetable>
c0109bb7:	83 c4 10             	add    $0x10,%esp

    vmm_unmount_pd(PD_MOUNT_2);
c0109bba:	83 ec 0c             	sub    $0xc,%esp
c0109bbd:	68 00 00 80 af       	push   $0xaf800000
c0109bc2:	e8 9a df ff ff       	call   c0107b61 <vmm_unmount_pd>
c0109bc7:	83 c4 10             	add    $0x10,%esp

    return pid;
c0109bca:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bcd:	c9                   	leave  
c0109bce:	c3                   	ret    

c0109bcf <kprintf>:
#include <libs/mstdio.h>
#include <vga/vga.h>
void kprintf (const char *format, ...)
{
c0109bcf:	55                   	push   %ebp
c0109bd0:	89 e5                	mov    %esp,%ebp
c0109bd2:	83 ec 38             	sub    $0x38,%esp
  char **arg = (char **) &format;
c0109bd5:	8d 45 08             	lea    0x8(%ebp),%eax
c0109bd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int c;
  char buf[20];

  arg++;
c0109bdb:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  while ((c = *format++) != 0)
c0109bdf:	e9 83 01 00 00       	jmp    c0109d67 <kprintf+0x198>
    {
      if (c != '%')
c0109be4:	83 7d f0 25          	cmpl   $0x25,-0x10(%ebp)
c0109be8:	74 17                	je     c0109c01 <kprintf+0x32>
        vga_put_char (c);
c0109bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bed:	0f be c0             	movsbl %al,%eax
c0109bf0:	83 ec 0c             	sub    $0xc,%esp
c0109bf3:	50                   	push   %eax
c0109bf4:	e8 25 c4 ff ff       	call   c010601e <vga_put_char>
c0109bf9:	83 c4 10             	add    $0x10,%esp
c0109bfc:	e9 66 01 00 00       	jmp    c0109d67 <kprintf+0x198>
      else
        {
          char *p, *p2;
          int pad0 = 0, pad = 0;
c0109c01:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0109c08:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
          
          c = *format++;
c0109c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c12:	8d 50 01             	lea    0x1(%eax),%edx
c0109c15:	89 55 08             	mov    %edx,0x8(%ebp)
c0109c18:	0f b6 00             	movzbl (%eax),%eax
c0109c1b:	0f be c0             	movsbl %al,%eax
c0109c1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (c == '0')
c0109c21:	83 7d f0 30          	cmpl   $0x30,-0x10(%ebp)
c0109c25:	75 19                	jne    c0109c40 <kprintf+0x71>
            {
              pad0 = 1;
c0109c27:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
              c = *format++;
c0109c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c31:	8d 50 01             	lea    0x1(%eax),%edx
c0109c34:	89 55 08             	mov    %edx,0x8(%ebp)
c0109c37:	0f b6 00             	movzbl (%eax),%eax
c0109c3a:	0f be c0             	movsbl %al,%eax
c0109c3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          if (c >= '0' && c <= '9')
c0109c40:	83 7d f0 2f          	cmpl   $0x2f,-0x10(%ebp)
c0109c44:	7e 21                	jle    c0109c67 <kprintf+0x98>
c0109c46:	83 7d f0 39          	cmpl   $0x39,-0x10(%ebp)
c0109c4a:	7f 1b                	jg     c0109c67 <kprintf+0x98>
            {
              pad = c - '0';
c0109c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c4f:	83 e8 30             	sub    $0x30,%eax
c0109c52:	89 45 e0             	mov    %eax,-0x20(%ebp)
              c = *format++;
c0109c55:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c58:	8d 50 01             	lea    0x1(%eax),%edx
c0109c5b:	89 55 08             	mov    %edx,0x8(%ebp)
c0109c5e:	0f b6 00             	movzbl (%eax),%eax
c0109c61:	0f be c0             	movsbl %al,%eax
c0109c64:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          switch (c)
c0109c67:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0109c6b:	74 2b                	je     c0109c98 <kprintf+0xc9>
c0109c6d:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0109c71:	0f 8f d5 00 00 00    	jg     c0109d4c <kprintf+0x17d>
c0109c77:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0109c7b:	74 1b                	je     c0109c98 <kprintf+0xc9>
c0109c7d:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0109c81:	0f 8f c5 00 00 00    	jg     c0109d4c <kprintf+0x17d>
c0109c87:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
c0109c8b:	74 0b                	je     c0109c98 <kprintf+0xc9>
c0109c8d:	83 7d f0 73          	cmpl   $0x73,-0x10(%ebp)
c0109c91:	74 2b                	je     c0109cbe <kprintf+0xef>
c0109c93:	e9 b4 00 00 00       	jmp    c0109d4c <kprintf+0x17d>
            {
            case 'd':
            case 'u':
            case 'x':
              itoa (buf, c, *((int *) arg++));
c0109c98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c9b:	8d 50 04             	lea    0x4(%eax),%edx
c0109c9e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109ca1:	8b 00                	mov    (%eax),%eax
c0109ca3:	83 ec 04             	sub    $0x4,%esp
c0109ca6:	50                   	push   %eax
c0109ca7:	ff 75 f0             	push   -0x10(%ebp)
c0109caa:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0109cad:	50                   	push   %eax
c0109cae:	e8 d4 00 00 00       	call   c0109d87 <itoa>
c0109cb3:	83 c4 10             	add    $0x10,%esp
              p = buf;
c0109cb6:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0109cb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
              goto string;
c0109cbc:	eb 1e                	jmp    c0109cdc <kprintf+0x10d>
              break;

            case 's':
              p = *arg++;
c0109cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cc1:	8d 50 04             	lea    0x4(%eax),%edx
c0109cc4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109cc7:	8b 00                	mov    (%eax),%eax
c0109cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
              if (! p)
c0109ccc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109cd0:	75 09                	jne    c0109cdb <kprintf+0x10c>
                p = "(null)";
c0109cd2:	c7 45 ec 60 d6 d0 c0 	movl   $0xc0d0d660,-0x14(%ebp)
c0109cd9:	eb 01                	jmp    c0109cdc <kprintf+0x10d>

            string:
c0109cdb:	90                   	nop
              for (p2 = p; *p2; p2++);
c0109cdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109ce2:	eb 04                	jmp    c0109ce8 <kprintf+0x119>
c0109ce4:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0109ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ceb:	0f b6 00             	movzbl (%eax),%eax
c0109cee:	84 c0                	test   %al,%al
c0109cf0:	75 f2                	jne    c0109ce4 <kprintf+0x115>
              for (; p2 < p + pad; p2++)
c0109cf2:	eb 22                	jmp    c0109d16 <kprintf+0x147>
                vga_put_char (pad0 ? '0' : ' ');
c0109cf4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109cf8:	74 07                	je     c0109d01 <kprintf+0x132>
c0109cfa:	b8 30 00 00 00       	mov    $0x30,%eax
c0109cff:	eb 05                	jmp    c0109d06 <kprintf+0x137>
c0109d01:	b8 20 00 00 00       	mov    $0x20,%eax
c0109d06:	83 ec 0c             	sub    $0xc,%esp
c0109d09:	50                   	push   %eax
c0109d0a:	e8 0f c3 ff ff       	call   c010601e <vga_put_char>
c0109d0f:	83 c4 10             	add    $0x10,%esp
              for (; p2 < p + pad; p2++)
c0109d12:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0109d16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109d19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d1c:	01 d0                	add    %edx,%eax
c0109d1e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0109d21:	72 d1                	jb     c0109cf4 <kprintf+0x125>
              while (*p)
c0109d23:	eb 1b                	jmp    c0109d40 <kprintf+0x171>
                vga_put_char (*p++);
c0109d25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d28:	8d 50 01             	lea    0x1(%eax),%edx
c0109d2b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109d2e:	0f b6 00             	movzbl (%eax),%eax
c0109d31:	0f be c0             	movsbl %al,%eax
c0109d34:	83 ec 0c             	sub    $0xc,%esp
c0109d37:	50                   	push   %eax
c0109d38:	e8 e1 c2 ff ff       	call   c010601e <vga_put_char>
c0109d3d:	83 c4 10             	add    $0x10,%esp
              while (*p)
c0109d40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d43:	0f b6 00             	movzbl (%eax),%eax
c0109d46:	84 c0                	test   %al,%al
c0109d48:	75 db                	jne    c0109d25 <kprintf+0x156>
              break;
c0109d4a:	eb 1b                	jmp    c0109d67 <kprintf+0x198>

            default:
              vga_put_char (*((int *) arg++));
c0109d4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d4f:	8d 50 04             	lea    0x4(%eax),%edx
c0109d52:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109d55:	8b 00                	mov    (%eax),%eax
c0109d57:	0f be c0             	movsbl %al,%eax
c0109d5a:	83 ec 0c             	sub    $0xc,%esp
c0109d5d:	50                   	push   %eax
c0109d5e:	e8 bb c2 ff ff       	call   c010601e <vga_put_char>
c0109d63:	83 c4 10             	add    $0x10,%esp
              break;
c0109d66:	90                   	nop
  while ((c = *format++) != 0)
c0109d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d6a:	8d 50 01             	lea    0x1(%eax),%edx
c0109d6d:	89 55 08             	mov    %edx,0x8(%ebp)
c0109d70:	0f b6 00             	movzbl (%eax),%eax
c0109d73:	0f be c0             	movsbl %al,%eax
c0109d76:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109d7d:	0f 85 61 fe ff ff    	jne    c0109be4 <kprintf+0x15>
            }
        }
    }
}
c0109d83:	90                   	nop
c0109d84:	90                   	nop
c0109d85:	c9                   	leave  
c0109d86:	c3                   	ret    

c0109d87 <itoa>:
#include <libs/mstdlib.h>

void
itoa (char *buf, int base, int d)
{
c0109d87:	55                   	push   %ebp
c0109d88:	89 e5                	mov    %esp,%ebp
c0109d8a:	83 ec 20             	sub    $0x20,%esp
  char *p = buf;
c0109d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d90:	89 45 fc             	mov    %eax,-0x4(%ebp)
  char *p1, *p2;
  unsigned long ud = d;
c0109d93:	8b 45 10             	mov    0x10(%ebp),%eax
c0109d96:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int divisor = 10;
c0109d99:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
  
  /* If %d is specified and D is minus, put ‘-’ in the head. */
  if (base == 'd' && d < 0)
c0109da0:	83 7d 0c 64          	cmpl   $0x64,0xc(%ebp)
c0109da4:	75 20                	jne    c0109dc6 <itoa+0x3f>
c0109da6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109daa:	79 1a                	jns    c0109dc6 <itoa+0x3f>
    {
      *p++ = '-';
c0109dac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109daf:	8d 50 01             	lea    0x1(%eax),%edx
c0109db2:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0109db5:	c6 00 2d             	movb   $0x2d,(%eax)
      buf++;
c0109db8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      ud = -d;
c0109dbc:	8b 45 10             	mov    0x10(%ebp),%eax
c0109dbf:	f7 d8                	neg    %eax
c0109dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109dc4:	eb 0d                	jmp    c0109dd3 <itoa+0x4c>
    }
  else if (base == 'x')
c0109dc6:	83 7d 0c 78          	cmpl   $0x78,0xc(%ebp)
c0109dca:	75 07                	jne    c0109dd3 <itoa+0x4c>
    divisor = 16;
c0109dcc:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)

  /* Divide UD by DIVISOR until UD == 0. */
  do
    {
      int remainder = ud % divisor;
c0109dd3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0109dd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dd9:	ba 00 00 00 00       	mov    $0x0,%edx
c0109dde:	f7 f1                	div    %ecx
c0109de0:	89 d0                	mov    %edx,%eax
c0109de2:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
c0109de5:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
c0109de9:	7f 0a                	jg     c0109df5 <itoa+0x6e>
c0109deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dee:	83 c0 30             	add    $0x30,%eax
c0109df1:	89 c1                	mov    %eax,%ecx
c0109df3:	eb 08                	jmp    c0109dfd <itoa+0x76>
c0109df5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109df8:	83 c0 57             	add    $0x57,%eax
c0109dfb:	89 c1                	mov    %eax,%ecx
c0109dfd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e00:	8d 50 01             	lea    0x1(%eax),%edx
c0109e03:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0109e06:	88 08                	mov    %cl,(%eax)
    }
  while (ud /= divisor);
c0109e08:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0109e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e0e:	ba 00 00 00 00       	mov    $0x0,%edx
c0109e13:	f7 f1                	div    %ecx
c0109e15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109e1c:	75 b5                	jne    c0109dd3 <itoa+0x4c>

  /* Terminate BUF. */
  *p = 0;
c0109e1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e21:	c6 00 00             	movb   $0x0,(%eax)
  
  /* Reverse BUF. */
  p1 = buf;
c0109e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e27:	89 45 f8             	mov    %eax,-0x8(%ebp)
  p2 = p - 1;
c0109e2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e2d:	83 e8 01             	sub    $0x1,%eax
c0109e30:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (p1 < p2)
c0109e33:	eb 25                	jmp    c0109e5a <itoa+0xd3>
    {
      char tmp = *p1;
c0109e35:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e38:	0f b6 00             	movzbl (%eax),%eax
c0109e3b:	88 45 e7             	mov    %al,-0x19(%ebp)
      *p1 = *p2;
c0109e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e41:	0f b6 10             	movzbl (%eax),%edx
c0109e44:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e47:	88 10                	mov    %dl,(%eax)
      *p2 = tmp;
c0109e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e4c:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0109e50:	88 10                	mov    %dl,(%eax)
      p1++;
c0109e52:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
      p2--;
c0109e56:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  while (p1 < p2)
c0109e5a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e5d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e60:	72 d3                	jb     c0109e35 <itoa+0xae>
    }
c0109e62:	90                   	nop
c0109e63:	90                   	nop
c0109e64:	c9                   	leave  
c0109e65:	c3                   	ret    

c0109e66 <memset>:
#include <libs/mstring.h>
#include <stdint.h>

void* memset(void* ptr, int value, size_t num)
{
c0109e66:	55                   	push   %ebp
c0109e67:	89 e5                	mov    %esp,%ebp
c0109e69:	83 ec 10             	sub    $0x10,%esp
    uint8_t* c_ptr = (uint8_t*)ptr;
c0109e6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e6f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (size_t i = 0; i < num; i++) {
c0109e72:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0109e79:	eb 11                	jmp    c0109e8c <memset+0x26>
        *(c_ptr + i) = (uint8_t)value;
c0109e7b:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109e7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e81:	01 d0                	add    %edx,%eax
c0109e83:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109e86:	88 10                	mov    %dl,(%eax)
    for (size_t i = 0; i < num; i++) {
c0109e88:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109e8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e8f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0109e92:	72 e7                	jb     c0109e7b <memset+0x15>
    }
    return ptr;
c0109e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e97:	c9                   	leave  
c0109e98:	c3                   	ret    
