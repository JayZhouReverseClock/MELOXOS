
build/bin/melox.bin:     file format elf32-i386


Disassembly of section .virk_init_text:

00100000 <start-0xc>:
  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fb                   	sti    
  100009:	4f                   	dec    %edi
  10000a:	52                   	push   %edx
  10000b:	e4                   	.byte 0xe4

0010000c <start>:
  10000c:	bc 00 60 10 00       	mov    $0x106000,%esp
  100011:	68 00 10 10 00       	push   $0x101000
  100016:	53                   	push   %ebx
  100017:	e8 64 00 00 00       	call   100080 <save_multiboot_info>
  10001c:	58                   	pop    %eax
  10001d:	58                   	pop    %eax
  10001e:	68 00 60 00 00       	push   $0x6000
  100023:	68 00 c0 12 00       	push   $0x12c000
  100028:	e8 a4 02 00 00       	call   1002d1 <kerner_init>
  10002d:	8b 04 24             	mov    (%esp),%eax
  100030:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100035:	0f 22 d8             	mov    %eax,%cr3
  100038:	0f 20 c0             	mov    %cr0,%eax
  10003b:	0d 00 00 00 80       	or     $0x80000000,%eax
  100040:	0f 22 c0             	mov    %eax,%cr0
  100043:	58                   	pop    %eax
  100044:	58                   	pop    %eax
  100045:	68 b5 7a 10 c0       	push   $0xc0107ab5
  10004a:	c3                   	ret    

0010004b <_save_>:
extern uint8_t virkernel_start;
extern uint8_t virkernel_end ;
extern uint8_t __init_phykernel_end;
extern uint8_t _kernel_stack;

uint32_t _save_(uint8_t* destination, uint8_t* base, multiboot_uint32_t size) {
  10004b:	55                   	push   %ebp
  10004c:	89 e5                	mov    %esp,%ebp
  10004e:	83 ec 10             	sub    $0x10,%esp
    multiboot_uint32_t i = 0;
  100051:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (; i < size; i++)
  100058:	eb 19                	jmp    100073 <_save_+0x28>
    {
        *(destination + i) = *(base + i);
  10005a:	8b 55 0c             	mov    0xc(%ebp),%edx
  10005d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100060:	01 d0                	add    %edx,%eax
  100062:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100065:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100068:	01 ca                	add    %ecx,%edx
  10006a:	0f b6 00             	movzbl (%eax),%eax
  10006d:	88 02                	mov    %al,(%edx)
    for (; i < size; i++)
  10006f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100073:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100076:	3b 45 10             	cmp    0x10(%ebp),%eax
  100079:	72 df                	jb     10005a <_save_+0xf>
    }
    return i;
  10007b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10007e:	c9                   	leave  
  10007f:	c3                   	ret    

00100080 <save_multiboot_info>:

void save_multiboot_info(multiboot_info_t* mb_info, multiboot_uint8_t* dest)
{
  100080:	55                   	push   %ebp
  100081:	89 e5                	mov    %esp,%ebp
  100083:	53                   	push   %ebx
  100084:	83 ec 10             	sub    $0x10,%esp
    uint32_t current = 0;
  100087:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    uint8_t* info_b = (uint8_t*) mb_info;
  10008e:	8b 45 08             	mov    0x8(%ebp),%eax
  100091:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; current < sizeof(multiboot_info_t); current++)
  100094:	eb 19                	jmp    1000af <save_multiboot_info+0x2f>
    {
        *(dest + current) = *(info_b + current);
  100096:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100099:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10009c:	01 d0                	add    %edx,%eax
  10009e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1000a1:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000a4:	01 ca                	add    %ecx,%edx
  1000a6:	0f b6 00             	movzbl (%eax),%eax
  1000a9:	88 02                	mov    %al,(%edx)
    for (; current < sizeof(multiboot_info_t); current++)
  1000ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1000af:	83 7d f8 77          	cmpl   $0x77,-0x8(%ebp)
  1000b3:	76 e1                	jbe    100096 <save_multiboot_info+0x16>
    }

    ((multiboot_info_t*) dest)->mmap_addr = (uintptr_t)dest + current;
  1000b5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000bb:	01 c2                	add    %eax,%edx
  1000bd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000c0:	89 50 30             	mov    %edx,0x30(%eax)
    current += _save_(dest + current, (uint8_t*)mb_info->mmap_addr, mb_info->mmap_length);
  1000c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1000c6:	8b 40 2c             	mov    0x2c(%eax),%eax
  1000c9:	8b 55 08             	mov    0x8(%ebp),%edx
  1000cc:	8b 52 30             	mov    0x30(%edx),%edx
  1000cf:	89 d1                	mov    %edx,%ecx
  1000d1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1000d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000d7:	01 da                	add    %ebx,%edx
  1000d9:	50                   	push   %eax
  1000da:	51                   	push   %ecx
  1000db:	52                   	push   %edx
  1000dc:	e8 6a ff ff ff       	call   10004b <_save_>
  1000e1:	83 c4 0c             	add    $0xc,%esp
  1000e4:	01 45 f8             	add    %eax,-0x8(%ebp)

    if (present(mb_info->flags, MULTIBOOT_INFO_DRIVE_INFO)) {
  1000e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1000ea:	8b 00                	mov    (%eax),%eax
  1000ec:	25 80 00 00 00       	and    $0x80,%eax
  1000f1:	85 c0                	test   %eax,%eax
  1000f3:	74 32                	je     100127 <save_multiboot_info+0xa7>
        ((multiboot_info_t*) dest)->drives_addr = (uintptr_t)dest + current;
  1000f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000fb:	01 c2                	add    %eax,%edx
  1000fd:	8b 45 0c             	mov    0xc(%ebp),%eax
  100100:	89 50 38             	mov    %edx,0x38(%eax)
        current += _save_(dest + current, (uint8_t*)mb_info->drives_addr, mb_info->drives_length);
  100103:	8b 45 08             	mov    0x8(%ebp),%eax
  100106:	8b 40 34             	mov    0x34(%eax),%eax
  100109:	8b 55 08             	mov    0x8(%ebp),%edx
  10010c:	8b 52 38             	mov    0x38(%edx),%edx
  10010f:	89 d1                	mov    %edx,%ecx
  100111:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  100114:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100117:	01 da                	add    %ebx,%edx
  100119:	50                   	push   %eax
  10011a:	51                   	push   %ecx
  10011b:	52                   	push   %edx
  10011c:	e8 2a ff ff ff       	call   10004b <_save_>
  100121:	83 c4 0c             	add    $0xc,%esp
  100124:	01 45 f8             	add    %eax,-0x8(%ebp)
    }
    multiboot_info_t* test = (multiboot_info_t*) dest;
  100127:	8b 45 0c             	mov    0xc(%ebp),%eax
  10012a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    multiboot_memory_map_t* testmap = (multiboot_memory_map_t*)mb_info->mmap_addr;
  10012d:	8b 45 08             	mov    0x8(%ebp),%eax
  100130:	8b 40 30             	mov    0x30(%eax),%eax
  100133:	89 45 ec             	mov    %eax,-0x14(%ebp)
}
  100136:	90                   	nop
  100137:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10013a:	c9                   	leave  
  10013b:	c3                   	ret    

0010013c <init_page>:

void init_page(ptd_t* pt)
{
  10013c:	55                   	push   %ebp
  10013d:	89 e5                	mov    %esp,%ebp
  10013f:	83 ec 30             	sub    $0x30,%esp
    SET_PDE(pt, 0, PDE(PG_PRESENT, pt + PG_MAX_ENTRIES));
  100142:	8b 45 08             	mov    0x8(%ebp),%eax
  100145:	05 00 10 00 00       	add    $0x1000,%eax
  10014a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10014f:	83 c8 01             	or     $0x1,%eax
  100152:	89 c2                	mov    %eax,%edx
  100154:	8b 45 08             	mov    0x8(%ebp),%eax
  100157:	89 10                	mov    %edx,(%eax)
    ptd_t * tmp_paged_phy_addr = pt;
  100159:	8b 45 08             	mov    0x8(%ebp),%eax
  10015c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptd_t * tmp_paget_phy_addr = pt + 1024;
  10015f:	8b 45 08             	mov    0x8(%ebp),%eax
  100162:	05 00 10 00 00       	add    $0x1000,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //identity map 1M memory
    for(uint32_t i = 0; i < 256; i++)
  10016a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100171:	eb 20                	jmp    100193 <init_page+0x57>
        *(tmp_paget_phy_addr + i) = (((i << 12) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100173:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100176:	c1 e0 0c             	shl    $0xc,%eax
  100179:	89 c2                	mov    %eax,%edx
  10017b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10017e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100185:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100188:	01 c8                	add    %ecx,%eax
  10018a:	83 ca 03             	or     $0x3,%edx
  10018d:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < 256; i++)
  10018f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100193:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
  10019a:	76 d7                	jbe    100173 <init_page+0x37>

    //identity map virkernel_init memory
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  10019c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001a3:	eb 29                	jmp    1001ce <init_page+0x92>
        *(tmp_paget_phy_addr + i + 256) = ((((i << 12) + MEM_1M) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  1001a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001a8:	c1 e0 0c             	shl    $0xc,%eax
  1001ab:	8d 90 00 00 10 00    	lea    0x100000(%eax),%edx
  1001b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001b4:	05 00 01 00 00       	add    $0x100,%eax
  1001b9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1001c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1001c3:	01 c8                	add    %ecx,%eax
  1001c5:	83 ca 03             	or     $0x3,%edx
  1001c8:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  1001ca:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1001ce:	b8 00 60 10 00       	mov    $0x106000,%eax
  1001d3:	2d 01 f0 0f 00       	sub    $0xff001,%eax
  1001d8:	c1 e8 0c             	shr    $0xc,%eax
  1001db:	39 45 f8             	cmp    %eax,-0x8(%ebp)
  1001de:	72 c5                	jb     1001a5 <init_page+0x69>

    //now we map the kernel
    //calculate the virtrue kernrl page index
    uint32_t virk_pde_index = PD_INDEX(sym_val(virkernel_start));
  1001e0:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001e5:	c1 e8 16             	shr    $0x16,%eax
  1001e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t virk_pte_index = PT_INDEX(sym_val(virkernel_start));
  1001eb:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001f0:	c1 e8 0c             	shr    $0xc,%eax
  1001f3:	25 ff 03 00 00       	and    $0x3ff,%eax
  1001f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t virk_pg_counts = KERNEL_PAGE_COUNT;
  1001fb:	b8 00 20 13 c0       	mov    $0xc0132000,%eax
  100200:	05 00 10 00 00       	add    $0x1000,%eax
  100205:	83 e8 01             	sub    $0x1,%eax
  100208:	ba 00 60 10 c0       	mov    $0xc0106000,%edx
  10020d:	29 d0                	sub    %edx,%eax
  10020f:	c1 e8 0c             	shr    $0xc,%eax
  100212:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //regist the vir_kernel page to page direction
    //we give 3 pagetable to virkel, is 3 * 4 = 12 mib size
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  100215:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10021c:	eb 34                	jmp    100252 <init_page+0x116>
    {
        *(pt + virk_pde_index + i) = PDE(PG_PREM_RW, PT_ADDR(pt, PG_TABLE_KERNEL + i));
  10021e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100221:	83 c0 02             	add    $0x2,%eax
  100224:	c1 e0 0c             	shl    $0xc,%eax
  100227:	89 c2                	mov    %eax,%edx
  100229:	8b 45 08             	mov    0x8(%ebp),%eax
  10022c:	01 d0                	add    %edx,%eax
  10022e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100233:	89 c2                	mov    %eax,%edx
  100235:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100238:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10023b:	01 c8                	add    %ecx,%eax
  10023d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100244:	8b 45 08             	mov    0x8(%ebp),%eax
  100247:	01 c8                	add    %ecx,%eax
  100249:	83 ca 03             	or     $0x3,%edx
  10024c:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  10024e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100252:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
  100256:	76 c6                	jbe    10021e <init_page+0xe2>
    }

    //avoid kernel size > prepared page count
    if(virk_pg_counts > (PG_TABLE_STACK - PG_TABLE_KERNEL) * 1024)
  100258:	81 7d dc 00 0c 00 00 	cmpl   $0xc00,-0x24(%ebp)
  10025f:	76 02                	jbe    100263 <init_page+0x127>
    {
        while(1);
  100261:	eb fe                	jmp    100261 <init_page+0x125>
    }

    //calcul the phy address
    uint32_t virk_phy_addr = V2P(&virkernel_start);
  100263:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  100268:	05 00 00 00 40       	add    $0x40000000,%eax
  10026d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    //map virtrue kernel page
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  100270:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100277:	eb 36                	jmp    1002af <init_page+0x173>
    {
        *(tmp_paget_phy_addr + 1024 + virk_pte_index + i) = (((virk_phy_addr + (i << 12)) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100279:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10027c:	c1 e0 0c             	shl    $0xc,%eax
  10027f:	89 c2                	mov    %eax,%edx
  100281:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100284:	01 d0                	add    %edx,%eax
  100286:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10028b:	89 c2                	mov    %eax,%edx
  10028d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100290:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100293:	01 c8                	add    %ecx,%eax
  100295:	05 00 04 00 00       	add    $0x400,%eax
  10029a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1002a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1002a4:	01 c8                	add    %ecx,%eax
  1002a6:	83 ca 03             	or     $0x3,%edx
  1002a9:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  1002ab:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1002af:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1002b2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1002b5:	72 c2                	jb     100279 <init_page+0x13d>
    }

    //self map pd, to give the pd virture address
    SET_PDE(pt, 1023, PDE(T_SELF_REF_PERM, pt));
  1002b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1002ba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1002bf:	89 c2                	mov    %eax,%edx
  1002c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1002c4:	05 fc 0f 00 00       	add    $0xffc,%eax
  1002c9:	83 ca 13             	or     $0x13,%edx
  1002cc:	89 10                	mov    %edx,(%eax)
}
  1002ce:	90                   	nop
  1002cf:	c9                   	leave  
  1002d0:	c3                   	ret    

001002d1 <kerner_init>:

void kerner_init(ptd_t* pt, uint32_t pt_size)
{
  1002d1:	55                   	push   %ebp
  1002d2:	89 e5                	mov    %esp,%ebp
  1002d4:	83 ec 10             	sub    $0x10,%esp
    uint8_t* kpg = (uint8_t*) pt;
  1002d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1002da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (uint32_t i = 0; i < pt_size; i++)
  1002dd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1002e4:	eb 0f                	jmp    1002f5 <kerner_init+0x24>
    {
        *(kpg + i) = 0;
  1002e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1002e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ec:	01 d0                	add    %edx,%eax
  1002ee:	c6 00 00             	movb   $0x0,(%eax)
    for (uint32_t i = 0; i < pt_size; i++)
  1002f1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1002f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1002fb:	72 e9                	jb     1002e6 <kerner_init+0x15>
    }
    init_page(pt);
  1002fd:	ff 75 08             	push   0x8(%ebp)
  100300:	e8 37 fe ff ff       	call   10013c <init_page>
  100305:	83 c4 04             	add    $0x4,%esp
  100308:	90                   	nop
  100309:	c9                   	leave  
  10030a:	c3                   	ret    

Disassembly of section .text:

c0106000 <init_vga_buffer>:
int XPOS = 0;

vga_attr *video;

void init_vga_buffer()
{
c0106000:	55                   	push   %ebp
c0106001:	89 e5                	mov    %esp,%ebp
    video = (vga_attr *) VIDEO;
c0106003:	c7 05 0c 90 10 c0 00 	movl   $0xb8000,0xc010900c
c010600a:	80 0b 00 
}
c010600d:	90                   	nop
c010600e:	5d                   	pop    %ebp
c010600f:	c3                   	ret    

c0106010 <set_vga_buffer>:

void set_vga_buffer(void* vga_buf)
{
c0106010:	55                   	push   %ebp
c0106011:	89 e5                	mov    %esp,%ebp
    video = (vga_attr*)vga_buf;
c0106013:	8b 45 08             	mov    0x8(%ebp),%eax
c0106016:	a3 0c 90 10 c0       	mov    %eax,0xc010900c
}
c010601b:	90                   	nop
c010601c:	5d                   	pop    %ebp
c010601d:	c3                   	ret    

c010601e <vga_put_char>:

void vga_put_char(char c)
{
c010601e:	55                   	push   %ebp
c010601f:	89 e5                	mov    %esp,%ebp
c0106021:	53                   	push   %ebx
c0106022:	83 ec 14             	sub    $0x14,%esp
c0106025:	8b 45 08             	mov    0x8(%ebp),%eax
c0106028:	88 45 f4             	mov    %al,-0xc(%ebp)
    if(c == '\n')
c010602b:	80 7d f4 0a          	cmpb   $0xa,-0xc(%ebp)
c010602f:	75 19                	jne    c010604a <vga_put_char+0x2c>
    {
        YPOS++;
c0106031:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106036:	83 c0 01             	add    $0x1,%eax
c0106039:	a3 04 90 10 c0       	mov    %eax,0xc0109004
        XPOS = 0;
c010603e:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c0106045:	00 00 00 
c0106048:	eb 54                	jmp    c010609e <vga_put_char+0x80>
    }else if(c == '\r')
c010604a:	80 7d f4 0d          	cmpb   $0xd,-0xc(%ebp)
c010604e:	75 0c                	jne    c010605c <vga_put_char+0x3e>
        XPOS = 0;
c0106050:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c0106057:	00 00 00 
c010605a:	eb 42                	jmp    c010609e <vga_put_char+0x80>
    else{
        *(video + XPOS + YPOS * WIDTH) = (theme_color | c);
c010605c:	66 0f be 55 f4       	movsbw -0xc(%ebp),%dx
c0106061:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c0106068:	09 c2                	or     %eax,%edx
c010606a:	8b 0d 0c 90 10 c0    	mov    0xc010900c,%ecx
c0106070:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106075:	89 c3                	mov    %eax,%ebx
c0106077:	89 d8                	mov    %ebx,%eax
c0106079:	c1 e0 02             	shl    $0x2,%eax
c010607c:	01 d8                	add    %ebx,%eax
c010607e:	c1 e0 04             	shl    $0x4,%eax
c0106081:	89 c3                	mov    %eax,%ebx
c0106083:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c0106088:	01 d8                	add    %ebx,%eax
c010608a:	01 c0                	add    %eax,%eax
c010608c:	01 c8                	add    %ecx,%eax
c010608e:	66 89 10             	mov    %dx,(%eax)
        XPOS++;
c0106091:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c0106096:	83 c0 01             	add    $0x1,%eax
c0106099:	a3 08 90 10 c0       	mov    %eax,0xc0109008
    }
    if (XPOS >= WIDTH)
c010609e:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c01060a3:	83 f8 4f             	cmp    $0x4f,%eax
c01060a6:	7e 17                	jle    c01060bf <vga_put_char+0xa1>
    {
        YPOS++;
c01060a8:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c01060ad:	83 c0 01             	add    $0x1,%eax
c01060b0:	a3 04 90 10 c0       	mov    %eax,0xc0109004
        XPOS = 0;
c01060b5:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c01060bc:	00 00 00 
    }
    if(YPOS >= HIGHT)
c01060bf:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c01060c4:	83 f8 18             	cmp    $0x18,%eax
c01060c7:	7e 05                	jle    c01060ce <vga_put_char+0xb0>
        vga_scrollup();
c01060c9:	e8 be 00 00 00       	call   c010618c <vga_scrollup>
}
c01060ce:	90                   	nop
c01060cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01060d2:	c9                   	leave  
c01060d3:	c3                   	ret    

c01060d4 <vga_set_show>:

void vga_set_show(vga_attr flashing, vga_attr backgroud, vga_attr frontcolor)
{
c01060d4:	55                   	push   %ebp
c01060d5:	89 e5                	mov    %esp,%ebp
c01060d7:	83 ec 0c             	sub    $0xc,%esp
c01060da:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01060dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01060e3:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
c01060e7:	66 89 55 f8          	mov    %dx,-0x8(%ebp)
c01060eb:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    theme_color = (flashing << 7 | backgroud << 4 | frontcolor) << 8;
c01060ef:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01060f3:	c1 e0 07             	shl    $0x7,%eax
c01060f6:	89 c2                	mov    %eax,%edx
c01060f8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c01060fc:	c1 e0 04             	shl    $0x4,%eax
c01060ff:	09 c2                	or     %eax,%edx
c0106101:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0106105:	09 d0                	or     %edx,%eax
c0106107:	c1 e0 08             	shl    $0x8,%eax
c010610a:	66 a3 00 90 10 c0    	mov    %ax,0xc0109000
}
c0106110:	90                   	nop
c0106111:	c9                   	leave  
c0106112:	c3                   	ret    

c0106113 <vga_put_str>:

void vga_put_str(char* str)
{
c0106113:	55                   	push   %ebp
c0106114:	89 e5                	mov    %esp,%ebp
c0106116:	83 ec 08             	sub    $0x8,%esp
    while (*str != '\0')
c0106119:	eb 19                	jmp    c0106134 <vga_put_str+0x21>
    {
        vga_put_char(*str);
c010611b:	8b 45 08             	mov    0x8(%ebp),%eax
c010611e:	0f b6 00             	movzbl (%eax),%eax
c0106121:	0f be c0             	movsbl %al,%eax
c0106124:	83 ec 0c             	sub    $0xc,%esp
c0106127:	50                   	push   %eax
c0106128:	e8 f1 fe ff ff       	call   c010601e <vga_put_char>
c010612d:	83 c4 10             	add    $0x10,%esp
        str++;
c0106130:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*str != '\0')
c0106134:	8b 45 08             	mov    0x8(%ebp),%eax
c0106137:	0f b6 00             	movzbl (%eax),%eax
c010613a:	84 c0                	test   %al,%al
c010613c:	75 dd                	jne    c010611b <vga_put_str+0x8>
    }
}
c010613e:	90                   	nop
c010613f:	90                   	nop
c0106140:	c9                   	leave  
c0106141:	c3                   	ret    

c0106142 <vga_clear>:

void vga_clear()
{
c0106142:	55                   	push   %ebp
c0106143:	89 e5                	mov    %esp,%ebp
c0106145:	83 ec 10             	sub    $0x10,%esp
  
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106148:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010614f:	eb 1b                	jmp    c010616c <vga_clear+0x2a>
        *(video + i) = theme_color;
c0106151:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c0106157:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010615a:	01 c0                	add    %eax,%eax
c010615c:	01 c2                	add    %eax,%edx
c010615e:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c0106165:	66 89 02             	mov    %ax,(%edx)
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106168:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010616c:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
c0106173:	7e dc                	jle    c0106151 <vga_clear+0xf>

    XPOS = 0;
c0106175:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c010617c:	00 00 00 
    YPOS = 0;
c010617f:	c7 05 04 90 10 c0 00 	movl   $0x0,0xc0109004
c0106186:	00 00 00 
}
c0106189:	90                   	nop
c010618a:	c9                   	leave  
c010618b:	c3                   	ret    

c010618c <vga_scrollup>:

void vga_scrollup()
{
c010618c:	55                   	push   %ebp
c010618d:	89 e5                	mov    %esp,%ebp
c010618f:	83 ec 10             	sub    $0x10,%esp
    unsigned int last_line = WIDTH * (HIGHT - 1);
c0106192:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
    for (unsigned int i = 0; i < last_line; i++) {
c0106199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01061a0:	eb 27                	jmp    c01061c9 <vga_scrollup+0x3d>
        *(video + i) = *(video + WIDTH + i);
c01061a2:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c01061a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061ab:	83 c0 50             	add    $0x50,%eax
c01061ae:	01 c0                	add    %eax,%eax
c01061b0:	01 d0                	add    %edx,%eax
c01061b2:	8b 0d 0c 90 10 c0    	mov    0xc010900c,%ecx
c01061b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01061bb:	01 d2                	add    %edx,%edx
c01061bd:	01 ca                	add    %ecx,%edx
c01061bf:	0f b7 00             	movzwl (%eax),%eax
c01061c2:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < last_line; i++) {
c01061c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01061c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061cf:	72 d1                	jb     c01061a2 <vga_scrollup+0x16>
    }
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01061d8:	eb 20                	jmp    c01061fa <vga_scrollup+0x6e>
        *(video + i + last_line) = theme_color;
c01061da:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c01061e0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c01061e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061e6:	01 c8                	add    %ecx,%eax
c01061e8:	01 c0                	add    %eax,%eax
c01061ea:	01 c2                	add    %eax,%edx
c01061ec:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c01061f3:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061f6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01061fa:	83 7d f8 4f          	cmpl   $0x4f,-0x8(%ebp)
c01061fe:	76 da                	jbe    c01061da <vga_scrollup+0x4e>
    }
    YPOS = YPOS == 0 ? 0 : HIGHT - 1;
c0106200:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106205:	85 c0                	test   %eax,%eax
c0106207:	75 07                	jne    c0106210 <vga_scrollup+0x84>
c0106209:	b8 00 00 00 00       	mov    $0x0,%eax
c010620e:	eb 05                	jmp    c0106215 <vga_scrollup+0x89>
c0106210:	b8 18 00 00 00       	mov    $0x18,%eax
c0106215:	a3 04 90 10 c0       	mov    %eax,0xc0109004
c010621a:	90                   	nop
c010621b:	c9                   	leave  
c010621c:	c3                   	ret    

c010621d <_kernel_init>:

/* Forward declarations. */
void _kernel_init (unsigned long addr);

void _kernel_init(unsigned long addr)
{
c010621d:	55                   	push   %ebp
c010621e:	89 e5                	mov    %esp,%ebp
c0106220:	53                   	push   %ebx
c0106221:	83 ec 44             	sub    $0x44,%esp
    multiboot_info_t *mbi;
    mbi = (multiboot_info_t *) addr;
c0106224:	8b 45 08             	mov    0x8(%ebp),%eax
c0106227:	89 45 e8             	mov    %eax,-0x18(%ebp)
    multiboot_memory_map_t* map = (multiboot_memory_map_t*)mbi->mmap_addr;
c010622a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010622d:	8b 40 30             	mov    0x30(%eax),%eax
c0106230:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    _init_idt();
c0106233:	e8 54 17 00 00       	call   c010798c <_init_idt>
    pmm_init(MEM_1MB + (mbi->mem_upper << 10));
c0106238:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010623b:	8b 40 08             	mov    0x8(%eax),%eax
c010623e:	c1 e0 0a             	shl    $0xa,%eax
c0106241:	05 00 00 10 00       	add    $0x100000,%eax
c0106246:	83 ec 0c             	sub    $0xc,%esp
c0106249:	50                   	push   %eax
c010624a:	e8 2a 04 00 00       	call   c0106679 <pmm_init>
c010624f:	83 c4 10             	add    $0x10,%esp
    vmm_init();
c0106252:	e8 78 0c 00 00       	call   c0106ecf <vmm_init>

    init_vga_buffer();
c0106257:	e8 a4 fd ff ff       	call   c0106000 <init_vga_buffer>
    vga_set_show(0,VGA_COLOR_BLACK,VGA_COLOR_LIGHT_WHITE);
c010625c:	83 ec 04             	sub    $0x4,%esp
c010625f:	6a 0f                	push   $0xf
c0106261:	6a 00                	push   $0x0
c0106263:	6a 00                	push   $0x0
c0106265:	e8 6a fe ff ff       	call   c01060d4 <vga_set_show>
c010626a:	83 c4 10             	add    $0x10,%esp
    /* Clear the screen. */
    vga_clear();
c010626d:	e8 d0 fe ff ff       	call   c0106142 <vga_clear>
    // }

    /* Set MBI to the address of the Multiboot information structure. */

    /* Print out the flags. */
    kprintf("flags = 0x%x\n", (unsigned) mbi->flags);
c0106272:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106275:	8b 00                	mov    (%eax),%eax
c0106277:	83 ec 08             	sub    $0x8,%esp
c010627a:	50                   	push   %eax
c010627b:	68 00 b0 12 c0       	push   $0xc012b000
c0106280:	e8 4b 1c 00 00       	call   c0107ed0 <kprintf>
c0106285:	83 c4 10             	add    $0x10,%esp

    /* Are mem_* valid? */
    if (CHECK_FLAG(mbi->flags, 0))
c0106288:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010628b:	8b 00                	mov    (%eax),%eax
c010628d:	83 e0 01             	and    $0x1,%eax
c0106290:	85 c0                	test   %eax,%eax
c0106292:	74 1e                	je     c01062b2 <_kernel_init+0x95>
        kprintf("mem_lower = %uKB, mem_upper = %uKB\n",(unsigned) mbi->mem_lower, (unsigned) mbi->mem_upper);
c0106294:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106297:	8b 50 08             	mov    0x8(%eax),%edx
c010629a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010629d:	8b 40 04             	mov    0x4(%eax),%eax
c01062a0:	83 ec 04             	sub    $0x4,%esp
c01062a3:	52                   	push   %edx
c01062a4:	50                   	push   %eax
c01062a5:	68 10 b0 12 c0       	push   $0xc012b010
c01062aa:	e8 21 1c 00 00       	call   c0107ed0 <kprintf>
c01062af:	83 c4 10             	add    $0x10,%esp
    
    unsigned int map_size = mbi->mmap_length / sizeof(multiboot_memory_map_t);
c01062b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01062b5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01062b8:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
c01062bd:	f7 e2                	mul    %edx
c01062bf:	89 d0                	mov    %edx,%eax
c01062c1:	c1 e8 04             	shr    $0x4,%eax
c01062c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    for (unsigned int i = 0; i < map_size; i++) {
c01062c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01062ce:	e9 1e 01 00 00       	jmp    c01063f1 <_kernel_init+0x1d4>
        multiboot_memory_map_t mmap = map[i];
c01062d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01062d6:	89 d0                	mov    %edx,%eax
c01062d8:	01 c0                	add    %eax,%eax
c01062da:	01 d0                	add    %edx,%eax
c01062dc:	c1 e0 03             	shl    $0x3,%eax
c01062df:	89 c2                	mov    %eax,%edx
c01062e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062e4:	01 d0                	add    %edx,%eax
c01062e6:	8b 10                	mov    (%eax),%edx
c01062e8:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01062eb:	8b 50 04             	mov    0x4(%eax),%edx
c01062ee:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01062f1:	8b 50 08             	mov    0x8(%eax),%edx
c01062f4:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01062f7:	8b 50 0c             	mov    0xc(%eax),%edx
c01062fa:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01062fd:	8b 50 10             	mov    0x10(%eax),%edx
c0106300:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0106303:	8b 40 14             	mov    0x14(%eax),%eax
c0106306:	89 45 d0             	mov    %eax,-0x30(%ebp)
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
               map[i].addr_low,
               map[i].len_low >> 10,
               map[i].type);
c0106309:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010630c:	89 d0                	mov    %edx,%eax
c010630e:	01 c0                	add    %eax,%eax
c0106310:	01 d0                	add    %edx,%eax
c0106312:	c1 e0 03             	shl    $0x3,%eax
c0106315:	89 c2                	mov    %eax,%edx
c0106317:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010631a:	01 d0                	add    %edx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c010631c:	8b 50 14             	mov    0x14(%eax),%edx
               map[i].len_low >> 10,
c010631f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0106322:	89 c8                	mov    %ecx,%eax
c0106324:	01 c0                	add    %eax,%eax
c0106326:	01 c8                	add    %ecx,%eax
c0106328:	c1 e0 03             	shl    $0x3,%eax
c010632b:	89 c1                	mov    %eax,%ecx
c010632d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106330:	01 c8                	add    %ecx,%eax
c0106332:	8b 40 0c             	mov    0xc(%eax),%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c0106335:	c1 e8 0a             	shr    $0xa,%eax
c0106338:	89 c3                	mov    %eax,%ebx
               map[i].addr_low,
c010633a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010633d:	89 c8                	mov    %ecx,%eax
c010633f:	01 c0                	add    %eax,%eax
c0106341:	01 c8                	add    %ecx,%eax
c0106343:	c1 e0 03             	shl    $0x3,%eax
c0106346:	89 c1                	mov    %eax,%ecx
c0106348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010634b:	01 c8                	add    %ecx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c010634d:	8b 40 04             	mov    0x4(%eax),%eax
c0106350:	52                   	push   %edx
c0106351:	53                   	push   %ebx
c0106352:	50                   	push   %eax
c0106353:	68 34 b0 12 c0       	push   $0xc012b034
c0106358:	e8 73 1b 00 00       	call   c0107ed0 <kprintf>
c010635d:	83 c4 10             	add    $0x10,%esp
        if (mmap.type == MULTIBOOT_MEMORY_AVAILABLE) {
c0106360:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106363:	83 f8 01             	cmp    $0x1,%eax
c0106366:	0f 85 81 00 00 00    	jne    c01063ed <_kernel_init+0x1d0>
            // 整数向上取整除法
            uintptr_t pg = map[i].addr_low + 0x0fffU;
c010636c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010636f:	89 d0                	mov    %edx,%eax
c0106371:	01 c0                	add    %eax,%eax
c0106373:	01 d0                	add    %edx,%eax
c0106375:	c1 e0 03             	shl    $0x3,%eax
c0106378:	89 c2                	mov    %eax,%edx
c010637a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010637d:	01 d0                	add    %edx,%eax
c010637f:	8b 40 04             	mov    0x4(%eax),%eax
c0106382:	05 ff 0f 00 00       	add    $0xfff,%eax
c0106387:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            pmm_mark_chunk_free(pg >> 12, map[i].len_low >> 12);
c010638a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010638d:	89 d0                	mov    %edx,%eax
c010638f:	01 c0                	add    %eax,%eax
c0106391:	01 d0                	add    %edx,%eax
c0106393:	c1 e0 03             	shl    $0x3,%eax
c0106396:	89 c2                	mov    %eax,%edx
c0106398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010639b:	01 d0                	add    %edx,%eax
c010639d:	8b 40 0c             	mov    0xc(%eax),%eax
c01063a0:	c1 e8 0c             	shr    $0xc,%eax
c01063a3:	89 c2                	mov    %eax,%edx
c01063a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063a8:	c1 e8 0c             	shr    $0xc,%eax
c01063ab:	83 ec 08             	sub    $0x8,%esp
c01063ae:	52                   	push   %edx
c01063af:	50                   	push   %eax
c01063b0:	e8 74 03 00 00       	call   c0106729 <pmm_mark_chunk_free>
c01063b5:	83 c4 10             	add    $0x10,%esp
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c01063b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01063c0:	89 c1                	mov    %eax,%ecx
                   map[i].len_low >> 12,
c01063c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01063c5:	89 d0                	mov    %edx,%eax
c01063c7:	01 c0                	add    %eax,%eax
c01063c9:	01 d0                	add    %edx,%eax
c01063cb:	c1 e0 03             	shl    $0x3,%eax
c01063ce:	89 c2                	mov    %eax,%edx
c01063d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d3:	01 d0                	add    %edx,%eax
c01063d5:	8b 40 0c             	mov    0xc(%eax),%eax
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c01063d8:	c1 e8 0c             	shr    $0xc,%eax
c01063db:	83 ec 04             	sub    $0x4,%esp
c01063de:	51                   	push   %ecx
c01063df:	50                   	push   %eax
c01063e0:	68 5c b0 12 c0       	push   $0xc012b05c
c01063e5:	e8 e6 1a 00 00       	call   c0107ed0 <kprintf>
c01063ea:	83 c4 10             	add    $0x10,%esp
    for (unsigned int i = 0; i < map_size; i++) {
c01063ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01063f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063f4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01063f7:	0f 82 d6 fe ff ff    	jb     c01062d3 <_kernel_init+0xb6>
                   pg & ~0x0fffU);
        }
    }

    // 将内核占据的页设为已占用
    size_t pg_count = (uintptr_t)(&virkernel_end  - &virkernel_start) >> 12;
c01063fd:	b8 00 20 13 c0       	mov    $0xc0132000,%eax
c0106402:	2d 00 60 10 c0       	sub    $0xc0106000,%eax
c0106407:	c1 e8 0c             	shr    $0xc,%eax
c010640a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    pmm_mark_chunk_occupied(V2P(&virkernel_start) >> 12, pg_count);
c010640d:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
c0106412:	05 00 00 00 40       	add    $0x40000000,%eax
c0106417:	c1 e8 0c             	shr    $0xc,%eax
c010641a:	83 ec 08             	sub    $0x8,%esp
c010641d:	ff 75 dc             	push   -0x24(%ebp)
c0106420:	50                   	push   %eax
c0106421:	e8 67 03 00 00       	call   c010678d <pmm_mark_chunk_occupied>
c0106426:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Allocated %d pages for kernel.\n", pg_count);
c0106429:	83 ec 08             	sub    $0x8,%esp
c010642c:	ff 75 dc             	push   -0x24(%ebp)
c010642f:	68 84 b0 12 c0       	push   $0xc012b084
c0106434:	e8 97 1a 00 00       	call   c0107ed0 <kprintf>
c0106439:	83 c4 10             	add    $0x10,%esp

    size_t vga_buf_pgs = VGA_BUFFER_SIZE >> 12;
c010643c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
    
    // 首先，标记VGA部分为已占用
    pmm_mark_chunk_occupied(VIDEO >> 12, vga_buf_pgs);
c0106443:	83 ec 08             	sub    $0x8,%esp
c0106446:	ff 75 d8             	push   -0x28(%ebp)
c0106449:	68 b8 00 00 00       	push   $0xb8
c010644e:	e8 3a 03 00 00       	call   c010678d <pmm_mark_chunk_occupied>
c0106453:	83 c4 10             	add    $0x10,%esp
    
    // 重映射VGA文本缓冲区（以后会变成显存，i.e., framebuffer）
    for (size_t i = 0; i < vga_buf_pgs; i++)
c0106456:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010645d:	eb 2a                	jmp    c0106489 <_kernel_init+0x26c>
    {
        vmm_map_page(VGA_BUFFER_VADDR + (i << 12), VIDEO + (i << 12), PG_PREM_RW, PG_PREM_RW);
c010645f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106462:	c1 e0 0c             	shl    $0xc,%eax
c0106465:	05 00 80 0b 00       	add    $0xb8000,%eax
c010646a:	89 c2                	mov    %eax,%edx
c010646c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010646f:	c1 e0 0c             	shl    $0xc,%eax
c0106472:	2d 00 00 00 50       	sub    $0x50000000,%eax
c0106477:	6a 03                	push   $0x3
c0106479:	6a 03                	push   $0x3
c010647b:	52                   	push   %edx
c010647c:	50                   	push   %eax
c010647d:	e8 d6 0a 00 00       	call   c0106f58 <vmm_map_page>
c0106482:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < vga_buf_pgs; i++)
c0106485:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0106489:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010648c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c010648f:	72 ce                	jb     c010645f <_kernel_init+0x242>
    }
    set_vga_buffer(VGA_BUFFER_VADDR);
c0106491:	83 ec 0c             	sub    $0xc,%esp
c0106494:	68 00 00 00 b0       	push   $0xb0000000
c0106499:	e8 72 fb ff ff       	call   c0106010 <set_vga_buffer>
c010649e:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Mapped VGA to %x.\n", VGA_BUFFER_VADDR);
c01064a1:	83 ec 08             	sub    $0x8,%esp
c01064a4:	68 00 00 00 b0       	push   $0xb0000000
c01064a9:	68 a9 b0 12 c0       	push   $0xc012b0a9
c01064ae:	e8 1d 1a 00 00       	call   c0107ed0 <kprintf>
c01064b3:	83 c4 10             	add    $0x10,%esp

    // 为内核创建一个专属栈空间。
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c01064b6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01064bd:	eb 1f                	jmp    c01064de <_kernel_init+0x2c1>
        vmm_alloc_page(K_STACK_START + (i << 12), PG_PREM_RW, PG_PREM_RW);
c01064bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064c2:	c1 e0 0c             	shl    $0xc,%eax
c01064c5:	2d 00 00 50 00       	sub    $0x500000,%eax
c01064ca:	83 ec 04             	sub    $0x4,%esp
c01064cd:	6a 03                	push   $0x3
c01064cf:	6a 03                	push   $0x3
c01064d1:	50                   	push   %eax
c01064d2:	e8 47 0c 00 00       	call   c010711e <vmm_alloc_page>
c01064d7:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c01064da:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01064de:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%ebp)
c01064e5:	76 d8                	jbe    c01064bf <_kernel_init+0x2a2>
    }
    kprintf("[MM] Allocated %d pages for stack start at %p\n", K_STACK_SIZE>>12, K_STACK_START);
c01064e7:	83 ec 04             	sub    $0x4,%esp
c01064ea:	68 00 00 b0 ff       	push   $0xffb00000
c01064ef:	68 00 01 00 00       	push   $0x100
c01064f4:	68 c4 b0 12 c0       	push   $0xc012b0c4
c01064f9:	e8 d2 19 00 00       	call   c0107ed0 <kprintf>
c01064fe:	83 c4 10             	add    $0x10,%esp

    //give malloc init
    mem_init();
c0106501:	e8 40 07 00 00       	call   c0106c46 <mem_init>
    kprintf("[MM] Malloc Init Success \n");
c0106506:	83 ec 0c             	sub    $0xc,%esp
c0106509:	68 f3 b0 12 c0       	push   $0xc012b0f3
c010650e:	e8 bd 19 00 00       	call   c0107ed0 <kprintf>
c0106513:	83 c4 10             	add    $0x10,%esp
    kprintf("[KERNEL] === Initialization Done === \n\n");
c0106516:	83 ec 0c             	sub    $0xc,%esp
c0106519:	68 10 b1 12 c0       	push   $0xc012b110
c010651e:	e8 ad 19 00 00       	call   c0107ed0 <kprintf>
c0106523:	83 c4 10             	add    $0x10,%esp

    vga_put_str("MELOX OS\n");
c0106526:	83 ec 0c             	sub    $0xc,%esp
c0106529:	68 38 b1 12 c0       	push   $0xc012b138
c010652e:	e8 e0 fb ff ff       	call   c0106113 <vga_put_str>
c0106533:	83 c4 10             	add    $0x10,%esp
     //__asm__("int $1");
}
c0106536:	90                   	nop
c0106537:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010653a:	c9                   	leave  
c010653b:	c3                   	ret    

c010653c <_kernel_finnal_init>:

void _kernel_finnal_init() {
c010653c:	55                   	push   %ebp
c010653d:	89 e5                	mov    %esp,%ebp
c010653f:	83 ec 18             	sub    $0x18,%esp
    //kprintf("[KERNEL] === Post Initialization === \n");
    size_t virk_init_pg_count = ((uintptr_t)(&__init_phykernel_end)) >> 12;
c0106542:	b8 00 60 10 00       	mov    $0x106000,%eax
c0106547:	c1 e8 0c             	shr    $0xc,%eax
c010654a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("[MM] Releaseing %d pages from 0x0.\n", virk_init_pg_count);
c010654d:	83 ec 08             	sub    $0x8,%esp
c0106550:	ff 75 f0             	push   -0x10(%ebp)
c0106553:	68 44 b1 12 c0       	push   $0xc012b144
c0106558:	e8 73 19 00 00       	call   c0107ed0 <kprintf>
c010655d:	83 c4 10             	add    $0x10,%esp
    
    // // 清除 hhk_init 与前1MiB的映射
    for (size_t i = 0; i < virk_init_pg_count; i++) {
c0106560:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106567:	eb 16                	jmp    c010657f <_kernel_finnal_init+0x43>

        vmm_unmap_page((i << 12));
c0106569:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010656c:	c1 e0 0c             	shl    $0xc,%eax
c010656f:	83 ec 0c             	sub    $0xc,%esp
c0106572:	50                   	push   %eax
c0106573:	e8 e4 0b 00 00       	call   c010715c <vmm_unmap_page>
c0106578:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < virk_init_pg_count; i++) {
c010657b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010657f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106582:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106585:	72 e2                	jb     c0106569 <_kernel_finnal_init+0x2d>
    // }
    // for (size_t i = 256; i < virk_init_pg_count; i++) {

    //     vmm_unmap_page((i << 12));
    // }
    kprintf("[KERNEL] === Post Initialization Done === \n\n");
c0106587:	83 ec 0c             	sub    $0xc,%esp
c010658a:	68 68 b1 12 c0       	push   $0xc012b168
c010658f:	e8 3c 19 00 00       	call   c0107ed0 <kprintf>
c0106594:	83 c4 10             	add    $0x10,%esp
}
c0106597:	90                   	nop
c0106598:	c9                   	leave  
c0106599:	c3                   	ret    

c010659a <_kernel_main>:

void _kernel_main()
{
c010659a:	55                   	push   %ebp
c010659b:	89 e5                	mov    %esp,%ebp
c010659d:	81 ec 18 01 00 00    	sub    $0x118,%esp
    char* buf[64];
    
    kprintf("We are now running in virtual address space!\n\n");
c01065a3:	83 ec 0c             	sub    $0xc,%esp
c01065a6:	68 98 b1 12 c0       	push   $0xc012b198
c01065ab:	e8 20 19 00 00       	call   c0107ed0 <kprintf>
c01065b0:	83 c4 10             	add    $0x10,%esp
    
    cpu_get_brand(buf);
c01065b3:	83 ec 0c             	sub    $0xc,%esp
c01065b6:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
c01065bc:	50                   	push   %eax
c01065bd:	e8 c9 10 00 00       	call   c010768b <cpu_get_brand>
c01065c2:	83 c4 10             	add    $0x10,%esp
    kprintf("CPU: %s\n\n", buf);
c01065c5:	83 ec 08             	sub    $0x8,%esp
c01065c8:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
c01065ce:	50                   	push   %eax
c01065cf:	68 c7 b1 12 c0       	push   $0xc012b1c7
c01065d4:	e8 f7 18 00 00       	call   c0107ed0 <kprintf>
c01065d9:	83 c4 10             	add    $0x10,%esp

    uintptr_t k_start = vmm_v2p(&virkernel_start);
c01065dc:	83 ec 0c             	sub    $0xc,%esp
c01065df:	68 00 60 10 c0       	push   $0xc0106000
c01065e4:	e8 0e 0c 00 00       	call   c01071f7 <vmm_v2p>
c01065e9:	83 c4 10             	add    $0x10,%esp
c01065ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf("The kernel's base address mapping: %x->%x\n", &virkernel_start, k_start);
c01065ef:	83 ec 04             	sub    $0x4,%esp
c01065f2:	ff 75 f4             	push   -0xc(%ebp)
c01065f5:	68 00 60 10 c0       	push   $0xc0106000
c01065fa:	68 d4 b1 12 c0       	push   $0xc012b1d4
c01065ff:	e8 cc 18 00 00       	call   c0107ed0 <kprintf>
c0106604:	83 c4 10             	add    $0x10,%esp
    //__asm__("int $0");
    // test malloc & free

    uint8_t* big_ = k_malloc(1000);
c0106607:	83 ec 0c             	sub    $0xc,%esp
c010660a:	68 e8 03 00 00       	push   $0x3e8
c010660f:	e8 19 08 00 00       	call   c0106e2d <k_malloc>
c0106614:	83 c4 10             	add    $0x10,%esp
c0106617:	89 45 f0             	mov    %eax,-0x10(%ebp)
    big_[0] = 123;
c010661a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010661d:	c6 00 7b             	movb   $0x7b,(%eax)
    big_[1] = 23;
c0106620:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106623:	83 c0 01             	add    $0x1,%eax
c0106626:	c6 00 17             	movb   $0x17,(%eax)
    big_[2] = 3;
c0106629:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010662c:	83 c0 02             	add    $0x2,%eax
c010662f:	c6 00 03             	movb   $0x3,(%eax)

    kprintf("malloc %d, %d, %d\n", big_[0], big_[1], big_[2]);
c0106632:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106635:	83 c0 02             	add    $0x2,%eax
c0106638:	0f b6 00             	movzbl (%eax),%eax
c010663b:	0f b6 c8             	movzbl %al,%ecx
c010663e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106641:	83 c0 01             	add    $0x1,%eax
c0106644:	0f b6 00             	movzbl (%eax),%eax
c0106647:	0f b6 d0             	movzbl %al,%edx
c010664a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010664d:	0f b6 00             	movzbl (%eax),%eax
c0106650:	0f b6 c0             	movzbl %al,%eax
c0106653:	51                   	push   %ecx
c0106654:	52                   	push   %edx
c0106655:	50                   	push   %eax
c0106656:	68 ff b1 12 c0       	push   $0xc012b1ff
c010665b:	e8 70 18 00 00       	call   c0107ed0 <kprintf>
c0106660:	83 c4 10             	add    $0x10,%esp
    malloc_free(big_);
c0106663:	83 ec 0c             	sub    $0xc,%esp
c0106666:	ff 75 f0             	push   -0x10(%ebp)
c0106669:	e8 7a 07 00 00       	call   c0106de8 <malloc_free>
c010666e:	83 c4 10             	add    $0x10,%esp

    init_keyboard();
c0106671:	e8 af 17 00 00       	call   c0107e25 <init_keyboard>
c0106676:	90                   	nop
c0106677:	c9                   	leave  
c0106678:	c3                   	ret    

c0106679 <pmm_init>:
#include <kernel/memory/page.h>
size_t pg_lookup_ptr;
uint8_t pm_bitmap[PM_BMP_MAX_SIZE];
uintptr_t max_pg;
void pmm_init(uintptr_t mem_upper_lim)
{
c0106679:	55                   	push   %ebp
c010667a:	89 e5                	mov    %esp,%ebp
c010667c:	83 ec 10             	sub    $0x10,%esp
    pg_lookup_ptr = LOOKUP_START;
c010667f:	c7 05 20 90 10 c0 01 	movl   $0x1,0xc0109020
c0106686:	00 00 00 
    max_pg = (PG_ALIGN(mem_upper_lim) >> 12);
c0106689:	8b 45 08             	mov    0x8(%ebp),%eax
c010668c:	c1 e8 0c             	shr    $0xc,%eax
c010668f:	a3 40 90 12 c0       	mov    %eax,0xc0129040

    for(int i = 0; i < PM_BMP_MAX_SIZE; i++)
c0106694:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010669b:	eb 0f                	jmp    c01066ac <pmm_init+0x33>
    {
        pm_bitmap[i] = 0xffU;
c010669d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01066a0:	05 40 90 10 c0       	add    $0xc0109040,%eax
c01066a5:	c6 00 ff             	movb   $0xff,(%eax)
    for(int i = 0; i < PM_BMP_MAX_SIZE; i++)
c01066a8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01066ac:	81 7d fc ff ff 01 00 	cmpl   $0x1ffff,-0x4(%ebp)
c01066b3:	7e e8                	jle    c010669d <pmm_init+0x24>
    }
}
c01066b5:	90                   	nop
c01066b6:	90                   	nop
c01066b7:	c9                   	leave  
c01066b8:	c3                   	ret    

c01066b9 <pmm_mark_page_free>:

void pmm_mark_page_free(uintptr_t ppn)
{
c01066b9:	55                   	push   %ebp
c01066ba:	89 e5                	mov    %esp,%ebp
c01066bc:	53                   	push   %ebx
    pm_bitmap[ppn / 8] = pm_bitmap[ppn / 8] & (0xff7fU >> (ppn % 8));
c01066bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01066c0:	c1 e8 03             	shr    $0x3,%eax
c01066c3:	0f b6 90 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%edx
c01066ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01066cd:	83 e0 07             	and    $0x7,%eax
c01066d0:	bb 7f ff 00 00       	mov    $0xff7f,%ebx
c01066d5:	89 c1                	mov    %eax,%ecx
c01066d7:	d3 eb                	shr    %cl,%ebx
c01066d9:	89 d8                	mov    %ebx,%eax
c01066db:	89 c1                	mov    %eax,%ecx
c01066dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01066e0:	c1 e8 03             	shr    $0x3,%eax
c01066e3:	21 ca                	and    %ecx,%edx
c01066e5:	88 90 40 90 10 c0    	mov    %dl,-0x3fef6fc0(%eax)
}
c01066eb:	90                   	nop
c01066ec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01066ef:	c9                   	leave  
c01066f0:	c3                   	ret    

c01066f1 <pmm_mark_page_occupied>:

void pmm_mark_page_occupied(uintptr_t ppn)
{
c01066f1:	55                   	push   %ebp
c01066f2:	89 e5                	mov    %esp,%ebp
c01066f4:	53                   	push   %ebx
    pm_bitmap[ppn / 8] = pm_bitmap[ppn / 8] | (0x80U >> (ppn % 8));
c01066f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01066f8:	c1 e8 03             	shr    $0x3,%eax
c01066fb:	0f b6 90 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%edx
c0106702:	8b 45 08             	mov    0x8(%ebp),%eax
c0106705:	83 e0 07             	and    $0x7,%eax
c0106708:	bb 80 00 00 00       	mov    $0x80,%ebx
c010670d:	89 c1                	mov    %eax,%ecx
c010670f:	d3 eb                	shr    %cl,%ebx
c0106711:	89 d8                	mov    %ebx,%eax
c0106713:	89 c1                	mov    %eax,%ecx
c0106715:	8b 45 08             	mov    0x8(%ebp),%eax
c0106718:	c1 e8 03             	shr    $0x3,%eax
c010671b:	09 ca                	or     %ecx,%edx
c010671d:	88 90 40 90 10 c0    	mov    %dl,-0x3fef6fc0(%eax)
}
c0106723:	90                   	nop
c0106724:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106727:	c9                   	leave  
c0106728:	c3                   	ret    

c0106729 <pmm_mark_chunk_free>:

void pmm_mark_chunk_free(uintptr_t start_ppn, size_t page_count)
{
c0106729:	55                   	push   %ebp
c010672a:	89 e5                	mov    %esp,%ebp
c010672c:	53                   	push   %ebx
c010672d:	83 ec 10             	sub    $0x10,%esp
    for(int i = start_ppn; i < page_count; i++)
c0106730:	8b 45 08             	mov    0x8(%ebp),%eax
c0106733:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0106736:	eb 46                	jmp    c010677e <pmm_mark_chunk_free+0x55>
        pm_bitmap[i / 8] = pm_bitmap[i / 8] & (0xff7fU >> (i % 8));
c0106738:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010673b:	8d 50 07             	lea    0x7(%eax),%edx
c010673e:	85 c0                	test   %eax,%eax
c0106740:	0f 48 c2             	cmovs  %edx,%eax
c0106743:	c1 f8 03             	sar    $0x3,%eax
c0106746:	0f b6 98 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%ebx
c010674d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106750:	83 e0 07             	and    $0x7,%eax
c0106753:	ba 7f ff 00 00       	mov    $0xff7f,%edx
c0106758:	89 c1                	mov    %eax,%ecx
c010675a:	d3 ea                	shr    %cl,%edx
c010675c:	89 d0                	mov    %edx,%eax
c010675e:	89 c1                	mov    %eax,%ecx
c0106760:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106763:	8d 50 07             	lea    0x7(%eax),%edx
c0106766:	85 c0                	test   %eax,%eax
c0106768:	0f 48 c2             	cmovs  %edx,%eax
c010676b:	c1 f8 03             	sar    $0x3,%eax
c010676e:	89 c2                	mov    %eax,%edx
c0106770:	89 d8                	mov    %ebx,%eax
c0106772:	21 c8                	and    %ecx,%eax
c0106774:	88 82 40 90 10 c0    	mov    %al,-0x3fef6fc0(%edx)
    for(int i = start_ppn; i < page_count; i++)
c010677a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010677e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106781:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0106784:	77 b2                	ja     c0106738 <pmm_mark_chunk_free+0xf>
}
c0106786:	90                   	nop
c0106787:	90                   	nop
c0106788:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010678b:	c9                   	leave  
c010678c:	c3                   	ret    

c010678d <pmm_mark_chunk_occupied>:

void pmm_mark_chunk_occupied(uintptr_t start_ppn, size_t page_count)
{
c010678d:	55                   	push   %ebp
c010678e:	89 e5                	mov    %esp,%ebp
c0106790:	53                   	push   %ebx
c0106791:	83 ec 10             	sub    $0x10,%esp
    for(int i = start_ppn; i < page_count; i++)
c0106794:	8b 45 08             	mov    0x8(%ebp),%eax
c0106797:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010679a:	eb 46                	jmp    c01067e2 <pmm_mark_chunk_occupied+0x55>
        pm_bitmap[i / 8] = pm_bitmap[i / 8] | (0x80U >> (i % 8));
c010679c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010679f:	8d 50 07             	lea    0x7(%eax),%edx
c01067a2:	85 c0                	test   %eax,%eax
c01067a4:	0f 48 c2             	cmovs  %edx,%eax
c01067a7:	c1 f8 03             	sar    $0x3,%eax
c01067aa:	0f b6 98 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%ebx
c01067b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067b4:	83 e0 07             	and    $0x7,%eax
c01067b7:	ba 80 00 00 00       	mov    $0x80,%edx
c01067bc:	89 c1                	mov    %eax,%ecx
c01067be:	d3 ea                	shr    %cl,%edx
c01067c0:	89 d0                	mov    %edx,%eax
c01067c2:	89 c1                	mov    %eax,%ecx
c01067c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067c7:	8d 50 07             	lea    0x7(%eax),%edx
c01067ca:	85 c0                	test   %eax,%eax
c01067cc:	0f 48 c2             	cmovs  %edx,%eax
c01067cf:	c1 f8 03             	sar    $0x3,%eax
c01067d2:	89 c2                	mov    %eax,%edx
c01067d4:	89 d8                	mov    %ebx,%eax
c01067d6:	09 c8                	or     %ecx,%eax
c01067d8:	88 82 40 90 10 c0    	mov    %al,-0x3fef6fc0(%edx)
    for(int i = start_ppn; i < page_count; i++)
c01067de:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01067e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067e5:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01067e8:	77 b2                	ja     c010679c <pmm_mark_chunk_occupied+0xf>
}
c01067ea:	90                   	nop
c01067eb:	90                   	nop
c01067ec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01067ef:	c9                   	leave  
c01067f0:	c3                   	ret    

c01067f1 <pmm_alloc_page>:

void* pmm_alloc_page()
{
c01067f1:	55                   	push   %ebp
c01067f2:	89 e5                	mov    %esp,%ebp
c01067f4:	53                   	push   %ebx
c01067f5:	83 ec 20             	sub    $0x20,%esp
    // Next fit approach. Maximize the throughput!
    uintptr_t good_page_found = NULL;
c01067f8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    size_t old_pg_ptr = pg_lookup_ptr;
c01067ff:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106804:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t upper_lim = max_pg;
c0106807:	a1 40 90 12 c0       	mov    0xc0129040,%eax
c010680c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint8_t chunk = 0;
c010680f:	c6 45 eb 00          	movb   $0x0,-0x15(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c0106813:	e9 a5 00 00 00       	jmp    c01068bd <pmm_alloc_page+0xcc>
        chunk = pm_bitmap[pg_lookup_ptr >> 3];
c0106818:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010681d:	c1 e8 03             	shr    $0x3,%eax
c0106820:	0f b6 80 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%eax
c0106827:	88 45 eb             	mov    %al,-0x15(%ebp)

        // skip the fully occupied chunk, reduce # of iterations
        if (chunk != 0xFFU) {
c010682a:	80 7d eb ff          	cmpb   $0xff,-0x15(%ebp)
c010682e:	74 59                	je     c0106889 <pmm_alloc_page+0x98>
            for (size_t i = pg_lookup_ptr % 8; i < 8; i++, pg_lookup_ptr++) {
c0106830:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106835:	83 e0 07             	and    $0x7,%eax
c0106838:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010683b:	eb 44                	jmp    c0106881 <pmm_alloc_page+0x90>
                if (!(chunk & (0x80U >> i))) {
c010683d:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
c0106841:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106844:	bb 80 00 00 00       	mov    $0x80,%ebx
c0106849:	89 c1                	mov    %eax,%ecx
c010684b:	d3 eb                	shr    %cl,%ebx
c010684d:	89 d8                	mov    %ebx,%eax
c010684f:	21 d0                	and    %edx,%eax
c0106851:	85 c0                	test   %eax,%eax
c0106853:	75 1b                	jne    c0106870 <pmm_alloc_page+0x7f>
                    pmm_mark_page_occupied(pg_lookup_ptr);
c0106855:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010685a:	50                   	push   %eax
c010685b:	e8 91 fe ff ff       	call   c01066f1 <pmm_mark_page_occupied>
c0106860:	83 c4 04             	add    $0x4,%esp
                    good_page_found = pg_lookup_ptr << 12;
c0106863:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106868:	c1 e0 0c             	shl    $0xc,%eax
c010686b:	89 45 f8             	mov    %eax,-0x8(%ebp)
                    break;
c010686e:	eb 4d                	jmp    c01068bd <pmm_alloc_page+0xcc>
            for (size_t i = pg_lookup_ptr % 8; i < 8; i++, pg_lookup_ptr++) {
c0106870:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106874:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106879:	83 c0 01             	add    $0x1,%eax
c010687c:	a3 20 90 10 c0       	mov    %eax,0xc0109020
c0106881:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
c0106885:	76 b6                	jbe    c010683d <pmm_alloc_page+0x4c>
c0106887:	eb 34                	jmp    c01068bd <pmm_alloc_page+0xcc>
                }
            }
        } else {
            pg_lookup_ptr += 8;
c0106889:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010688e:	83 c0 08             	add    $0x8,%eax
c0106891:	a3 20 90 10 c0       	mov    %eax,0xc0109020

            // We've searched the interval [old_pg_ptr, max_pg) but failed
            //   may be chances in [1, old_pg_ptr) ?
            // Let's find out!
            if (pg_lookup_ptr >= upper_lim && old_pg_ptr != LOOKUP_START) {
c0106896:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010689b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010689e:	77 1d                	ja     c01068bd <pmm_alloc_page+0xcc>
c01068a0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c01068a4:	74 17                	je     c01068bd <pmm_alloc_page+0xcc>
                upper_lim = old_pg_ptr;
c01068a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
                pg_lookup_ptr = LOOKUP_START;
c01068ac:	c7 05 20 90 10 c0 01 	movl   $0x1,0xc0109020
c01068b3:	00 00 00 
                old_pg_ptr = LOOKUP_START;
c01068b6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c01068bd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01068c1:	75 0e                	jne    c01068d1 <pmm_alloc_page+0xe0>
c01068c3:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c01068c8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01068cb:	0f 87 47 ff ff ff    	ja     c0106818 <pmm_alloc_page+0x27>
            }
        }
    }
    return (void*)good_page_found;
c01068d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01068d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01068d7:	c9                   	leave  
c01068d8:	c3                   	ret    

c01068d9 <pmm_free_page>:

int
pmm_free_page(void* page)
{
c01068d9:	55                   	push   %ebp
c01068da:	89 e5                	mov    %esp,%ebp
c01068dc:	83 ec 10             	sub    $0x10,%esp
    // TODO: Add kernel reserved memory page check
    uint32_t pg = (uintptr_t)page >> 12;
c01068df:	8b 45 08             	mov    0x8(%ebp),%eax
c01068e2:	c1 e8 0c             	shr    $0xc,%eax
c01068e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (pg && pg < max_pg)
c01068e8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01068ec:	74 1c                	je     c010690a <pmm_free_page+0x31>
c01068ee:	a1 40 90 12 c0       	mov    0xc0129040,%eax
c01068f3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01068f6:	73 12                	jae    c010690a <pmm_free_page+0x31>
    {
        pmm_mark_page_free(pg);
c01068f8:	ff 75 fc             	push   -0x4(%ebp)
c01068fb:	e8 b9 fd ff ff       	call   c01066b9 <pmm_mark_page_free>
c0106900:	83 c4 04             	add    $0x4,%esp
        return 1;
c0106903:	b8 01 00 00 00       	mov    $0x1,%eax
c0106908:	eb 05                	jmp    c010690f <pmm_free_page+0x36>
    }
    return 0;
c010690a:	b8 00 00 00 00       	mov    $0x0,%eax
c010690f:	c9                   	leave  
c0106910:	c3                   	ret    

c0106911 <extend_heap>:
 * @brief extend heap
 * 
 * @param extend size
 */
static void* extend_heap(size_t words)
{
c0106911:	55                   	push   %ebp
c0106912:	89 e5                	mov    %esp,%ebp
c0106914:	83 ec 18             	sub    $0x18,%esp
    char* bp = mem_brk;
c0106917:	a1 4c 90 12 c0       	mov    0xc012904c,%eax
c010691c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size;
    //align
    size = (words % 2) ? words * WSIZE : (words + 1) * WSIZE;
c010691f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106922:	83 e0 01             	and    $0x1,%eax
c0106925:	85 c0                	test   %eax,%eax
c0106927:	74 08                	je     c0106931 <extend_heap+0x20>
c0106929:	8b 45 08             	mov    0x8(%ebp),%eax
c010692c:	c1 e0 02             	shl    $0x2,%eax
c010692f:	eb 09                	jmp    c010693a <extend_heap+0x29>
c0106931:	8b 45 08             	mov    0x8(%ebp),%eax
c0106934:	83 c0 01             	add    $0x1,%eax
c0106937:	c1 e0 02             	shl    $0x2,%eax
c010693a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_sbrk(size + WSIZE);
c010693d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106940:	83 c0 04             	add    $0x4,%eax
c0106943:	83 ec 0c             	sub    $0xc,%esp
c0106946:	50                   	push   %eax
c0106947:	e8 60 03 00 00       	call   c0106cac <mem_sbrk>
c010694c:	83 c4 10             	add    $0x10,%esp

    //initialize free block header/footer and the epilogue header
    PUT(HDRP(bp), PACK(size, 0)); // free block header
c010694f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106952:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106955:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106958:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0)); // free block foot //TODO CRUSH HERE, ADD ONE PAGE OUT OF RANGE, WE ONLY GIVE ONE PAGE, MEYBE PAGE FAULT
c010695a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010695d:	83 e8 04             	sub    $0x4,%eax
c0106960:	8b 00                	mov    (%eax),%eax
c0106962:	83 e0 f8             	and    $0xfffffff8,%eax
c0106965:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010696b:	01 c2                	add    %eax,%edx
c010696d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106970:	89 02                	mov    %eax,(%edx)
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); //NEW Epilogue header
c0106972:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106975:	83 e8 04             	sub    $0x4,%eax
c0106978:	8b 00                	mov    (%eax),%eax
c010697a:	83 e0 f8             	and    $0xfffffff8,%eax
c010697d:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106983:	01 d0                	add    %edx,%eax
c0106985:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //Coalesce if previous block is free
    return coalesce(bp);
c010698b:	83 ec 0c             	sub    $0xc,%esp
c010698e:	ff 75 f4             	push   -0xc(%ebp)
c0106991:	e8 05 00 00 00       	call   c010699b <coalesce>
c0106996:	83 c4 10             	add    $0x10,%esp
}
c0106999:	c9                   	leave  
c010699a:	c3                   	ret    

c010699b <coalesce>:
 * @brief Coalesce free blk
 * 
 * @param Coalesce bp pointer
 */
static void* coalesce(void* bp)
{
c010699b:	55                   	push   %ebp
c010699c:	89 e5                	mov    %esp,%ebp
c010699e:	83 ec 10             	sub    $0x10,%esp
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
c01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01069a4:	83 e8 04             	sub    $0x4,%eax
c01069a7:	8b 00                	mov    (%eax),%eax
c01069a9:	83 e0 f8             	and    $0xfffffff8,%eax
c01069ac:	8d 50 f8             	lea    -0x8(%eax),%edx
c01069af:	8b 45 08             	mov    0x8(%ebp),%eax
c01069b2:	01 d0                	add    %edx,%eax
c01069b4:	8b 00                	mov    (%eax),%eax
c01069b6:	83 e0 01             	and    $0x1,%eax
c01069b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
c01069bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01069bf:	83 e8 04             	sub    $0x4,%eax
c01069c2:	8b 00                	mov    (%eax),%eax
c01069c4:	83 e0 f8             	and    $0xfffffff8,%eax
c01069c7:	8d 50 fc             	lea    -0x4(%eax),%edx
c01069ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01069cd:	01 d0                	add    %edx,%eax
c01069cf:	8b 00                	mov    (%eax),%eax
c01069d1:	83 e0 01             	and    $0x1,%eax
c01069d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t size = GET_SIZE(HDRP(bp));
c01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01069da:	83 e8 04             	sub    $0x4,%eax
c01069dd:	8b 00                	mov    (%eax),%eax
c01069df:	83 e0 f8             	and    $0xfffffff8,%eax
c01069e2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(prev_alloc && next_alloc)
c01069e5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01069e9:	74 0e                	je     c01069f9 <coalesce+0x5e>
c01069eb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01069ef:	74 08                	je     c01069f9 <coalesce+0x5e>
        return bp;
c01069f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01069f4:	e9 3e 01 00 00       	jmp    c0106b37 <coalesce+0x19c>

    else if(prev_alloc && !next_alloc)
c01069f9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01069fd:	74 49                	je     c0106a48 <coalesce+0xad>
c01069ff:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106a03:	75 43                	jne    c0106a48 <coalesce+0xad>
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
c0106a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a08:	83 e8 04             	sub    $0x4,%eax
c0106a0b:	8b 00                	mov    (%eax),%eax
c0106a0d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a10:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106a13:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a16:	01 d0                	add    %edx,%eax
c0106a18:	8b 00                	mov    (%eax),%eax
c0106a1a:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a1d:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(HDRP(bp), PACK(size, 0));
c0106a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a23:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106a26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a29:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(bp), PACK(size, 0));
c0106a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a2e:	83 e8 04             	sub    $0x4,%eax
c0106a31:	8b 00                	mov    (%eax),%eax
c0106a33:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a36:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a3c:	01 c2                	add    %eax,%edx
c0106a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a41:	89 02                	mov    %eax,(%edx)
c0106a43:	e9 ec 00 00 00       	jmp    c0106b34 <coalesce+0x199>
    }

    else if(!prev_alloc && next_alloc)
c0106a48:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106a4c:	75 6b                	jne    c0106ab9 <coalesce+0x11e>
c0106a4e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106a52:	74 65                	je     c0106ab9 <coalesce+0x11e>
    {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));//TO DO ,THERE IS PEOBLEM, CRUSH HERE
c0106a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a57:	83 e8 08             	sub    $0x8,%eax
c0106a5a:	8b 00                	mov    (%eax),%eax
c0106a5c:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a5f:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106a64:	29 c2                	sub    %eax,%edx
c0106a66:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a69:	01 d0                	add    %edx,%eax
c0106a6b:	8b 00                	mov    (%eax),%eax
c0106a6d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a70:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(bp), PACK(size, 0));
c0106a73:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a76:	83 e8 04             	sub    $0x4,%eax
c0106a79:	8b 00                	mov    (%eax),%eax
c0106a7b:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a7e:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106a81:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a84:	01 c2                	add    %eax,%edx
c0106a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a89:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
c0106a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a8e:	83 e8 08             	sub    $0x8,%eax
c0106a91:	8b 00                	mov    (%eax),%eax
c0106a93:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a96:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106a9b:	29 c2                	sub    %eax,%edx
c0106a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aa0:	01 c2                	add    %eax,%edx
c0106aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106aa5:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106aa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aaa:	83 e8 08             	sub    $0x8,%eax
c0106aad:	8b 00                	mov    (%eax),%eax
c0106aaf:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ab2:	f7 d8                	neg    %eax
c0106ab4:	01 45 08             	add    %eax,0x8(%ebp)
c0106ab7:	eb 7b                	jmp    c0106b34 <coalesce+0x199>
    }

    else{
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
c0106ab9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106abc:	83 e8 08             	sub    $0x8,%eax
c0106abf:	8b 00                	mov    (%eax),%eax
c0106ac1:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ac4:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106ac9:	29 c2                	sub    %eax,%edx
c0106acb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ace:	01 d0                	add    %edx,%eax
c0106ad0:	8b 00                	mov    (%eax),%eax
c0106ad2:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ad5:	89 c2                	mov    %eax,%edx
c0106ad7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ada:	83 e8 04             	sub    $0x4,%eax
c0106add:	8b 00                	mov    (%eax),%eax
c0106adf:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ae2:	8d 48 f8             	lea    -0x8(%eax),%ecx
c0106ae5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ae8:	01 c8                	add    %ecx,%eax
c0106aea:	8b 00                	mov    (%eax),%eax
c0106aec:	83 e0 f8             	and    $0xfffffff8,%eax
c0106aef:	01 d0                	add    %edx,%eax
c0106af1:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(PREV_BLKP(bp)), PACK(size, 0));
c0106af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106af7:	83 e8 04             	sub    $0x4,%eax
c0106afa:	8b 00                	mov    (%eax),%eax
c0106afc:	83 e0 f8             	and    $0xfffffff8,%eax
c0106aff:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106b02:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b05:	01 c2                	add    %eax,%edx
c0106b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b0a:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(size, 0));
c0106b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b0f:	83 e8 04             	sub    $0x4,%eax
c0106b12:	8b 00                	mov    (%eax),%eax
c0106b14:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b17:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b1d:	01 c2                	add    %eax,%edx
c0106b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b22:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b27:	83 e8 08             	sub    $0x8,%eax
c0106b2a:	8b 00                	mov    (%eax),%eax
c0106b2c:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b2f:	f7 d8                	neg    %eax
c0106b31:	01 45 08             	add    %eax,0x8(%ebp)
    }
    return bp;
c0106b34:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106b37:	c9                   	leave  
c0106b38:	c3                   	ret    

c0106b39 <find_fit>:
 * @brief find free blk
 * 
 * @param find size
 */
static void* find_fit(size_t asize)// we just traverse heap
{
c0106b39:	55                   	push   %ebp
c0106b3a:	89 e5                	mov    %esp,%ebp
c0106b3c:	83 ec 10             	sub    $0x10,%esp
    void* bp = heap_listp;
c0106b3f:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106b44:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106b47:	eb 2f                	jmp    c0106b78 <find_fit+0x3f>
    {
        if(GET_SIZE(bp) != 0 && GET_ALLOC(bp) != 1)
c0106b49:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b4c:	8b 00                	mov    (%eax),%eax
c0106b4e:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b51:	85 c0                	test   %eax,%eax
c0106b53:	74 1c                	je     c0106b71 <find_fit+0x38>
c0106b55:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b58:	8b 00                	mov    (%eax),%eax
c0106b5a:	83 e0 01             	and    $0x1,%eax
c0106b5d:	85 c0                	test   %eax,%eax
c0106b5f:	75 10                	jne    c0106b71 <find_fit+0x38>
            bp = NEXT_BLKP(bp);
c0106b61:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b64:	83 e8 04             	sub    $0x4,%eax
c0106b67:	8b 00                	mov    (%eax),%eax
c0106b69:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b6c:	01 45 fc             	add    %eax,-0x4(%ebp)
c0106b6f:	eb 07                	jmp    c0106b78 <find_fit+0x3f>
        else
            return NULL;
c0106b71:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b76:	eb 22                	jmp    c0106b9a <find_fit+0x61>
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106b78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b7b:	83 e8 04             	sub    $0x4,%eax
c0106b7e:	8b 00                	mov    (%eax),%eax
c0106b80:	83 e0 01             	and    $0x1,%eax
c0106b83:	85 c0                	test   %eax,%eax
c0106b85:	75 c2                	jne    c0106b49 <find_fit+0x10>
c0106b87:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b8a:	83 e8 04             	sub    $0x4,%eax
c0106b8d:	8b 00                	mov    (%eax),%eax
c0106b8f:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b92:	39 45 08             	cmp    %eax,0x8(%ebp)
c0106b95:	77 b2                	ja     c0106b49 <find_fit+0x10>
    }
    return bp;
c0106b97:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106b9a:	c9                   	leave  
c0106b9b:	c3                   	ret    

c0106b9c <place>:
 * @brief place the blk
 * 
 * @param blk,size
 */
static void place(void* bp, size_t asize)
{
c0106b9c:	55                   	push   %ebp
c0106b9d:	89 e5                	mov    %esp,%ebp
c0106b9f:	83 ec 10             	sub    $0x10,%esp
    size_t bp_allsize = GET_SIZE(HDRP(bp));
c0106ba2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ba5:	83 e8 04             	sub    $0x4,%eax
c0106ba8:	8b 00                	mov    (%eax),%eax
c0106baa:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bad:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t remain_size = bp_allsize - asize;
c0106bb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bb3:	2b 45 0c             	sub    0xc(%ebp),%eax
c0106bb6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(remain_size >= 2*DSIZE)
c0106bb9:	83 7d f8 0f          	cmpl   $0xf,-0x8(%ebp)
c0106bbd:	76 5b                	jbe    c0106c1a <place+0x7e>
    {
        PUT(HDRP(bp), PACK(asize, 1));
c0106bbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bc2:	83 e8 04             	sub    $0x4,%eax
c0106bc5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106bc8:	83 ca 01             	or     $0x1,%edx
c0106bcb:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(asize, 1));
c0106bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bd0:	83 e8 04             	sub    $0x4,%eax
c0106bd3:	8b 00                	mov    (%eax),%eax
c0106bd5:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bd8:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bde:	01 d0                	add    %edx,%eax
c0106be0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106be3:	83 ca 01             	or     $0x1,%edx
c0106be6:	89 10                	mov    %edx,(%eax)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106beb:	83 e8 04             	sub    $0x4,%eax
c0106bee:	8b 00                	mov    (%eax),%eax
c0106bf0:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bf3:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106bf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bf9:	01 c2                	add    %eax,%edx
c0106bfb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106bfe:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106c00:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c03:	83 e8 04             	sub    $0x4,%eax
c0106c06:	8b 00                	mov    (%eax),%eax
c0106c08:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c0b:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c11:	01 c2                	add    %eax,%edx
c0106c13:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106c16:	89 02                	mov    %eax,(%edx)
    }else{
        PUT(HDRP(bp), PACK(bp_allsize, 1));
        PUT(FTRP(bp), PACK(bp_allsize, 1));
    }
}
c0106c18:	eb 29                	jmp    c0106c43 <place+0xa7>
        PUT(HDRP(bp), PACK(bp_allsize, 1));
c0106c1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c1d:	83 e8 04             	sub    $0x4,%eax
c0106c20:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106c23:	83 ca 01             	or     $0x1,%edx
c0106c26:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(bp_allsize, 1));
c0106c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c2b:	83 e8 04             	sub    $0x4,%eax
c0106c2e:	8b 00                	mov    (%eax),%eax
c0106c30:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c33:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c39:	01 d0                	add    %edx,%eax
c0106c3b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106c3e:	83 ca 01             	or     $0x1,%edx
c0106c41:	89 10                	mov    %edx,(%eax)
}
c0106c43:	90                   	nop
c0106c44:	c9                   	leave  
c0106c45:	c3                   	ret    

c0106c46 <mem_init>:

//following is head file function

void mem_init()
{
c0106c46:	55                   	push   %ebp
c0106c47:	89 e5                	mov    %esp,%ebp
c0106c49:	83 ec 18             	sub    $0x18,%esp
    mem_heap = &__heap_start;
c0106c4c:	c7 05 48 90 12 c0 00 	movl   $0xc0132000,0xc0129048
c0106c53:	20 13 c0 
    //mem_heap = (char*)Malloc(MAX_HEAP);
    mem_brk = mem_heap;
c0106c56:	a1 48 90 12 c0       	mov    0xc0129048,%eax
c0106c5b:	a3 4c 90 12 c0       	mov    %eax,0xc012904c
    //mem_max_addr = (char*)(mem_heap + MAX_HEAP);
    mem_max_addr = (char*)K_STACK_START;
c0106c60:	c7 05 50 90 12 c0 00 	movl   $0xffb00000,0xc0129050
c0106c67:	00 b0 ff 
    uint8_t* pgaddr = 0;
c0106c6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if((pgaddr = vmm_alloc_page(mem_brk, PG_PREM_RW, PG_PREM_RW)) == NULL)
c0106c71:	a1 4c 90 12 c0       	mov    0xc012904c,%eax
c0106c76:	83 ec 04             	sub    $0x4,%esp
c0106c79:	6a 03                	push   $0x3
c0106c7b:	6a 03                	push   $0x3
c0106c7d:	50                   	push   %eax
c0106c7e:	e8 9b 04 00 00       	call   c010711e <vmm_alloc_page>
c0106c83:	83 c4 10             	add    $0x10,%esp
c0106c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106c89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106c8d:	74 1a                	je     c0106ca9 <mem_init+0x63>
        return;
    kprintf("malloc init phy address is 0x%x\n", pgaddr);
c0106c8f:	83 ec 08             	sub    $0x8,%esp
c0106c92:	ff 75 f4             	push   -0xc(%ebp)
c0106c95:	68 14 b2 12 c0       	push   $0xc012b214
c0106c9a:	e8 31 12 00 00       	call   c0107ed0 <kprintf>
c0106c9f:	83 c4 10             	add    $0x10,%esp
    malloc_init();
c0106ca2:	e8 b4 00 00 00       	call   c0106d5b <malloc_init>
c0106ca7:	eb 01                	jmp    c0106caa <mem_init+0x64>
        return;
c0106ca9:	90                   	nop
}
c0106caa:	c9                   	leave  
c0106cab:	c3                   	ret    

c0106cac <mem_sbrk>:

void* mem_sbrk(int incr)
{
c0106cac:	55                   	push   %ebp
c0106cad:	89 e5                	mov    %esp,%ebp
c0106caf:	83 ec 18             	sub    $0x18,%esp
    char* old = mem_brk;
c0106cb2:	a1 4c 90 12 c0       	mov    0xc012904c,%eax
c0106cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if((incr < 0) || ((mem_brk + incr) > mem_max_addr))
c0106cba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106cbe:	78 14                	js     c0106cd4 <mem_sbrk+0x28>
c0106cc0:	8b 15 4c 90 12 c0    	mov    0xc012904c,%edx
c0106cc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cc9:	01 c2                	add    %eax,%edx
c0106ccb:	a1 50 90 12 c0       	mov    0xc0129050,%eax
c0106cd0:	39 c2                	cmp    %eax,%edx
c0106cd2:	76 07                	jbe    c0106cdb <mem_sbrk+0x2f>
    {
        return (void*)-1;
c0106cd4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106cd9:	eb 7e                	jmp    c0106d59 <mem_sbrk+0xad>
    }
    char* new = mem_brk + incr;
c0106cdb:	8b 15 4c 90 12 c0    	mov    0xc012904c,%edx
c0106ce1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ce4:	01 d0                	add    %edx,%eax
c0106ce6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned int diff = PG_ALIGN(new) - PG_ALIGN(old);
c0106ce9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106cec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106cf1:	89 c2                	mov    %eax,%edx
c0106cf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cf6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106cfb:	89 c1                	mov    %eax,%ecx
c0106cfd:	89 d0                	mov    %edx,%eax
c0106cff:	29 c8                	sub    %ecx,%eax
c0106d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(diff)
c0106d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106d08:	74 3c                	je     c0106d46 <mem_sbrk+0x9a>
    {
        uint8_t* pgaddr = -1;
c0106d0a:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
        if(!(pgaddr = vmm_alloc_page(new,PG_PREM_RW,PG_PREM_RW)))
c0106d11:	83 ec 04             	sub    $0x4,%esp
c0106d14:	6a 03                	push   $0x3
c0106d16:	6a 03                	push   $0x3
c0106d18:	ff 75 f0             	push   -0x10(%ebp)
c0106d1b:	e8 fe 03 00 00       	call   c010711e <vmm_alloc_page>
c0106d20:	83 c4 10             	add    $0x10,%esp
c0106d23:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106d26:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106d2a:	75 07                	jne    c0106d33 <mem_sbrk+0x87>
        {
            return NULL;
c0106d2c:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d31:	eb 26                	jmp    c0106d59 <mem_sbrk+0xad>
        }
        kprintf("head new page is 0x%x\n", pgaddr);
c0106d33:	83 ec 08             	sub    $0x8,%esp
c0106d36:	ff 75 e8             	push   -0x18(%ebp)
c0106d39:	68 35 b2 12 c0       	push   $0xc012b235
c0106d3e:	e8 8d 11 00 00       	call   c0107ed0 <kprintf>
c0106d43:	83 c4 10             	add    $0x10,%esp
    }
    mem_brk += incr;
c0106d46:	8b 15 4c 90 12 c0    	mov    0xc012904c,%edx
c0106d4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d4f:	01 d0                	add    %edx,%eax
c0106d51:	a3 4c 90 12 c0       	mov    %eax,0xc012904c
    return (void*)old;
c0106d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106d59:	c9                   	leave  
c0106d5a:	c3                   	ret    

c0106d5b <malloc_init>:

int malloc_init()
{
c0106d5b:	55                   	push   %ebp
c0106d5c:	89 e5                	mov    %esp,%ebp
c0106d5e:	83 ec 08             	sub    $0x8,%esp
    if((heap_listp = mem_sbrk(4 * WSIZE)) == (void*) - 1)
c0106d61:	83 ec 0c             	sub    $0xc,%esp
c0106d64:	6a 10                	push   $0x10
c0106d66:	e8 41 ff ff ff       	call   c0106cac <mem_sbrk>
c0106d6b:	83 c4 10             	add    $0x10,%esp
c0106d6e:	a3 44 90 12 c0       	mov    %eax,0xc0129044
c0106d73:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106d78:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106d7b:	75 07                	jne    c0106d84 <malloc_init+0x29>
        return -1;
c0106d7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106d82:	eb 62                	jmp    c0106de6 <malloc_init+0x8b>
    PUT(heap_listp, 0);
c0106d84:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106d89:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));
c0106d8f:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106d94:	83 c0 04             	add    $0x4,%eax
c0106d97:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));
c0106d9d:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106da2:	83 c0 08             	add    $0x8,%eax
c0106da5:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));
c0106dab:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106db0:	83 c0 0c             	add    $0xc,%eax
c0106db3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    heap_listp += (2*WSIZE);
c0106db9:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106dbe:	83 c0 08             	add    $0x8,%eax
c0106dc1:	a3 44 90 12 c0       	mov    %eax,0xc0129044

    //extend free heap with free blk og CHUNKSIZE size
    //mem_sbrk((CHUNKSIZE - WSIZE));
    if(extend_heap((CHUNKSIZE - WSIZE)  / WSIZE) == NULL)
c0106dc6:	83 ec 0c             	sub    $0xc,%esp
c0106dc9:	68 ff 03 00 00       	push   $0x3ff
c0106dce:	e8 3e fb ff ff       	call   c0106911 <extend_heap>
c0106dd3:	83 c4 10             	add    $0x10,%esp
c0106dd6:	85 c0                	test   %eax,%eax
c0106dd8:	75 07                	jne    c0106de1 <malloc_init+0x86>
        return -1;
c0106dda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106ddf:	eb 05                	jmp    c0106de6 <malloc_init+0x8b>
    return 0;
c0106de1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106de6:	c9                   	leave  
c0106de7:	c3                   	ret    

c0106de8 <malloc_free>:

void malloc_free(void* bp)
{
c0106de8:	55                   	push   %ebp
c0106de9:	89 e5                	mov    %esp,%ebp
c0106deb:	83 ec 10             	sub    $0x10,%esp
    size_t size = GET_SIZE(HDRP(bp));
c0106dee:	8b 45 08             	mov    0x8(%ebp),%eax
c0106df1:	83 e8 04             	sub    $0x4,%eax
c0106df4:	8b 00                	mov    (%eax),%eax
c0106df6:	83 e0 f8             	and    $0xfffffff8,%eax
c0106df9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    PUT(HDRP(bp), PACK(size, 0));
c0106dfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dff:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106e02:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106e05:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0));
c0106e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e0a:	83 e8 04             	sub    $0x4,%eax
c0106e0d:	8b 00                	mov    (%eax),%eax
c0106e0f:	83 e0 f8             	and    $0xfffffff8,%eax
c0106e12:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106e15:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e18:	01 c2                	add    %eax,%edx
c0106e1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106e1d:	89 02                	mov    %eax,(%edx)
    coalesce(bp);
c0106e1f:	ff 75 08             	push   0x8(%ebp)
c0106e22:	e8 74 fb ff ff       	call   c010699b <coalesce>
c0106e27:	83 c4 04             	add    $0x4,%esp
}
c0106e2a:	90                   	nop
c0106e2b:	c9                   	leave  
c0106e2c:	c3                   	ret    

c0106e2d <k_malloc>:

void* k_malloc(size_t size)
{
c0106e2d:	55                   	push   %ebp
c0106e2e:	89 e5                	mov    %esp,%ebp
c0106e30:	83 ec 18             	sub    $0x18,%esp
    size_t asize;
    size_t extendsize;
    char* bp;

    if(size == 0)
c0106e33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106e37:	75 0a                	jne    c0106e43 <k_malloc+0x16>
        return NULL;
c0106e39:	b8 00 00 00 00       	mov    $0x0,%eax
c0106e3e:	e9 8a 00 00 00       	jmp    c0106ecd <k_malloc+0xa0>
    
    //THE MIN blk is 2*DSIZE, ONE DSIZE means head and foot, one is align
    if(size <= DSIZE)
c0106e43:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0106e47:	77 09                	ja     c0106e52 <k_malloc+0x25>
        asize = 2 * DSIZE;
c0106e49:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c0106e50:	eb 0e                	jmp    c0106e60 <k_malloc+0x33>
    else
        asize = DSIZE * ((size + DSIZE) + (DSIZE - 1)) / DSIZE; // Round up 
c0106e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e55:	83 c0 0f             	add    $0xf,%eax
c0106e58:	25 ff ff ff 1f       	and    $0x1fffffff,%eax
c0106e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //search the free list of fit
    if((bp = find_fit(asize)) != NULL)
c0106e60:	ff 75 f4             	push   -0xc(%ebp)
c0106e63:	e8 d1 fc ff ff       	call   c0106b39 <find_fit>
c0106e68:	83 c4 04             	add    $0x4,%esp
c0106e6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106e6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106e72:	74 13                	je     c0106e87 <k_malloc+0x5a>
    {
        place(bp, asize);
c0106e74:	ff 75 f4             	push   -0xc(%ebp)
c0106e77:	ff 75 f0             	push   -0x10(%ebp)
c0106e7a:	e8 1d fd ff ff       	call   c0106b9c <place>
c0106e7f:	83 c4 08             	add    $0x8,%esp
        return bp;
c0106e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e85:	eb 46                	jmp    c0106ecd <k_malloc+0xa0>
    }

    //no fit found try to extend head mem
    extendsize = MAX(asize, CHUNKSIZE);
c0106e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e8a:	ba 00 10 00 00       	mov    $0x1000,%edx
c0106e8f:	39 d0                	cmp    %edx,%eax
c0106e91:	0f 42 c2             	cmovb  %edx,%eax
c0106e94:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((bp = extend_heap(extendsize / WSIZE)) == NULL)
c0106e97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106e9a:	c1 e8 02             	shr    $0x2,%eax
c0106e9d:	83 ec 0c             	sub    $0xc,%esp
c0106ea0:	50                   	push   %eax
c0106ea1:	e8 6b fa ff ff       	call   c0106911 <extend_heap>
c0106ea6:	83 c4 10             	add    $0x10,%esp
c0106ea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106eac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106eb0:	75 07                	jne    c0106eb9 <k_malloc+0x8c>
        return NULL;
c0106eb2:	b8 00 00 00 00       	mov    $0x0,%eax
c0106eb7:	eb 14                	jmp    c0106ecd <k_malloc+0xa0>
    place(bp, asize);
c0106eb9:	83 ec 08             	sub    $0x8,%esp
c0106ebc:	ff 75 f4             	push   -0xc(%ebp)
c0106ebf:	ff 75 f0             	push   -0x10(%ebp)
c0106ec2:	e8 d5 fc ff ff       	call   c0106b9c <place>
c0106ec7:	83 c4 10             	add    $0x10,%esp
    return bp;
c0106eca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ecd:	c9                   	leave  
c0106ece:	c3                   	ret    

c0106ecf <vmm_init>:
#include <kernel/memory/vir_mem.h>
#include <libs/mstring.h>

void vmm_init() {
c0106ecf:	55                   	push   %ebp
c0106ed0:	89 e5                	mov    %esp,%ebp
    // TODO: something here?
}
c0106ed2:	90                   	nop
c0106ed3:	5d                   	pop    %ebp
c0106ed4:	c3                   	ret    

c0106ed5 <get_pd>:

// TODO: Move these nasty inline asm stuff into hal
//      These should be arch dependent
ptd_t* get_pd() {
c0106ed5:	55                   	push   %ebp
c0106ed6:	89 e5                	mov    %esp,%ebp
c0106ed8:	83 ec 10             	sub    $0x10,%esp
    ptd_t* pd;
    #ifdef __ARCH_IA32
    __asm__(
c0106edb:	0f 20 d8             	mov    %cr3,%eax
c0106ede:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ee3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "movl %%cr3, %0\n"
        "andl $0xfffff000, %0"
        : "=r"(pd)
    );
    #endif
    return P2V(pd);
c0106ee6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ee9:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106eee:	c9                   	leave  
c0106eef:	c3                   	ret    

c0106ef0 <set_pd>:

void set_pd(ptd_t* pd) {
c0106ef0:	55                   	push   %ebp
c0106ef1:	89 e5                	mov    %esp,%ebp
    #ifdef __ARCH_IA32
    __asm__(
c0106ef3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef6:	89 c0                	mov    %eax,%eax
c0106ef8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106efd:	0f 22 d8             	mov    %eax,%cr3
        "movl %%eax, %%cr3\n"
        :
        : "r" (pd)
    );
    #endif
}
c0106f00:	90                   	nop
c0106f01:	5d                   	pop    %ebp
c0106f02:	c3                   	ret    

c0106f03 <vmm_init_pd>:

ptd_t* vmm_init_pd() {
c0106f03:	55                   	push   %ebp
c0106f04:	89 e5                	mov    %esp,%ebp
c0106f06:	83 ec 18             	sub    $0x18,%esp
    ptd_t* dir = pmm_alloc_page();
c0106f09:	e8 e3 f8 ff ff       	call   c01067f1 <pmm_alloc_page>
c0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (size_t i = 0; i < 1024; i++)
c0106f11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f18:	eb 19                	jmp    c0106f33 <vmm_init_pd+0x30>
    {
        dir[i] = 0;
c0106f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106f24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f27:	01 d0                	add    %edx,%eax
c0106f29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < 1024; i++)
c0106f2f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106f33:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0106f3a:	76 de                	jbe    c0106f1a <vmm_init_pd+0x17>
    }
    
    // 自己映射自己，方便我们在软件层面进行查表地址转换
    dir[1023] = PDE(T_SELF_REF_PERM, dir);
c0106f3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f44:	89 c2                	mov    %eax,%edx
c0106f46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f49:	05 fc 0f 00 00       	add    $0xffc,%eax
c0106f4e:	83 ca 13             	or     $0x13,%edx
c0106f51:	89 10                	mov    %edx,(%eax)

    return dir;
c0106f53:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0106f56:	c9                   	leave  
c0106f57:	c3                   	ret    

c0106f58 <vmm_map_page>:

void* vmm_map_page(void* va, void* pa, pt_attr dattr, pt_attr tattr) {
c0106f58:	55                   	push   %ebp
c0106f59:	89 e5                	mov    %esp,%ebp
c0106f5b:	53                   	push   %ebx
c0106f5c:	83 ec 24             	sub    $0x24,%esp
    // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c0106f5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106f63:	74 06                	je     c0106f6b <vmm_map_page+0x13>
c0106f65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106f69:	75 0a                	jne    c0106f75 <vmm_map_page+0x1d>
        return NULL;
c0106f6b:	b8 00 00 00 00       	mov    $0x0,%eax
c0106f70:	e9 a4 01 00 00       	jmp    c0107119 <vmm_map_page+0x1c1>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c0106f75:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f78:	c1 e8 16             	shr    $0x16,%eax
c0106f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c0106f7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f81:	c1 e8 0c             	shr    $0xc,%eax
c0106f84:	25 ff 03 00 00       	and    $0x3ff,%eax
c0106f89:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c0106f8c:	c7 45 e4 00 f0 ff ff 	movl   $0xfffff000,-0x1c(%ebp)

    // 在页表与页目录中找到一个可用的空位进行映射（位于va或其附近）
    ptd_t* pde = ptd[pd_offset];
c0106f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f96:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106f9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fa0:	01 d0                	add    %edx,%eax
c0106fa2:	8b 00                	mov    (%eax),%eax
c0106fa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(pd_offset);
c0106fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106faa:	c1 e0 0c             	shl    $0xc,%eax
c0106fad:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0106fb2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (pde && pd_offset < 1024) {
c0106fb5:	e9 9b 00 00 00       	jmp    c0107055 <vmm_map_page+0xfd>
        if (pt_offset == 1024) {
c0106fba:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
c0106fc1:	75 2d                	jne    c0106ff0 <vmm_map_page+0x98>
            pd_offset++;
c0106fc3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            pt_offset = 0;
c0106fc7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
            pde = ptd[pd_offset];
c0106fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106fd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fdb:	01 d0                	add    %edx,%eax
c0106fdd:	8b 00                	mov    (%eax),%eax
c0106fdf:	89 45 ec             	mov    %eax,-0x14(%ebp)
            pt = (pt_t*)PT_VADDR(pd_offset);
c0106fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fe5:	c1 e0 0c             	shl    $0xc,%eax
c0106fe8:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0106fed:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
        // 页表有空位，只需要开辟一个新的 PTE
        if (pt && !pt[pt_offset]) {
c0106ff0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106ff4:	74 5b                	je     c0107051 <vmm_map_page+0xf9>
c0106ff6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ff9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107000:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107003:	01 d0                	add    %edx,%eax
c0107005:	8b 00                	mov    (%eax),%eax
c0107007:	85 c0                	test   %eax,%eax
c0107009:	75 46                	jne    c0107051 <vmm_map_page+0xf9>
            pt[pt_offset] = PTE(tattr, pa);
c010700b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010700e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107013:	89 c1                	mov    %eax,%ecx
c0107015:	8b 45 14             	mov    0x14(%ebp),%eax
c0107018:	25 ff 0f 00 00       	and    $0xfff,%eax
c010701d:	89 c2                	mov    %eax,%edx
c010701f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107022:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c0107029:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010702c:	01 d8                	add    %ebx,%eax
c010702e:	09 ca                	or     %ecx,%edx
c0107030:	89 10                	mov    %edx,(%eax)
            return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c0107032:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107035:	c1 e0 16             	shl    $0x16,%eax
c0107038:	89 c2                	mov    %eax,%edx
c010703a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010703d:	c1 e0 0c             	shl    $0xc,%eax
c0107040:	09 c2                	or     %eax,%edx
c0107042:	8b 45 08             	mov    0x8(%ebp),%eax
c0107045:	25 ff 0f 00 00       	and    $0xfff,%eax
c010704a:	09 d0                	or     %edx,%eax
c010704c:	e9 c8 00 00 00       	jmp    c0107119 <vmm_map_page+0x1c1>
        }
        pt_offset++;
c0107051:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    while (pde && pd_offset < 1024) {
c0107055:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107059:	74 0d                	je     c0107068 <vmm_map_page+0x110>
c010705b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107062:	0f 86 52 ff ff ff    	jbe    c0106fba <vmm_map_page+0x62>
    }
    
    // 页目录与所有页表已满！
    if (pd_offset > 1024) {
c0107068:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%ebp)
c010706f:	76 0a                	jbe    c010707b <vmm_map_page+0x123>
        return NULL;
c0107071:	b8 00 00 00 00       	mov    $0x0,%eax
c0107076:	e9 9e 00 00 00       	jmp    c0107119 <vmm_map_page+0x1c1>
    }

    // 页目录有空位，需要开辟一个新的 PDE
    uint8_t* new_pt_pa = pmm_alloc_page();
c010707b:	e8 71 f7 ff ff       	call   c01067f1 <pmm_alloc_page>
c0107080:	89 45 e0             	mov    %eax,-0x20(%ebp)
    
    // 物理内存已满！
    if (!new_pt_pa) {
c0107083:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107087:	75 0a                	jne    c0107093 <vmm_map_page+0x13b>
        return NULL;
c0107089:	b8 00 00 00 00       	mov    $0x0,%eax
c010708e:	e9 86 00 00 00       	jmp    c0107119 <vmm_map_page+0x1c1>
    }
    
    ptd[pd_offset] = PDE(dattr, new_pt_pa);
c0107093:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107096:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010709b:	89 c1                	mov    %eax,%ecx
c010709d:	8b 45 10             	mov    0x10(%ebp),%eax
c01070a0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01070a5:	89 c2                	mov    %eax,%edx
c01070a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070aa:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01070b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070b4:	01 d8                	add    %ebx,%eax
c01070b6:	09 ca                	or     %ecx,%edx
c01070b8:	89 10                	mov    %edx,(%eax)
    
    memset((void*)PT_VADDR(pd_offset), 0, PM_PAGE_SIZE);
c01070ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070bd:	c1 e0 0c             	shl    $0xc,%eax
c01070c0:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01070c5:	83 ec 04             	sub    $0x4,%esp
c01070c8:	68 00 10 00 00       	push   $0x1000
c01070cd:	6a 00                	push   $0x0
c01070cf:	50                   	push   %eax
c01070d0:	e8 92 10 00 00       	call   c0108167 <memset>
c01070d5:	83 c4 10             	add    $0x10,%esp
    pt[pt_offset] = PTE(tattr, pa);
c01070d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01070e0:	89 c1                	mov    %eax,%ecx
c01070e2:	8b 45 14             	mov    0x14(%ebp),%eax
c01070e5:	25 ff 0f 00 00       	and    $0xfff,%eax
c01070ea:	89 c2                	mov    %eax,%edx
c01070ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070ef:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01070f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070f9:	01 d8                	add    %ebx,%eax
c01070fb:	09 ca                	or     %ecx,%edx
c01070fd:	89 10                	mov    %edx,(%eax)

    return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c01070ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107102:	c1 e0 16             	shl    $0x16,%eax
c0107105:	89 c2                	mov    %eax,%edx
c0107107:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010710a:	c1 e0 0c             	shl    $0xc,%eax
c010710d:	09 c2                	or     %eax,%edx
c010710f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107112:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107117:	09 d0                	or     %edx,%eax
}
c0107119:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010711c:	c9                   	leave  
c010711d:	c3                   	ret    

c010711e <vmm_alloc_page>:

void* vmm_alloc_page(void* vpn, pt_attr dattr, pt_attr tattr) {
c010711e:	55                   	push   %ebp
c010711f:	89 e5                	mov    %esp,%ebp
c0107121:	83 ec 18             	sub    $0x18,%esp
    void* pp = pmm_alloc_page();
c0107124:	e8 c8 f6 ff ff       	call   c01067f1 <pmm_alloc_page>
c0107129:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* result = vmm_map_page(vpn, pp, dattr, tattr);
c010712c:	ff 75 10             	push   0x10(%ebp)
c010712f:	ff 75 0c             	push   0xc(%ebp)
c0107132:	ff 75 f4             	push   -0xc(%ebp)
c0107135:	ff 75 08             	push   0x8(%ebp)
c0107138:	e8 1b fe ff ff       	call   c0106f58 <vmm_map_page>
c010713d:	83 c4 10             	add    $0x10,%esp
c0107140:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!result) {
c0107143:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107147:	75 0e                	jne    c0107157 <vmm_alloc_page+0x39>
        pmm_free_page(pp);
c0107149:	83 ec 0c             	sub    $0xc,%esp
c010714c:	ff 75 f4             	push   -0xc(%ebp)
c010714f:	e8 85 f7 ff ff       	call   c01068d9 <pmm_free_page>
c0107154:	83 c4 10             	add    $0x10,%esp
    }
    return result;
c0107157:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010715a:	c9                   	leave  
c010715b:	c3                   	ret    

c010715c <vmm_unmap_page>:

void vmm_unmap_page(void* vpn) {
c010715c:	55                   	push   %ebp
c010715d:	89 e5                	mov    %esp,%ebp
c010715f:	83 ec 28             	sub    $0x28,%esp
    uintptr_t pd_offset = PD_INDEX(vpn);
c0107162:	8b 45 08             	mov    0x8(%ebp),%eax
c0107165:	c1 e8 16             	shr    $0x16,%eax
c0107168:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(vpn);
c010716b:	8b 45 08             	mov    0x8(%ebp),%eax
c010716e:	c1 e8 0c             	shr    $0xc,%eax
c0107171:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107176:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* self_pde = PTD_BASE_VADDR;
c0107179:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    ptd_t pde = self_pde[pd_offset];
c0107180:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107183:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010718a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010718d:	01 d0                	add    %edx,%eax
c010718f:	8b 00                	mov    (%eax),%eax
c0107191:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (pde) {
c0107194:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107198:	74 5a                	je     c01071f4 <vmm_unmap_page+0x98>
        pt_t* pt = (pt_t*)PT_VADDR(pd_offset);
c010719a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010719d:	c1 e0 0c             	shl    $0xc,%eax
c01071a0:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01071a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        uint32_t pte = pt[pt_offset];
c01071a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01071b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071b5:	01 d0                	add    %edx,%eax
c01071b7:	8b 00                	mov    (%eax),%eax
c01071b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (IS_CACHED(pte) && pmm_free_page(pte)) {
c01071bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071bf:	83 e0 01             	and    $0x1,%eax
c01071c2:	85 c0                	test   %eax,%eax
c01071c4:	74 19                	je     c01071df <vmm_unmap_page+0x83>
c01071c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071c9:	83 ec 0c             	sub    $0xc,%esp
c01071cc:	50                   	push   %eax
c01071cd:	e8 07 f7 ff ff       	call   c01068d9 <pmm_free_page>
c01071d2:	83 c4 10             	add    $0x10,%esp
c01071d5:	85 c0                	test   %eax,%eax
c01071d7:	74 06                	je     c01071df <vmm_unmap_page+0x83>
            // 刷新TLB
            #ifdef __ARCH_IA32
            __asm__("invlpg (%0)" :: "r"((uintptr_t)vpn) : "memory");
c01071d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01071dc:	0f 01 38             	invlpg (%eax)
            #endif
        }
        //if(pt_offset != 8)
        pt[pt_offset] = 0;
c01071df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01071e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071ec:	01 d0                	add    %edx,%eax
c01071ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
}
c01071f4:	90                   	nop
c01071f5:	c9                   	leave  
c01071f6:	c3                   	ret    

c01071f7 <vmm_v2p>:

void* vmm_v2p(void* va) {
c01071f7:	55                   	push   %ebp
c01071f8:	89 e5                	mov    %esp,%ebp
c01071fa:	83 ec 20             	sub    $0x20,%esp
    uintptr_t pd_offset = PD_INDEX(va);
c01071fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107200:	c1 e8 16             	shr    $0x16,%eax
c0107203:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c0107206:	8b 45 08             	mov    0x8(%ebp),%eax
c0107209:	c1 e8 0c             	shr    $0xc,%eax
c010720c:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107211:	89 45 f8             	mov    %eax,-0x8(%ebp)
    uintptr_t po = PG_OFFSET(va);
c0107214:	8b 45 08             	mov    0x8(%ebp),%eax
c0107217:	25 ff 0f 00 00       	and    $0xfff,%eax
c010721c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ptd_t* self_pde = PTD_BASE_VADDR;
c010721f:	c7 45 f0 00 f0 ff ff 	movl   $0xfffff000,-0x10(%ebp)

    ptd_t pde = self_pde[pd_offset];
c0107226:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107229:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107230:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107233:	01 d0                	add    %edx,%eax
c0107235:	8b 00                	mov    (%eax),%eax
c0107237:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pde) {
c010723a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010723e:	74 36                	je     c0107276 <vmm_v2p+0x7f>
        pt_t pte = ((pt_t*)PT_VADDR(pd_offset))[pt_offset];
c0107240:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107243:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010724a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010724d:	c1 e0 0c             	shl    $0xc,%eax
c0107250:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107255:	01 d0                	add    %edx,%eax
c0107257:	8b 00                	mov    (%eax),%eax
c0107259:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (pte) {
c010725c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107260:	74 14                	je     c0107276 <vmm_v2p+0x7f>
            uintptr_t ppn = pte >> 12;
c0107262:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107265:	c1 e8 0c             	shr    $0xc,%eax
c0107268:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            return (void*)P_ADDR(ppn, po);
c010726b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010726e:	c1 e0 0c             	shl    $0xc,%eax
c0107271:	0b 45 f4             	or     -0xc(%ebp),%eax
c0107274:	eb 05                	jmp    c010727b <vmm_v2p+0x84>
        }
    }

    return NULL;
c0107276:	b8 00 00 00 00       	mov    $0x0,%eax
c010727b:	c9                   	leave  
c010727c:	c3                   	ret    

c010727d <_divide_err>:
#include <libs/mstdio.h>
#include <kernel/interrupt/interupt_fun.h>
#include <vga/vga.h>

void _divide_err(unsigned long addr, int err_code)
{
c010727d:	55                   	push   %ebp
c010727e:	89 e5                	mov    %esp,%ebp
c0107280:	83 ec 08             	sub    $0x8,%esp
    vga_set_show(1,VGA_COLOR_BLACK,VGA_COLOR_BLUE);
c0107283:	83 ec 04             	sub    $0x4,%esp
c0107286:	6a 01                	push   $0x1
c0107288:	6a 00                	push   $0x0
c010728a:	6a 01                	push   $0x1
c010728c:	e8 43 ee ff ff       	call   c01060d4 <vga_set_show>
c0107291:	83 c4 10             	add    $0x10,%esp
    kprintf("divide err addr = 0x%x,err code = %d\n", addr,err_code);
c0107294:	83 ec 04             	sub    $0x4,%esp
c0107297:	ff 75 0c             	push   0xc(%ebp)
c010729a:	ff 75 08             	push   0x8(%ebp)
c010729d:	68 4c b2 12 c0       	push   $0xc012b24c
c01072a2:	e8 29 0c 00 00       	call   c0107ed0 <kprintf>
c01072a7:	83 c4 10             	add    $0x10,%esp
}
c01072aa:	90                   	nop
c01072ab:	c9                   	leave  
c01072ac:	c3                   	ret    

c01072ad <do_double_fault>:

void do_double_fault(unsigned long addr, int err_code)
{
c01072ad:	55                   	push   %ebp
c01072ae:	89 e5                	mov    %esp,%ebp
c01072b0:	83 ec 08             	sub    $0x8,%esp
	kprintf("double_fault addr = 0x%x,err code = %d\n", addr,err_code);
c01072b3:	83 ec 04             	sub    $0x4,%esp
c01072b6:	ff 75 0c             	push   0xc(%ebp)
c01072b9:	ff 75 08             	push   0x8(%ebp)
c01072bc:	68 74 b2 12 c0       	push   $0xc012b274
c01072c1:	e8 0a 0c 00 00       	call   c0107ed0 <kprintf>
c01072c6:	83 c4 10             	add    $0x10,%esp
}
c01072c9:	90                   	nop
c01072ca:	c9                   	leave  
c01072cb:	c3                   	ret    

c01072cc <do_general_protection>:

void do_general_protection(unsigned long addr, int err_code)
{
c01072cc:	55                   	push   %ebp
c01072cd:	89 e5                	mov    %esp,%ebp
c01072cf:	83 ec 08             	sub    $0x8,%esp
	kprintf("general_protection addr = 0x%x,err code = %d\n", addr,err_code);
c01072d2:	83 ec 04             	sub    $0x4,%esp
c01072d5:	ff 75 0c             	push   0xc(%ebp)
c01072d8:	ff 75 08             	push   0x8(%ebp)
c01072db:	68 9c b2 12 c0       	push   $0xc012b29c
c01072e0:	e8 eb 0b 00 00       	call   c0107ed0 <kprintf>
c01072e5:	83 c4 10             	add    $0x10,%esp
}
c01072e8:	90                   	nop
c01072e9:	c9                   	leave  
c01072ea:	c3                   	ret    

c01072eb <do_int3>:


void do_int3(unsigned long addr, int err_code)
{
c01072eb:	55                   	push   %ebp
c01072ec:	89 e5                	mov    %esp,%ebp
c01072ee:	83 ec 08             	sub    $0x8,%esp
    kprintf("int3 addr = 0x%x,err code = %d\n", addr,err_code);
c01072f1:	83 ec 04             	sub    $0x4,%esp
c01072f4:	ff 75 0c             	push   0xc(%ebp)
c01072f7:	ff 75 08             	push   0x8(%ebp)
c01072fa:	68 cc b2 12 c0       	push   $0xc012b2cc
c01072ff:	e8 cc 0b 00 00       	call   c0107ed0 <kprintf>
c0107304:	83 c4 10             	add    $0x10,%esp
}
c0107307:	90                   	nop
c0107308:	c9                   	leave  
c0107309:	c3                   	ret    

c010730a <do_nmi>:

void do_nmi(unsigned long addr, int err_code)
{
c010730a:	55                   	push   %ebp
c010730b:	89 e5                	mov    %esp,%ebp
c010730d:	83 ec 08             	sub    $0x8,%esp
	kprintf("nmi addr = 0x%x,err code = %d\n", addr,err_code);
c0107310:	83 ec 04             	sub    $0x4,%esp
c0107313:	ff 75 0c             	push   0xc(%ebp)
c0107316:	ff 75 08             	push   0x8(%ebp)
c0107319:	68 ec b2 12 c0       	push   $0xc012b2ec
c010731e:	e8 ad 0b 00 00       	call   c0107ed0 <kprintf>
c0107323:	83 c4 10             	add    $0x10,%esp
}
c0107326:	90                   	nop
c0107327:	c9                   	leave  
c0107328:	c3                   	ret    

c0107329 <do_debug>:

void do_debug(unsigned long addr, int err_code)
{
c0107329:	55                   	push   %ebp
c010732a:	89 e5                	mov    %esp,%ebp
c010732c:	83 ec 08             	sub    $0x8,%esp
	kprintf("debug addr = 0x%x,err code = %d\n", addr,err_code);
c010732f:	83 ec 04             	sub    $0x4,%esp
c0107332:	ff 75 0c             	push   0xc(%ebp)
c0107335:	ff 75 08             	push   0x8(%ebp)
c0107338:	68 0c b3 12 c0       	push   $0xc012b30c
c010733d:	e8 8e 0b 00 00       	call   c0107ed0 <kprintf>
c0107342:	83 c4 10             	add    $0x10,%esp
}
c0107345:	90                   	nop
c0107346:	c9                   	leave  
c0107347:	c3                   	ret    

c0107348 <do_overflow>:

void do_overflow(unsigned long addr, int err_code)
{
c0107348:	55                   	push   %ebp
c0107349:	89 e5                	mov    %esp,%ebp
c010734b:	83 ec 08             	sub    $0x8,%esp
	kprintf("overflow addr = 0x%x,err code = %d\n", addr,err_code);
c010734e:	83 ec 04             	sub    $0x4,%esp
c0107351:	ff 75 0c             	push   0xc(%ebp)
c0107354:	ff 75 08             	push   0x8(%ebp)
c0107357:	68 30 b3 12 c0       	push   $0xc012b330
c010735c:	e8 6f 0b 00 00       	call   c0107ed0 <kprintf>
c0107361:	83 c4 10             	add    $0x10,%esp
}
c0107364:	90                   	nop
c0107365:	c9                   	leave  
c0107366:	c3                   	ret    

c0107367 <do_bounds>:

void do_bounds(unsigned long addr, int err_code)
{
c0107367:	55                   	push   %ebp
c0107368:	89 e5                	mov    %esp,%ebp
c010736a:	83 ec 08             	sub    $0x8,%esp
	kprintf("bounds addr = 0x%x,err code = %d\n", addr,err_code);
c010736d:	83 ec 04             	sub    $0x4,%esp
c0107370:	ff 75 0c             	push   0xc(%ebp)
c0107373:	ff 75 08             	push   0x8(%ebp)
c0107376:	68 54 b3 12 c0       	push   $0xc012b354
c010737b:	e8 50 0b 00 00       	call   c0107ed0 <kprintf>
c0107380:	83 c4 10             	add    $0x10,%esp
}
c0107383:	90                   	nop
c0107384:	c9                   	leave  
c0107385:	c3                   	ret    

c0107386 <do_invalid_op>:

void do_invalid_op(unsigned long addr, int err_code)
{
c0107386:	55                   	push   %ebp
c0107387:	89 e5                	mov    %esp,%ebp
c0107389:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_op addr = 0x%x,err code = %d\n", addr,err_code);
c010738c:	83 ec 04             	sub    $0x4,%esp
c010738f:	ff 75 0c             	push   0xc(%ebp)
c0107392:	ff 75 08             	push   0x8(%ebp)
c0107395:	68 78 b3 12 c0       	push   $0xc012b378
c010739a:	e8 31 0b 00 00       	call   c0107ed0 <kprintf>
c010739f:	83 c4 10             	add    $0x10,%esp
}
c01073a2:	90                   	nop
c01073a3:	c9                   	leave  
c01073a4:	c3                   	ret    

c01073a5 <do_device_not_available>:

void do_device_not_available(unsigned long addr, int err_code)
{
c01073a5:	55                   	push   %ebp
c01073a6:	89 e5                	mov    %esp,%ebp
c01073a8:	83 ec 08             	sub    $0x8,%esp
	kprintf("device_not_availabel addr = 0x%x,err code = %d\n", addr,err_code);
c01073ab:	83 ec 04             	sub    $0x4,%esp
c01073ae:	ff 75 0c             	push   0xc(%ebp)
c01073b1:	ff 75 08             	push   0x8(%ebp)
c01073b4:	68 a0 b3 12 c0       	push   $0xc012b3a0
c01073b9:	e8 12 0b 00 00       	call   c0107ed0 <kprintf>
c01073be:	83 c4 10             	add    $0x10,%esp
}
c01073c1:	90                   	nop
c01073c2:	c9                   	leave  
c01073c3:	c3                   	ret    

c01073c4 <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(unsigned long addr, int err_code)
{
c01073c4:	55                   	push   %ebp
c01073c5:	89 e5                	mov    %esp,%ebp
c01073c7:	83 ec 08             	sub    $0x8,%esp
	kprintf("coprprocessor_segment_overrun addr = 0x%x,err code = %d\n", addr,err_code);
c01073ca:	83 ec 04             	sub    $0x4,%esp
c01073cd:	ff 75 0c             	push   0xc(%ebp)
c01073d0:	ff 75 08             	push   0x8(%ebp)
c01073d3:	68 d0 b3 12 c0       	push   $0xc012b3d0
c01073d8:	e8 f3 0a 00 00       	call   c0107ed0 <kprintf>
c01073dd:	83 c4 10             	add    $0x10,%esp
}
c01073e0:	90                   	nop
c01073e1:	c9                   	leave  
c01073e2:	c3                   	ret    

c01073e3 <do_invalid_TSS>:

void do_invalid_TSS(unsigned long addr, int err_code)
{
c01073e3:	55                   	push   %ebp
c01073e4:	89 e5                	mov    %esp,%ebp
c01073e6:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_TSS addr = 0x%x,err code = %d\n", addr,err_code);
c01073e9:	83 ec 04             	sub    $0x4,%esp
c01073ec:	ff 75 0c             	push   0xc(%ebp)
c01073ef:	ff 75 08             	push   0x8(%ebp)
c01073f2:	68 0c b4 12 c0       	push   $0xc012b40c
c01073f7:	e8 d4 0a 00 00       	call   c0107ed0 <kprintf>
c01073fc:	83 c4 10             	add    $0x10,%esp
}
c01073ff:	90                   	nop
c0107400:	c9                   	leave  
c0107401:	c3                   	ret    

c0107402 <do_segment_not_present>:

void do_segment_not_present(unsigned long addr, int err_code)
{
c0107402:	55                   	push   %ebp
c0107403:	89 e5                	mov    %esp,%ebp
c0107405:	83 ec 08             	sub    $0x8,%esp
	kprintf("segment not present addr = 0x%x,err code = %d\n", addr,err_code);
c0107408:	83 ec 04             	sub    $0x4,%esp
c010740b:	ff 75 0c             	push   0xc(%ebp)
c010740e:	ff 75 08             	push   0x8(%ebp)
c0107411:	68 34 b4 12 c0       	push   $0xc012b434
c0107416:	e8 b5 0a 00 00       	call   c0107ed0 <kprintf>
c010741b:	83 c4 10             	add    $0x10,%esp
}
c010741e:	90                   	nop
c010741f:	c9                   	leave  
c0107420:	c3                   	ret    

c0107421 <do_stack_segment>:

void do_stack_segment(unsigned long addr, int err_code)
{
c0107421:	55                   	push   %ebp
c0107422:	89 e5                	mov    %esp,%ebp
c0107424:	83 ec 08             	sub    $0x8,%esp
	kprintf("stack_segment addr = 0x%x,err code = %d\n", addr,err_code);
c0107427:	83 ec 04             	sub    $0x4,%esp
c010742a:	ff 75 0c             	push   0xc(%ebp)
c010742d:	ff 75 08             	push   0x8(%ebp)
c0107430:	68 64 b4 12 c0       	push   $0xc012b464
c0107435:	e8 96 0a 00 00       	call   c0107ed0 <kprintf>
c010743a:	83 c4 10             	add    $0x10,%esp
}
c010743d:	90                   	nop
c010743e:	c9                   	leave  
c010743f:	c3                   	ret    

c0107440 <do_coprocessor_error>:

void do_coprocessor_error(unsigned long addr, int err_code)
{
c0107440:	55                   	push   %ebp
c0107441:	89 e5                	mov    %esp,%ebp
c0107443:	83 ec 08             	sub    $0x8,%esp
    kprintf("coprocessor_err addr = 0x%x,err code = %d\n", addr,err_code);
c0107446:	83 ec 04             	sub    $0x4,%esp
c0107449:	ff 75 0c             	push   0xc(%ebp)
c010744c:	ff 75 08             	push   0x8(%ebp)
c010744f:	68 90 b4 12 c0       	push   $0xc012b490
c0107454:	e8 77 0a 00 00       	call   c0107ed0 <kprintf>
c0107459:	83 c4 10             	add    $0x10,%esp
}
c010745c:	90                   	nop
c010745d:	c9                   	leave  
c010745e:	c3                   	ret    

c010745f <do_reserved>:

void do_reserved(unsigned long addr, int err_code)
{
c010745f:	55                   	push   %ebp
c0107460:	89 e5                	mov    %esp,%ebp
c0107462:	83 ec 08             	sub    $0x8,%esp
	kprintf("reserved addr = 0x%x,err code = %d\n", addr,err_code);
c0107465:	83 ec 04             	sub    $0x4,%esp
c0107468:	ff 75 0c             	push   0xc(%ebp)
c010746b:	ff 75 08             	push   0x8(%ebp)
c010746e:	68 bc b4 12 c0       	push   $0xc012b4bc
c0107473:	e8 58 0a 00 00       	call   c0107ed0 <kprintf>
c0107478:	83 c4 10             	add    $0x10,%esp
}
c010747b:	90                   	nop
c010747c:	c9                   	leave  
c010747d:	c3                   	ret    

c010747e <_no_err_code>:
c010747e:	87 04 24             	xchg   %eax,(%esp)
c0107481:	53                   	push   %ebx
c0107482:	52                   	push   %edx
c0107483:	55                   	push   %ebp
c0107484:	1e                   	push   %ds
c0107485:	06                   	push   %es
c0107486:	0f a0                	push   %fs
c0107488:	6a 00                	push   $0x0
c010748a:	8d 54 24 20          	lea    0x20(%esp),%edx
c010748e:	52                   	push   %edx
c010748f:	ba 10 00 00 00       	mov    $0x10,%edx
c0107494:	8e da                	mov    %edx,%ds
c0107496:	8e c2                	mov    %edx,%es
c0107498:	8e e2                	mov    %edx,%fs
c010749a:	ff d0                	call   *%eax
c010749c:	83 c4 08             	add    $0x8,%esp
c010749f:	0f a1                	pop    %fs
c01074a1:	07                   	pop    %es
c01074a2:	1f                   	pop    %ds
c01074a3:	5d                   	pop    %ebp
c01074a4:	5a                   	pop    %edx
c01074a5:	5b                   	pop    %ebx
c01074a6:	58                   	pop    %eax
c01074a7:	cf                   	iret   

c01074a8 <_err_code>:
c01074a8:	87 44 24 04          	xchg   %eax,0x4(%esp)
c01074ac:	87 1c 24             	xchg   %ebx,(%esp)
c01074af:	52                   	push   %edx
c01074b0:	55                   	push   %ebp
c01074b1:	1e                   	push   %ds
c01074b2:	06                   	push   %es
c01074b3:	0f a0                	push   %fs
c01074b5:	50                   	push   %eax
c01074b6:	8d 44 24 20          	lea    0x20(%esp),%eax
c01074ba:	50                   	push   %eax
c01074bb:	b8 10 00 00 00       	mov    $0x10,%eax
c01074c0:	8e d8                	mov    %eax,%ds
c01074c2:	8e c0                	mov    %eax,%es
c01074c4:	8e e0                	mov    %eax,%fs
c01074c6:	ff d3                	call   *%ebx
c01074c8:	83 c4 08             	add    $0x8,%esp
c01074cb:	0f a1                	pop    %fs
c01074cd:	07                   	pop    %es
c01074ce:	1f                   	pop    %ds
c01074cf:	5d                   	pop    %ebp
c01074d0:	5a                   	pop    %edx
c01074d1:	5b                   	pop    %ebx
c01074d2:	58                   	pop    %eax
c01074d3:	cf                   	iret   

c01074d4 <divide_error>:
c01074d4:	68 7d 72 10 c0       	push   $0xc010727d
c01074d9:	eb a3                	jmp    c010747e <_no_err_code>

c01074db <debug>:
c01074db:	68 eb 72 10 c0       	push   $0xc01072eb
c01074e0:	eb 9c                	jmp    c010747e <_no_err_code>

c01074e2 <nmi>:
c01074e2:	68 0a 73 10 c0       	push   $0xc010730a
c01074e7:	eb 95                	jmp    c010747e <_no_err_code>

c01074e9 <int3>:
c01074e9:	68 eb 72 10 c0       	push   $0xc01072eb
c01074ee:	eb 8e                	jmp    c010747e <_no_err_code>

c01074f0 <overflow>:
c01074f0:	68 48 73 10 c0       	push   $0xc0107348
c01074f5:	eb 87                	jmp    c010747e <_no_err_code>

c01074f7 <bounds>:
c01074f7:	68 67 73 10 c0       	push   $0xc0107367
c01074fc:	eb 80                	jmp    c010747e <_no_err_code>

c01074fe <invalid_op>:
c01074fe:	68 86 73 10 c0       	push   $0xc0107386
c0107503:	e9 76 ff ff ff       	jmp    c010747e <_no_err_code>

c0107508 <coprocessor_segment_overrun>:
c0107508:	68 c4 73 10 c0       	push   $0xc01073c4
c010750d:	e9 6c ff ff ff       	jmp    c010747e <_no_err_code>

c0107512 <reserved>:
c0107512:	68 5f 74 10 c0       	push   $0xc010745f
c0107517:	e9 62 ff ff ff       	jmp    c010747e <_no_err_code>

c010751c <invalid_TSS>:
c010751c:	68 e3 73 10 c0       	push   $0xc01073e3
c0107521:	eb 85                	jmp    c01074a8 <_err_code>

c0107523 <segment_not_present>:
c0107523:	68 02 74 10 c0       	push   $0xc0107402
c0107528:	e9 7b ff ff ff       	jmp    c01074a8 <_err_code>

c010752d <stack_segment>:
c010752d:	68 21 74 10 c0       	push   $0xc0107421
c0107532:	e9 71 ff ff ff       	jmp    c01074a8 <_err_code>

c0107537 <general_protection>:
c0107537:	68 cc 72 10 c0       	push   $0xc01072cc
c010753c:	e9 67 ff ff ff       	jmp    c01074a8 <_err_code>

c0107541 <__get_cpuid_max>:
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
c0107541:	55                   	push   %ebp
c0107542:	89 e5                	mov    %esp,%ebp
c0107544:	53                   	push   %ebx
c0107545:	83 ec 10             	sub    $0x10,%esp
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
c0107548:	9c                   	pushf  
c0107549:	9c                   	pushf  
c010754a:	5a                   	pop    %edx
c010754b:	89 d0                	mov    %edx,%eax
c010754d:	81 f2 00 00 20 00    	xor    $0x200000,%edx
c0107553:	52                   	push   %edx
c0107554:	9d                   	popf   
c0107555:	9c                   	pushf  
c0107556:	5a                   	pop    %edx
c0107557:	9d                   	popf   
c0107558:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010755b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
c010755e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107561:	33 45 f4             	xor    -0xc(%ebp),%eax
c0107564:	25 00 00 20 00       	and    $0x200000,%eax
c0107569:	85 c0                	test   %eax,%eax
c010756b:	75 07                	jne    c0107574 <__get_cpuid_max+0x33>
    return 0;
c010756d:	b8 00 00 00 00       	mov    $0x0,%eax
c0107572:	eb 30                	jmp    c01075a4 <__get_cpuid_max+0x63>
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
c0107574:	8b 45 08             	mov    0x8(%ebp),%eax
c0107577:	b9 00 00 00 00       	mov    $0x0,%ecx
c010757c:	ba 00 00 00 00       	mov    $0x0,%edx
c0107581:	89 cb                	mov    %ecx,%ebx
c0107583:	89 d1                	mov    %edx,%ecx
c0107585:	0f a2                	cpuid  
c0107587:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010758a:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c010758d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0107590:	89 55 ec             	mov    %edx,-0x14(%ebp)

  if (__sig)
c0107593:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107597:	74 08                	je     c01075a1 <__get_cpuid_max+0x60>
    *__sig = __ebx;
c0107599:	8b 45 0c             	mov    0xc(%ebp),%eax
c010759c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010759f:	89 10                	mov    %edx,(%eax)

  return __eax;
c01075a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01075a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01075a7:	c9                   	leave  
c01075a8:	c3                   	ret    

c01075a9 <__get_cpuid>:

static __inline int
__get_cpuid (unsigned int __leaf,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
c01075a9:	55                   	push   %ebp
c01075aa:	89 e5                	mov    %esp,%ebp
c01075ac:	56                   	push   %esi
c01075ad:	53                   	push   %ebx
c01075ae:	83 ec 10             	sub    $0x10,%esp
  unsigned int __ext = __leaf & 0x80000000;
c01075b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01075b4:	25 00 00 00 80       	and    $0x80000000,%eax
c01075b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  unsigned int __maxlevel = __get_cpuid_max (__ext, 0);
c01075bc:	6a 00                	push   $0x0
c01075be:	ff 75 f4             	push   -0xc(%ebp)
c01075c1:	e8 7b ff ff ff       	call   c0107541 <__get_cpuid_max>
c01075c6:	83 c4 08             	add    $0x8,%esp
c01075c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (__maxlevel == 0 || __maxlevel < __leaf)
c01075cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01075d0:	74 08                	je     c01075da <__get_cpuid+0x31>
c01075d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01075d5:	3b 45 08             	cmp    0x8(%ebp),%eax
c01075d8:	73 07                	jae    c01075e1 <__get_cpuid+0x38>
    return 0;
c01075da:	b8 00 00 00 00       	mov    $0x0,%eax
c01075df:	eb 2c                	jmp    c010760d <__get_cpuid+0x64>

  __cpuid (__leaf, *__eax, *__ebx, *__ecx, *__edx);
c01075e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01075e4:	b9 00 00 00 00       	mov    $0x0,%ecx
c01075e9:	ba 00 00 00 00       	mov    $0x0,%edx
c01075ee:	89 cb                	mov    %ecx,%ebx
c01075f0:	89 d1                	mov    %edx,%ecx
c01075f2:	0f a2                	cpuid  
c01075f4:	8b 75 0c             	mov    0xc(%ebp),%esi
c01075f7:	89 06                	mov    %eax,(%esi)
c01075f9:	8b 45 10             	mov    0x10(%ebp),%eax
c01075fc:	89 18                	mov    %ebx,(%eax)
c01075fe:	8b 45 14             	mov    0x14(%ebp),%eax
c0107601:	89 08                	mov    %ecx,(%eax)
c0107603:	8b 45 18             	mov    0x18(%ebp),%eax
c0107606:	89 10                	mov    %edx,(%eax)
  return 1;
c0107608:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010760d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107610:	5b                   	pop    %ebx
c0107611:	5e                   	pop    %esi
c0107612:	5d                   	pop    %ebp
c0107613:	c3                   	ret    

c0107614 <cpu_get_model>:
#include <kernel/cpu/cpu.h>
#include <stdint.h>
#include <cpuid.h>

void cpu_get_model(char* model_out) {
c0107614:	55                   	push   %ebp
c0107615:	89 e5                	mov    %esp,%ebp
c0107617:	83 ec 20             	sub    $0x20,%esp
    uint32_t* out = (uint32_t*)model_out;
c010761a:	8b 45 08             	mov    0x8(%ebp),%eax
c010761d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    reg32 eax, ebx, edx, ecx;
    
    __get_cpuid(0, &eax, &ebx, &ecx, &edx);
c0107620:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107623:	50                   	push   %eax
c0107624:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107627:	50                   	push   %eax
c0107628:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010762b:	50                   	push   %eax
c010762c:	8d 45 f8             	lea    -0x8(%ebp),%eax
c010762f:	50                   	push   %eax
c0107630:	6a 00                	push   $0x0
c0107632:	e8 72 ff ff ff       	call   c01075a9 <__get_cpuid>
c0107637:	83 c4 14             	add    $0x14,%esp

    out[0] = ebx;
c010763a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010763d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107640:	89 10                	mov    %edx,(%eax)
    out[1] = edx;
c0107642:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107645:	8d 50 04             	lea    0x4(%eax),%edx
c0107648:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010764b:	89 02                	mov    %eax,(%edx)
    out[2] = ecx;
c010764d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107650:	8d 50 08             	lea    0x8(%eax),%edx
c0107653:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107656:	89 02                	mov    %eax,(%edx)
    model_out[12] = '\0';
c0107658:	8b 45 08             	mov    0x8(%ebp),%eax
c010765b:	83 c0 0c             	add    $0xc,%eax
c010765e:	c6 00 00             	movb   $0x0,(%eax)
}
c0107661:	90                   	nop
c0107662:	c9                   	leave  
c0107663:	c3                   	ret    

c0107664 <cpu_brand_string_supported>:

#define BRAND_LEAF 0x80000000UL

int cpu_brand_string_supported() {
c0107664:	55                   	push   %ebp
c0107665:	89 e5                	mov    %esp,%ebp
c0107667:	83 ec 10             	sub    $0x10,%esp
    reg32 supported = __get_cpuid_max(BRAND_LEAF, 0);
c010766a:	6a 00                	push   $0x0
c010766c:	68 00 00 00 80       	push   $0x80000000
c0107671:	e8 cb fe ff ff       	call   c0107541 <__get_cpuid_max>
c0107676:	83 c4 08             	add    $0x8,%esp
c0107679:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (supported >= 0x80000004UL);
c010767c:	81 7d fc 03 00 00 80 	cmpl   $0x80000003,-0x4(%ebp)
c0107683:	0f 97 c0             	seta   %al
c0107686:	0f b6 c0             	movzbl %al,%eax
}
c0107689:	c9                   	leave  
c010768a:	c3                   	ret    

c010768b <cpu_get_brand>:

void cpu_get_brand(char* brand_out) {
c010768b:	55                   	push   %ebp
c010768c:	89 e5                	mov    %esp,%ebp
c010768e:	83 ec 20             	sub    $0x20,%esp
    if(!cpu_brand_string_supported()) {
c0107691:	e8 ce ff ff ff       	call   c0107664 <cpu_brand_string_supported>
c0107696:	85 c0                	test   %eax,%eax
c0107698:	75 0f                	jne    c01076a9 <cpu_get_brand+0x1e>
        brand_out[0] = '?';
c010769a:	8b 45 08             	mov    0x8(%ebp),%eax
c010769d:	c6 00 3f             	movb   $0x3f,(%eax)
        brand_out[1] = '\0';
c01076a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01076a3:	83 c0 01             	add    $0x1,%eax
c01076a6:	c6 00 00             	movb   $0x0,(%eax)
    }
    uint32_t* out = (uint32_t*) brand_out;
c01076a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01076ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    reg32 eax, ebx, edx, ecx;
    for (uint32_t i = 2, j = 0; i < 5; i++)
c01076af:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
c01076b6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01076bd:	e9 83 00 00 00       	jmp    c0107745 <cpu_get_brand+0xba>
    {
        __get_cpuid(BRAND_LEAF + i, &eax, &ebx, &ecx, &edx);
c01076c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01076c5:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
c01076cb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01076ce:	50                   	push   %eax
c01076cf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076d2:	50                   	push   %eax
c01076d3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01076d6:	50                   	push   %eax
c01076d7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01076da:	50                   	push   %eax
c01076db:	52                   	push   %edx
c01076dc:	e8 c8 fe ff ff       	call   c01075a9 <__get_cpuid>
c01076e1:	83 c4 14             	add    $0x14,%esp
        out[j] = eax;
c01076e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01076e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01076ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076f1:	01 c2                	add    %eax,%edx
c01076f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076f6:	89 02                	mov    %eax,(%edx)
        out[j + 1] = ebx;
c01076f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01076fb:	83 c0 01             	add    $0x1,%eax
c01076fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107705:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107708:	01 c2                	add    %eax,%edx
c010770a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010770d:	89 02                	mov    %eax,(%edx)
        out[j + 2] = ecx;
c010770f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107712:	83 c0 02             	add    $0x2,%eax
c0107715:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010771c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010771f:	01 c2                	add    %eax,%edx
c0107721:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107724:	89 02                	mov    %eax,(%edx)
        out[j + 3] = edx;
c0107726:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107729:	83 c0 03             	add    $0x3,%eax
c010772c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107736:	01 c2                	add    %eax,%edx
c0107738:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010773b:	89 02                	mov    %eax,(%edx)
        j+=4;
c010773d:	83 45 f8 04          	addl   $0x4,-0x8(%ebp)
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0107741:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0107745:	83 7d fc 04          	cmpl   $0x4,-0x4(%ebp)
c0107749:	0f 86 73 ff ff ff    	jbe    c01076c2 <cpu_get_brand+0x37>
    }
    brand_out[48] = '\0';
c010774f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107752:	83 c0 30             	add    $0x30,%eax
c0107755:	c6 00 00             	movb   $0x0,(%eax)
}
c0107758:	90                   	nop
c0107759:	c9                   	leave  
c010775a:	c3                   	ret    

c010775b <cpu_r_cr0>:

reg32 cpu_r_cr0() {
c010775b:	55                   	push   %ebp
c010775c:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr0, %eax");
c010775e:	0f 20 c0             	mov    %cr0,%eax
}
c0107761:	90                   	nop
c0107762:	5d                   	pop    %ebp
c0107763:	c3                   	ret    

c0107764 <cpu_r_cr2>:

reg32 cpu_r_cr2() {
c0107764:	55                   	push   %ebp
c0107765:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr2, %eax");
c0107767:	0f 20 d0             	mov    %cr2,%eax
}
c010776a:	90                   	nop
c010776b:	5d                   	pop    %ebp
c010776c:	c3                   	ret    

c010776d <cpu_r_cr3>:

reg32 cpu_r_cr3() {
c010776d:	55                   	push   %ebp
c010776e:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr3, %eax");
c0107770:	0f 20 d8             	mov    %cr3,%eax
}
c0107773:	90                   	nop
c0107774:	5d                   	pop    %ebp
c0107775:	c3                   	ret    

c0107776 <cpu_w_cr0>:

void cpu_w_cr0(reg32 v) {
c0107776:	55                   	push   %ebp
c0107777:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0107779:	8b 45 08             	mov    0x8(%ebp),%eax
c010777c:	0f 22 c0             	mov    %eax,%cr0
        "mov %0, %%cr0"
        :: "r"(v)
    );
}
c010777f:	90                   	nop
c0107780:	5d                   	pop    %ebp
c0107781:	c3                   	ret    

c0107782 <cpu_w_cr2>:

void cpu_w_cr2(reg32 v) {
c0107782:	55                   	push   %ebp
c0107783:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0107785:	8b 45 08             	mov    0x8(%ebp),%eax
c0107788:	0f 22 d0             	mov    %eax,%cr2
        "mov %0, %%cr2"
        :: "r"(v)
    );
}
c010778b:	90                   	nop
c010778c:	5d                   	pop    %ebp
c010778d:	c3                   	ret    

c010778e <cpu_w_cr3>:

void cpu_w_cr3(reg32 v) {
c010778e:	55                   	push   %ebp
c010778f:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0107791:	8b 45 08             	mov    0x8(%ebp),%eax
c0107794:	0f 22 d8             	mov    %eax,%cr3
        "mov %0, %%cr3"
        :: "r"(v)
    );
}
c0107797:	90                   	nop
c0107798:	5d                   	pop    %ebp
c0107799:	c3                   	ret    

c010779a <_set_gdt_entry>:
#define GDT_ENTRY 5

uint64_t _gdt[5];
uint16_t _gdt_limit = sizeof(_gdt) - 1;

void _set_gdt_entry(uint32_t index, uint32_t base, uint32_t limit, uint32_t flags) {
c010779a:	55                   	push   %ebp
c010779b:	89 e5                	mov    %esp,%ebp
c010779d:	57                   	push   %edi
c010779e:	56                   	push   %esi
c010779f:	53                   	push   %ebx
c01077a0:	83 ec 0c             	sub    $0xc,%esp
    _gdt[index] = SEG_BASE_H(base) | flags | SEG_LIM_H(limit) | SEG_BASE_M(base);
c01077a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077a6:	25 00 00 00 ff       	and    $0xff000000,%eax
c01077ab:	0b 45 14             	or     0x14(%ebp),%eax
c01077ae:	89 c2                	mov    %eax,%edx
c01077b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01077b3:	25 00 00 0f 00       	and    $0xf0000,%eax
c01077b8:	09 c2                	or     %eax,%edx
c01077ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077bd:	c1 e8 10             	shr    $0x10,%eax
c01077c0:	0f b6 c0             	movzbl %al,%eax
c01077c3:	09 d0                	or     %edx,%eax
c01077c5:	ba 00 00 00 00       	mov    $0x0,%edx
c01077ca:	8b 75 08             	mov    0x8(%ebp),%esi
c01077cd:	89 04 f5 60 90 12 c0 	mov    %eax,-0x3fed6fa0(,%esi,8)
c01077d4:	89 14 f5 64 90 12 c0 	mov    %edx,-0x3fed6f9c(,%esi,8)
    _gdt[index] <<= 32;
c01077db:	8b 45 08             	mov    0x8(%ebp),%eax
c01077de:	8b 14 c5 64 90 12 c0 	mov    -0x3fed6f9c(,%eax,8),%edx
c01077e5:	8b 04 c5 60 90 12 c0 	mov    -0x3fed6fa0(,%eax,8),%eax
c01077ec:	89 c2                	mov    %eax,%edx
c01077ee:	b8 00 00 00 00       	mov    $0x0,%eax
c01077f3:	8b 75 08             	mov    0x8(%ebp),%esi
c01077f6:	89 04 f5 60 90 12 c0 	mov    %eax,-0x3fed6fa0(,%esi,8)
c01077fd:	89 14 f5 64 90 12 c0 	mov    %edx,-0x3fed6f9c(,%esi,8)
    _gdt[index] |= SEG_BASE_L(base) | SEG_LIM_L(limit);
c0107804:	8b 45 08             	mov    0x8(%ebp),%eax
c0107807:	8b 14 c5 64 90 12 c0 	mov    -0x3fed6f9c(,%eax,8),%edx
c010780e:	8b 04 c5 60 90 12 c0 	mov    -0x3fed6fa0(,%eax,8),%eax
c0107815:	8b 75 0c             	mov    0xc(%ebp),%esi
c0107818:	89 f7                	mov    %esi,%edi
c010781a:	c1 e7 10             	shl    $0x10,%edi
c010781d:	8b 75 10             	mov    0x10(%ebp),%esi
c0107820:	0f b7 f6             	movzwl %si,%esi
c0107823:	09 fe                	or     %edi,%esi
c0107825:	bf 00 00 00 00       	mov    $0x0,%edi
c010782a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010782d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0107830:	09 f0                	or     %esi,%eax
c0107832:	89 c1                	mov    %eax,%ecx
c0107834:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107837:	09 f8                	or     %edi,%eax
c0107839:	89 c3                	mov    %eax,%ebx
c010783b:	8b 45 08             	mov    0x8(%ebp),%eax
c010783e:	89 0c c5 60 90 12 c0 	mov    %ecx,-0x3fed6fa0(,%eax,8)
c0107845:	89 1c c5 64 90 12 c0 	mov    %ebx,-0x3fed6f9c(,%eax,8)
}
c010784c:	90                   	nop
c010784d:	83 c4 0c             	add    $0xc,%esp
c0107850:	5b                   	pop    %ebx
c0107851:	5e                   	pop    %esi
c0107852:	5f                   	pop    %edi
c0107853:	5d                   	pop    %ebp
c0107854:	c3                   	ret    

c0107855 <_init_gdt>:
// 
void
_init_gdt() {
c0107855:	55                   	push   %ebp
c0107856:	89 e5                	mov    %esp,%ebp
    _set_gdt_entry(0, 0, 0, 0);
c0107858:	6a 00                	push   $0x0
c010785a:	6a 00                	push   $0x0
c010785c:	6a 00                	push   $0x0
c010785e:	6a 00                	push   $0x0
c0107860:	e8 35 ff ff ff       	call   c010779a <_set_gdt_entry>
c0107865:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(1, 0, 0xfffff, SEG_R0_CODE);
c0107868:	68 00 9a c0 00       	push   $0xc09a00
c010786d:	68 ff ff 0f 00       	push   $0xfffff
c0107872:	6a 00                	push   $0x0
c0107874:	6a 01                	push   $0x1
c0107876:	e8 1f ff ff ff       	call   c010779a <_set_gdt_entry>
c010787b:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(2, 0, 0xfffff, SEG_R0_DATA);
c010787e:	68 00 92 c0 00       	push   $0xc09200
c0107883:	68 ff ff 0f 00       	push   $0xfffff
c0107888:	6a 00                	push   $0x0
c010788a:	6a 02                	push   $0x2
c010788c:	e8 09 ff ff ff       	call   c010779a <_set_gdt_entry>
c0107891:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(3, 0, 0xfffff, SEG_R3_CODE);
c0107894:	68 00 fa c0 00       	push   $0xc0fa00
c0107899:	68 ff ff 0f 00       	push   $0xfffff
c010789e:	6a 00                	push   $0x0
c01078a0:	6a 03                	push   $0x3
c01078a2:	e8 f3 fe ff ff       	call   c010779a <_set_gdt_entry>
c01078a7:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(4, 0, 0xfffff, SEG_R3_DATA);
c01078aa:	68 00 f2 c0 00       	push   $0xc0f200
c01078af:	68 ff ff 0f 00       	push   $0xfffff
c01078b4:	6a 00                	push   $0x0
c01078b6:	6a 04                	push   $0x4
c01078b8:	e8 dd fe ff ff       	call   c010779a <_set_gdt_entry>
c01078bd:	83 c4 10             	add    $0x10,%esp
c01078c0:	90                   	nop
c01078c1:	c9                   	leave  
c01078c2:	c3                   	ret    

c01078c3 <_set_idt_entry>:
#define IDT_ENTRY 80

uint64_t _idt[IDT_ENTRY];
uint16_t _idt_limit = sizeof(_idt) - 1;

void _set_idt_entry(uint32_t vector, uint16_t seg_selector, void (*isr)(), uint8_t dpl) {
c01078c3:	55                   	push   %ebp
c01078c4:	89 e5                	mov    %esp,%ebp
c01078c6:	57                   	push   %edi
c01078c7:	56                   	push   %esi
c01078c8:	53                   	push   %ebx
c01078c9:	83 ec 24             	sub    $0x24,%esp
c01078cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078cf:	8b 55 14             	mov    0x14(%ebp),%edx
c01078d2:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c01078d6:	89 d0                	mov    %edx,%eax
c01078d8:	88 45 d8             	mov    %al,-0x28(%ebp)
    uintptr_t offset = (uintptr_t)isr;
c01078db:	8b 45 10             	mov    0x10(%ebp),%eax
c01078de:	89 45 ec             	mov    %eax,-0x14(%ebp)
    _idt[vector] = (offset & 0xffff0000) | IDT_ATTR(dpl);
c01078e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078e4:	66 b8 00 00          	mov    $0x0,%ax
c01078e8:	89 c2                	mov    %eax,%edx
c01078ea:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01078ee:	c1 e0 0d             	shl    $0xd,%eax
c01078f1:	25 00 60 00 00       	and    $0x6000,%eax
c01078f6:	09 d0                	or     %edx,%eax
c01078f8:	80 cc 8e             	or     $0x8e,%ah
c01078fb:	ba 00 00 00 00       	mov    $0x0,%edx
c0107900:	8b 75 08             	mov    0x8(%ebp),%esi
c0107903:	89 04 f5 a0 90 12 c0 	mov    %eax,-0x3fed6f60(,%esi,8)
c010790a:	89 14 f5 a4 90 12 c0 	mov    %edx,-0x3fed6f5c(,%esi,8)
    _idt[vector] <<= 32;
c0107911:	8b 45 08             	mov    0x8(%ebp),%eax
c0107914:	8b 14 c5 a4 90 12 c0 	mov    -0x3fed6f5c(,%eax,8),%edx
c010791b:	8b 04 c5 a0 90 12 c0 	mov    -0x3fed6f60(,%eax,8),%eax
c0107922:	89 c2                	mov    %eax,%edx
c0107924:	b8 00 00 00 00       	mov    $0x0,%eax
c0107929:	8b 75 08             	mov    0x8(%ebp),%esi
c010792c:	89 04 f5 a0 90 12 c0 	mov    %eax,-0x3fed6f60(,%esi,8)
c0107933:	89 14 f5 a4 90 12 c0 	mov    %edx,-0x3fed6f5c(,%esi,8)
    _idt[vector] |= (seg_selector << 16) | (offset & 0x0000ffff);
c010793a:	8b 45 08             	mov    0x8(%ebp),%eax
c010793d:	8b 14 c5 a4 90 12 c0 	mov    -0x3fed6f5c(,%eax,8),%edx
c0107944:	8b 04 c5 a0 90 12 c0 	mov    -0x3fed6f60(,%eax,8),%eax
c010794b:	0f b7 75 dc          	movzwl -0x24(%ebp),%esi
c010794f:	c1 e6 10             	shl    $0x10,%esi
c0107952:	89 f7                	mov    %esi,%edi
c0107954:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0107957:	0f b7 f6             	movzwl %si,%esi
c010795a:	09 fe                	or     %edi,%esi
c010795c:	bf 00 00 00 00       	mov    $0x0,%edi
c0107961:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107964:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107967:	09 f0                	or     %esi,%eax
c0107969:	89 c1                	mov    %eax,%ecx
c010796b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010796e:	09 f8                	or     %edi,%eax
c0107970:	89 c3                	mov    %eax,%ebx
c0107972:	8b 45 08             	mov    0x8(%ebp),%eax
c0107975:	89 0c c5 a0 90 12 c0 	mov    %ecx,-0x3fed6f60(,%eax,8)
c010797c:	89 1c c5 a4 90 12 c0 	mov    %ebx,-0x3fed6f5c(,%eax,8)
}
c0107983:	90                   	nop
c0107984:	83 c4 24             	add    $0x24,%esp
c0107987:	5b                   	pop    %ebx
c0107988:	5e                   	pop    %esi
c0107989:	5f                   	pop    %edi
c010798a:	5d                   	pop    %ebp
c010798b:	c3                   	ret    

c010798c <_init_idt>:

void _init_idt()
{
c010798c:	55                   	push   %ebp
c010798d:	89 e5                	mov    %esp,%ebp
c010798f:	83 ec 10             	sub    $0x10,%esp
    _set_idt_entry(FAULT_DIVISION_ERROR, 0x08, &divide_error, 0);
c0107992:	6a 00                	push   $0x0
c0107994:	68 d4 74 10 c0       	push   $0xc01074d4
c0107999:	6a 08                	push   $0x8
c010799b:	6a 00                	push   $0x0
c010799d:	e8 21 ff ff ff       	call   c01078c3 <_set_idt_entry>
c01079a2:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_TRAP_DEBUG_EXCEPTION, 0x08, &debug, 0);
c01079a5:	6a 00                	push   $0x0
c01079a7:	68 db 74 10 c0       	push   $0xc01074db
c01079ac:	6a 08                	push   $0x8
c01079ae:	6a 01                	push   $0x1
c01079b0:	e8 0e ff ff ff       	call   c01078c3 <_set_idt_entry>
c01079b5:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(INT_NMI, 0x08, &nmi, 0);
c01079b8:	6a 00                	push   $0x0
c01079ba:	68 e2 74 10 c0       	push   $0xc01074e2
c01079bf:	6a 08                	push   $0x8
c01079c1:	6a 02                	push   $0x2
c01079c3:	e8 fb fe ff ff       	call   c01078c3 <_set_idt_entry>
c01079c8:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_BREAKPOINT, 0x08, &int3, 0);
c01079cb:	6a 00                	push   $0x0
c01079cd:	68 e9 74 10 c0       	push   $0xc01074e9
c01079d2:	6a 08                	push   $0x8
c01079d4:	6a 03                	push   $0x3
c01079d6:	e8 e8 fe ff ff       	call   c01078c3 <_set_idt_entry>
c01079db:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_OVERFLOW, 0x08, &overflow, 0);
c01079de:	6a 00                	push   $0x0
c01079e0:	68 f0 74 10 c0       	push   $0xc01074f0
c01079e5:	6a 08                	push   $0x8
c01079e7:	6a 04                	push   $0x4
c01079e9:	e8 d5 fe ff ff       	call   c01078c3 <_set_idt_entry>
c01079ee:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_BOUND_EXCEED, 0x08, &bounds, 0);
c01079f1:	6a 00                	push   $0x0
c01079f3:	68 f7 74 10 c0       	push   $0xc01074f7
c01079f8:	6a 08                	push   $0x8
c01079fa:	6a 05                	push   $0x5
c01079fc:	e8 c2 fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a01:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_OPCODE, 0x08, &invalid_op, 0);
c0107a04:	6a 00                	push   $0x0
c0107a06:	68 fe 74 10 c0       	push   $0xc01074fe
c0107a0b:	6a 08                	push   $0x8
c0107a0d:	6a 06                	push   $0x6
c0107a0f:	e8 af fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a14:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_NO_MATH_PROCESSOR, 0x08, &device_not_available, 0);
    //_set_idt_entry(ABORT_DOUBLE_FAULT, 0x08, &double_fault, 0);
    _set_idt_entry(FAULT_RESERVED_0, 0x08, &coprocessor_segment_overrun, 0);
c0107a17:	6a 00                	push   $0x0
c0107a19:	68 08 75 10 c0       	push   $0xc0107508
c0107a1e:	6a 08                	push   $0x8
c0107a20:	6a 09                	push   $0x9
c0107a22:	e8 9c fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a27:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_TSS, 0x08, &invalid_TSS, 0);
c0107a2a:	6a 00                	push   $0x0
c0107a2c:	68 1c 75 10 c0       	push   $0xc010751c
c0107a31:	6a 08                	push   $0x8
c0107a33:	6a 0a                	push   $0xa
c0107a35:	e8 89 fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a3a:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_SEG_NOT_PRESENT, 0x08, &segment_not_present, 0);
c0107a3d:	6a 00                	push   $0x0
c0107a3f:	68 23 75 10 c0       	push   $0xc0107523
c0107a44:	6a 08                	push   $0x8
c0107a46:	6a 0b                	push   $0xb
c0107a48:	e8 76 fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a4d:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_STACK_SEG_FAULT, 0x08, &stack_segment, 0);
c0107a50:	6a 00                	push   $0x0
c0107a52:	68 2d 75 10 c0       	push   $0xc010752d
c0107a57:	6a 08                	push   $0x8
c0107a59:	6a 0c                	push   $0xc
c0107a5b:	e8 63 fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a60:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_GENERAL_PROTECTION, 0x08, &general_protection, 0);
c0107a63:	6a 00                	push   $0x0
c0107a65:	68 37 75 10 c0       	push   $0xc0107537
c0107a6a:	6a 08                	push   $0x8
c0107a6c:	6a 0d                	push   $0xd
c0107a6e:	e8 50 fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a73:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_PAGE_FAULT, 0x08, page_fault, 0);
    _set_idt_entry(FAULT_RESERVED_1, 0x08, &reserved, 0);
c0107a76:	6a 00                	push   $0x0
c0107a78:	68 12 75 10 c0       	push   $0xc0107512
c0107a7d:	6a 08                	push   $0x8
c0107a7f:	6a 0f                	push   $0xf
c0107a81:	e8 3d fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107a86:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_X87_FAULT, 0x08, coprocessor_error, 0);
    for (int i=17;i < 48;i++)
c0107a89:	c7 45 fc 11 00 00 00 	movl   $0x11,-0x4(%ebp)
c0107a90:	eb 19                	jmp    c0107aab <_init_idt+0x11f>
		  _set_idt_entry(i, 0x08, &reserved, 0);
c0107a92:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a95:	6a 00                	push   $0x0
c0107a97:	68 12 75 10 c0       	push   $0xc0107512
c0107a9c:	6a 08                	push   $0x8
c0107a9e:	50                   	push   %eax
c0107a9f:	e8 1f fe ff ff       	call   c01078c3 <_set_idt_entry>
c0107aa4:	83 c4 10             	add    $0x10,%esp
    for (int i=17;i < 48;i++)
c0107aa7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0107aab:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%ebp)
c0107aaf:	7e e1                	jle    c0107a92 <_init_idt+0x106>
    //_set_idt_entry(45, 0x08, irq13, 0);
c0107ab1:	90                   	nop
c0107ab2:	90                   	nop
c0107ab3:	c9                   	leave  
c0107ab4:	c3                   	ret    

c0107ab5 <_kernel_start>:
c0107ab5:	e8 9b fd ff ff       	call   c0107855 <_init_gdt>
c0107aba:	68 60 90 12 c0       	push   $0xc0129060
c0107abf:	66 ff 35 00 a0 12 c0 	pushw  0xc012a000
c0107ac6:	0f 01 14 24          	lgdtl  (%esp)
c0107aca:	66 b9 10 00          	mov    $0x10,%cx
c0107ace:	8e c1                	mov    %ecx,%es
c0107ad0:	8e d9                	mov    %ecx,%ds
c0107ad2:	8e e1                	mov    %ecx,%fs
c0107ad4:	8e e9                	mov    %ecx,%gs
c0107ad6:	8e d1                	mov    %ecx,%ss
c0107ad8:	66 6a 08             	pushw  $0x8
c0107adb:	68 e1 7a 10 c0       	push   $0xc0107ae1
c0107ae0:	cb                   	lret   

c0107ae1 <_after_gdt>:
c0107ae1:	c7 04 24 00 10 10 00 	movl   $0x101000,(%esp)
c0107ae8:	e8 30 e7 ff ff       	call   c010621d <_kernel_init>
c0107aed:	bc f0 ff bf ff       	mov    $0xffbffff0,%esp
c0107af2:	e8 45 ea ff ff       	call   c010653c <_kernel_finnal_init>
c0107af7:	83 ec 06             	sub    $0x6,%esp
c0107afa:	c7 44 24 02 a0 90 12 	movl   $0xc01290a0,0x2(%esp)
c0107b01:	c0 
c0107b02:	66 a1 02 a0 12 c0    	mov    0xc012a002,%ax
c0107b08:	66 89 04 24          	mov    %ax,(%esp)
c0107b0c:	0f 01 1c 24          	lidtl  (%esp)
c0107b10:	83 c4 06             	add    $0x6,%esp
c0107b13:	e8 82 ea ff ff       	call   c010659a <_kernel_main>

c0107b18 <j_>:
c0107b18:	f4                   	hlt    
c0107b19:	eb fd                	jmp    c0107b18 <j_>

c0107b1b <io_inb>:

#include <stdint.h>

static inline uint8_t
io_inb(int port)
{
c0107b1b:	55                   	push   %ebp
c0107b1c:	89 e5                	mov    %esp,%ebp
c0107b1e:	83 ec 10             	sub    $0x10,%esp
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a"(data) : "d"(port));
c0107b21:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b24:	89 c2                	mov    %eax,%edx
c0107b26:	ec                   	in     (%dx),%al
c0107b27:	88 45 ff             	mov    %al,-0x1(%ebp)
    return data;
c0107b2a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
c0107b2e:	c9                   	leave  
c0107b2f:	c3                   	ret    

c0107b30 <io_outb>:
                 : "memory", "cc");
}

static inline void
io_outb(int port, uint8_t data)
{
c0107b30:	55                   	push   %ebp
c0107b31:	89 e5                	mov    %esp,%ebp
c0107b33:	83 ec 04             	sub    $0x4,%esp
c0107b36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b39:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0107b3c:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107b40:	8b 55 08             	mov    0x8(%ebp),%edx
c0107b43:	ee                   	out    %al,(%dx)
}
c0107b44:	90                   	nop
c0107b45:	c9                   	leave  
c0107b46:	c3                   	ret    

c0107b47 <cpu_delay>:
io_outl(int port, uint32_t data)
{
    asm volatile("outl %0,%w1" : : "a"(data), "d"(port));
}

static inline void cpu_delay(){
c0107b47:	55                   	push   %ebp
c0107b48:	89 e5                	mov    %esp,%ebp
c0107b4a:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; i < 3; i++);
c0107b4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0107b54:	eb 04                	jmp    c0107b5a <cpu_delay+0x13>
c0107b56:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0107b5a:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
c0107b5e:	7e f6                	jle    c0107b56 <cpu_delay+0xf>
}
c0107b60:	90                   	nop
c0107b61:	90                   	nop
c0107b62:	c9                   	leave  
c0107b63:	c3                   	ret    

c0107b64 <init_8259>:
#include <kernel/cpu/cpu.h>
#include <init/idt.h>
#include <vga/vga.h>

void init_8259()
{
c0107b64:	55                   	push   %ebp
c0107b65:	89 e5                	mov    %esp,%ebp
    asm volatile("cli");
c0107b67:	fa                   	cli    

    //ICW1
    io_outb(0x20, 0x11);
c0107b68:	6a 11                	push   $0x11
c0107b6a:	6a 20                	push   $0x20
c0107b6c:	e8 bf ff ff ff       	call   c0107b30 <io_outb>
c0107b71:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107b74:	e8 ce ff ff ff       	call   c0107b47 <cpu_delay>
    io_outb(0xa0, 0x11);
c0107b79:	6a 11                	push   $0x11
c0107b7b:	68 a0 00 00 00       	push   $0xa0
c0107b80:	e8 ab ff ff ff       	call   c0107b30 <io_outb>
c0107b85:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107b88:	e8 ba ff ff ff       	call   c0107b47 <cpu_delay>

    //ICW2
    io_outb(0x21, 0x20);
c0107b8d:	6a 20                	push   $0x20
c0107b8f:	6a 21                	push   $0x21
c0107b91:	e8 9a ff ff ff       	call   c0107b30 <io_outb>
c0107b96:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107b99:	e8 a9 ff ff ff       	call   c0107b47 <cpu_delay>
    io_outb(0xa1, 0x28);
c0107b9e:	6a 28                	push   $0x28
c0107ba0:	68 a1 00 00 00       	push   $0xa1
c0107ba5:	e8 86 ff ff ff       	call   c0107b30 <io_outb>
c0107baa:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bad:	e8 95 ff ff ff       	call   c0107b47 <cpu_delay>

    //ICW3
    io_outb(0x21, 0x04);
c0107bb2:	6a 04                	push   $0x4
c0107bb4:	6a 21                	push   $0x21
c0107bb6:	e8 75 ff ff ff       	call   c0107b30 <io_outb>
c0107bbb:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bbe:	e8 84 ff ff ff       	call   c0107b47 <cpu_delay>
    io_outb(0xa1, 0x02);
c0107bc3:	6a 02                	push   $0x2
c0107bc5:	68 a1 00 00 00       	push   $0xa1
c0107bca:	e8 61 ff ff ff       	call   c0107b30 <io_outb>
c0107bcf:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bd2:	e8 70 ff ff ff       	call   c0107b47 <cpu_delay>

    //ICW4
    io_outb(0x21, 0x01);
c0107bd7:	6a 01                	push   $0x1
c0107bd9:	6a 21                	push   $0x21
c0107bdb:	e8 50 ff ff ff       	call   c0107b30 <io_outb>
c0107be0:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107be3:	e8 5f ff ff ff       	call   c0107b47 <cpu_delay>
    io_outb(0xa1, 0x01);
c0107be8:	6a 01                	push   $0x1
c0107bea:	68 a1 00 00 00       	push   $0xa1
c0107bef:	e8 3c ff ff ff       	call   c0107b30 <io_outb>
c0107bf4:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bf7:	e8 4b ff ff ff       	call   c0107b47 <cpu_delay>

    //OCW1
    io_outb(0x21, 0xff);
c0107bfc:	68 ff 00 00 00       	push   $0xff
c0107c01:	6a 21                	push   $0x21
c0107c03:	e8 28 ff ff ff       	call   c0107b30 <io_outb>
c0107c08:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107c0b:	e8 37 ff ff ff       	call   c0107b47 <cpu_delay>
    io_outb(0xa1, 0xff);
c0107c10:	68 ff 00 00 00       	push   $0xff
c0107c15:	68 a1 00 00 00       	push   $0xa1
c0107c1a:	e8 11 ff ff ff       	call   c0107b30 <io_outb>
c0107c1f:	83 c4 08             	add    $0x8,%esp

    asm volatile("sti");
c0107c22:	fb                   	sti    
}
c0107c23:	90                   	nop
c0107c24:	c9                   	leave  
c0107c25:	c3                   	ret    

c0107c26 <ps2_post_cmd>:


static void ps2_post_cmd(uint8_t port, char cmd, uint16_t arg) {
c0107c26:	55                   	push   %ebp
c0107c27:	89 e5                	mov    %esp,%ebp
c0107c29:	83 ec 1c             	sub    $0x1c,%esp
c0107c2c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0107c2f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107c32:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c35:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0107c38:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0107c3b:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    char result;
    // 等待PS/2输入缓冲区清空，这样我们才可以写入命令
    while((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_IFULL);
c0107c3f:	90                   	nop
c0107c40:	6a 64                	push   $0x64
c0107c42:	e8 d4 fe ff ff       	call   c0107b1b <io_inb>
c0107c47:	83 c4 04             	add    $0x4,%esp
c0107c4a:	88 45 ff             	mov    %al,-0x1(%ebp)
c0107c4d:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0107c51:	83 e0 02             	and    $0x2,%eax
c0107c54:	85 c0                	test   %eax,%eax
c0107c56:	75 e8                	jne    c0107c40 <ps2_post_cmd+0x1a>

    io_outb(port, cmd);
c0107c58:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0107c5c:	0f b6 d0             	movzbl %al,%edx
c0107c5f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0107c63:	52                   	push   %edx
c0107c64:	50                   	push   %eax
c0107c65:	e8 c6 fe ff ff       	call   c0107b30 <io_outb>
c0107c6a:	83 c4 08             	add    $0x8,%esp
    if (!(arg & PS2_NO_ARG)) {
c0107c6d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0107c71:	25 00 ff 00 00       	and    $0xff00,%eax
c0107c76:	85 c0                	test   %eax,%eax
c0107c78:	75 12                	jne    c0107c8c <ps2_post_cmd+0x66>
        // 所有参数一律通过0x60传入。
        io_outb(PS2_PORT_ENC_CMDREG, (uint8_t)(arg & 0x00ff));
c0107c7a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0107c7e:	0f b6 c0             	movzbl %al,%eax
c0107c81:	50                   	push   %eax
c0107c82:	6a 60                	push   $0x60
c0107c84:	e8 a7 fe ff ff       	call   c0107b30 <io_outb>
c0107c89:	83 c4 08             	add    $0x8,%esp
    }
}
c0107c8c:	90                   	nop
c0107c8d:	c9                   	leave  
c0107c8e:	c3                   	ret    

c0107c8f <ps2_issue_cmd>:

static uint8_t ps2_issue_cmd(char cmd, uint16_t arg) {
c0107c8f:	55                   	push   %ebp
c0107c90:	89 e5                	mov    %esp,%ebp
c0107c92:	83 ec 18             	sub    $0x18,%esp
c0107c95:	8b 55 08             	mov    0x8(%ebp),%edx
c0107c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c9b:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0107c9e:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, cmd, arg);
c0107ca2:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0107ca6:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0107caa:	52                   	push   %edx
c0107cab:	50                   	push   %eax
c0107cac:	6a 64                	push   $0x64
c0107cae:	e8 73 ff ff ff       	call   c0107c26 <ps2_post_cmd>
c0107cb3:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0107cb6:	90                   	nop
c0107cb7:	6a 64                	push   $0x64
c0107cb9:	e8 5d fe ff ff       	call   c0107b1b <io_inb>
c0107cbe:	83 c4 04             	add    $0x4,%esp
c0107cc1:	88 45 ff             	mov    %al,-0x1(%ebp)
c0107cc4:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0107cc8:	83 e0 01             	and    $0x1,%eax
c0107ccb:	85 c0                	test   %eax,%eax
c0107ccd:	74 e8                	je     c0107cb7 <ps2_issue_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0107ccf:	6a 60                	push   $0x60
c0107cd1:	e8 45 fe ff ff       	call   c0107b1b <io_inb>
c0107cd6:	83 c4 04             	add    $0x4,%esp
}
c0107cd9:	c9                   	leave  
c0107cda:	c3                   	ret    

c0107cdb <ps2_issue_dev_cmd>:

static uint8_t ps2_issue_dev_cmd(char cmd, uint16_t arg) {
c0107cdb:	55                   	push   %ebp
c0107cdc:	89 e5                	mov    %esp,%ebp
c0107cde:	83 ec 18             	sub    $0x18,%esp
c0107ce1:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ce4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ce7:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0107cea:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_ENC_CMDREG, cmd, arg);
c0107cee:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0107cf2:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0107cf6:	52                   	push   %edx
c0107cf7:	50                   	push   %eax
c0107cf8:	6a 60                	push   $0x60
c0107cfa:	e8 27 ff ff ff       	call   c0107c26 <ps2_post_cmd>
c0107cff:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0107d02:	90                   	nop
c0107d03:	6a 64                	push   $0x64
c0107d05:	e8 11 fe ff ff       	call   c0107b1b <io_inb>
c0107d0a:	83 c4 04             	add    $0x4,%esp
c0107d0d:	88 45 ff             	mov    %al,-0x1(%ebp)
c0107d10:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0107d14:	83 e0 01             	and    $0x1,%eax
c0107d17:	85 c0                	test   %eax,%eax
c0107d19:	74 e8                	je     c0107d03 <ps2_issue_dev_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0107d1b:	6a 60                	push   $0x60
c0107d1d:	e8 f9 fd ff ff       	call   c0107b1b <io_inb>
c0107d22:	83 c4 04             	add    $0x4,%esp
}
c0107d25:	c9                   	leave  
c0107d26:	c3                   	ret    

c0107d27 <init_ps2k>:

void init_ps2k()
{
c0107d27:	55                   	push   %ebp
c0107d28:	89 e5                	mov    %esp,%ebp
c0107d2a:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0107d2d:	fa                   	cli    

     // 1、禁用任何的PS/2设备
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_DISABLE, PS2_NO_ARG);
c0107d2e:	68 00 ff 00 00       	push   $0xff00
c0107d33:	6a ad                	push   $0xffffffad
c0107d35:	6a 64                	push   $0x64
c0107d37:	e8 ea fe ff ff       	call   c0107c26 <ps2_post_cmd>
c0107d3c:	83 c4 0c             	add    $0xc,%esp
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT2_DISABLE, PS2_NO_ARG);
c0107d3f:	68 00 ff 00 00       	push   $0xff00
c0107d44:	6a a7                	push   $0xffffffa7
c0107d46:	6a 64                	push   $0x64
c0107d48:	e8 d9 fe ff ff       	call   c0107c26 <ps2_post_cmd>
c0107d4d:	83 c4 0c             	add    $0xc,%esp
    
    // 2、清空控制器缓冲区
    io_inb(PS2_PORT_ENC_DATA);
c0107d50:	6a 60                	push   $0x60
c0107d52:	e8 c4 fd ff ff       	call   c0107b1b <io_inb>
c0107d57:	83 c4 04             	add    $0x4,%esp

    char result;

    // 3、屏蔽所有PS/2设备（端口1&2）IRQ，并且禁用键盘键码转换功能
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0107d5a:	68 00 ff 00 00       	push   $0xff00
c0107d5f:	6a 20                	push   $0x20
c0107d61:	e8 29 ff ff ff       	call   c0107c8f <ps2_issue_cmd>
c0107d66:	83 c4 08             	add    $0x8,%esp
c0107d69:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result & ~(PS2_CFG_P1INT | PS2_CFG_P2INT | PS2_CFG_TRANSLATION);
c0107d6c:	80 65 f7 bc          	andb   $0xbc,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0107d70:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0107d75:	0f b7 c0             	movzwl %ax,%eax
c0107d78:	50                   	push   %eax
c0107d79:	6a 60                	push   $0x60
c0107d7b:	6a 64                	push   $0x64
c0107d7d:	e8 a4 fe ff ff       	call   c0107c26 <ps2_post_cmd>
c0107d82:	83 c4 0c             	add    $0xc,%esp

    // 4、控制器自检
    result = ps2_issue_cmd(PS2_CMD_SELFTEST, PS2_NO_ARG);
c0107d85:	68 00 ff 00 00       	push   $0xff00
c0107d8a:	6a aa                	push   $0xffffffaa
c0107d8c:	e8 fe fe ff ff       	call   c0107c8f <ps2_issue_cmd>
c0107d91:	83 c4 08             	add    $0x8,%esp
c0107d94:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != PS2_RESULT_TEST_OK) {
c0107d97:	80 7d f7 55          	cmpb   $0x55,-0x9(%ebp)
c0107d9b:	74 12                	je     c0107daf <init_ps2k+0x88>
        kprintf("Controller self-test failed.");
c0107d9d:	83 ec 0c             	sub    $0xc,%esp
c0107da0:	68 e0 b4 12 c0       	push   $0xc012b4e0
c0107da5:	e8 26 01 00 00       	call   c0107ed0 <kprintf>
c0107daa:	83 c4 10             	add    $0x10,%esp
        goto done;
c0107dad:	eb 72                	jmp    c0107e21 <init_ps2k+0xfa>
    }

    // 5、设备自检（端口1自检，通常是我们的键盘）
    result = ps2_issue_cmd(PS2_CMD_SELFTEST_PORT1, PS2_NO_ARG);
c0107daf:	83 ec 08             	sub    $0x8,%esp
c0107db2:	68 00 ff 00 00       	push   $0xff00
c0107db7:	6a ab                	push   $0xffffffab
c0107db9:	e8 d1 fe ff ff       	call   c0107c8f <ps2_issue_cmd>
c0107dbe:	83 c4 10             	add    $0x10,%esp
c0107dc1:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != 0) {
c0107dc4:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0107dc8:	74 12                	je     c0107ddc <init_ps2k+0xb5>
        kprintf("Interface test on port 1 failed.");
c0107dca:	83 ec 0c             	sub    $0xc,%esp
c0107dcd:	68 00 b5 12 c0       	push   $0xc012b500
c0107dd2:	e8 f9 00 00 00       	call   c0107ed0 <kprintf>
c0107dd7:	83 c4 10             	add    $0x10,%esp
        goto done;
c0107dda:	eb 45                	jmp    c0107e21 <init_ps2k+0xfa>
    }

    // 6、开启位于端口1的 IRQ，并启用端口1。不用理会端口2，那儿一般是鼠标。
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_ENABLE, PS2_NO_ARG);
c0107ddc:	83 ec 04             	sub    $0x4,%esp
c0107ddf:	68 00 ff 00 00       	push   $0xff00
c0107de4:	6a ae                	push   $0xffffffae
c0107de6:	6a 64                	push   $0x64
c0107de8:	e8 39 fe ff ff       	call   c0107c26 <ps2_post_cmd>
c0107ded:	83 c4 10             	add    $0x10,%esp
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0107df0:	83 ec 08             	sub    $0x8,%esp
c0107df3:	68 00 ff 00 00       	push   $0xff00
c0107df8:	6a 20                	push   $0x20
c0107dfa:	e8 90 fe ff ff       	call   c0107c8f <ps2_issue_cmd>
c0107dff:	83 c4 10             	add    $0x10,%esp
c0107e02:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result | PS2_CFG_P1INT;
c0107e05:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0107e09:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0107e0e:	0f b7 c0             	movzwl %ax,%eax
c0107e11:	83 ec 04             	sub    $0x4,%esp
c0107e14:	50                   	push   %eax
c0107e15:	6a 60                	push   $0x60
c0107e17:	6a 64                	push   $0x64
c0107e19:	e8 08 fe ff ff       	call   c0107c26 <ps2_post_cmd>
c0107e1e:	83 c4 10             	add    $0x10,%esp

    // 至此，PS/2控制器和设备已完成初始化，可以正常使用。

done:
    asm volatile("sti");
c0107e21:	fb                   	sti    
}
c0107e22:	90                   	nop
c0107e23:	c9                   	leave  
c0107e24:	c3                   	ret    

c0107e25 <init_keyboard>:



void init_keyboard()
{
c0107e25:	55                   	push   %ebp
c0107e26:	89 e5                	mov    %esp,%ebp
c0107e28:	83 ec 18             	sub    $0x18,%esp
    init_8259();
c0107e2b:	e8 34 fd ff ff       	call   c0107b64 <init_8259>

    uint8_t result = io_inb(0x21);
c0107e30:	6a 21                	push   $0x21
c0107e32:	e8 e4 fc ff ff       	call   c0107b1b <io_inb>
c0107e37:	83 c4 04             	add    $0x4,%esp
c0107e3a:	88 45 f7             	mov    %al,-0x9(%ebp)
    io_outb(0x21, result & 0xfd);
c0107e3d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0107e41:	25 fd 00 00 00       	and    $0xfd,%eax
c0107e46:	50                   	push   %eax
c0107e47:	6a 21                	push   $0x21
c0107e49:	e8 e2 fc ff ff       	call   c0107b30 <io_outb>
c0107e4e:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107e51:	e8 f1 fc ff ff       	call   c0107b47 <cpu_delay>
    result = io_inb(0x21);
c0107e56:	6a 21                	push   $0x21
c0107e58:	e8 be fc ff ff       	call   c0107b1b <io_inb>
c0107e5d:	83 c4 04             	add    $0x4,%esp
c0107e60:	88 45 f7             	mov    %al,-0x9(%ebp)

    init_ps2k();
c0107e63:	e8 bf fe ff ff       	call   c0107d27 <init_ps2k>
    
    _set_idt_entry(0x21, 0x08, &handle_keywords, 0);
c0107e68:	6a 00                	push   $0x0
c0107e6a:	68 7e 7e 10 c0       	push   $0xc0107e7e
c0107e6f:	6a 08                	push   $0x8
c0107e71:	6a 21                	push   $0x21
c0107e73:	e8 4b fa ff ff       	call   c01078c3 <_set_idt_entry>
c0107e78:	83 c4 10             	add    $0x10,%esp
}
c0107e7b:	90                   	nop
c0107e7c:	c9                   	leave  
c0107e7d:	c3                   	ret    

c0107e7e <handle_keywords>:

void handle_keywords()
{
c0107e7e:	55                   	push   %ebp
c0107e7f:	89 e5                	mov    %esp,%ebp
c0107e81:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0107e84:	fa                   	cli    
    char key;
    io_outb(0x61, 0x20);
c0107e85:	6a 20                	push   $0x20
c0107e87:	6a 61                	push   $0x61
c0107e89:	e8 a2 fc ff ff       	call   c0107b30 <io_outb>
c0107e8e:	83 c4 08             	add    $0x8,%esp
    key = io_inb(0x60);
c0107e91:	6a 60                	push   $0x60
c0107e93:	e8 83 fc ff ff       	call   c0107b1b <io_inb>
c0107e98:	83 c4 04             	add    $0x4,%esp
c0107e9b:	88 45 f7             	mov    %al,-0x9(%ebp)

    vga_put_char(key);
c0107e9e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c0107ea2:	83 ec 0c             	sub    $0xc,%esp
c0107ea5:	50                   	push   %eax
c0107ea6:	e8 73 e1 ff ff       	call   c010601e <vga_put_char>
c0107eab:	83 c4 10             	add    $0x10,%esp

    io_outb(0x20, 0x20);
c0107eae:	83 ec 08             	sub    $0x8,%esp
c0107eb1:	6a 20                	push   $0x20
c0107eb3:	6a 20                	push   $0x20
c0107eb5:	e8 76 fc ff ff       	call   c0107b30 <io_outb>
c0107eba:	83 c4 10             	add    $0x10,%esp
    io_outb(0x20, 0x20);
c0107ebd:	83 ec 08             	sub    $0x8,%esp
c0107ec0:	6a 20                	push   $0x20
c0107ec2:	6a 20                	push   $0x20
c0107ec4:	e8 67 fc ff ff       	call   c0107b30 <io_outb>
c0107ec9:	83 c4 10             	add    $0x10,%esp
    asm volatile("sti");
c0107ecc:	fb                   	sti    
c0107ecd:	90                   	nop
c0107ece:	c9                   	leave  
c0107ecf:	c3                   	ret    

c0107ed0 <kprintf>:
#include <libs/mstdio.h>
#include <vga/vga.h>
void kprintf (const char *format, ...)
{
c0107ed0:	55                   	push   %ebp
c0107ed1:	89 e5                	mov    %esp,%ebp
c0107ed3:	83 ec 38             	sub    $0x38,%esp
  char **arg = (char **) &format;
c0107ed6:	8d 45 08             	lea    0x8(%ebp),%eax
c0107ed9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int c;
  char buf[20];

  arg++;
c0107edc:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  while ((c = *format++) != 0)
c0107ee0:	e9 83 01 00 00       	jmp    c0108068 <kprintf+0x198>
    {
      if (c != '%')
c0107ee5:	83 7d f0 25          	cmpl   $0x25,-0x10(%ebp)
c0107ee9:	74 17                	je     c0107f02 <kprintf+0x32>
        vga_put_char (c);
c0107eeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107eee:	0f be c0             	movsbl %al,%eax
c0107ef1:	83 ec 0c             	sub    $0xc,%esp
c0107ef4:	50                   	push   %eax
c0107ef5:	e8 24 e1 ff ff       	call   c010601e <vga_put_char>
c0107efa:	83 c4 10             	add    $0x10,%esp
c0107efd:	e9 66 01 00 00       	jmp    c0108068 <kprintf+0x198>
      else
        {
          char *p, *p2;
          int pad0 = 0, pad = 0;
c0107f02:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0107f09:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
          
          c = *format++;
c0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f13:	8d 50 01             	lea    0x1(%eax),%edx
c0107f16:	89 55 08             	mov    %edx,0x8(%ebp)
c0107f19:	0f b6 00             	movzbl (%eax),%eax
c0107f1c:	0f be c0             	movsbl %al,%eax
c0107f1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (c == '0')
c0107f22:	83 7d f0 30          	cmpl   $0x30,-0x10(%ebp)
c0107f26:	75 19                	jne    c0107f41 <kprintf+0x71>
            {
              pad0 = 1;
c0107f28:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
              c = *format++;
c0107f2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f32:	8d 50 01             	lea    0x1(%eax),%edx
c0107f35:	89 55 08             	mov    %edx,0x8(%ebp)
c0107f38:	0f b6 00             	movzbl (%eax),%eax
c0107f3b:	0f be c0             	movsbl %al,%eax
c0107f3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          if (c >= '0' && c <= '9')
c0107f41:	83 7d f0 2f          	cmpl   $0x2f,-0x10(%ebp)
c0107f45:	7e 21                	jle    c0107f68 <kprintf+0x98>
c0107f47:	83 7d f0 39          	cmpl   $0x39,-0x10(%ebp)
c0107f4b:	7f 1b                	jg     c0107f68 <kprintf+0x98>
            {
              pad = c - '0';
c0107f4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f50:	83 e8 30             	sub    $0x30,%eax
c0107f53:	89 45 e0             	mov    %eax,-0x20(%ebp)
              c = *format++;
c0107f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f59:	8d 50 01             	lea    0x1(%eax),%edx
c0107f5c:	89 55 08             	mov    %edx,0x8(%ebp)
c0107f5f:	0f b6 00             	movzbl (%eax),%eax
c0107f62:	0f be c0             	movsbl %al,%eax
c0107f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          switch (c)
c0107f68:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0107f6c:	74 2b                	je     c0107f99 <kprintf+0xc9>
c0107f6e:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0107f72:	0f 8f d5 00 00 00    	jg     c010804d <kprintf+0x17d>
c0107f78:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0107f7c:	74 1b                	je     c0107f99 <kprintf+0xc9>
c0107f7e:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0107f82:	0f 8f c5 00 00 00    	jg     c010804d <kprintf+0x17d>
c0107f88:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
c0107f8c:	74 0b                	je     c0107f99 <kprintf+0xc9>
c0107f8e:	83 7d f0 73          	cmpl   $0x73,-0x10(%ebp)
c0107f92:	74 2b                	je     c0107fbf <kprintf+0xef>
c0107f94:	e9 b4 00 00 00       	jmp    c010804d <kprintf+0x17d>
            {
            case 'd':
            case 'u':
            case 'x':
              itoa (buf, c, *((int *) arg++));
c0107f99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f9c:	8d 50 04             	lea    0x4(%eax),%edx
c0107f9f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0107fa2:	8b 00                	mov    (%eax),%eax
c0107fa4:	83 ec 04             	sub    $0x4,%esp
c0107fa7:	50                   	push   %eax
c0107fa8:	ff 75 f0             	push   -0x10(%ebp)
c0107fab:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107fae:	50                   	push   %eax
c0107faf:	e8 d4 00 00 00       	call   c0108088 <itoa>
c0107fb4:	83 c4 10             	add    $0x10,%esp
              p = buf;
c0107fb7:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107fba:	89 45 ec             	mov    %eax,-0x14(%ebp)
              goto string;
c0107fbd:	eb 1e                	jmp    c0107fdd <kprintf+0x10d>
              break;

            case 's':
              p = *arg++;
c0107fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fc2:	8d 50 04             	lea    0x4(%eax),%edx
c0107fc5:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0107fc8:	8b 00                	mov    (%eax),%eax
c0107fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
              if (! p)
c0107fcd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107fd1:	75 09                	jne    c0107fdc <kprintf+0x10c>
                p = "(null)";
c0107fd3:	c7 45 ec 21 b5 12 c0 	movl   $0xc012b521,-0x14(%ebp)
c0107fda:	eb 01                	jmp    c0107fdd <kprintf+0x10d>

            string:
c0107fdc:	90                   	nop
              for (p2 = p; *p2; p2++);
c0107fdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fe0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107fe3:	eb 04                	jmp    c0107fe9 <kprintf+0x119>
c0107fe5:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0107fe9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107fec:	0f b6 00             	movzbl (%eax),%eax
c0107fef:	84 c0                	test   %al,%al
c0107ff1:	75 f2                	jne    c0107fe5 <kprintf+0x115>
              for (; p2 < p + pad; p2++)
c0107ff3:	eb 22                	jmp    c0108017 <kprintf+0x147>
                vga_put_char (pad0 ? '0' : ' ');
c0107ff5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107ff9:	74 07                	je     c0108002 <kprintf+0x132>
c0107ffb:	b8 30 00 00 00       	mov    $0x30,%eax
c0108000:	eb 05                	jmp    c0108007 <kprintf+0x137>
c0108002:	b8 20 00 00 00       	mov    $0x20,%eax
c0108007:	83 ec 0c             	sub    $0xc,%esp
c010800a:	50                   	push   %eax
c010800b:	e8 0e e0 ff ff       	call   c010601e <vga_put_char>
c0108010:	83 c4 10             	add    $0x10,%esp
              for (; p2 < p + pad; p2++)
c0108013:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0108017:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010801a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010801d:	01 d0                	add    %edx,%eax
c010801f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108022:	72 d1                	jb     c0107ff5 <kprintf+0x125>
              while (*p)
c0108024:	eb 1b                	jmp    c0108041 <kprintf+0x171>
                vga_put_char (*p++);
c0108026:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108029:	8d 50 01             	lea    0x1(%eax),%edx
c010802c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010802f:	0f b6 00             	movzbl (%eax),%eax
c0108032:	0f be c0             	movsbl %al,%eax
c0108035:	83 ec 0c             	sub    $0xc,%esp
c0108038:	50                   	push   %eax
c0108039:	e8 e0 df ff ff       	call   c010601e <vga_put_char>
c010803e:	83 c4 10             	add    $0x10,%esp
              while (*p)
c0108041:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108044:	0f b6 00             	movzbl (%eax),%eax
c0108047:	84 c0                	test   %al,%al
c0108049:	75 db                	jne    c0108026 <kprintf+0x156>
              break;
c010804b:	eb 1b                	jmp    c0108068 <kprintf+0x198>

            default:
              vga_put_char (*((int *) arg++));
c010804d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108050:	8d 50 04             	lea    0x4(%eax),%edx
c0108053:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108056:	8b 00                	mov    (%eax),%eax
c0108058:	0f be c0             	movsbl %al,%eax
c010805b:	83 ec 0c             	sub    $0xc,%esp
c010805e:	50                   	push   %eax
c010805f:	e8 ba df ff ff       	call   c010601e <vga_put_char>
c0108064:	83 c4 10             	add    $0x10,%esp
              break;
c0108067:	90                   	nop
  while ((c = *format++) != 0)
c0108068:	8b 45 08             	mov    0x8(%ebp),%eax
c010806b:	8d 50 01             	lea    0x1(%eax),%edx
c010806e:	89 55 08             	mov    %edx,0x8(%ebp)
c0108071:	0f b6 00             	movzbl (%eax),%eax
c0108074:	0f be c0             	movsbl %al,%eax
c0108077:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010807a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010807e:	0f 85 61 fe ff ff    	jne    c0107ee5 <kprintf+0x15>
            }
        }
    }
}
c0108084:	90                   	nop
c0108085:	90                   	nop
c0108086:	c9                   	leave  
c0108087:	c3                   	ret    

c0108088 <itoa>:
#include <libs/mstdlib.h>

void
itoa (char *buf, int base, int d)
{
c0108088:	55                   	push   %ebp
c0108089:	89 e5                	mov    %esp,%ebp
c010808b:	83 ec 20             	sub    $0x20,%esp
  char *p = buf;
c010808e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108091:	89 45 fc             	mov    %eax,-0x4(%ebp)
  char *p1, *p2;
  unsigned long ud = d;
c0108094:	8b 45 10             	mov    0x10(%ebp),%eax
c0108097:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int divisor = 10;
c010809a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
  
  /* If %d is specified and D is minus, put ‘-’ in the head. */
  if (base == 'd' && d < 0)
c01080a1:	83 7d 0c 64          	cmpl   $0x64,0xc(%ebp)
c01080a5:	75 20                	jne    c01080c7 <itoa+0x3f>
c01080a7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01080ab:	79 1a                	jns    c01080c7 <itoa+0x3f>
    {
      *p++ = '-';
c01080ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080b0:	8d 50 01             	lea    0x1(%eax),%edx
c01080b3:	89 55 fc             	mov    %edx,-0x4(%ebp)
c01080b6:	c6 00 2d             	movb   $0x2d,(%eax)
      buf++;
c01080b9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      ud = -d;
c01080bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01080c0:	f7 d8                	neg    %eax
c01080c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080c5:	eb 0d                	jmp    c01080d4 <itoa+0x4c>
    }
  else if (base == 'x')
c01080c7:	83 7d 0c 78          	cmpl   $0x78,0xc(%ebp)
c01080cb:	75 07                	jne    c01080d4 <itoa+0x4c>
    divisor = 16;
c01080cd:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)

  /* Divide UD by DIVISOR until UD == 0. */
  do
    {
      int remainder = ud % divisor;
c01080d4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01080d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080da:	ba 00 00 00 00       	mov    $0x0,%edx
c01080df:	f7 f1                	div    %ecx
c01080e1:	89 d0                	mov    %edx,%eax
c01080e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
c01080e6:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
c01080ea:	7f 0a                	jg     c01080f6 <itoa+0x6e>
c01080ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01080ef:	83 c0 30             	add    $0x30,%eax
c01080f2:	89 c1                	mov    %eax,%ecx
c01080f4:	eb 08                	jmp    c01080fe <itoa+0x76>
c01080f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01080f9:	83 c0 57             	add    $0x57,%eax
c01080fc:	89 c1                	mov    %eax,%ecx
c01080fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108101:	8d 50 01             	lea    0x1(%eax),%edx
c0108104:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0108107:	88 08                	mov    %cl,(%eax)
    }
  while (ud /= divisor);
c0108109:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010810c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010810f:	ba 00 00 00 00       	mov    $0x0,%edx
c0108114:	f7 f1                	div    %ecx
c0108116:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108119:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010811d:	75 b5                	jne    c01080d4 <itoa+0x4c>

  /* Terminate BUF. */
  *p = 0;
c010811f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108122:	c6 00 00             	movb   $0x0,(%eax)
  
  /* Reverse BUF. */
  p1 = buf;
c0108125:	8b 45 08             	mov    0x8(%ebp),%eax
c0108128:	89 45 f8             	mov    %eax,-0x8(%ebp)
  p2 = p - 1;
c010812b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010812e:	83 e8 01             	sub    $0x1,%eax
c0108131:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (p1 < p2)
c0108134:	eb 25                	jmp    c010815b <itoa+0xd3>
    {
      char tmp = *p1;
c0108136:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108139:	0f b6 00             	movzbl (%eax),%eax
c010813c:	88 45 e7             	mov    %al,-0x19(%ebp)
      *p1 = *p2;
c010813f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108142:	0f b6 10             	movzbl (%eax),%edx
c0108145:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108148:	88 10                	mov    %dl,(%eax)
      *p2 = tmp;
c010814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010814d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0108151:	88 10                	mov    %dl,(%eax)
      p1++;
c0108153:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
      p2--;
c0108157:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  while (p1 < p2)
c010815b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010815e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108161:	72 d3                	jb     c0108136 <itoa+0xae>
    }
c0108163:	90                   	nop
c0108164:	90                   	nop
c0108165:	c9                   	leave  
c0108166:	c3                   	ret    

c0108167 <memset>:
#include <libs/mstring.h>
#include <stdint.h>

void* memset(void* ptr, int value, size_t num)
{
c0108167:	55                   	push   %ebp
c0108168:	89 e5                	mov    %esp,%ebp
c010816a:	83 ec 10             	sub    $0x10,%esp
    uint8_t* c_ptr = (uint8_t*)ptr;
c010816d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108170:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (size_t i = 0; i < num; i++) {
c0108173:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010817a:	eb 11                	jmp    c010818d <memset+0x26>
        *(c_ptr + i) = (uint8_t)value;
c010817c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010817f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108182:	01 d0                	add    %edx,%eax
c0108184:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108187:	88 10                	mov    %dl,(%eax)
    for (size_t i = 0; i < num; i++) {
c0108189:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010818d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108190:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108193:	72 e7                	jb     c010817c <memset+0x15>
    }
    return ptr;
c0108195:	8b 45 08             	mov    0x8(%ebp),%eax
c0108198:	c9                   	leave  
c0108199:	c3                   	ret    
