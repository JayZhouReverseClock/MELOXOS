
build/bin/melox.bin:     file format elf32-i386


Disassembly of section .virk_init_text:

00100000 <start-0xc>:
  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fb                   	sti    
  100009:	4f                   	dec    %edi
  10000a:	52                   	push   %edx
  10000b:	e4                   	.byte 0xe4

0010000c <start>:
  10000c:	fa                   	cli    
  10000d:	bc 00 60 10 00       	mov    $0x106000,%esp
  100012:	68 00 10 10 00       	push   $0x101000
  100017:	53                   	push   %ebx
  100018:	e8 64 00 00 00       	call   100081 <save_multiboot_info>
  10001d:	58                   	pop    %eax
  10001e:	58                   	pop    %eax
  10001f:	68 00 a0 00 00       	push   $0xa000
  100024:	68 00 e0 d0 00       	push   $0xd0e000
  100029:	e8 a4 02 00 00       	call   1002d2 <kerner_init>
  10002e:	8b 04 24             	mov    (%esp),%eax
  100031:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100036:	0f 22 d8             	mov    %eax,%cr3
  100039:	0f 20 c0             	mov    %cr0,%eax
  10003c:	0d 00 00 00 80       	or     $0x80000000,%eax
  100041:	0f 22 c0             	mov    %eax,%cr0
  100044:	58                   	pop    %eax
  100045:	58                   	pop    %eax
  100046:	68 c5 88 10 c0       	push   $0xc01088c5
  10004b:	c3                   	ret    

0010004c <_save_>:
extern uint8_t virkernel_start;
extern uint8_t virkernel_end ;
extern uint8_t __init_phykernel_end;
extern uint8_t _kernel_stack;

uint32_t _save_(uint8_t* destination, uint8_t* base, multiboot_uint32_t size) {
  10004c:	55                   	push   %ebp
  10004d:	89 e5                	mov    %esp,%ebp
  10004f:	83 ec 10             	sub    $0x10,%esp
    multiboot_uint32_t i = 0;
  100052:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (; i < size; i++)
  100059:	eb 19                	jmp    100074 <_save_+0x28>
    {
        *(destination + i) = *(base + i);
  10005b:	8b 55 0c             	mov    0xc(%ebp),%edx
  10005e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100061:	01 d0                	add    %edx,%eax
  100063:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100066:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100069:	01 ca                	add    %ecx,%edx
  10006b:	0f b6 00             	movzbl (%eax),%eax
  10006e:	88 02                	mov    %al,(%edx)
    for (; i < size; i++)
  100070:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100074:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100077:	3b 45 10             	cmp    0x10(%ebp),%eax
  10007a:	72 df                	jb     10005b <_save_+0xf>
    }
    return i;
  10007c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10007f:	c9                   	leave  
  100080:	c3                   	ret    

00100081 <save_multiboot_info>:

void save_multiboot_info(multiboot_info_t* mb_info, multiboot_uint8_t* dest)
{
  100081:	55                   	push   %ebp
  100082:	89 e5                	mov    %esp,%ebp
  100084:	53                   	push   %ebx
  100085:	83 ec 10             	sub    $0x10,%esp
    uint32_t current = 0;
  100088:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    uint8_t* info_b = (uint8_t*) mb_info;
  10008f:	8b 45 08             	mov    0x8(%ebp),%eax
  100092:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; current < sizeof(multiboot_info_t); current++)
  100095:	eb 19                	jmp    1000b0 <save_multiboot_info+0x2f>
    {
        *(dest + current) = *(info_b + current);
  100097:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10009a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10009d:	01 d0                	add    %edx,%eax
  10009f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1000a2:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000a5:	01 ca                	add    %ecx,%edx
  1000a7:	0f b6 00             	movzbl (%eax),%eax
  1000aa:	88 02                	mov    %al,(%edx)
    for (; current < sizeof(multiboot_info_t); current++)
  1000ac:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1000b0:	83 7d f8 77          	cmpl   $0x77,-0x8(%ebp)
  1000b4:	76 e1                	jbe    100097 <save_multiboot_info+0x16>
    }

    ((multiboot_info_t*) dest)->mmap_addr = (uintptr_t)dest + current;
  1000b6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000bc:	01 c2                	add    %eax,%edx
  1000be:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000c1:	89 50 30             	mov    %edx,0x30(%eax)
    current += _save_(dest + current, (uint8_t*)mb_info->mmap_addr, mb_info->mmap_length);
  1000c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1000c7:	8b 40 2c             	mov    0x2c(%eax),%eax
  1000ca:	8b 55 08             	mov    0x8(%ebp),%edx
  1000cd:	8b 52 30             	mov    0x30(%edx),%edx
  1000d0:	89 d1                	mov    %edx,%ecx
  1000d2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1000d5:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000d8:	01 da                	add    %ebx,%edx
  1000da:	50                   	push   %eax
  1000db:	51                   	push   %ecx
  1000dc:	52                   	push   %edx
  1000dd:	e8 6a ff ff ff       	call   10004c <_save_>
  1000e2:	83 c4 0c             	add    $0xc,%esp
  1000e5:	01 45 f8             	add    %eax,-0x8(%ebp)

    if (present(mb_info->flags, MULTIBOOT_INFO_DRIVE_INFO)) {
  1000e8:	8b 45 08             	mov    0x8(%ebp),%eax
  1000eb:	8b 00                	mov    (%eax),%eax
  1000ed:	25 80 00 00 00       	and    $0x80,%eax
  1000f2:	85 c0                	test   %eax,%eax
  1000f4:	74 32                	je     100128 <save_multiboot_info+0xa7>
        ((multiboot_info_t*) dest)->drives_addr = (uintptr_t)dest + current;
  1000f6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000fc:	01 c2                	add    %eax,%edx
  1000fe:	8b 45 0c             	mov    0xc(%ebp),%eax
  100101:	89 50 38             	mov    %edx,0x38(%eax)
        current += _save_(dest + current, (uint8_t*)mb_info->drives_addr, mb_info->drives_length);
  100104:	8b 45 08             	mov    0x8(%ebp),%eax
  100107:	8b 40 34             	mov    0x34(%eax),%eax
  10010a:	8b 55 08             	mov    0x8(%ebp),%edx
  10010d:	8b 52 38             	mov    0x38(%edx),%edx
  100110:	89 d1                	mov    %edx,%ecx
  100112:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  100115:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100118:	01 da                	add    %ebx,%edx
  10011a:	50                   	push   %eax
  10011b:	51                   	push   %ecx
  10011c:	52                   	push   %edx
  10011d:	e8 2a ff ff ff       	call   10004c <_save_>
  100122:	83 c4 0c             	add    $0xc,%esp
  100125:	01 45 f8             	add    %eax,-0x8(%ebp)
    }
    multiboot_info_t* test = (multiboot_info_t*) dest;
  100128:	8b 45 0c             	mov    0xc(%ebp),%eax
  10012b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    multiboot_memory_map_t* testmap = (multiboot_memory_map_t*)mb_info->mmap_addr;
  10012e:	8b 45 08             	mov    0x8(%ebp),%eax
  100131:	8b 40 30             	mov    0x30(%eax),%eax
  100134:	89 45 ec             	mov    %eax,-0x14(%ebp)
}
  100137:	90                   	nop
  100138:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10013b:	c9                   	leave  
  10013c:	c3                   	ret    

0010013d <init_page>:

void init_page(ptd_t* pt)
{
  10013d:	55                   	push   %ebp
  10013e:	89 e5                	mov    %esp,%ebp
  100140:	83 ec 30             	sub    $0x30,%esp
    SET_PDE(pt, 0, PDE(PG_PREM_RW, pt + PG_MAX_ENTRIES));
  100143:	8b 45 08             	mov    0x8(%ebp),%eax
  100146:	05 00 10 00 00       	add    $0x1000,%eax
  10014b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100150:	83 c8 0b             	or     $0xb,%eax
  100153:	89 c2                	mov    %eax,%edx
  100155:	8b 45 08             	mov    0x8(%ebp),%eax
  100158:	89 10                	mov    %edx,(%eax)
    ptd_t * tmp_paged_phy_addr = pt;
  10015a:	8b 45 08             	mov    0x8(%ebp),%eax
  10015d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptd_t * tmp_paget_phy_addr = pt + 1024;
  100160:	8b 45 08             	mov    0x8(%ebp),%eax
  100163:	05 00 10 00 00       	add    $0x1000,%eax
  100168:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //identity map 1M memory
    for(uint32_t i = 0; i < 256; i++)
  10016b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100172:	eb 20                	jmp    100194 <init_page+0x57>
        *(tmp_paget_phy_addr + i) = (((i << 12) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100174:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100177:	c1 e0 0c             	shl    $0xc,%eax
  10017a:	89 c2                	mov    %eax,%edx
  10017c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10017f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100186:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100189:	01 c8                	add    %ecx,%eax
  10018b:	83 ca 03             	or     $0x3,%edx
  10018e:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < 256; i++)
  100190:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100194:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
  10019b:	76 d7                	jbe    100174 <init_page+0x37>

    //identity map virkernel_init memory
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  10019d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001a4:	eb 29                	jmp    1001cf <init_page+0x92>
        *(tmp_paget_phy_addr + i + 256) = ((((i << 12) + MEM_1M) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  1001a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001a9:	c1 e0 0c             	shl    $0xc,%eax
  1001ac:	8d 90 00 00 10 00    	lea    0x100000(%eax),%edx
  1001b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001b5:	05 00 01 00 00       	add    $0x100,%eax
  1001ba:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1001c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1001c4:	01 c8                	add    %ecx,%eax
  1001c6:	83 ca 03             	or     $0x3,%edx
  1001c9:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  1001cb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1001cf:	b8 00 60 10 00       	mov    $0x106000,%eax
  1001d4:	2d 01 f0 0f 00       	sub    $0xff001,%eax
  1001d9:	c1 e8 0c             	shr    $0xc,%eax
  1001dc:	39 45 f8             	cmp    %eax,-0x8(%ebp)
  1001df:	72 c5                	jb     1001a6 <init_page+0x69>

    //now we map the kernel
    //calculate the virtrue kernrl page index
    uint32_t virk_pde_index = PD_INDEX(sym_val(virkernel_start));
  1001e1:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001e6:	c1 e8 16             	shr    $0x16,%eax
  1001e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t virk_pte_index = PT_INDEX(sym_val(virkernel_start));
  1001ec:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001f1:	c1 e8 0c             	shr    $0xc,%eax
  1001f4:	25 ff 03 00 00       	and    $0x3ff,%eax
  1001f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t virk_pg_counts = KERNEL_PAGE_COUNT;
  1001fc:	b8 00 80 d1 c0       	mov    $0xc0d18000,%eax
  100201:	05 00 10 00 00       	add    $0x1000,%eax
  100206:	83 e8 01             	sub    $0x1,%eax
  100209:	ba 00 60 10 c0       	mov    $0xc0106000,%edx
  10020e:	29 d0                	sub    %edx,%eax
  100210:	c1 e8 0c             	shr    $0xc,%eax
  100213:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //regist the vir_kernel page to page direction
    //we give 3 pagetable to virkel, is 3 * 4 = 12 mib size
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  100216:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10021d:	eb 34                	jmp    100253 <init_page+0x116>
    {
        *(pt + virk_pde_index + i) = PDE(PG_PREM_RW, PT_ADDR(pt, PG_TABLE_KERNEL + i));
  10021f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100222:	83 c0 02             	add    $0x2,%eax
  100225:	c1 e0 0c             	shl    $0xc,%eax
  100228:	89 c2                	mov    %eax,%edx
  10022a:	8b 45 08             	mov    0x8(%ebp),%eax
  10022d:	01 d0                	add    %edx,%eax
  10022f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100234:	89 c2                	mov    %eax,%edx
  100236:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100239:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10023c:	01 c8                	add    %ecx,%eax
  10023e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100245:	8b 45 08             	mov    0x8(%ebp),%eax
  100248:	01 c8                	add    %ecx,%eax
  10024a:	83 ca 0b             	or     $0xb,%edx
  10024d:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  10024f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100253:	83 7d f4 06          	cmpl   $0x6,-0xc(%ebp)
  100257:	76 c6                	jbe    10021f <init_page+0xe2>
    }

    //avoid kernel size > prepared page count
    if(virk_pg_counts > (PG_TABLE_STACK - PG_TABLE_KERNEL) * 1024)
  100259:	81 7d dc 00 1c 00 00 	cmpl   $0x1c00,-0x24(%ebp)
  100260:	76 02                	jbe    100264 <init_page+0x127>
    {
        asm ("ud2");
  100262:	0f 0b                	ud2    
    }

    //calcul the phy address
    uint32_t virk_phy_addr = V2P(&virkernel_start);
  100264:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  100269:	05 00 00 00 40       	add    $0x40000000,%eax
  10026e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    //map virtrue kernel page
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  100271:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100278:	eb 36                	jmp    1002b0 <init_page+0x173>
    {
        *(tmp_paget_phy_addr + 1024 + virk_pte_index + i) = (((virk_phy_addr + (i << 12)) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  10027a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10027d:	c1 e0 0c             	shl    $0xc,%eax
  100280:	89 c2                	mov    %eax,%edx
  100282:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100285:	01 d0                	add    %edx,%eax
  100287:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10028c:	89 c2                	mov    %eax,%edx
  10028e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100291:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100294:	01 c8                	add    %ecx,%eax
  100296:	05 00 04 00 00       	add    $0x400,%eax
  10029b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1002a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1002a5:	01 c8                	add    %ecx,%eax
  1002a7:	83 ca 03             	or     $0x3,%edx
  1002aa:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  1002ac:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1002b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1002b3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1002b6:	72 c2                	jb     10027a <init_page+0x13d>
    }

    //self map pd, to give the pd virture address
    SET_PDE(pt, 1023, PDE(T_SELF_REF_PERM, pt));
  1002b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1002bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1002c0:	89 c2                	mov    %eax,%edx
  1002c2:	8b 45 08             	mov    0x8(%ebp),%eax
  1002c5:	05 fc 0f 00 00       	add    $0xffc,%eax
  1002ca:	83 ca 1b             	or     $0x1b,%edx
  1002cd:	89 10                	mov    %edx,(%eax)
}
  1002cf:	90                   	nop
  1002d0:	c9                   	leave  
  1002d1:	c3                   	ret    

001002d2 <kerner_init>:

void kerner_init(ptd_t* pt, uint32_t pt_size)
{
  1002d2:	55                   	push   %ebp
  1002d3:	89 e5                	mov    %esp,%ebp
  1002d5:	83 ec 10             	sub    $0x10,%esp
    uint8_t* kpg = (uint8_t*) pt;
  1002d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1002db:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (uint32_t i = 0; i < pt_size; i++)
  1002de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1002e5:	eb 0f                	jmp    1002f6 <kerner_init+0x24>
    {
        *(kpg + i) = 0;
  1002e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1002ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ed:	01 d0                	add    %edx,%eax
  1002ef:	c6 00 00             	movb   $0x0,(%eax)
    for (uint32_t i = 0; i < pt_size; i++)
  1002f2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1002f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002f9:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1002fc:	72 e9                	jb     1002e7 <kerner_init+0x15>
    }
    init_page(pt);
  1002fe:	ff 75 08             	push   0x8(%ebp)
  100301:	e8 37 fe ff ff       	call   10013d <init_page>
  100306:	83 c4 04             	add    $0x4,%esp
  100309:	90                   	nop
  10030a:	c9                   	leave  
  10030b:	c3                   	ret    

Disassembly of section .text:

c0106000 <init_vga_buffer>:
int XPOS = 0;

vga_attr *video;

void init_vga_buffer()
{
c0106000:	55                   	push   %ebp
c0106001:	89 e5                	mov    %esp,%ebp
    video = (vga_attr *) VIDEO;
c0106003:	c7 05 0c a0 10 c0 00 	movl   $0xb8000,0xc010a00c
c010600a:	80 0b 00 
}
c010600d:	90                   	nop
c010600e:	5d                   	pop    %ebp
c010600f:	c3                   	ret    

c0106010 <set_vga_buffer>:

void set_vga_buffer(void* vga_buf)
{
c0106010:	55                   	push   %ebp
c0106011:	89 e5                	mov    %esp,%ebp
    video = (vga_attr*)vga_buf;
c0106013:	8b 45 08             	mov    0x8(%ebp),%eax
c0106016:	a3 0c a0 10 c0       	mov    %eax,0xc010a00c
}
c010601b:	90                   	nop
c010601c:	5d                   	pop    %ebp
c010601d:	c3                   	ret    

c010601e <vga_put_char>:

void vga_put_char(char c)
{
c010601e:	55                   	push   %ebp
c010601f:	89 e5                	mov    %esp,%ebp
c0106021:	53                   	push   %ebx
c0106022:	83 ec 14             	sub    $0x14,%esp
c0106025:	8b 45 08             	mov    0x8(%ebp),%eax
c0106028:	88 45 f4             	mov    %al,-0xc(%ebp)
    if(c == '\n')
c010602b:	80 7d f4 0a          	cmpb   $0xa,-0xc(%ebp)
c010602f:	75 19                	jne    c010604a <vga_put_char+0x2c>
    {
        YPOS++;
c0106031:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c0106036:	83 c0 01             	add    $0x1,%eax
c0106039:	a3 04 a0 10 c0       	mov    %eax,0xc010a004
        XPOS = 0;
c010603e:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c0106045:	00 00 00 
c0106048:	eb 54                	jmp    c010609e <vga_put_char+0x80>
    }else if(c == '\r')
c010604a:	80 7d f4 0d          	cmpb   $0xd,-0xc(%ebp)
c010604e:	75 0c                	jne    c010605c <vga_put_char+0x3e>
        XPOS = 0;
c0106050:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c0106057:	00 00 00 
c010605a:	eb 42                	jmp    c010609e <vga_put_char+0x80>
    else{
        *(video + XPOS + YPOS * WIDTH) = (theme_color | c);
c010605c:	66 0f be 55 f4       	movsbw -0xc(%ebp),%dx
c0106061:	0f b7 05 00 a0 10 c0 	movzwl 0xc010a000,%eax
c0106068:	09 c2                	or     %eax,%edx
c010606a:	8b 0d 0c a0 10 c0    	mov    0xc010a00c,%ecx
c0106070:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c0106075:	89 c3                	mov    %eax,%ebx
c0106077:	89 d8                	mov    %ebx,%eax
c0106079:	c1 e0 02             	shl    $0x2,%eax
c010607c:	01 d8                	add    %ebx,%eax
c010607e:	c1 e0 04             	shl    $0x4,%eax
c0106081:	89 c3                	mov    %eax,%ebx
c0106083:	a1 08 a0 10 c0       	mov    0xc010a008,%eax
c0106088:	01 d8                	add    %ebx,%eax
c010608a:	01 c0                	add    %eax,%eax
c010608c:	01 c8                	add    %ecx,%eax
c010608e:	66 89 10             	mov    %dx,(%eax)
        XPOS++;
c0106091:	a1 08 a0 10 c0       	mov    0xc010a008,%eax
c0106096:	83 c0 01             	add    $0x1,%eax
c0106099:	a3 08 a0 10 c0       	mov    %eax,0xc010a008
    }
    if (XPOS >= WIDTH)
c010609e:	a1 08 a0 10 c0       	mov    0xc010a008,%eax
c01060a3:	83 f8 4f             	cmp    $0x4f,%eax
c01060a6:	7e 17                	jle    c01060bf <vga_put_char+0xa1>
    {
        YPOS++;
c01060a8:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c01060ad:	83 c0 01             	add    $0x1,%eax
c01060b0:	a3 04 a0 10 c0       	mov    %eax,0xc010a004
        XPOS = 0;
c01060b5:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c01060bc:	00 00 00 
    }
    if(YPOS >= HIGHT)
c01060bf:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c01060c4:	83 f8 18             	cmp    $0x18,%eax
c01060c7:	7e 05                	jle    c01060ce <vga_put_char+0xb0>
        vga_scrollup();
c01060c9:	e8 be 00 00 00       	call   c010618c <vga_scrollup>
}
c01060ce:	90                   	nop
c01060cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01060d2:	c9                   	leave  
c01060d3:	c3                   	ret    

c01060d4 <vga_set_show>:

void vga_set_show(vga_attr flashing, vga_attr backgroud, vga_attr frontcolor)
{
c01060d4:	55                   	push   %ebp
c01060d5:	89 e5                	mov    %esp,%ebp
c01060d7:	83 ec 0c             	sub    $0xc,%esp
c01060da:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01060dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01060e3:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
c01060e7:	66 89 55 f8          	mov    %dx,-0x8(%ebp)
c01060eb:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    theme_color = (flashing << 7 | backgroud << 4 | frontcolor) << 8;
c01060ef:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01060f3:	c1 e0 07             	shl    $0x7,%eax
c01060f6:	89 c2                	mov    %eax,%edx
c01060f8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c01060fc:	c1 e0 04             	shl    $0x4,%eax
c01060ff:	09 c2                	or     %eax,%edx
c0106101:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0106105:	09 d0                	or     %edx,%eax
c0106107:	c1 e0 08             	shl    $0x8,%eax
c010610a:	66 a3 00 a0 10 c0    	mov    %ax,0xc010a000
}
c0106110:	90                   	nop
c0106111:	c9                   	leave  
c0106112:	c3                   	ret    

c0106113 <vga_put_str>:

void vga_put_str(char* str)
{
c0106113:	55                   	push   %ebp
c0106114:	89 e5                	mov    %esp,%ebp
c0106116:	83 ec 08             	sub    $0x8,%esp
    while (*str != '\0')
c0106119:	eb 19                	jmp    c0106134 <vga_put_str+0x21>
    {
        vga_put_char(*str);
c010611b:	8b 45 08             	mov    0x8(%ebp),%eax
c010611e:	0f b6 00             	movzbl (%eax),%eax
c0106121:	0f be c0             	movsbl %al,%eax
c0106124:	83 ec 0c             	sub    $0xc,%esp
c0106127:	50                   	push   %eax
c0106128:	e8 f1 fe ff ff       	call   c010601e <vga_put_char>
c010612d:	83 c4 10             	add    $0x10,%esp
        str++;
c0106130:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*str != '\0')
c0106134:	8b 45 08             	mov    0x8(%ebp),%eax
c0106137:	0f b6 00             	movzbl (%eax),%eax
c010613a:	84 c0                	test   %al,%al
c010613c:	75 dd                	jne    c010611b <vga_put_str+0x8>
    }
}
c010613e:	90                   	nop
c010613f:	90                   	nop
c0106140:	c9                   	leave  
c0106141:	c3                   	ret    

c0106142 <vga_clear>:

void vga_clear()
{
c0106142:	55                   	push   %ebp
c0106143:	89 e5                	mov    %esp,%ebp
c0106145:	83 ec 10             	sub    $0x10,%esp
  
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106148:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010614f:	eb 1b                	jmp    c010616c <vga_clear+0x2a>
        *(video + i) = theme_color;
c0106151:	8b 15 0c a0 10 c0    	mov    0xc010a00c,%edx
c0106157:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010615a:	01 c0                	add    %eax,%eax
c010615c:	01 c2                	add    %eax,%edx
c010615e:	0f b7 05 00 a0 10 c0 	movzwl 0xc010a000,%eax
c0106165:	66 89 02             	mov    %ax,(%edx)
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106168:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010616c:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
c0106173:	7e dc                	jle    c0106151 <vga_clear+0xf>

    XPOS = 0;
c0106175:	c7 05 08 a0 10 c0 00 	movl   $0x0,0xc010a008
c010617c:	00 00 00 
    YPOS = 0;
c010617f:	c7 05 04 a0 10 c0 00 	movl   $0x0,0xc010a004
c0106186:	00 00 00 
}
c0106189:	90                   	nop
c010618a:	c9                   	leave  
c010618b:	c3                   	ret    

c010618c <vga_scrollup>:

void vga_scrollup()
{
c010618c:	55                   	push   %ebp
c010618d:	89 e5                	mov    %esp,%ebp
c010618f:	83 ec 10             	sub    $0x10,%esp
    unsigned int last_line = WIDTH * (HIGHT - 1);
c0106192:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
    for (unsigned int i = 0; i < last_line; i++) {
c0106199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01061a0:	eb 27                	jmp    c01061c9 <vga_scrollup+0x3d>
        *(video + i) = *(video + WIDTH + i);
c01061a2:	8b 15 0c a0 10 c0    	mov    0xc010a00c,%edx
c01061a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061ab:	83 c0 50             	add    $0x50,%eax
c01061ae:	01 c0                	add    %eax,%eax
c01061b0:	01 d0                	add    %edx,%eax
c01061b2:	8b 0d 0c a0 10 c0    	mov    0xc010a00c,%ecx
c01061b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01061bb:	01 d2                	add    %edx,%edx
c01061bd:	01 ca                	add    %ecx,%edx
c01061bf:	0f b7 00             	movzwl (%eax),%eax
c01061c2:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < last_line; i++) {
c01061c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01061c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061cf:	72 d1                	jb     c01061a2 <vga_scrollup+0x16>
    }
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01061d8:	eb 20                	jmp    c01061fa <vga_scrollup+0x6e>
        *(video + i + last_line) = theme_color;
c01061da:	8b 15 0c a0 10 c0    	mov    0xc010a00c,%edx
c01061e0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c01061e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061e6:	01 c8                	add    %ecx,%eax
c01061e8:	01 c0                	add    %eax,%eax
c01061ea:	01 c2                	add    %eax,%edx
c01061ec:	0f b7 05 00 a0 10 c0 	movzwl 0xc010a000,%eax
c01061f3:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061f6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01061fa:	83 7d f8 4f          	cmpl   $0x4f,-0x8(%ebp)
c01061fe:	76 da                	jbe    c01061da <vga_scrollup+0x4e>
    }
    YPOS = YPOS == 0 ? 0 : HIGHT - 1;
c0106200:	a1 04 a0 10 c0       	mov    0xc010a004,%eax
c0106205:	85 c0                	test   %eax,%eax
c0106207:	75 07                	jne    c0106210 <vga_scrollup+0x84>
c0106209:	b8 00 00 00 00       	mov    $0x0,%eax
c010620e:	eb 05                	jmp    c0106215 <vga_scrollup+0x89>
c0106210:	b8 18 00 00 00       	mov    $0x18,%eax
c0106215:	a3 04 a0 10 c0       	mov    %eax,0xc010a004
c010621a:	90                   	nop
c010621b:	c9                   	leave  
c010621c:	c3                   	ret    

c010621d <cpu_rcr3>:
{
    asm("mov %0, %%cr3" ::"r"(v));
}

static inline reg32 cpu_rcr3()
{
c010621d:	55                   	push   %ebp
c010621e:	89 e5                	mov    %esp,%ebp
c0106220:	83 ec 10             	sub    $0x10,%esp
    uintptr_t val;
    asm volatile("movl %%cr3,%0" : "=r" (val));
c0106223:	0f 20 d8             	mov    %cr3,%eax
c0106226:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return val;
c0106229:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010622c:	c9                   	leave  
c010622d:	c3                   	ret    

c010622e <cpu_reflags>:

static inline reg32 cpu_reflags()
{
c010622e:	55                   	push   %ebp
c010622f:	89 e5                	mov    %esp,%ebp
c0106231:	83 ec 10             	sub    $0x10,%esp
    uintptr_t val;
    asm volatile(
c0106234:	9c                   	pushf  
c0106235:	58                   	pop    %eax
c0106236:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "pushf\n"
        "popl %0\n"
        :"=r"(val)::);
    return val;
c0106239:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010623c:	c9                   	leave  
c010623d:	c3                   	ret    

c010623e <_vir_kernel_init>:
/* Forward declarations. */
void _vir_kernel_init (unsigned long addr);
extern void __proc0(); /* proc0.c */

void _vir_kernel_init(unsigned long addr)
{
c010623e:	55                   	push   %ebp
c010623f:	89 e5                	mov    %esp,%ebp
c0106241:	57                   	push   %edi
c0106242:	56                   	push   %esi
c0106243:	53                   	push   %ebx
c0106244:	81 ec bc 00 00 00    	sub    $0xbc,%esp
    multiboot_info_t *mbi;
    mbi = (multiboot_info_t *) addr;
c010624a:	8b 45 08             	mov    0x8(%ebp),%eax
c010624d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    multiboot_memory_map_t* map = (multiboot_memory_map_t*)mbi->mmap_addr;
c0106250:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106253:	8b 40 30             	mov    0x30(%eax),%eax
c0106256:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    _init_idt();
c0106259:	e8 16 25 00 00       	call   c0108774 <_init_idt>
    pmm_init(MEM_1MB + (mbi->mem_upper << 10));
c010625e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106261:	8b 40 08             	mov    0x8(%eax),%eax
c0106264:	c1 e0 0a             	shl    $0xa,%eax
c0106267:	05 00 00 10 00       	add    $0x100000,%eax
c010626c:	83 ec 0c             	sub    $0xc,%esp
c010626f:	50                   	push   %eax
c0106270:	e8 5d 04 00 00       	call   c01066d2 <pmm_init>
c0106275:	83 c4 10             	add    $0x10,%esp
    vmm_init();
c0106278:	e8 42 11 00 00       	call   c01073bf <vmm_init>

    init_vga_buffer();
c010627d:	e8 7e fd ff ff       	call   c0106000 <init_vga_buffer>
    vga_set_show(0,VGA_COLOR_BLACK,VGA_COLOR_LIGHT_WHITE);
c0106282:	83 ec 04             	sub    $0x4,%esp
c0106285:	6a 0f                	push   $0xf
c0106287:	6a 00                	push   $0x0
c0106289:	6a 00                	push   $0x0
c010628b:	e8 44 fe ff ff       	call   c01060d4 <vga_set_show>
c0106290:	83 c4 10             	add    $0x10,%esp
    /* Clear the screen. */
    vga_clear();
c0106293:	e8 aa fe ff ff       	call   c0106142 <vga_clear>

    __kernel_ptd = cpu_rcr3();
c0106298:	e8 80 ff ff ff       	call   c010621d <cpu_rcr3>
c010629d:	a3 20 a0 10 c0       	mov    %eax,0xc010a020

    tmp = (struct m_pcb){ .page_table = __kernel_ptd };
c01062a2:	8b 35 20 a0 10 c0    	mov    0xc010a020,%esi
c01062a8:	bb 40 a0 10 c0       	mov    $0xc010a040,%ebx
c01062ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01062b2:	ba 1b 00 00 00       	mov    $0x1b,%edx
c01062b7:	89 df                	mov    %ebx,%edi
c01062b9:	89 d1                	mov    %edx,%ecx
c01062bb:	f3 ab                	rep stos %eax,%es:(%edi)
c01062bd:	89 35 a4 a0 10 c0    	mov    %esi,0xc010a0a4

    __current = &tmp;
c01062c3:	c7 05 60 b1 d0 c0 40 	movl   $0xc010a040,0xc0d0b160
c01062ca:	a0 10 c0 
    // }

    /* Set MBI to the address of the Multiboot information structure. */

    /* Print out the flags. */
    kprintf("flags = 0x%x\n", (unsigned) mbi->flags);
c01062cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062d0:	8b 00                	mov    (%eax),%eax
c01062d2:	83 ec 08             	sub    $0x8,%esp
c01062d5:	50                   	push   %eax
c01062d6:	68 00 d0 d0 c0       	push   $0xc0d0d000
c01062db:	e8 51 38 00 00       	call   c0109b31 <kprintf>
c01062e0:	83 c4 10             	add    $0x10,%esp

    /* Are mem_* valid? */
    if (CHECK_FLAG(mbi->flags, 0))
c01062e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062e6:	8b 00                	mov    (%eax),%eax
c01062e8:	83 e0 01             	and    $0x1,%eax
c01062eb:	85 c0                	test   %eax,%eax
c01062ed:	74 1e                	je     c010630d <_vir_kernel_init+0xcf>
        kprintf("mem_lower = %uKB, mem_upper = %uKB\n",(unsigned) mbi->mem_lower, (unsigned) mbi->mem_upper);
c01062ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062f2:	8b 50 08             	mov    0x8(%eax),%edx
c01062f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062f8:	8b 40 04             	mov    0x4(%eax),%eax
c01062fb:	83 ec 04             	sub    $0x4,%esp
c01062fe:	52                   	push   %edx
c01062ff:	50                   	push   %eax
c0106300:	68 10 d0 d0 c0       	push   $0xc0d0d010
c0106305:	e8 27 38 00 00       	call   c0109b31 <kprintf>
c010630a:	83 c4 10             	add    $0x10,%esp
    
    unsigned int map_size = mbi->mmap_length / sizeof(multiboot_memory_map_t);
c010630d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106310:	8b 40 2c             	mov    0x2c(%eax),%eax
c0106313:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
c0106318:	f7 e2                	mul    %edx
c010631a:	89 d0                	mov    %edx,%eax
c010631c:	c1 e8 04             	shr    $0x4,%eax
c010631f:	89 45 d0             	mov    %eax,-0x30(%ebp)
    for (unsigned int i = 0; i < map_size; i++) {
c0106322:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0106329:	e9 33 01 00 00       	jmp    c0106461 <_vir_kernel_init+0x223>
        multiboot_memory_map_t mmap = map[i];
c010632e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106331:	89 d0                	mov    %edx,%eax
c0106333:	01 c0                	add    %eax,%eax
c0106335:	01 d0                	add    %edx,%eax
c0106337:	c1 e0 03             	shl    $0x3,%eax
c010633a:	89 c2                	mov    %eax,%edx
c010633c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010633f:	01 d0                	add    %edx,%eax
c0106341:	8b 10                	mov    (%eax),%edx
c0106343:	89 95 38 ff ff ff    	mov    %edx,-0xc8(%ebp)
c0106349:	8b 50 04             	mov    0x4(%eax),%edx
c010634c:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
c0106352:	8b 50 08             	mov    0x8(%eax),%edx
c0106355:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%ebp)
c010635b:	8b 50 0c             	mov    0xc(%eax),%edx
c010635e:	89 95 44 ff ff ff    	mov    %edx,-0xbc(%ebp)
c0106364:	8b 50 10             	mov    0x10(%eax),%edx
c0106367:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
c010636d:	8b 40 14             	mov    0x14(%eax),%eax
c0106370:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
               map[i].addr_low,
               map[i].len_low >> 10,
               map[i].type);
c0106376:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106379:	89 d0                	mov    %edx,%eax
c010637b:	01 c0                	add    %eax,%eax
c010637d:	01 d0                	add    %edx,%eax
c010637f:	c1 e0 03             	shl    $0x3,%eax
c0106382:	89 c2                	mov    %eax,%edx
c0106384:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106387:	01 d0                	add    %edx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c0106389:	8b 50 14             	mov    0x14(%eax),%edx
               map[i].len_low >> 10,
c010638c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010638f:	89 c8                	mov    %ecx,%eax
c0106391:	01 c0                	add    %eax,%eax
c0106393:	01 c8                	add    %ecx,%eax
c0106395:	c1 e0 03             	shl    $0x3,%eax
c0106398:	89 c1                	mov    %eax,%ecx
c010639a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010639d:	01 c8                	add    %ecx,%eax
c010639f:	8b 40 0c             	mov    0xc(%eax),%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c01063a2:	c1 e8 0a             	shr    $0xa,%eax
c01063a5:	89 c3                	mov    %eax,%ebx
               map[i].addr_low,
c01063a7:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01063aa:	89 c8                	mov    %ecx,%eax
c01063ac:	01 c0                	add    %eax,%eax
c01063ae:	01 c8                	add    %ecx,%eax
c01063b0:	c1 e0 03             	shl    $0x3,%eax
c01063b3:	89 c1                	mov    %eax,%ecx
c01063b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063b8:	01 c8                	add    %ecx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c01063ba:	8b 40 04             	mov    0x4(%eax),%eax
c01063bd:	52                   	push   %edx
c01063be:	53                   	push   %ebx
c01063bf:	50                   	push   %eax
c01063c0:	68 34 d0 d0 c0       	push   $0xc0d0d034
c01063c5:	e8 67 37 00 00       	call   c0109b31 <kprintf>
c01063ca:	83 c4 10             	add    $0x10,%esp
        if (mmap.type == MULTIBOOT_MEMORY_AVAILABLE) {
c01063cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
c01063d3:	83 f8 01             	cmp    $0x1,%eax
c01063d6:	0f 85 81 00 00 00    	jne    c010645d <_vir_kernel_init+0x21f>
            // 整数向上取整除法
            uintptr_t pg = map[i].addr_low + 0x0fffU;
c01063dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063df:	89 d0                	mov    %edx,%eax
c01063e1:	01 c0                	add    %eax,%eax
c01063e3:	01 d0                	add    %edx,%eax
c01063e5:	c1 e0 03             	shl    $0x3,%eax
c01063e8:	89 c2                	mov    %eax,%edx
c01063ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063ed:	01 d0                	add    %edx,%eax
c01063ef:	8b 40 04             	mov    0x4(%eax),%eax
c01063f2:	05 ff 0f 00 00       	add    $0xfff,%eax
c01063f7:	89 45 bc             	mov    %eax,-0x44(%ebp)
            pmm_mark_chunk_free(pg >> 12, map[i].len_low >> 12);
c01063fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063fd:	89 d0                	mov    %edx,%eax
c01063ff:	01 c0                	add    %eax,%eax
c0106401:	01 d0                	add    %edx,%eax
c0106403:	c1 e0 03             	shl    $0x3,%eax
c0106406:	89 c2                	mov    %eax,%edx
c0106408:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010640b:	01 d0                	add    %edx,%eax
c010640d:	8b 40 0c             	mov    0xc(%eax),%eax
c0106410:	c1 e8 0c             	shr    $0xc,%eax
c0106413:	89 c2                	mov    %eax,%edx
c0106415:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106418:	c1 e8 0c             	shr    $0xc,%eax
c010641b:	83 ec 08             	sub    $0x8,%esp
c010641e:	52                   	push   %edx
c010641f:	50                   	push   %eax
c0106420:	e8 92 03 00 00       	call   c01067b7 <pmm_mark_chunk_free>
c0106425:	83 c4 10             	add    $0x10,%esp
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c0106428:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010642b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106430:	89 c1                	mov    %eax,%ecx
                   map[i].len_low >> 12,
c0106432:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106435:	89 d0                	mov    %edx,%eax
c0106437:	01 c0                	add    %eax,%eax
c0106439:	01 d0                	add    %edx,%eax
c010643b:	c1 e0 03             	shl    $0x3,%eax
c010643e:	89 c2                	mov    %eax,%edx
c0106440:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106443:	01 d0                	add    %edx,%eax
c0106445:	8b 40 0c             	mov    0xc(%eax),%eax
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c0106448:	c1 e8 0c             	shr    $0xc,%eax
c010644b:	83 ec 04             	sub    $0x4,%esp
c010644e:	51                   	push   %ecx
c010644f:	50                   	push   %eax
c0106450:	68 5c d0 d0 c0       	push   $0xc0d0d05c
c0106455:	e8 d7 36 00 00       	call   c0109b31 <kprintf>
c010645a:	83 c4 10             	add    $0x10,%esp
    for (unsigned int i = 0; i < map_size; i++) {
c010645d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c0106461:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106464:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0106467:	0f 82 c1 fe ff ff    	jb     c010632e <_vir_kernel_init+0xf0>
                   pg & ~0x0fffU);
        }
    }

    // 将内核占据的页设为已占用
    size_t pg_count = (uintptr_t)(&virkernel_end  - &virkernel_start) >> 12;
c010646d:	b8 00 80 d1 c0       	mov    $0xc0d18000,%eax
c0106472:	2d 00 60 10 c0       	sub    $0xc0106000,%eax
c0106477:	c1 e8 0c             	shr    $0xc,%eax
c010647a:	89 45 cc             	mov    %eax,-0x34(%ebp)
    pmm_mark_chunk_occupied(KERNEL_PID, V2P(&virkernel_start) >> 12, pg_count, 0);
c010647d:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
c0106482:	05 00 00 00 40       	add    $0x40000000,%eax
c0106487:	c1 e8 0c             	shr    $0xc,%eax
c010648a:	6a 00                	push   $0x0
c010648c:	ff 75 cc             	push   -0x34(%ebp)
c010648f:	50                   	push   %eax
c0106490:	6a ff                	push   $0xffffffff
c0106492:	e8 63 03 00 00       	call   c01067fa <pmm_mark_chunk_occupied>
c0106497:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Allocated %d pages for kernel.\n", pg_count);
c010649a:	83 ec 08             	sub    $0x8,%esp
c010649d:	ff 75 cc             	push   -0x34(%ebp)
c01064a0:	68 84 d0 d0 c0       	push   $0xc0d0d084
c01064a5:	e8 87 36 00 00       	call   c0109b31 <kprintf>
c01064aa:	83 c4 10             	add    $0x10,%esp

    size_t vga_buf_pgs = VGA_BUFFER_SIZE >> 12;
c01064ad:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
    
    // 首先，标记VGA部分为已占用
    pmm_mark_chunk_occupied(KERNEL_PID, VIDEO >> 12, vga_buf_pgs, 0);
c01064b4:	6a 00                	push   $0x0
c01064b6:	ff 75 c8             	push   -0x38(%ebp)
c01064b9:	68 b8 00 00 00       	push   $0xb8
c01064be:	6a ff                	push   $0xffffffff
c01064c0:	e8 35 03 00 00       	call   c01067fa <pmm_mark_chunk_occupied>
c01064c5:	83 c4 10             	add    $0x10,%esp
    
    // 重映射VGA文本缓冲区（以后会变成显存，i.e., framebuffer）
    for (size_t i = 0; i < vga_buf_pgs; i++)
c01064c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01064cf:	eb 32                	jmp    c0106503 <_vir_kernel_init+0x2c5>
    {
        pt_t* test = vmm_map_page(KERNEL_PID, VGA_BUFFER_VADDR + (i << 12), VIDEO + (i << 12), PG_PREM_RW, PG_PREM_RW);
c01064d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01064d4:	c1 e0 0c             	shl    $0xc,%eax
c01064d7:	05 00 80 0b 00       	add    $0xb8000,%eax
c01064dc:	89 c2                	mov    %eax,%edx
c01064de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01064e1:	c1 e0 0c             	shl    $0xc,%eax
c01064e4:	2d 00 00 00 50       	sub    $0x50000000,%eax
c01064e9:	83 ec 0c             	sub    $0xc,%esp
c01064ec:	6a 03                	push   $0x3
c01064ee:	6a 03                	push   $0x3
c01064f0:	52                   	push   %edx
c01064f1:	50                   	push   %eax
c01064f2:	6a ff                	push   $0xffffffff
c01064f4:	e8 87 10 00 00       	call   c0107580 <vmm_map_page>
c01064f9:	83 c4 20             	add    $0x20,%esp
c01064fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
    for (size_t i = 0; i < vga_buf_pgs; i++)
c01064ff:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0106503:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106506:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0106509:	72 c6                	jb     c01064d1 <_vir_kernel_init+0x293>
        //kprintf("[MM] vga vaddr %x\n", test);
    }
    set_vga_buffer(VGA_BUFFER_VADDR);
c010650b:	83 ec 0c             	sub    $0xc,%esp
c010650e:	68 00 00 00 b0       	push   $0xb0000000
c0106513:	e8 f8 fa ff ff       	call   c0106010 <set_vga_buffer>
c0106518:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Mapped VGA to %x.\n", VGA_BUFFER_VADDR);
c010651b:	83 ec 08             	sub    $0x8,%esp
c010651e:	68 00 00 00 b0       	push   $0xb0000000
c0106523:	68 a9 d0 d0 c0       	push   $0xc0d0d0a9
c0106528:	e8 04 36 00 00       	call   c0109b31 <kprintf>
c010652d:	83 c4 10             	add    $0x10,%esp

    // 为内核创建一个专属栈空间。
    for (size_t i = 0; i < (KSTACK_SIZE >> 12); i++) {
c0106530:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0106537:	eb 26                	jmp    c010655f <_vir_kernel_init+0x321>
        pt_t* test = vmm_alloc_page(KERNEL_PID, (void*)KSTACK_START + (i << 12), NULL, PG_PREM_RW, PG_PREM_RW);
c0106539:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010653c:	c1 e0 0c             	shl    $0xc,%eax
c010653f:	2d 00 00 41 00       	sub    $0x410000,%eax
c0106544:	83 ec 0c             	sub    $0xc,%esp
c0106547:	6a 03                	push   $0x3
c0106549:	6a 03                	push   $0x3
c010654b:	6a 00                	push   $0x0
c010654d:	50                   	push   %eax
c010654e:	6a ff                	push   $0xffffffff
c0106550:	e8 d2 11 00 00       	call   c0107727 <vmm_alloc_page>
c0106555:	83 c4 20             	add    $0x20,%esp
c0106558:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    for (size_t i = 0; i < (KSTACK_SIZE >> 12); i++) {
c010655b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010655f:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
c0106563:	76 d4                	jbe    c0106539 <_vir_kernel_init+0x2fb>
        //kprintf("[MM] kernel paddr %x", test);
    }
    kprintf("[MM] Allocated %d pages for stack start at 0x%x\n", KSTACK_SIZE>>12, KSTACK_START);
c0106565:	83 ec 04             	sub    $0x4,%esp
c0106568:	68 00 00 bf ff       	push   $0xffbf0000
c010656d:	6a 10                	push   $0x10
c010656f:	68 c4 d0 d0 c0       	push   $0xc0d0d0c4
c0106574:	e8 b8 35 00 00       	call   c0109b31 <kprintf>
c0106579:	83 c4 10             	add    $0x10,%esp

    //give malloc init
    //mem_init();
    //kprintf("[MM] Malloc Init Success \n");
    kprintf("[KERNEL] === Initialization Done === \n\n");
c010657c:	83 ec 0c             	sub    $0xc,%esp
c010657f:	68 f8 d0 d0 c0       	push   $0xc0d0d0f8
c0106584:	e8 a8 35 00 00       	call   c0109b31 <kprintf>
c0106589:	83 c4 10             	add    $0x10,%esp

    vga_put_str("MELOX OS\n");
c010658c:	83 ec 0c             	sub    $0xc,%esp
c010658f:	68 20 d1 d0 c0       	push   $0xc0d0d120
c0106594:	e8 7a fb ff ff       	call   c0106113 <vga_put_str>
c0106599:	83 c4 10             	add    $0x10,%esp
     //__asm__("int $1");
}
c010659c:	90                   	nop
c010659d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01065a0:	5b                   	pop    %ebx
c01065a1:	5e                   	pop    %esi
c01065a2:	5f                   	pop    %edi
c01065a3:	5d                   	pop    %ebp
c01065a4:	c3                   	ret    

c01065a5 <_kernel_main>:
//     //kprintf("[KERNEL] === Post Initialization Done === \n\n");
// }

void creat_proc0();
void _kernel_main()
{
c01065a5:	55                   	push   %ebp
c01065a6:	89 e5                	mov    %esp,%ebp
c01065a8:	81 ec 18 01 00 00    	sub    $0x118,%esp
    char* buf[64];
    
    kprintf("We are now running in virtual address space!\n\n");
c01065ae:	83 ec 0c             	sub    $0xc,%esp
c01065b1:	68 2c d1 d0 c0       	push   $0xc0d0d12c
c01065b6:	e8 76 35 00 00       	call   c0109b31 <kprintf>
c01065bb:	83 c4 10             	add    $0x10,%esp
    
    cpu_get_brand(buf);
c01065be:	83 ec 0c             	sub    $0xc,%esp
c01065c1:	8d 85 f4 fe ff ff    	lea    -0x10c(%ebp),%eax
c01065c7:	50                   	push   %eax
c01065c8:	e8 81 1e 00 00       	call   c010844e <cpu_get_brand>
c01065cd:	83 c4 10             	add    $0x10,%esp
    kprintf("CPU: %s\n\n", buf);
c01065d0:	83 ec 08             	sub    $0x8,%esp
c01065d3:	8d 85 f4 fe ff ff    	lea    -0x10c(%ebp),%eax
c01065d9:	50                   	push   %eax
c01065da:	68 5b d1 d0 c0       	push   $0xc0d0d15b
c01065df:	e8 4d 35 00 00       	call   c0109b31 <kprintf>
c01065e4:	83 c4 10             	add    $0x10,%esp

    uintptr_t k_start = vmm_v2p(&virkernel_start);
c01065e7:	83 ec 0c             	sub    $0xc,%esp
c01065ea:	68 00 60 10 c0       	push   $0xc0106000
c01065ef:	e8 78 14 00 00       	call   c0107a6c <vmm_v2p>
c01065f4:	83 c4 10             	add    $0x10,%esp
c01065f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf("The kernel's base address mapping: %x->%x\n", &virkernel_start, k_start);
c01065fa:	83 ec 04             	sub    $0x4,%esp
c01065fd:	ff 75 f4             	push   -0xc(%ebp)
c0106600:	68 00 60 10 c0       	push   $0xc0106000
c0106605:	68 68 d1 d0 c0       	push   $0xc0d0d168
c010660a:	e8 22 35 00 00       	call   c0109b31 <kprintf>
c010660f:	83 c4 10             	add    $0x10,%esp

    // timer_init();
    // init_keyboard();

    //now we move ourself into proc0, and fork proc1
    if(sched_init())
c0106612:	e8 b1 30 00 00       	call   c01096c8 <sched_init>
c0106617:	85 c0                	test   %eax,%eax
c0106619:	74 05                	je     c0106620 <_kernel_main+0x7b>
        //kprintf("process sched init!");

    creat_proc0();
c010661b:	e8 03 00 00 00       	call   c0106623 <creat_proc0>
}
c0106620:	90                   	nop
c0106621:	c9                   	leave  
c0106622:	c3                   	ret    

c0106623 <creat_proc0>:


void creat_proc0()
{
c0106623:	55                   	push   %ebp
c0106624:	89 e5                	mov    %esp,%ebp
c0106626:	57                   	push   %edi
c0106627:	53                   	push   %ebx
c0106628:	81 ec b0 00 00 00    	sub    $0xb0,%esp
    /**
     *      1. 在创建proc0进程前关闭中断
     *
     */

    init_proc(&proc0);
c010662e:	83 ec 0c             	sub    $0xc,%esp
c0106631:	8d 45 8c             	lea    -0x74(%ebp),%eax
c0106634:	50                   	push   %eax
c0106635:	e8 ed 29 00 00       	call   c0109027 <init_proc>
c010663a:	83 c4 10             	add    $0x10,%esp
    proc0.intr_contxt = (isr_param){ 
                                  .cs = KCODE_SEG,
                                  .eip = (void*)__proc0,
                                  .ss = KDATA_SEG,
                                  .eflags = cpu_reflags() };
c010663d:	e8 ec fb ff ff       	call   c010622e <cpu_reflags>
c0106642:	89 c3                	mov    %eax,%ebx
    proc0.intr_contxt = (isr_param){ 
c0106644:	8d 55 94             	lea    -0x6c(%ebp),%edx
c0106647:	b8 00 00 00 00       	mov    $0x0,%eax
c010664c:	b9 0f 00 00 00       	mov    $0xf,%ecx
c0106651:	89 d7                	mov    %edx,%edi
c0106653:	f3 ab                	rep stos %eax,%es:(%edi)
c0106655:	b8 a6 7d 10 c0       	mov    $0xc0107da6,%eax
c010665a:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010665d:	c7 45 c0 08 00 00 00 	movl   $0x8,-0x40(%ebp)
c0106664:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
c0106667:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%ebp)

    // 必须在读取eflags之后禁用。否则当进程被调度时，中断依然是关闭的！
    asm volatile("cli");
c010666e:	fa                   	cli    
    setup_proc_mem(&proc0, PD_REFERENCED);
c010666f:	83 ec 08             	sub    $0x8,%esp
c0106672:	68 00 00 c0 ff       	push   $0xffc00000
c0106677:	8d 45 8c             	lea    -0x74(%ebp),%eax
c010667a:	50                   	push   %eax
c010667b:	e8 59 2b 00 00       	call   c01091d9 <setup_proc_mem>
c0106680:	83 c4 10             	add    $0x10,%esp
                 "movl %%esp, %0\n"
                 "movl %%eax, %%cr3\n"
                 "movl %%ebx, %%esp\n"
                 : "=m"(proc0.intr_contxt.registers.esp)// it must have, it give us the correct esp,
                 //so we can soft iret get in to push $0 pos, then we esp + 8 get cs:ip->proc0!
                 : "r"(proc0.page_table),
c0106683:	8b 55 f0             	mov    -0x10(%ebp),%edx
                   "i"(KSATCK_TOP),
                   "i"(KCODE_SEG),
                   "r"(proc0.intr_contxt.eip)
c0106686:	8b 4d bc             	mov    -0x44(%ebp),%ecx
    asm volatile("movl %%cr3, %%eax\n"
c0106689:	0f 20 d8             	mov    %cr3,%eax
c010668c:	89 e3                	mov    %esp,%ebx
c010668e:	0f 22 da             	mov    %edx,%cr3
c0106691:	bc f0 ff bf ff       	mov    $0xffbffff0,%esp
c0106696:	9c                   	pushf  
c0106697:	6a 08                	push   $0x8
c0106699:	51                   	push   %ecx
c010669a:	6a 00                	push   $0x0
c010669c:	6a 00                	push   $0x0
c010669e:	89 65 b0             	mov    %esp,-0x50(%ebp)
c01066a1:	0f 22 d8             	mov    %eax,%cr3
c01066a4:	89 dc                	mov    %ebx,%esp
                 : "%eax", "%ebx", "memory");

    // 向调度器注册进程。
    push_process(&proc0);
c01066a6:	83 ec 0c             	sub    $0xc,%esp
c01066a9:	8d 45 8c             	lea    -0x74(%ebp),%eax
c01066ac:	50                   	push   %eax
c01066ad:	e8 97 31 00 00       	call   c0109849 <push_process>
c01066b2:	83 c4 10             	add    $0x10,%esp

    // 由于时钟中断未就绪，我们需要手动通知调度器进行第一次调度。这里也会同时隐式地恢复我们的eflags.IF位
    schedule();
c01066b5:	e8 ca 30 00 00       	call   c0109784 <schedule>

    /* Should not return */
    kprintf("Unexpected Return");
c01066ba:	83 ec 0c             	sub    $0xc,%esp
c01066bd:	68 93 d1 d0 c0       	push   $0xc0d0d193
c01066c2:	e8 6a 34 00 00       	call   c0109b31 <kprintf>
c01066c7:	83 c4 10             	add    $0x10,%esp
c01066ca:	90                   	nop
c01066cb:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01066ce:	5b                   	pop    %ebx
c01066cf:	5f                   	pop    %edi
c01066d0:	5d                   	pop    %ebp
c01066d1:	c3                   	ret    

c01066d2 <pmm_init>:

#ifdef MEMSTRUCT
static struct pp_struct pm_table[PM_STRUCT_MAX_SIZE];

void pmm_init(uintptr_t mem_upper_lim)
{
c01066d2:	55                   	push   %ebp
c01066d3:	89 e5                	mov    %esp,%ebp
c01066d5:	83 ec 10             	sub    $0x10,%esp
    pg_lookup_ptr = LOOKUP_START;
c01066d8:	c7 05 c0 a0 10 c0 01 	movl   $0x1,0xc010a0c0
c01066df:	00 00 00 
    max_pg = (PG_ALIGN(mem_upper_lim) >> 12);
c01066e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01066e5:	c1 e8 0c             	shr    $0xc,%eax
c01066e8:	a3 c4 a0 10 c0       	mov    %eax,0xc010a0c4

    for (size_t i = 0; i < PM_STRUCT_MAX_SIZE; i++) {
c01066ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01066f4:	eb 49                	jmp    c010673f <pmm_init+0x6d>
        pm_table[i] = (struct pp_struct) {
c01066f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01066f9:	89 d0                	mov    %edx,%eax
c01066fb:	01 c0                	add    %eax,%eax
c01066fd:	01 d0                	add    %edx,%eax
c01066ff:	c1 e0 02             	shl    $0x2,%eax
c0106702:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c0106707:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010670d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106710:	89 d0                	mov    %edx,%eax
c0106712:	01 c0                	add    %eax,%eax
c0106714:	01 d0                	add    %edx,%eax
c0106716:	c1 e0 02             	shl    $0x2,%eax
c0106719:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c010671e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0106724:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106727:	89 d0                	mov    %edx,%eax
c0106729:	01 c0                	add    %eax,%eax
c010672b:	01 d0                	add    %edx,%eax
c010672d:	c1 e0 02             	shl    $0x2,%eax
c0106730:	05 e8 a0 10 c0       	add    $0xc010a0e8,%eax
c0106735:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < PM_STRUCT_MAX_SIZE; i++) {
c010673b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010673f:	81 7d fc ff ff 0f 00 	cmpl   $0xfffff,-0x4(%ebp)
c0106746:	76 ae                	jbe    c01066f6 <pmm_init+0x24>
            .owner = 0,
            .attr = 0,
            .ref_counts = 1
        };
    }
}
c0106748:	90                   	nop
c0106749:	90                   	nop
c010674a:	c9                   	leave  
c010674b:	c3                   	ret    

c010674c <pmm_mark_page_free>:

void pmm_mark_page_free(uintptr_t ppn)
{
c010674c:	55                   	push   %ebp
c010674d:	89 e5                	mov    %esp,%ebp
    pm_table[ppn].ref_counts = 0;
c010674f:	8b 55 08             	mov    0x8(%ebp),%edx
c0106752:	89 d0                	mov    %edx,%eax
c0106754:	01 c0                	add    %eax,%eax
c0106756:	01 d0                	add    %edx,%eax
c0106758:	c1 e0 02             	shl    $0x2,%eax
c010675b:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106760:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0106766:	90                   	nop
c0106767:	5d                   	pop    %ebp
c0106768:	c3                   	ret    

c0106769 <pmm_mark_page_occupied>:

void pmm_mark_page_occupied(pid_t owner, uintptr_t ppn, pp_attr_t attr)
{
c0106769:	55                   	push   %ebp
c010676a:	89 e5                	mov    %esp,%ebp
c010676c:	83 ec 10             	sub    $0x10,%esp
    pm_table[ppn] = (struct pp_struct) {
c010676f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106772:	89 d0                	mov    %edx,%eax
c0106774:	01 c0                	add    %eax,%eax
c0106776:	01 d0                	add    %edx,%eax
c0106778:	c1 e0 02             	shl    $0x2,%eax
c010677b:	8d 90 e0 a0 10 c0    	lea    -0x3fef5f20(%eax),%edx
c0106781:	8b 45 08             	mov    0x8(%ebp),%eax
c0106784:	89 02                	mov    %eax,(%edx)
c0106786:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106789:	89 d0                	mov    %edx,%eax
c010678b:	01 c0                	add    %eax,%eax
c010678d:	01 d0                	add    %edx,%eax
c010678f:	c1 e0 02             	shl    $0x2,%eax
c0106792:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106797:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010679d:	8b 55 0c             	mov    0xc(%ebp),%edx
c01067a0:	89 d0                	mov    %edx,%eax
c01067a2:	01 c0                	add    %eax,%eax
c01067a4:	01 d0                	add    %edx,%eax
c01067a6:	c1 e0 02             	shl    $0x2,%eax
c01067a9:	8d 90 e8 a0 10 c0    	lea    -0x3fef5f18(%eax),%edx
c01067af:	8b 45 10             	mov    0x10(%ebp),%eax
c01067b2:	89 02                	mov    %eax,(%edx)
        .owner = owner,
        .ref_counts = 1,
        .attr = attr
    };
}
c01067b4:	90                   	nop
c01067b5:	c9                   	leave  
c01067b6:	c3                   	ret    

c01067b7 <pmm_mark_chunk_free>:

void pmm_mark_chunk_free(uintptr_t start_ppn, size_t page_count)
{
c01067b7:	55                   	push   %ebp
c01067b8:	89 e5                	mov    %esp,%ebp
c01067ba:	83 ec 10             	sub    $0x10,%esp
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c01067bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01067c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01067c3:	eb 1b                	jmp    c01067e0 <pmm_mark_chunk_free+0x29>
    {
        pm_table[i].ref_counts = 0;
c01067c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01067c8:	89 d0                	mov    %edx,%eax
c01067ca:	01 c0                	add    %eax,%eax
c01067cc:	01 d0                	add    %edx,%eax
c01067ce:	c1 e0 02             	shl    $0x2,%eax
c01067d1:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c01067d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c01067dc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01067e0:	8b 55 08             	mov    0x8(%ebp),%edx
c01067e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01067e6:	01 d0                	add    %edx,%eax
c01067e8:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01067eb:	73 0a                	jae    c01067f7 <pmm_mark_chunk_free+0x40>
c01067ed:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c01067f2:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01067f5:	72 ce                	jb     c01067c5 <pmm_mark_chunk_free+0xe>
    }
}
c01067f7:	90                   	nop
c01067f8:	c9                   	leave  
c01067f9:	c3                   	ret    

c01067fa <pmm_mark_chunk_occupied>:

void pmm_mark_chunk_occupied(pid_t owner, uint32_t start_ppn, size_t page_count, pp_attr_t attr)
{
c01067fa:	55                   	push   %ebp
c01067fb:	89 e5                	mov    %esp,%ebp
c01067fd:	83 ec 10             	sub    $0x10,%esp
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c0106800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106803:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106806:	eb 49                	jmp    c0106851 <pmm_mark_chunk_occupied+0x57>
    {
        pm_table[i] = (struct pp_struct) {
c0106808:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010680b:	89 d0                	mov    %edx,%eax
c010680d:	01 c0                	add    %eax,%eax
c010680f:	01 d0                	add    %edx,%eax
c0106811:	c1 e0 02             	shl    $0x2,%eax
c0106814:	8d 90 e0 a0 10 c0    	lea    -0x3fef5f20(%eax),%edx
c010681a:	8b 45 08             	mov    0x8(%ebp),%eax
c010681d:	89 02                	mov    %eax,(%edx)
c010681f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106822:	89 d0                	mov    %edx,%eax
c0106824:	01 c0                	add    %eax,%eax
c0106826:	01 d0                	add    %edx,%eax
c0106828:	c1 e0 02             	shl    $0x2,%eax
c010682b:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106830:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0106836:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106839:	89 d0                	mov    %edx,%eax
c010683b:	01 c0                	add    %eax,%eax
c010683d:	01 d0                	add    %edx,%eax
c010683f:	c1 e0 02             	shl    $0x2,%eax
c0106842:	8d 90 e8 a0 10 c0    	lea    -0x3fef5f18(%eax),%edx
c0106848:	8b 45 14             	mov    0x14(%ebp),%eax
c010684b:	89 02                	mov    %eax,(%edx)
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c010684d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106851:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106854:	8b 45 10             	mov    0x10(%ebp),%eax
c0106857:	01 d0                	add    %edx,%eax
c0106859:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010685c:	73 0a                	jae    c0106868 <pmm_mark_chunk_occupied+0x6e>
c010685e:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c0106863:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0106866:	72 a0                	jb     c0106808 <pmm_mark_chunk_occupied+0xe>
            .owner = owner,
            .ref_counts = 1,
            .attr = attr
        };
    }
}
c0106868:	90                   	nop
c0106869:	c9                   	leave  
c010686a:	c3                   	ret    

c010686b <pmm_alloc_page>:

void* pmm_alloc_page(pid_t owner, pp_attr_t attr)
{
c010686b:	55                   	push   %ebp
c010686c:	89 e5                	mov    %esp,%ebp
c010686e:	83 ec 20             	sub    $0x20,%esp
        // Next fit approach. Maximize the throughput!
    uintptr_t good_page_found = NULL;
c0106871:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    size_t old_pg_ptr = pg_lookup_ptr;
c0106878:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c010687d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t upper_lim = max_pg;
c0106880:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c0106885:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct pp_struct* pm;
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c0106888:	eb 7d                	jmp    c0106907 <pmm_alloc_page+0x9c>
        pm = &pm_table[pg_lookup_ptr];
c010688a:	8b 15 c0 a0 10 c0    	mov    0xc010a0c0,%edx
c0106890:	89 d0                	mov    %edx,%eax
c0106892:	01 c0                	add    %eax,%eax
c0106894:	01 d0                	add    %edx,%eax
c0106896:	c1 e0 02             	shl    $0x2,%eax
c0106899:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c010689e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // skip the fully occupied chunk, reduce # of iterations
        if (!pm->ref_counts) {
c01068a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068a4:	8b 40 04             	mov    0x4(%eax),%eax
c01068a7:	85 c0                	test   %eax,%eax
c01068a9:	75 28                	jne    c01068d3 <pmm_alloc_page+0x68>
                *pm = (struct pp_struct) {
c01068ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068ae:	8b 55 08             	mov    0x8(%ebp),%edx
c01068b1:	89 10                	mov    %edx,(%eax)
c01068b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068b6:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
c01068bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068c0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01068c3:	89 50 08             	mov    %edx,0x8(%eax)
                .attr = attr,
                .owner = owner,
                .ref_counts = 1
            };
            good_page_found = pg_lookup_ptr << 12;
c01068c6:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c01068cb:	c1 e0 0c             	shl    $0xc,%eax
c01068ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01068d1:	eb 34                	jmp    c0106907 <pmm_alloc_page+0x9c>
        } else {
            pg_lookup_ptr ++;
c01068d3:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c01068d8:	83 c0 01             	add    $0x1,%eax
c01068db:	a3 c0 a0 10 c0       	mov    %eax,0xc010a0c0

            // We've searched the interval [old_pg_ptr, max_pg) but failed
            //   may be chances in [1, old_pg_ptr) ?
            // Let's find out!
            if (pg_lookup_ptr >= upper_lim && old_pg_ptr != LOOKUP_START) {
c01068e0:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c01068e5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01068e8:	77 1d                	ja     c0106907 <pmm_alloc_page+0x9c>
c01068ea:	83 7d f8 01          	cmpl   $0x1,-0x8(%ebp)
c01068ee:	74 17                	je     c0106907 <pmm_alloc_page+0x9c>
                upper_lim = old_pg_ptr;
c01068f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01068f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
                pg_lookup_ptr = LOOKUP_START;
c01068f6:	c7 05 c0 a0 10 c0 01 	movl   $0x1,0xc010a0c0
c01068fd:	00 00 00 
                old_pg_ptr = LOOKUP_START;
c0106900:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c0106907:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010690b:	75 0e                	jne    c010691b <pmm_alloc_page+0xb0>
c010690d:	a1 c0 a0 10 c0       	mov    0xc010a0c0,%eax
c0106912:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0106915:	0f 87 6f ff ff ff    	ja     c010688a <pmm_alloc_page+0x1f>
            }
        }
    }
    if (!good_page_found) {
c010691b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010691f:	75 0c                	jne    c010692d <pmm_alloc_page+0xc2>
        __current->k_status = MXOUTOFMEM;
c0106921:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0106926:	c7 40 68 fd ff ff ff 	movl   $0xfffffffd,0x68(%eax)
    }
    return (void*)good_page_found;
c010692d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106930:	c9                   	leave  
c0106931:	c3                   	ret    

c0106932 <pmm_alloc_cpage>:

void* pmm_alloc_cpage(pid_t owner, size_t num_pages, pp_attr_t attr) {
c0106932:	55                   	push   %ebp
c0106933:	89 e5                	mov    %esp,%ebp
c0106935:	83 ec 10             	sub    $0x10,%esp
    size_t p1 = 0;
c0106938:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    size_t p2 = 0;
c010693f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    while (p2 < max_pg && p2 - p1 < num_pages)
c0106946:	eb 28                	jmp    c0106970 <pmm_alloc_cpage+0x3e>
    {
        (!(&pm_table[p2])->ref_counts) ? (p2++) : (p1 = p2);
c0106948:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010694b:	89 d0                	mov    %edx,%eax
c010694d:	01 c0                	add    %eax,%eax
c010694f:	01 d0                	add    %edx,%eax
c0106951:	c1 e0 02             	shl    $0x2,%eax
c0106954:	05 e4 a0 10 c0       	add    $0xc010a0e4,%eax
c0106959:	8b 00                	mov    (%eax),%eax
c010695b:	85 c0                	test   %eax,%eax
c010695d:	75 0b                	jne    c010696a <pmm_alloc_cpage+0x38>
c010695f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106962:	83 c0 01             	add    $0x1,%eax
c0106965:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0106968:	eb 06                	jmp    c0106970 <pmm_alloc_cpage+0x3e>
c010696a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010696d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (p2 < max_pg && p2 - p1 < num_pages)
c0106970:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c0106975:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c0106978:	73 0b                	jae    c0106985 <pmm_alloc_cpage+0x53>
c010697a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010697d:	2b 45 fc             	sub    -0x4(%ebp),%eax
c0106980:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0106983:	77 c3                	ja     c0106948 <pmm_alloc_cpage+0x16>
    }

    if (p2 < max_pg) {
c0106985:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c010698a:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c010698d:	73 07                	jae    c0106996 <pmm_alloc_cpage+0x64>
        return NULL;
c010698f:	b8 00 00 00 00       	mov    $0x0,%eax
c0106994:	eb 1a                	jmp    c01069b0 <pmm_alloc_cpage+0x7e>
    }

    pmm_mark_chunk_occupied(owner, p1, num_pages, attr);
c0106996:	ff 75 10             	push   0x10(%ebp)
c0106999:	ff 75 0c             	push   0xc(%ebp)
c010699c:	ff 75 fc             	push   -0x4(%ebp)
c010699f:	ff 75 08             	push   0x8(%ebp)
c01069a2:	e8 53 fe ff ff       	call   c01067fa <pmm_mark_chunk_occupied>
c01069a7:	83 c4 10             	add    $0x10,%esp

    return p1 << 12;
c01069aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069ad:	c1 e0 0c             	shl    $0xc,%eax
}
c01069b0:	c9                   	leave  
c01069b1:	c3                   	ret    

c01069b2 <pmm_free_page>:

int pmm_free_page(pid_t owner, void* page)
{
c01069b2:	55                   	push   %ebp
c01069b3:	89 e5                	mov    %esp,%ebp
c01069b5:	83 ec 10             	sub    $0x10,%esp
    struct pp_struct* pm = &pm_table[(intptr_t)page >> 12];
c01069b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069bb:	c1 f8 0c             	sar    $0xc,%eax
c01069be:	89 c2                	mov    %eax,%edx
c01069c0:	89 d0                	mov    %edx,%eax
c01069c2:	01 c0                	add    %eax,%eax
c01069c4:	01 d0                	add    %edx,%eax
c01069c6:	c1 e0 02             	shl    $0x2,%eax
c01069c9:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c01069ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    //     pm->ref_counts--;
    //     return 1;
    // }

        // Is this a MMIO mapping or double free?
    if (((intptr_t)page >> 12) >= max_pg || !(pm->ref_counts)) {
c01069d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069d4:	c1 f8 0c             	sar    $0xc,%eax
c01069d7:	89 c2                	mov    %eax,%edx
c01069d9:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c01069de:	39 c2                	cmp    %eax,%edx
c01069e0:	73 0a                	jae    c01069ec <pmm_free_page+0x3a>
c01069e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069e5:	8b 40 04             	mov    0x4(%eax),%eax
c01069e8:	85 c0                	test   %eax,%eax
c01069ea:	75 07                	jne    c01069f3 <pmm_free_page+0x41>
        return 0;
c01069ec:	b8 00 00 00 00       	mov    $0x0,%eax
c01069f1:	eb 14                	jmp    c0106a07 <pmm_free_page+0x55>
    }

    // TODO: 检查权限，保证：1) 只有正在使用该页（包括被分享者）的进程可以释放； 2) 内核可释放所有页。
    pm->ref_counts--;
c01069f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069f6:	8b 40 04             	mov    0x4(%eax),%eax
c01069f9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01069fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069ff:	89 50 04             	mov    %edx,0x4(%eax)
    return 1;
c0106a02:	b8 01 00 00 00       	mov    $0x1,%eax
    //return 0;
    
}
c0106a07:	c9                   	leave  
c0106a08:	c3                   	ret    

c0106a09 <pmm_query>:

struct pp_struct* pmm_query(void* pa) {
c0106a09:	55                   	push   %ebp
c0106a0a:	89 e5                	mov    %esp,%ebp
c0106a0c:	83 ec 10             	sub    $0x10,%esp
    uint32_t ppn = (uintptr_t)pa >> 12;
c0106a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a12:	c1 e8 0c             	shr    $0xc,%eax
c0106a15:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    if (ppn >= PM_STRUCT_MAX_SIZE) {
c0106a18:	81 7d fc ff ff 0f 00 	cmpl   $0xfffff,-0x4(%ebp)
c0106a1f:	76 07                	jbe    c0106a28 <pmm_query+0x1f>
        return NULL;
c0106a21:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a26:	eb 11                	jmp    c0106a39 <pmm_query+0x30>
    }

    return &pm_table[ppn];
c0106a28:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106a2b:	89 d0                	mov    %edx,%eax
c0106a2d:	01 c0                	add    %eax,%eax
c0106a2f:	01 d0                	add    %edx,%eax
c0106a31:	c1 e0 02             	shl    $0x2,%eax
c0106a34:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
}
c0106a39:	c9                   	leave  
c0106a3a:	c3                   	ret    

c0106a3b <pmm_ref_page>:

int pmm_ref_page(pid_t owner, void* page) {
c0106a3b:	55                   	push   %ebp
c0106a3c:	89 e5                	mov    %esp,%ebp
c0106a3e:	83 ec 10             	sub    $0x10,%esp
    //(void*) owner;      // TODO: do smth with owner
    
    uint32_t ppn = (uintptr_t)page >> 12;
c0106a41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a44:	c1 e8 0c             	shr    $0xc,%eax
c0106a47:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    if (ppn >= PM_STRUCT_MAX_SIZE) {
c0106a4a:	81 7d fc ff ff 0f 00 	cmpl   $0xfffff,-0x4(%ebp)
c0106a51:	76 07                	jbe    c0106a5a <pmm_ref_page+0x1f>
        return 0;
c0106a53:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a58:	eb 43                	jmp    c0106a9d <pmm_ref_page+0x62>
    }

    struct pp_struct* pm = &pm_table[ppn];
c0106a5a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106a5d:	89 d0                	mov    %edx,%eax
c0106a5f:	01 c0                	add    %eax,%eax
c0106a61:	01 d0                	add    %edx,%eax
c0106a63:	c1 e0 02             	shl    $0x2,%eax
c0106a66:	05 e0 a0 10 c0       	add    $0xc010a0e0,%eax
c0106a6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (ppn >= max_pg || !pm->ref_counts) {
c0106a6e:	a1 c4 a0 10 c0       	mov    0xc010a0c4,%eax
c0106a73:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0106a76:	73 0a                	jae    c0106a82 <pmm_ref_page+0x47>
c0106a78:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a7b:	8b 40 04             	mov    0x4(%eax),%eax
c0106a7e:	85 c0                	test   %eax,%eax
c0106a80:	75 07                	jne    c0106a89 <pmm_ref_page+0x4e>
        return 0;
c0106a82:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a87:	eb 14                	jmp    c0106a9d <pmm_ref_page+0x62>
    }

    pm->ref_counts++;
c0106a89:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a8c:	8b 40 04             	mov    0x4(%eax),%eax
c0106a8f:	8d 50 01             	lea    0x1(%eax),%edx
c0106a92:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a95:	89 50 04             	mov    %edx,0x4(%eax)
    return 1;
c0106a98:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106a9d:	c9                   	leave  
c0106a9e:	c3                   	ret    

c0106a9f <extend_heap>:
 * @brief extend heap
 * 
 * @param extend size
 */
static void* extend_heap(size_t words)
{
c0106a9f:	55                   	push   %ebp
c0106aa0:	89 e5                	mov    %esp,%ebp
c0106aa2:	83 ec 18             	sub    $0x18,%esp
    char* bp = mem_brk;
c0106aa5:	a1 e8 a0 d0 c0       	mov    0xc0d0a0e8,%eax
c0106aaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size;
    //align
    size = (words % 2) ? words * WSIZE : (words + 1) * WSIZE;
c0106aad:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ab0:	83 e0 01             	and    $0x1,%eax
c0106ab3:	85 c0                	test   %eax,%eax
c0106ab5:	74 08                	je     c0106abf <extend_heap+0x20>
c0106ab7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aba:	c1 e0 02             	shl    $0x2,%eax
c0106abd:	eb 09                	jmp    c0106ac8 <extend_heap+0x29>
c0106abf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ac2:	83 c0 01             	add    $0x1,%eax
c0106ac5:	c1 e0 02             	shl    $0x2,%eax
c0106ac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_sbrk(size + WSIZE);
c0106acb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ace:	83 c0 04             	add    $0x4,%eax
c0106ad1:	83 ec 0c             	sub    $0xc,%esp
c0106ad4:	50                   	push   %eax
c0106ad5:	e8 64 03 00 00       	call   c0106e3e <mem_sbrk>
c0106ada:	83 c4 10             	add    $0x10,%esp

    //initialize free block header/footer and the epilogue header
    PUT(HDRP(bp), PACK(size, 0)); // free block header
c0106add:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ae0:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ae6:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0)); // free block foot //TODO CRUSH HERE, ADD ONE PAGE OUT OF RANGE, WE ONLY GIVE ONE PAGE, MEYBE PAGE FAULT
c0106ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106aeb:	83 e8 04             	sub    $0x4,%eax
c0106aee:	8b 00                	mov    (%eax),%eax
c0106af0:	83 e0 f8             	and    $0xfffffff8,%eax
c0106af3:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106af9:	01 c2                	add    %eax,%edx
c0106afb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106afe:	89 02                	mov    %eax,(%edx)
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); //NEW Epilogue header
c0106b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b03:	83 e8 04             	sub    $0x4,%eax
c0106b06:	8b 00                	mov    (%eax),%eax
c0106b08:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b0b:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b11:	01 d0                	add    %edx,%eax
c0106b13:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //Coalesce if previous block is free
    return coalesce(bp);
c0106b19:	83 ec 0c             	sub    $0xc,%esp
c0106b1c:	ff 75 f4             	push   -0xc(%ebp)
c0106b1f:	e8 05 00 00 00       	call   c0106b29 <coalesce>
c0106b24:	83 c4 10             	add    $0x10,%esp
}
c0106b27:	c9                   	leave  
c0106b28:	c3                   	ret    

c0106b29 <coalesce>:
 * @brief Coalesce free blk
 * 
 * @param Coalesce bp pointer
 */
static void* coalesce(void* bp)
{
c0106b29:	55                   	push   %ebp
c0106b2a:	89 e5                	mov    %esp,%ebp
c0106b2c:	83 ec 10             	sub    $0x10,%esp
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
c0106b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b32:	83 e8 04             	sub    $0x4,%eax
c0106b35:	8b 00                	mov    (%eax),%eax
c0106b37:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b3a:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b40:	01 d0                	add    %edx,%eax
c0106b42:	8b 00                	mov    (%eax),%eax
c0106b44:	83 e0 01             	and    $0x1,%eax
c0106b47:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
c0106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b4d:	83 e8 04             	sub    $0x4,%eax
c0106b50:	8b 00                	mov    (%eax),%eax
c0106b52:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b55:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b58:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b5b:	01 d0                	add    %edx,%eax
c0106b5d:	8b 00                	mov    (%eax),%eax
c0106b5f:	83 e0 01             	and    $0x1,%eax
c0106b62:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t size = GET_SIZE(HDRP(bp));
c0106b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b68:	83 e8 04             	sub    $0x4,%eax
c0106b6b:	8b 00                	mov    (%eax),%eax
c0106b6d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b70:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(prev_alloc && next_alloc)
c0106b73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b77:	74 0e                	je     c0106b87 <coalesce+0x5e>
c0106b79:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b7d:	74 08                	je     c0106b87 <coalesce+0x5e>
        return bp;
c0106b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b82:	e9 3e 01 00 00       	jmp    c0106cc5 <coalesce+0x19c>

    else if(prev_alloc && !next_alloc)
c0106b87:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b8b:	74 49                	je     c0106bd6 <coalesce+0xad>
c0106b8d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b91:	75 43                	jne    c0106bd6 <coalesce+0xad>
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
c0106b93:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b96:	83 e8 04             	sub    $0x4,%eax
c0106b99:	8b 00                	mov    (%eax),%eax
c0106b9b:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b9e:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106ba1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ba4:	01 d0                	add    %edx,%eax
c0106ba6:	8b 00                	mov    (%eax),%eax
c0106ba8:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bab:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(HDRP(bp), PACK(size, 0));
c0106bae:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bb1:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bb7:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(bp), PACK(size, 0));
c0106bb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bbc:	83 e8 04             	sub    $0x4,%eax
c0106bbf:	8b 00                	mov    (%eax),%eax
c0106bc1:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bc4:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106bc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bca:	01 c2                	add    %eax,%edx
c0106bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bcf:	89 02                	mov    %eax,(%edx)
c0106bd1:	e9 ec 00 00 00       	jmp    c0106cc2 <coalesce+0x199>
    }

    else if(!prev_alloc && next_alloc)
c0106bd6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106bda:	75 6b                	jne    c0106c47 <coalesce+0x11e>
c0106bdc:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106be0:	74 65                	je     c0106c47 <coalesce+0x11e>
    {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));//TO DO ,THERE IS PEOBLEM, CRUSH HERE
c0106be2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106be5:	83 e8 08             	sub    $0x8,%eax
c0106be8:	8b 00                	mov    (%eax),%eax
c0106bea:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bed:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106bf2:	29 c2                	sub    %eax,%edx
c0106bf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bf7:	01 d0                	add    %edx,%eax
c0106bf9:	8b 00                	mov    (%eax),%eax
c0106bfb:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bfe:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(bp), PACK(size, 0));
c0106c01:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c04:	83 e8 04             	sub    $0x4,%eax
c0106c07:	8b 00                	mov    (%eax),%eax
c0106c09:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c0c:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c12:	01 c2                	add    %eax,%edx
c0106c14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c17:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
c0106c19:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c1c:	83 e8 08             	sub    $0x8,%eax
c0106c1f:	8b 00                	mov    (%eax),%eax
c0106c21:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c24:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106c29:	29 c2                	sub    %eax,%edx
c0106c2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c2e:	01 c2                	add    %eax,%edx
c0106c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c33:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106c35:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c38:	83 e8 08             	sub    $0x8,%eax
c0106c3b:	8b 00                	mov    (%eax),%eax
c0106c3d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c40:	f7 d8                	neg    %eax
c0106c42:	01 45 08             	add    %eax,0x8(%ebp)
c0106c45:	eb 7b                	jmp    c0106cc2 <coalesce+0x199>
    }

    else{
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
c0106c47:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c4a:	83 e8 08             	sub    $0x8,%eax
c0106c4d:	8b 00                	mov    (%eax),%eax
c0106c4f:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c52:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106c57:	29 c2                	sub    %eax,%edx
c0106c59:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c5c:	01 d0                	add    %edx,%eax
c0106c5e:	8b 00                	mov    (%eax),%eax
c0106c60:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c63:	89 c2                	mov    %eax,%edx
c0106c65:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c68:	83 e8 04             	sub    $0x4,%eax
c0106c6b:	8b 00                	mov    (%eax),%eax
c0106c6d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c70:	8d 48 f8             	lea    -0x8(%eax),%ecx
c0106c73:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c76:	01 c8                	add    %ecx,%eax
c0106c78:	8b 00                	mov    (%eax),%eax
c0106c7a:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c7d:	01 d0                	add    %edx,%eax
c0106c7f:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(PREV_BLKP(bp)), PACK(size, 0));
c0106c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c85:	83 e8 04             	sub    $0x4,%eax
c0106c88:	8b 00                	mov    (%eax),%eax
c0106c8a:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c8d:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c90:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c93:	01 c2                	add    %eax,%edx
c0106c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c98:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(size, 0));
c0106c9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c9d:	83 e8 04             	sub    $0x4,%eax
c0106ca0:	8b 00                	mov    (%eax),%eax
c0106ca2:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ca5:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cab:	01 c2                	add    %eax,%edx
c0106cad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cb0:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106cb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cb5:	83 e8 08             	sub    $0x8,%eax
c0106cb8:	8b 00                	mov    (%eax),%eax
c0106cba:	83 e0 f8             	and    $0xfffffff8,%eax
c0106cbd:	f7 d8                	neg    %eax
c0106cbf:	01 45 08             	add    %eax,0x8(%ebp)
    }
    return bp;
c0106cc2:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106cc5:	c9                   	leave  
c0106cc6:	c3                   	ret    

c0106cc7 <find_fit>:
 * @brief find free blk
 * 
 * @param find size
 */
static void* find_fit(size_t asize)// we just traverse heap
{
c0106cc7:	55                   	push   %ebp
c0106cc8:	89 e5                	mov    %esp,%ebp
c0106cca:	83 ec 10             	sub    $0x10,%esp
    void* bp = heap_listp;
c0106ccd:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106cd2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106cd5:	eb 2f                	jmp    c0106d06 <find_fit+0x3f>
    {
        if(GET_SIZE(bp) != 0 && GET_ALLOC(bp) != 1)
c0106cd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cda:	8b 00                	mov    (%eax),%eax
c0106cdc:	83 e0 f8             	and    $0xfffffff8,%eax
c0106cdf:	85 c0                	test   %eax,%eax
c0106ce1:	74 1c                	je     c0106cff <find_fit+0x38>
c0106ce3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ce6:	8b 00                	mov    (%eax),%eax
c0106ce8:	83 e0 01             	and    $0x1,%eax
c0106ceb:	85 c0                	test   %eax,%eax
c0106ced:	75 10                	jne    c0106cff <find_fit+0x38>
            bp = NEXT_BLKP(bp);
c0106cef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cf2:	83 e8 04             	sub    $0x4,%eax
c0106cf5:	8b 00                	mov    (%eax),%eax
c0106cf7:	83 e0 f8             	and    $0xfffffff8,%eax
c0106cfa:	01 45 fc             	add    %eax,-0x4(%ebp)
c0106cfd:	eb 07                	jmp    c0106d06 <find_fit+0x3f>
        else
            return NULL;
c0106cff:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d04:	eb 22                	jmp    c0106d28 <find_fit+0x61>
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106d06:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d09:	83 e8 04             	sub    $0x4,%eax
c0106d0c:	8b 00                	mov    (%eax),%eax
c0106d0e:	83 e0 01             	and    $0x1,%eax
c0106d11:	85 c0                	test   %eax,%eax
c0106d13:	75 c2                	jne    c0106cd7 <find_fit+0x10>
c0106d15:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d18:	83 e8 04             	sub    $0x4,%eax
c0106d1b:	8b 00                	mov    (%eax),%eax
c0106d1d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d20:	39 45 08             	cmp    %eax,0x8(%ebp)
c0106d23:	77 b2                	ja     c0106cd7 <find_fit+0x10>
    }
    return bp;
c0106d25:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106d28:	c9                   	leave  
c0106d29:	c3                   	ret    

c0106d2a <place>:
 * @brief place the blk
 * 
 * @param blk,size
 */
static void place(void* bp, size_t asize)
{
c0106d2a:	55                   	push   %ebp
c0106d2b:	89 e5                	mov    %esp,%ebp
c0106d2d:	83 ec 10             	sub    $0x10,%esp
    size_t bp_allsize = GET_SIZE(HDRP(bp));
c0106d30:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d33:	83 e8 04             	sub    $0x4,%eax
c0106d36:	8b 00                	mov    (%eax),%eax
c0106d38:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d3b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t remain_size = bp_allsize - asize;
c0106d3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d41:	2b 45 0c             	sub    0xc(%ebp),%eax
c0106d44:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(remain_size >= 2*DSIZE)
c0106d47:	83 7d f8 0f          	cmpl   $0xf,-0x8(%ebp)
c0106d4b:	76 5b                	jbe    c0106da8 <place+0x7e>
    {
        PUT(HDRP(bp), PACK(asize, 1));
c0106d4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d50:	83 e8 04             	sub    $0x4,%eax
c0106d53:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106d56:	83 ca 01             	or     $0x1,%edx
c0106d59:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(asize, 1));
c0106d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d5e:	83 e8 04             	sub    $0x4,%eax
c0106d61:	8b 00                	mov    (%eax),%eax
c0106d63:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d66:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106d69:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d6c:	01 d0                	add    %edx,%eax
c0106d6e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106d71:	83 ca 01             	or     $0x1,%edx
c0106d74:	89 10                	mov    %edx,(%eax)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106d76:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d79:	83 e8 04             	sub    $0x4,%eax
c0106d7c:	8b 00                	mov    (%eax),%eax
c0106d7e:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d81:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106d84:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d87:	01 c2                	add    %eax,%edx
c0106d89:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106d8c:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106d8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d91:	83 e8 04             	sub    $0x4,%eax
c0106d94:	8b 00                	mov    (%eax),%eax
c0106d96:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d99:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106d9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d9f:	01 c2                	add    %eax,%edx
c0106da1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106da4:	89 02                	mov    %eax,(%edx)
    }else{
        PUT(HDRP(bp), PACK(bp_allsize, 1));
        PUT(FTRP(bp), PACK(bp_allsize, 1));
    }
}
c0106da6:	eb 29                	jmp    c0106dd1 <place+0xa7>
        PUT(HDRP(bp), PACK(bp_allsize, 1));
c0106da8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dab:	83 e8 04             	sub    $0x4,%eax
c0106dae:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106db1:	83 ca 01             	or     $0x1,%edx
c0106db4:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(bp_allsize, 1));
c0106db6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106db9:	83 e8 04             	sub    $0x4,%eax
c0106dbc:	8b 00                	mov    (%eax),%eax
c0106dbe:	83 e0 f8             	and    $0xfffffff8,%eax
c0106dc1:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dc7:	01 d0                	add    %edx,%eax
c0106dc9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106dcc:	83 ca 01             	or     $0x1,%edx
c0106dcf:	89 10                	mov    %edx,(%eax)
}
c0106dd1:	90                   	nop
c0106dd2:	c9                   	leave  
c0106dd3:	c3                   	ret    

c0106dd4 <mem_init>:

//following is head file function

void mem_init()
{
c0106dd4:	55                   	push   %ebp
c0106dd5:	89 e5                	mov    %esp,%ebp
c0106dd7:	83 ec 18             	sub    $0x18,%esp
    mem_heap = &__heap_start;
c0106dda:	c7 05 e4 a0 d0 c0 00 	movl   $0xc1118000,0xc0d0a0e4
c0106de1:	80 11 c1 
    //mem_heap = (char*)Malloc(MAX_HEAP);
    mem_brk = mem_heap;
c0106de4:	a1 e4 a0 d0 c0       	mov    0xc0d0a0e4,%eax
c0106de9:	a3 e8 a0 d0 c0       	mov    %eax,0xc0d0a0e8
    //mem_max_addr = (char*)(mem_heap + MAX_HEAP);
    mem_max_addr = (char*)KSTACK_START;
c0106dee:	c7 05 ec a0 d0 c0 00 	movl   $0xffbf0000,0xc0d0a0ec
c0106df5:	00 bf ff 
    uint8_t* pgaddr = 0;
c0106df8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if((pgaddr = vmm_alloc_page(KERNEL_PID, mem_brk, NULL, PG_PREM_RW, PG_PREM_RW)) == NULL)
c0106dff:	a1 e8 a0 d0 c0       	mov    0xc0d0a0e8,%eax
c0106e04:	83 ec 0c             	sub    $0xc,%esp
c0106e07:	6a 03                	push   $0x3
c0106e09:	6a 03                	push   $0x3
c0106e0b:	6a 00                	push   $0x0
c0106e0d:	50                   	push   %eax
c0106e0e:	6a ff                	push   $0xffffffff
c0106e10:	e8 12 09 00 00       	call   c0107727 <vmm_alloc_page>
c0106e15:	83 c4 20             	add    $0x20,%esp
c0106e18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e1f:	74 1a                	je     c0106e3b <mem_init+0x67>
        return;
    kprintf("malloc init phy address is 0x%x\n", pgaddr);
c0106e21:	83 ec 08             	sub    $0x8,%esp
c0106e24:	ff 75 f4             	push   -0xc(%ebp)
c0106e27:	68 a8 d1 d0 c0       	push   $0xc0d0d1a8
c0106e2c:	e8 00 2d 00 00       	call   c0109b31 <kprintf>
c0106e31:	83 c4 10             	add    $0x10,%esp
    malloc_init();
c0106e34:	e8 bb 00 00 00       	call   c0106ef4 <malloc_init>
c0106e39:	eb 01                	jmp    c0106e3c <mem_init+0x68>
        return;
c0106e3b:	90                   	nop
}
c0106e3c:	c9                   	leave  
c0106e3d:	c3                   	ret    

c0106e3e <mem_sbrk>:

void* mem_sbrk(int incr)
{
c0106e3e:	55                   	push   %ebp
c0106e3f:	89 e5                	mov    %esp,%ebp
c0106e41:	83 ec 18             	sub    $0x18,%esp
    char* old = mem_brk;
c0106e44:	a1 e8 a0 d0 c0       	mov    0xc0d0a0e8,%eax
c0106e49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if((incr < 0) || ((mem_brk + incr) > mem_max_addr))
c0106e4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106e50:	78 14                	js     c0106e66 <mem_sbrk+0x28>
c0106e52:	8b 15 e8 a0 d0 c0    	mov    0xc0d0a0e8,%edx
c0106e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e5b:	01 c2                	add    %eax,%edx
c0106e5d:	a1 ec a0 d0 c0       	mov    0xc0d0a0ec,%eax
c0106e62:	39 c2                	cmp    %eax,%edx
c0106e64:	76 0a                	jbe    c0106e70 <mem_sbrk+0x32>
    {
        return (void*)-1;
c0106e66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106e6b:	e9 82 00 00 00       	jmp    c0106ef2 <mem_sbrk+0xb4>
    }
    char* new = mem_brk + incr;
c0106e70:	8b 15 e8 a0 d0 c0    	mov    0xc0d0a0e8,%edx
c0106e76:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e79:	01 d0                	add    %edx,%eax
c0106e7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned int diff = PG_ALIGN(new) - PG_ALIGN(old);
c0106e7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e86:	89 c2                	mov    %eax,%edx
c0106e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e90:	89 c1                	mov    %eax,%ecx
c0106e92:	89 d0                	mov    %edx,%eax
c0106e94:	29 c8                	sub    %ecx,%eax
c0106e96:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(diff)
c0106e99:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106e9d:	74 40                	je     c0106edf <mem_sbrk+0xa1>
    {
        uint8_t* pgaddr = -1;
c0106e9f:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
        if(!(pgaddr = vmm_alloc_page(KERNEL_PID, new, NULL, PG_PREM_RW,PG_PREM_RW)))
c0106ea6:	83 ec 0c             	sub    $0xc,%esp
c0106ea9:	6a 03                	push   $0x3
c0106eab:	6a 03                	push   $0x3
c0106ead:	6a 00                	push   $0x0
c0106eaf:	ff 75 f0             	push   -0x10(%ebp)
c0106eb2:	6a ff                	push   $0xffffffff
c0106eb4:	e8 6e 08 00 00       	call   c0107727 <vmm_alloc_page>
c0106eb9:	83 c4 20             	add    $0x20,%esp
c0106ebc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106ebf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106ec3:	75 07                	jne    c0106ecc <mem_sbrk+0x8e>
        {
            return NULL;
c0106ec5:	b8 00 00 00 00       	mov    $0x0,%eax
c0106eca:	eb 26                	jmp    c0106ef2 <mem_sbrk+0xb4>
        }
        kprintf("head new page is 0x%x\n", pgaddr);
c0106ecc:	83 ec 08             	sub    $0x8,%esp
c0106ecf:	ff 75 e8             	push   -0x18(%ebp)
c0106ed2:	68 c9 d1 d0 c0       	push   $0xc0d0d1c9
c0106ed7:	e8 55 2c 00 00       	call   c0109b31 <kprintf>
c0106edc:	83 c4 10             	add    $0x10,%esp
    }
    mem_brk += incr;
c0106edf:	8b 15 e8 a0 d0 c0    	mov    0xc0d0a0e8,%edx
c0106ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ee8:	01 d0                	add    %edx,%eax
c0106eea:	a3 e8 a0 d0 c0       	mov    %eax,0xc0d0a0e8
    return (void*)old;
c0106eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106ef2:	c9                   	leave  
c0106ef3:	c3                   	ret    

c0106ef4 <malloc_init>:

int malloc_init()
{
c0106ef4:	55                   	push   %ebp
c0106ef5:	89 e5                	mov    %esp,%ebp
c0106ef7:	83 ec 08             	sub    $0x8,%esp
    if((heap_listp = mem_sbrk(4 * WSIZE)) == (void*) - 1)
c0106efa:	83 ec 0c             	sub    $0xc,%esp
c0106efd:	6a 10                	push   $0x10
c0106eff:	e8 3a ff ff ff       	call   c0106e3e <mem_sbrk>
c0106f04:	83 c4 10             	add    $0x10,%esp
c0106f07:	a3 e0 a0 d0 c0       	mov    %eax,0xc0d0a0e0
c0106f0c:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f11:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106f14:	75 07                	jne    c0106f1d <malloc_init+0x29>
        return -1;
c0106f16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106f1b:	eb 62                	jmp    c0106f7f <malloc_init+0x8b>
    PUT(heap_listp, 0);
c0106f1d:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f22:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));
c0106f28:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f2d:	83 c0 04             	add    $0x4,%eax
c0106f30:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));
c0106f36:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f3b:	83 c0 08             	add    $0x8,%eax
c0106f3e:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));
c0106f44:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f49:	83 c0 0c             	add    $0xc,%eax
c0106f4c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    heap_listp += (2*WSIZE);
c0106f52:	a1 e0 a0 d0 c0       	mov    0xc0d0a0e0,%eax
c0106f57:	83 c0 08             	add    $0x8,%eax
c0106f5a:	a3 e0 a0 d0 c0       	mov    %eax,0xc0d0a0e0

    //extend free heap with free blk og CHUNKSIZE size
    //mem_sbrk((CHUNKSIZE - WSIZE));
    if(extend_heap((CHUNKSIZE - WSIZE)  / WSIZE) == NULL)
c0106f5f:	83 ec 0c             	sub    $0xc,%esp
c0106f62:	68 ff 03 00 00       	push   $0x3ff
c0106f67:	e8 33 fb ff ff       	call   c0106a9f <extend_heap>
c0106f6c:	83 c4 10             	add    $0x10,%esp
c0106f6f:	85 c0                	test   %eax,%eax
c0106f71:	75 07                	jne    c0106f7a <malloc_init+0x86>
        return -1;
c0106f73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106f78:	eb 05                	jmp    c0106f7f <malloc_init+0x8b>
    return 0;
c0106f7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f7f:	c9                   	leave  
c0106f80:	c3                   	ret    

c0106f81 <malloc_free>:

void malloc_free(void* bp)
{
c0106f81:	55                   	push   %ebp
c0106f82:	89 e5                	mov    %esp,%ebp
c0106f84:	83 ec 10             	sub    $0x10,%esp
    size_t size = GET_SIZE(HDRP(bp));
c0106f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f8a:	83 e8 04             	sub    $0x4,%eax
c0106f8d:	8b 00                	mov    (%eax),%eax
c0106f8f:	83 e0 f8             	and    $0xfffffff8,%eax
c0106f92:	89 45 fc             	mov    %eax,-0x4(%ebp)

    PUT(HDRP(bp), PACK(size, 0));
c0106f95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f98:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106f9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f9e:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0));
c0106fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa3:	83 e8 04             	sub    $0x4,%eax
c0106fa6:	8b 00                	mov    (%eax),%eax
c0106fa8:	83 e0 f8             	and    $0xfffffff8,%eax
c0106fab:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fb1:	01 c2                	add    %eax,%edx
c0106fb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fb6:	89 02                	mov    %eax,(%edx)
    coalesce(bp);
c0106fb8:	ff 75 08             	push   0x8(%ebp)
c0106fbb:	e8 69 fb ff ff       	call   c0106b29 <coalesce>
c0106fc0:	83 c4 04             	add    $0x4,%esp
}
c0106fc3:	90                   	nop
c0106fc4:	c9                   	leave  
c0106fc5:	c3                   	ret    

c0106fc6 <k_malloc>:

void* k_malloc(size_t size)
{
c0106fc6:	55                   	push   %ebp
c0106fc7:	89 e5                	mov    %esp,%ebp
c0106fc9:	83 ec 18             	sub    $0x18,%esp
    size_t asize;
    size_t extendsize;
    char* bp;

    if(size == 0)
c0106fcc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106fd0:	75 0a                	jne    c0106fdc <k_malloc+0x16>
        return NULL;
c0106fd2:	b8 00 00 00 00       	mov    $0x0,%eax
c0106fd7:	e9 8a 00 00 00       	jmp    c0107066 <k_malloc+0xa0>
    
    //THE MIN blk is 2*DSIZE, ONE DSIZE means head and foot, one is align
    if(size <= DSIZE)
c0106fdc:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0106fe0:	77 09                	ja     c0106feb <k_malloc+0x25>
        asize = 2 * DSIZE;
c0106fe2:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c0106fe9:	eb 0e                	jmp    c0106ff9 <k_malloc+0x33>
    else
        asize = DSIZE * ((size + DSIZE) + (DSIZE - 1)) / DSIZE; // Round up 
c0106feb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fee:	83 c0 0f             	add    $0xf,%eax
c0106ff1:	25 ff ff ff 1f       	and    $0x1fffffff,%eax
c0106ff6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //search the free list of fit
    if((bp = find_fit(asize)) != NULL)
c0106ff9:	ff 75 f4             	push   -0xc(%ebp)
c0106ffc:	e8 c6 fc ff ff       	call   c0106cc7 <find_fit>
c0107001:	83 c4 04             	add    $0x4,%esp
c0107004:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107007:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010700b:	74 13                	je     c0107020 <k_malloc+0x5a>
    {
        place(bp, asize);
c010700d:	ff 75 f4             	push   -0xc(%ebp)
c0107010:	ff 75 f0             	push   -0x10(%ebp)
c0107013:	e8 12 fd ff ff       	call   c0106d2a <place>
c0107018:	83 c4 08             	add    $0x8,%esp
        return bp;
c010701b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010701e:	eb 46                	jmp    c0107066 <k_malloc+0xa0>
    }

    //no fit found try to extend head mem
    extendsize = MAX(asize, CHUNKSIZE);
c0107020:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107023:	ba 00 10 00 00       	mov    $0x1000,%edx
c0107028:	39 d0                	cmp    %edx,%eax
c010702a:	0f 42 c2             	cmovb  %edx,%eax
c010702d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((bp = extend_heap(extendsize / WSIZE)) == NULL)
c0107030:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107033:	c1 e8 02             	shr    $0x2,%eax
c0107036:	83 ec 0c             	sub    $0xc,%esp
c0107039:	50                   	push   %eax
c010703a:	e8 60 fa ff ff       	call   c0106a9f <extend_heap>
c010703f:	83 c4 10             	add    $0x10,%esp
c0107042:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107045:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107049:	75 07                	jne    c0107052 <k_malloc+0x8c>
        return NULL;
c010704b:	b8 00 00 00 00       	mov    $0x0,%eax
c0107050:	eb 14                	jmp    c0107066 <k_malloc+0xa0>
    place(bp, asize);
c0107052:	83 ec 08             	sub    $0x8,%esp
c0107055:	ff 75 f4             	push   -0xc(%ebp)
c0107058:	ff 75 f0             	push   -0x10(%ebp)
c010705b:	e8 ca fc ff ff       	call   c0106d2a <place>
c0107060:	83 c4 10             	add    $0x10,%esp
    return bp;
c0107063:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107066:	c9                   	leave  
c0107067:	c3                   	ret    

c0107068 <cpu_rcr2>:
{
c0107068:	55                   	push   %ebp
c0107069:	89 e5                	mov    %esp,%ebp
c010706b:	83 ec 10             	sub    $0x10,%esp
    asm volatile("movl %%cr2,%0" : "=r" (val));
c010706e:	0f 20 d0             	mov    %cr2,%eax
c0107071:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return val;
c0107074:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107077:	c9                   	leave  
c0107078:	c3                   	ret    

c0107079 <cpu_invplg>:

reg32 cpu_r_cr3();


static inline void cpu_invplg(void* va)
{
c0107079:	55                   	push   %ebp
c010707a:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c010707c:	8b 45 08             	mov    0x8(%ebp),%eax
c010707f:	0f 01 38             	invlpg (%eax)
};
c0107082:	90                   	nop
c0107083:	5d                   	pop    %ebp
c0107084:	c3                   	ret    

c0107085 <do_page_fault>:
#include <kernel/memory/phy_mem.h>
#include <libs/mstdio.h>
#include <status.h>

void do_page_fault(unsigned long err_code, unsigned long address)
{
c0107085:	55                   	push   %ebp
c0107086:	89 e5                	mov    %esp,%ebp
c0107088:	83 ec 28             	sub    $0x28,%esp
    uintptr_t ptr = cpu_rcr2();
c010708b:	e8 d8 ff ff ff       	call   c0107068 <cpu_rcr2>
c0107090:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!ptr) {
c0107093:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107097:	0f 84 ea 00 00 00    	je     c0107187 <do_page_fault+0x102>
        goto segv_term;
    }

    struct mm_region* hit_region = region_get(__current, ptr);
c010709d:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01070a2:	83 ec 08             	sub    $0x8,%esp
c01070a5:	ff 75 f4             	push   -0xc(%ebp)
c01070a8:	50                   	push   %eax
c01070a9:	e8 8a 02 00 00       	call   c0107338 <region_get>
c01070ae:	83 c4 10             	add    $0x10,%esp
c01070b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!hit_region) {
c01070b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01070b8:	0f 84 cc 00 00 00    	je     c010718a <do_page_fault+0x105>
        // Into the void...
        goto segv_term;
    }

    ptd_t* pte = PTE_MOUNTED(PD_REFERENCED, ptr >> 12);
c01070be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070c1:	c1 e8 0c             	shr    $0xc,%eax
c01070c4:	25 ff 03 00 00       	and    $0x3ff,%eax
c01070c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01070d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070d3:	c1 e8 0c             	shr    $0xc,%eax
c01070d6:	c1 e0 02             	shl    $0x2,%eax
c01070d9:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c01070de:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01070e3:	01 d0                	add    %edx,%eax
c01070e5:	8b 00                	mov    (%eax),%eax
c01070e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (*pte & PG_PRESENT) {
c01070ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070ed:	8b 00                	mov    (%eax),%eax
c01070ef:	83 e0 01             	and    $0x1,%eax
c01070f2:	85 c0                	test   %eax,%eax
c01070f4:	0f 85 93 00 00 00    	jne    c010718d <do_page_fault+0x108>
        }
        // impossible cases or accessing privileged page
        goto segv_term;
    }

    if (!(*pte)) {
c01070fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070fd:	8b 00                	mov    (%eax),%eax
c01070ff:	85 c0                	test   %eax,%eax
c0107101:	0f 84 89 00 00 00    	je     c0107190 <do_page_fault+0x10b>
        // Invalid location
        goto segv_term;
    }
    uintptr_t loc = *pte & ~0xfff;
c0107107:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010710a:	8b 00                	mov    (%eax),%eax
c010710c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107111:	89 45 e8             	mov    %eax,-0x18(%ebp)
    // a writable page, not present, pte attr is not null
    //   and no indication of cached page -> a new page need to be alloc
    if ((hit_region->attr & REGION_WRITE) && (*pte & 0xfff) && !loc) {
c0107114:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107117:	8b 40 10             	mov    0x10(%eax),%eax
c010711a:	83 e0 08             	and    $0x8,%eax
c010711d:	85 c0                	test   %eax,%eax
c010711f:	74 4e                	je     c010716f <do_page_fault+0xea>
c0107121:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107124:	8b 00                	mov    (%eax),%eax
c0107126:	25 ff 0f 00 00       	and    $0xfff,%eax
c010712b:	85 c0                	test   %eax,%eax
c010712d:	74 40                	je     c010716f <do_page_fault+0xea>
c010712f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107133:	75 3a                	jne    c010716f <do_page_fault+0xea>
        cpu_invplg(pte);
c0107135:	83 ec 0c             	sub    $0xc,%esp
c0107138:	ff 75 ec             	push   -0x14(%ebp)
c010713b:	e8 39 ff ff ff       	call   c0107079 <cpu_invplg>
c0107140:	83 c4 10             	add    $0x10,%esp
        uintptr_t pa = pmm_alloc_page(__current->pid, 0);
c0107143:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107148:	8b 00                	mov    (%eax),%eax
c010714a:	83 ec 08             	sub    $0x8,%esp
c010714d:	6a 00                	push   $0x0
c010714f:	50                   	push   %eax
c0107150:	e8 16 f7 ff ff       	call   c010686b <pmm_alloc_page>
c0107155:	83 c4 10             	add    $0x10,%esp
c0107158:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *pte = *pte | pa | PG_PRESENT;
c010715b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010715e:	8b 00                	mov    (%eax),%eax
c0107160:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0107163:	83 c8 01             	or     $0x1,%eax
c0107166:	89 c2                	mov    %eax,%edx
c0107168:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010716b:	89 10                	mov    %edx,(%eax)
        return;
c010716d:	eb 4c                	jmp    c01071bb <do_page_fault+0x136>
    }
    // page not present, bring it from disk or somewhere else
    kprintf("WIP page fault route,errcode = 0x%x,wrong address = 0x%x, pageaddress is 0x%x",err_code, address, ptr);
c010716f:	ff 75 f4             	push   -0xc(%ebp)
c0107172:	ff 75 0c             	push   0xc(%ebp)
c0107175:	ff 75 08             	push   0x8(%ebp)
c0107178:	68 e0 d1 d0 c0       	push   $0xc0d0d1e0
c010717d:	e8 af 29 00 00       	call   c0109b31 <kprintf>
c0107182:	83 c4 10             	add    $0x10,%esp
    while (1)
c0107185:	eb fe                	jmp    c0107185 <do_page_fault+0x100>
        goto segv_term;
c0107187:	90                   	nop
c0107188:	eb 07                	jmp    c0107191 <do_page_fault+0x10c>
        goto segv_term;
c010718a:	90                   	nop
c010718b:	eb 04                	jmp    c0107191 <do_page_fault+0x10c>
        goto segv_term;
c010718d:	90                   	nop
c010718e:	eb 01                	jmp    c0107191 <do_page_fault+0x10c>
        goto segv_term;
c0107190:	90                   	nop
        ;

segv_term:
    kprintf("[KERROR] (pid: %d) Segmentation fault on %x (%x)\n",
            __current->pid,
c0107191:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107196:	8b 00                	mov    (%eax),%eax
    kprintf("[KERROR] (pid: %d) Segmentation fault on %x (%x)\n",
c0107198:	ff 75 0c             	push   0xc(%ebp)
c010719b:	ff 75 f4             	push   -0xc(%ebp)
c010719e:	50                   	push   %eax
c010719f:	68 30 d2 d0 c0       	push   $0xc0d0d230
c01071a4:	e8 88 29 00 00       	call   c0109b31 <kprintf>
c01071a9:	83 c4 10             	add    $0x10,%esp
            ptr,
            address);
    terminate_proc(MXSEGFAULT);
c01071ac:	83 ec 0c             	sub    $0xc,%esp
c01071af:	6a fb                	push   $0xfffffffb
c01071b1:	e8 62 27 00 00       	call   c0109918 <terminate_proc>
c01071b6:	83 c4 10             	add    $0x10,%esp
    while(1);
c01071b9:	eb fe                	jmp    c01071b9 <do_page_fault+0x134>
    // should not reach
c01071bb:	c9                   	leave  
c01071bc:	c3                   	ret    

c01071bd <page_fault>:
c01071bd:	87 04 24             	xchg   %eax,(%esp)
c01071c0:	51                   	push   %ecx
c01071c1:	52                   	push   %edx
c01071c2:	1e                   	push   %ds
c01071c3:	06                   	push   %es
c01071c4:	0f a0                	push   %fs
c01071c6:	ba 10 00 00 00       	mov    $0x10,%edx
c01071cb:	8e da                	mov    %edx,%ds
c01071cd:	8e c2                	mov    %edx,%es
c01071cf:	8e e2                	mov    %edx,%fs
c01071d1:	8d 54 24 18          	lea    0x18(%esp),%edx
c01071d5:	52                   	push   %edx
c01071d6:	50                   	push   %eax
c01071d7:	e8 a9 fe ff ff       	call   c0107085 <do_page_fault>
c01071dc:	0f a1                	pop    %fs
c01071de:	07                   	pop    %es
c01071df:	1f                   	pop    %ds
c01071e0:	5a                   	pop    %edx
c01071e1:	59                   	pop    %ecx
c01071e2:	58                   	pop    %eax
c01071e3:	cf                   	iret   

c01071e4 <__llist_add>:
};

static inline void __llist_add(struct llist_header* elem,
            struct llist_header* prev,
            struct llist_header* next)
{
c01071e4:	55                   	push   %ebp
c01071e5:	89 e5                	mov    %esp,%ebp
    next->prev = elem;
c01071e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01071ea:	8b 55 08             	mov    0x8(%ebp),%edx
c01071ed:	89 10                	mov    %edx,(%eax)
    elem->next = next;
c01071ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01071f2:	8b 55 10             	mov    0x10(%ebp),%edx
c01071f5:	89 50 04             	mov    %edx,0x4(%eax)
    elem->prev = prev;
c01071f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01071fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01071fe:	89 10                	mov    %edx,(%eax)
    prev->next = elem;
c0107200:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107203:	8b 55 08             	mov    0x8(%ebp),%edx
c0107206:	89 50 04             	mov    %edx,0x4(%eax)
}
c0107209:	90                   	nop
c010720a:	5d                   	pop    %ebp
c010720b:	c3                   	ret    

c010720c <llist_init_head>:

static inline void llist_init_head(struct llist_header* head) {
c010720c:	55                   	push   %ebp
c010720d:	89 e5                	mov    %esp,%ebp
    head->next = head;
c010720f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107212:	8b 55 08             	mov    0x8(%ebp),%edx
c0107215:	89 50 04             	mov    %edx,0x4(%eax)
    head->prev = head;
c0107218:	8b 45 08             	mov    0x8(%ebp),%eax
c010721b:	8b 55 08             	mov    0x8(%ebp),%edx
c010721e:	89 10                	mov    %edx,(%eax)
}
c0107220:	90                   	nop
c0107221:	5d                   	pop    %ebp
c0107222:	c3                   	ret    

c0107223 <llist_append>:

static inline void llist_append(struct llist_header* head, struct llist_header* elem)
{
c0107223:	55                   	push   %ebp
c0107224:	89 e5                	mov    %esp,%ebp
    __llist_add(elem, head, head->next);
c0107226:	8b 45 08             	mov    0x8(%ebp),%eax
c0107229:	8b 40 04             	mov    0x4(%eax),%eax
c010722c:	50                   	push   %eax
c010722d:	ff 75 08             	push   0x8(%ebp)
c0107230:	ff 75 0c             	push   0xc(%ebp)
c0107233:	e8 ac ff ff ff       	call   c01071e4 <__llist_add>
c0107238:	83 c4 0c             	add    $0xc,%esp
}
c010723b:	90                   	nop
c010723c:	c9                   	leave  
c010723d:	c3                   	ret    

c010723e <region_add>:
#include <kernel/memory/region.h>
#include <kernel/memory/malloc.h>
#include <libs/list.h>
void region_add(struct m_pcb* proc,unsigned long start, unsigned long end, unsigned int attr) {
c010723e:	55                   	push   %ebp
c010723f:	89 e5                	mov    %esp,%ebp
c0107241:	83 ec 28             	sub    $0x28,%esp
    struct mm_region* region = k_malloc(sizeof(struct mm_region));
c0107244:	83 ec 0c             	sub    $0xc,%esp
c0107247:	6a 14                	push   $0x14
c0107249:	e8 78 fd ff ff       	call   c0106fc6 <k_malloc>
c010724e:	83 c4 10             	add    $0x10,%esp
c0107251:	89 45 f4             	mov    %eax,-0xc(%ebp)

    *region = (struct mm_region) {
c0107254:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107257:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010725d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0107264:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010726b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
c0107272:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c0107279:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010727c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010727f:	89 50 08             	mov    %edx,0x8(%eax)
c0107282:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107285:	8b 55 10             	mov    0x10(%ebp),%edx
c0107288:	89 50 0c             	mov    %edx,0xc(%eax)
c010728b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010728e:	8b 55 14             	mov    0x14(%ebp),%edx
c0107291:	89 50 10             	mov    %edx,0x10(%eax)
        .attr = attr,
        .end = end,
        .start = start
    };
    if (!proc->process_mm) {
c0107294:	8b 45 08             	mov    0x8(%ebp),%eax
c0107297:	8b 40 58             	mov    0x58(%eax),%eax
c010729a:	85 c0                	test   %eax,%eax
c010729c:	75 1a                	jne    c01072b8 <region_add+0x7a>
        llist_init_head(&region->head);
c010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072a1:	83 ec 0c             	sub    $0xc,%esp
c01072a4:	50                   	push   %eax
c01072a5:	e8 62 ff ff ff       	call   c010720c <llist_init_head>
c01072aa:	83 c4 10             	add    $0x10,%esp
        proc->process_mm = region;
c01072ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01072b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072b3:	89 50 58             	mov    %edx,0x58(%eax)
    }
    else {
        llist_append(&proc->process_mm->head, &region->head);
    }
}
c01072b6:	eb 16                	jmp    c01072ce <region_add+0x90>
        llist_append(&proc->process_mm->head, &region->head);
c01072b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072bb:	8b 55 08             	mov    0x8(%ebp),%edx
c01072be:	8b 52 58             	mov    0x58(%edx),%edx
c01072c1:	83 ec 08             	sub    $0x8,%esp
c01072c4:	50                   	push   %eax
c01072c5:	52                   	push   %edx
c01072c6:	e8 58 ff ff ff       	call   c0107223 <llist_append>
c01072cb:	83 c4 10             	add    $0x10,%esp
}
c01072ce:	90                   	nop
c01072cf:	c9                   	leave  
c01072d0:	c3                   	ret    

c01072d1 <region_release_all>:

void region_release_all(struct m_pcb* proc) {
c01072d1:	55                   	push   %ebp
c01072d2:	89 e5                	mov    %esp,%ebp
c01072d4:	83 ec 28             	sub    $0x28,%esp
    struct mm_region* head = proc->process_mm;
c01072d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01072da:	8b 40 58             	mov    0x58(%eax),%eax
c01072dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct mm_region *pos, *n;

    llist_for_each(pos, n, &head->head, head) {
c01072e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01072e3:	8b 40 04             	mov    0x4(%eax),%eax
c01072e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01072e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01072ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072f2:	8b 40 04             	mov    0x4(%eax),%eax
c01072f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01072f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01072fe:	eb 23                	jmp    c0107323 <region_release_all+0x52>
        malloc_free(pos);
c0107300:	83 ec 0c             	sub    $0xc,%esp
c0107303:	ff 75 f4             	push   -0xc(%ebp)
c0107306:	e8 76 fc ff ff       	call   c0106f81 <malloc_free>
c010730b:	83 c4 10             	add    $0x10,%esp
    llist_for_each(pos, n, &head->head, head) {
c010730e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107311:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107314:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107317:	8b 40 04             	mov    0x4(%eax),%eax
c010731a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010731d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107320:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107323:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107326:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107329:	75 d5                	jne    c0107300 <region_release_all+0x2f>
    }

    proc->process_mm = NULL;
c010732b:	8b 45 08             	mov    0x8(%ebp),%eax
c010732e:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
}
c0107335:	90                   	nop
c0107336:	c9                   	leave  
c0107337:	c3                   	ret    

c0107338 <region_get>:

struct mm_region* region_get(struct m_pcb* proc, unsigned long vaddr) {
c0107338:	55                   	push   %ebp
c0107339:	89 e5                	mov    %esp,%ebp
c010733b:	83 ec 20             	sub    $0x20,%esp
    struct mm_region* head = proc->process_mm;
c010733e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107341:	8b 40 58             	mov    0x58(%eax),%eax
c0107344:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!head) {
c0107347:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010734b:	75 07                	jne    c0107354 <region_get+0x1c>
        return NULL;
c010734d:	b8 00 00 00 00       	mov    $0x0,%eax
c0107352:	eb 5d                	jmp    c01073b1 <region_get+0x79>
    }

    struct mm_region *pos, *n;

    llist_for_each(pos, n, &head->head, head) {
c0107354:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107357:	8b 40 04             	mov    0x4(%eax),%eax
c010735a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010735d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107360:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107363:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107366:	8b 40 04             	mov    0x4(%eax),%eax
c0107369:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010736c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010736f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107372:	eb 30                	jmp    c01073a4 <region_get+0x6c>
        if (vaddr >= pos->start && vaddr < pos->end) {
c0107374:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107377:	8b 40 08             	mov    0x8(%eax),%eax
c010737a:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010737d:	72 10                	jb     c010738f <region_get+0x57>
c010737f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107382:	8b 40 0c             	mov    0xc(%eax),%eax
c0107385:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0107388:	73 05                	jae    c010738f <region_get+0x57>
            return pos;
c010738a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010738d:	eb 22                	jmp    c01073b1 <region_get+0x79>
    llist_for_each(pos, n, &head->head, head) {
c010738f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107392:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107395:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107398:	8b 40 04             	mov    0x4(%eax),%eax
c010739b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010739e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01073a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01073aa:	75 c8                	jne    c0107374 <region_get+0x3c>
        }
    }
    return NULL;
c01073ac:	b8 00 00 00 00       	mov    $0x0,%eax
c01073b1:	c9                   	leave  
c01073b2:	c3                   	ret    

c01073b3 <cpu_invplg>:
{
c01073b3:	55                   	push   %ebp
c01073b4:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c01073b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01073b9:	0f 01 38             	invlpg (%eax)
};
c01073bc:	90                   	nop
c01073bd:	5d                   	pop    %ebp
c01073be:	c3                   	ret    

c01073bf <vmm_init>:
#include <kernel/memory/vir_mem.h>
#include <libs/mstring.h>
#include <libs/mstdio.h>

void vmm_init() {
c01073bf:	55                   	push   %ebp
c01073c0:	89 e5                	mov    %esp,%ebp
    // TODO: something here?
}
c01073c2:	90                   	nop
c01073c3:	5d                   	pop    %ebp
c01073c4:	c3                   	ret    

c01073c5 <get_pd>:

// TODO: Move these nasty inline asm stuff into hal
//      These should be arch dependent
ptd_t* get_pd() {
c01073c5:	55                   	push   %ebp
c01073c6:	89 e5                	mov    %esp,%ebp
c01073c8:	83 ec 10             	sub    $0x10,%esp
    ptd_t* pd;
    #ifdef __ARCH_IA32
    __asm__(
c01073cb:	0f 20 d8             	mov    %cr3,%eax
c01073ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01073d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "movl %%cr3, %0\n"
        "andl $0xfffff000, %0"
        : "=r"(pd)
    );
    #endif
    return P2V(pd);
c01073d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073d9:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01073de:	c9                   	leave  
c01073df:	c3                   	ret    

c01073e0 <set_pd>:

void set_pd(ptd_t* pd) {
c01073e0:	55                   	push   %ebp
c01073e1:	89 e5                	mov    %esp,%ebp
    #ifdef __ARCH_IA32
    __asm__(
c01073e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01073e6:	89 c0                	mov    %eax,%eax
c01073e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01073ed:	0f 22 d8             	mov    %eax,%cr3
        "movl %%eax, %%cr3\n"
        :
        : "r" (pd)
    );
    #endif
}
c01073f0:	90                   	nop
c01073f1:	5d                   	pop    %ebp
c01073f2:	c3                   	ret    

c01073f3 <vmm_init_pd>:

ptd_t* vmm_init_pd() {
c01073f3:	55                   	push   %ebp
c01073f4:	89 e5                	mov    %esp,%ebp
c01073f6:	83 ec 18             	sub    $0x18,%esp
    ptd_t* dir = pmm_alloc_page(KERNEL_PID, PP_FGPERSIST);
c01073f9:	83 ec 08             	sub    $0x8,%esp
c01073fc:	6a 01                	push   $0x1
c01073fe:	6a ff                	push   $0xffffffff
c0107400:	e8 66 f4 ff ff       	call   c010686b <pmm_alloc_page>
c0107405:	83 c4 10             	add    $0x10,%esp
c0107408:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (size_t i = 0; i < 1024; i++)
c010740b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107412:	eb 19                	jmp    c010742d <vmm_init_pd+0x3a>
    {
        dir[i] = 0;
c0107414:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107417:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010741e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107421:	01 d0                	add    %edx,%eax
c0107423:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < 1024; i++)
c0107429:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010742d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107434:	76 de                	jbe    c0107414 <vmm_init_pd+0x21>
    }
    
    // 自己映射自己，方便我们在软件层面进行查表地址转换
    dir[1023] = PDE(T_SELF_REF_PERM, dir);
c0107436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107439:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010743e:	89 c2                	mov    %eax,%edx
c0107440:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107443:	05 fc 0f 00 00       	add    $0xffc,%eax
c0107448:	83 ca 1b             	or     $0x1b,%edx
c010744b:	89 10                	mov    %edx,(%eax)

    return dir;
c010744d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107450:	c9                   	leave  
c0107451:	c3                   	ret    

c0107452 <__vmm_map_alloc>:
                   uint32_t l1_inx,
                   uint32_t l2_inx,
                   uintptr_t pa,
                   pt_attr attr,
                   int forced)
{
c0107452:	55                   	push   %ebp
c0107453:	89 e5                	mov    %esp,%ebp
c0107455:	53                   	push   %ebx
c0107456:	83 ec 14             	sub    $0x14,%esp
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c0107459:	c7 45 f4 00 f0 ff ff 	movl   $0xfffff000,-0xc(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(l1_inx);
c0107460:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107463:	c1 e0 0c             	shl    $0xc,%eax
c0107466:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c010746b:	89 45 f0             	mov    %eax,-0x10(%ebp)


    // See if attr make sense
    if(attr > 128)
c010746e:	81 7d 18 80 00 00 00 	cmpl   $0x80,0x18(%ebp)
c0107475:	76 1a                	jbe    c0107491 <__vmm_map_alloc+0x3f>
    {
        kprintf("__vmm_map_alloc false, attr > 128!");
c0107477:	83 ec 0c             	sub    $0xc,%esp
c010747a:	68 64 d2 d0 c0       	push   $0xc0d0d264
c010747f:	e8 ad 26 00 00       	call   c0109b31 <kprintf>
c0107484:	83 c4 10             	add    $0x10,%esp
        return 0;
c0107487:	b8 00 00 00 00       	mov    $0x0,%eax
c010748c:	e9 ea 00 00 00       	jmp    c010757b <__vmm_map_alloc+0x129>
    }

    if (!ptd[l1_inx]) {
c0107491:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107494:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010749b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010749e:	01 d0                	add    %edx,%eax
c01074a0:	8b 00                	mov    (%eax),%eax
c01074a2:	85 c0                	test   %eax,%eax
c01074a4:	75 6b                	jne    c0107511 <__vmm_map_alloc+0xbf>
        uint8_t* new_pt_pa = pmm_alloc_page(pid, PP_FGPERSIST);
c01074a6:	83 ec 08             	sub    $0x8,%esp
c01074a9:	6a 01                	push   $0x1
c01074ab:	ff 75 08             	push   0x8(%ebp)
c01074ae:	e8 b8 f3 ff ff       	call   c010686b <pmm_alloc_page>
c01074b3:	83 c4 10             	add    $0x10,%esp
c01074b6:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 物理内存已满！
        if (!new_pt_pa) {
c01074b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01074bd:	75 0a                	jne    c01074c9 <__vmm_map_alloc+0x77>
            return 0;
c01074bf:	b8 00 00 00 00       	mov    $0x0,%eax
c01074c4:	e9 b2 00 00 00       	jmp    c010757b <__vmm_map_alloc+0x129>
        }

        // This must be writable
        ptd[l1_inx] = PDE(attr | PG_WRITE, new_pt_pa);
c01074c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01074d1:	89 c1                	mov    %eax,%ecx
c01074d3:	8b 45 18             	mov    0x18(%ebp),%eax
c01074d6:	83 c8 0a             	or     $0xa,%eax
c01074d9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01074de:	89 c2                	mov    %eax,%edx
c01074e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01074e3:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01074ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074ed:	01 d8                	add    %ebx,%eax
c01074ef:	09 ca                	or     %ecx,%edx
c01074f1:	89 10                	mov    %edx,(%eax)
        memset((void*)PT_VADDR(l1_inx), 0, PM_PAGE_SIZE);
c01074f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01074f6:	c1 e0 0c             	shl    $0xc,%eax
c01074f9:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01074fe:	83 ec 04             	sub    $0x4,%esp
c0107501:	68 00 10 00 00       	push   $0x1000
c0107506:	6a 00                	push   $0x0
c0107508:	50                   	push   %eax
c0107509:	e8 ba 28 00 00       	call   c0109dc8 <memset>
c010750e:	83 c4 10             	add    $0x10,%esp
    }

    if (pt[l2_inx]) {
c0107511:	8b 45 10             	mov    0x10(%ebp),%eax
c0107514:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010751b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010751e:	01 d0                	add    %edx,%eax
c0107520:	8b 00                	mov    (%eax),%eax
c0107522:	85 c0                	test   %eax,%eax
c0107524:	74 0d                	je     c0107533 <__vmm_map_alloc+0xe1>
        if (!forced) {
c0107526:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010752a:	75 07                	jne    c0107533 <__vmm_map_alloc+0xe1>
            return 0;
c010752c:	b8 00 00 00 00       	mov    $0x0,%eax
c0107531:	eb 48                	jmp    c010757b <__vmm_map_alloc+0x129>
        }
    }

    if ((HAS_FLAGS(attr, PG_PRESENT))) {
c0107533:	8b 45 18             	mov    0x18(%ebp),%eax
c0107536:	83 e0 01             	and    $0x1,%eax
c0107539:	85 c0                	test   %eax,%eax
c010753b:	74 12                	je     c010754f <__vmm_map_alloc+0xfd>
        // add one on reference count, regardless of existence.
        pmm_ref_page(pid, pa);
c010753d:	8b 45 14             	mov    0x14(%ebp),%eax
c0107540:	83 ec 08             	sub    $0x8,%esp
c0107543:	50                   	push   %eax
c0107544:	ff 75 08             	push   0x8(%ebp)
c0107547:	e8 ef f4 ff ff       	call   c0106a3b <pmm_ref_page>
c010754c:	83 c4 10             	add    $0x10,%esp
    }

    pt[l2_inx] = PTE(attr, pa);
c010754f:	8b 45 14             	mov    0x14(%ebp),%eax
c0107552:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107557:	89 c1                	mov    %eax,%ecx
c0107559:	8b 45 18             	mov    0x18(%ebp),%eax
c010755c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107561:	89 c2                	mov    %eax,%edx
c0107563:	8b 45 10             	mov    0x10(%ebp),%eax
c0107566:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c010756d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107570:	01 d8                	add    %ebx,%eax
c0107572:	09 ca                	or     %ecx,%edx
c0107574:	89 10                	mov    %edx,(%eax)

    return 1;
c0107576:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010757b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010757e:	c9                   	leave  
c010757f:	c3                   	ret    

c0107580 <vmm_map_page>:

void* vmm_map_page(pid_t pid, void* va, void* pa, pt_attr dattr, pt_attr tattr) {
c0107580:	55                   	push   %ebp
c0107581:	89 e5                	mov    %esp,%ebp
c0107583:	83 ec 28             	sub    $0x28,%esp
    // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c0107586:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010758a:	74 06                	je     c0107592 <vmm_map_page+0x12>
c010758c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107590:	75 0a                	jne    c010759c <vmm_map_page+0x1c>
        return NULL;
c0107592:	b8 00 00 00 00       	mov    $0x0,%eax
c0107597:	e9 1e 01 00 00       	jmp    c01076ba <vmm_map_page+0x13a>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c010759c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010759f:	c1 e8 16             	shr    $0x16,%eax
c01075a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c01075a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075a8:	c1 e8 0c             	shr    $0xc,%eax
c01075ab:	25 ff 03 00 00       	and    $0x3ff,%eax
c01075b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01075b3:	c7 45 e8 00 f0 ff ff 	movl   $0xfffff000,-0x18(%ebp)

    // 在页表与页目录中找到一个可用的空位进行映射（位于va或其附近）
    ptd_t* pde = ptd[pd_offset];
c01075ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01075c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01075c7:	01 d0                	add    %edx,%eax
c01075c9:	8b 00                	mov    (%eax),%eax
c01075cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(pd_offset);
c01075ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075d1:	c1 e0 0c             	shl    $0xc,%eax
c01075d4:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01075d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while (pde && pd_offset < 1024) {
c01075dc:	eb 77                	jmp    c0107655 <vmm_map_page+0xd5>
        if (pt_offset == 1024) {
c01075de:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
c01075e5:	75 2d                	jne    c0107614 <vmm_map_page+0x94>
            pd_offset++;
c01075e7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            pt_offset = 0;
c01075eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
            pde = ptd[pd_offset];
c01075f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01075fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01075ff:	01 d0                	add    %edx,%eax
c0107601:	8b 00                	mov    (%eax),%eax
c0107603:	89 45 ec             	mov    %eax,-0x14(%ebp)
            pt = (pt_t*)PT_VADDR(pd_offset);
c0107606:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107609:	c1 e0 0c             	shl    $0xc,%eax
c010760c:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107611:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        // 页表有空位，只需要开辟一个新的 PTE
        if (__vmm_map_alloc(pid, pd_offset, pt_offset, pa, dattr, false)) {
c0107614:	8b 45 10             	mov    0x10(%ebp),%eax
c0107617:	83 ec 08             	sub    $0x8,%esp
c010761a:	6a 00                	push   $0x0
c010761c:	ff 75 14             	push   0x14(%ebp)
c010761f:	50                   	push   %eax
c0107620:	ff 75 f0             	push   -0x10(%ebp)
c0107623:	ff 75 f4             	push   -0xc(%ebp)
c0107626:	ff 75 08             	push   0x8(%ebp)
c0107629:	e8 24 fe ff ff       	call   c0107452 <__vmm_map_alloc>
c010762e:	83 c4 20             	add    $0x20,%esp
c0107631:	85 c0                	test   %eax,%eax
c0107633:	74 1c                	je     c0107651 <vmm_map_page+0xd1>
            return (void*)V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c0107635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107638:	c1 e0 16             	shl    $0x16,%eax
c010763b:	89 c2                	mov    %eax,%edx
c010763d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107640:	c1 e0 0c             	shl    $0xc,%eax
c0107643:	09 c2                	or     %eax,%edx
c0107645:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107648:	25 ff 0f 00 00       	and    $0xfff,%eax
c010764d:	09 d0                	or     %edx,%eax
c010764f:	eb 69                	jmp    c01076ba <vmm_map_page+0x13a>
        }
        pt_offset++;
c0107651:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    while (pde && pd_offset < 1024) {
c0107655:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107659:	74 0d                	je     c0107668 <vmm_map_page+0xe8>
c010765b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107662:	0f 86 76 ff ff ff    	jbe    c01075de <vmm_map_page+0x5e>
    }
    
    // 页目录与所有页表已满！
    if (pd_offset > 1024) {
c0107668:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%ebp)
c010766f:	76 07                	jbe    c0107678 <vmm_map_page+0xf8>
        return NULL;
c0107671:	b8 00 00 00 00       	mov    $0x0,%eax
c0107676:	eb 42                	jmp    c01076ba <vmm_map_page+0x13a>
    }

    if (!__vmm_map_alloc(pid, pd_offset, pt_offset, (uintptr_t)pa, dattr, false))
c0107678:	8b 45 10             	mov    0x10(%ebp),%eax
c010767b:	83 ec 08             	sub    $0x8,%esp
c010767e:	6a 00                	push   $0x0
c0107680:	ff 75 14             	push   0x14(%ebp)
c0107683:	50                   	push   %eax
c0107684:	ff 75 f0             	push   -0x10(%ebp)
c0107687:	ff 75 f4             	push   -0xc(%ebp)
c010768a:	ff 75 08             	push   0x8(%ebp)
c010768d:	e8 c0 fd ff ff       	call   c0107452 <__vmm_map_alloc>
c0107692:	83 c4 20             	add    $0x20,%esp
c0107695:	85 c0                	test   %eax,%eax
c0107697:	75 07                	jne    c01076a0 <vmm_map_page+0x120>
        return NULL;
c0107699:	b8 00 00 00 00       	mov    $0x0,%eax
c010769e:	eb 1a                	jmp    c01076ba <vmm_map_page+0x13a>
    //     // add one on reference count, regardless of existence.
    //     pmm_ref_page(pid, pa);
    // }
    // pt[pt_offset] = PTE(tattr, pa);

    return (void*)V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c01076a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076a3:	c1 e0 16             	shl    $0x16,%eax
c01076a6:	89 c2                	mov    %eax,%edx
c01076a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076ab:	c1 e0 0c             	shl    $0xc,%eax
c01076ae:	09 c2                	or     %eax,%edx
c01076b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076b3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01076b8:	09 d0                	or     %edx,%eax
}
c01076ba:	c9                   	leave  
c01076bb:	c3                   	ret    

c01076bc <vmm_cover_map_page>:

void* vmm_cover_map_page(pid_t pid, void* va, void* pa, pt_attr dattr, pt_attr tattr)
{
c01076bc:	55                   	push   %ebp
c01076bd:	89 e5                	mov    %esp,%ebp
c01076bf:	83 ec 18             	sub    $0x18,%esp
        // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c01076c2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01076c6:	74 06                	je     c01076ce <vmm_cover_map_page+0x12>
c01076c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01076cc:	75 07                	jne    c01076d5 <vmm_cover_map_page+0x19>
        return NULL;
c01076ce:	b8 00 00 00 00       	mov    $0x0,%eax
c01076d3:	eb 50                	jmp    c0107725 <vmm_cover_map_page+0x69>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c01076d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076d8:	c1 e8 16             	shr    $0x16,%eax
c01076db:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c01076de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076e1:	c1 e8 0c             	shr    $0xc,%eax
c01076e4:	25 ff 03 00 00       	and    $0x3ff,%eax
c01076e9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(!__vmm_map_alloc(pid, pd_offset, pt_offset, (uintptr_t)pa, dattr, true)) return NULL;
c01076ec:	8b 45 10             	mov    0x10(%ebp),%eax
c01076ef:	83 ec 08             	sub    $0x8,%esp
c01076f2:	6a 01                	push   $0x1
c01076f4:	ff 75 14             	push   0x14(%ebp)
c01076f7:	50                   	push   %eax
c01076f8:	ff 75 f0             	push   -0x10(%ebp)
c01076fb:	ff 75 f4             	push   -0xc(%ebp)
c01076fe:	ff 75 08             	push   0x8(%ebp)
c0107701:	e8 4c fd ff ff       	call   c0107452 <__vmm_map_alloc>
c0107706:	83 c4 20             	add    $0x20,%esp
c0107709:	85 c0                	test   %eax,%eax
c010770b:	75 07                	jne    c0107714 <vmm_cover_map_page+0x58>
c010770d:	b8 00 00 00 00       	mov    $0x0,%eax
c0107712:	eb 11                	jmp    c0107725 <vmm_cover_map_page+0x69>
    //     // add one on reference count, regardless of existence.
    //     pmm_ref_page(pid, pa);
    // }
    // pt[pt_offset] = PTE(tattr, pa);

    cpu_invplg(va);
c0107714:	83 ec 0c             	sub    $0xc,%esp
c0107717:	ff 75 0c             	push   0xc(%ebp)
c010771a:	e8 94 fc ff ff       	call   c01073b3 <cpu_invplg>
c010771f:	83 c4 10             	add    $0x10,%esp

    return va;
c0107722:	8b 45 0c             	mov    0xc(%ebp),%eax
}
c0107725:	c9                   	leave  
c0107726:	c3                   	ret    

c0107727 <vmm_alloc_page>:

void* vmm_alloc_page(pid_t pid, void* vpn, void** pa, pt_attr dattr, pt_attr tattr)
{
c0107727:	55                   	push   %ebp
c0107728:	89 e5                	mov    %esp,%ebp
c010772a:	83 ec 18             	sub    $0x18,%esp
    void* pp = pmm_alloc_page(pid, tattr);
c010772d:	83 ec 08             	sub    $0x8,%esp
c0107730:	ff 75 18             	push   0x18(%ebp)
c0107733:	ff 75 08             	push   0x8(%ebp)
c0107736:	e8 30 f1 ff ff       	call   c010686b <pmm_alloc_page>
c010773b:	83 c4 10             	add    $0x10,%esp
c010773e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* result = vmm_map_page(pid, vpn, pp, dattr, tattr);
c0107741:	83 ec 0c             	sub    $0xc,%esp
c0107744:	ff 75 18             	push   0x18(%ebp)
c0107747:	ff 75 14             	push   0x14(%ebp)
c010774a:	ff 75 f4             	push   -0xc(%ebp)
c010774d:	ff 75 0c             	push   0xc(%ebp)
c0107750:	ff 75 08             	push   0x8(%ebp)
c0107753:	e8 28 fe ff ff       	call   c0107580 <vmm_map_page>
c0107758:	83 c4 20             	add    $0x20,%esp
c010775b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!result) {
c010775e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107762:	75 11                	jne    c0107775 <vmm_alloc_page+0x4e>
        pmm_free_page(pid, pp);
c0107764:	83 ec 08             	sub    $0x8,%esp
c0107767:	ff 75 f4             	push   -0xc(%ebp)
c010776a:	ff 75 08             	push   0x8(%ebp)
c010776d:	e8 40 f2 ff ff       	call   c01069b2 <pmm_free_page>
c0107772:	83 c4 10             	add    $0x10,%esp
    }
    pa ? (*pa = pp) : 0;
c0107775:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107779:	74 08                	je     c0107783 <vmm_alloc_page+0x5c>
c010777b:	8b 45 10             	mov    0x10(%ebp),%eax
c010777e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107781:	89 10                	mov    %edx,(%eax)
    return result;
c0107783:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107786:	c9                   	leave  
c0107787:	c3                   	ret    

c0107788 <vmm_alloc_pages>:

int vmm_alloc_pages(pid_t pid, void* va, size_t sz, pt_attr tattr, pp_attr_t pattr)
{
c0107788:	55                   	push   %ebp
c0107789:	89 e5                	mov    %esp,%ebp
c010778b:	83 ec 28             	sub    $0x28,%esp
    //assert((uintptr_t)va % PG_SIZE == 0) assert(sz % PG_SIZE == 0);

    void* va_ = va;
c010778e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107791:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (size_t i = 0; i < (sz >> PG_SIZE_BITS); i++, va_ += PG_SIZE) {
c0107794:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010779b:	e9 97 00 00 00       	jmp    c0107837 <vmm_alloc_pages+0xaf>
        void* pp = pmm_alloc_page(pid, pattr);
c01077a0:	83 ec 08             	sub    $0x8,%esp
c01077a3:	ff 75 18             	push   0x18(%ebp)
c01077a6:	ff 75 08             	push   0x8(%ebp)
c01077a9:	e8 bd f0 ff ff       	call   c010686b <pmm_alloc_page>
c01077ae:	83 c4 10             	add    $0x10,%esp
c01077b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t l1_index = PD_INDEX(va_);
c01077b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077b7:	c1 e8 16             	shr    $0x16,%eax
c01077ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        uint32_t l2_index = PT_INDEX(va_);
c01077bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077c0:	c1 e8 0c             	shr    $0xc,%eax
c01077c3:	25 ff 03 00 00       	and    $0x3ff,%eax
c01077c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!pp || !__vmm_map_alloc(
c01077cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01077cf:	74 21                	je     c01077f2 <vmm_alloc_pages+0x6a>
c01077d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077d4:	83 ec 08             	sub    $0x8,%esp
c01077d7:	6a 00                	push   $0x0
c01077d9:	ff 75 14             	push   0x14(%ebp)
c01077dc:	50                   	push   %eax
c01077dd:	ff 75 e0             	push   -0x20(%ebp)
c01077e0:	ff 75 e4             	push   -0x1c(%ebp)
c01077e3:	ff 75 08             	push   0x8(%ebp)
c01077e6:	e8 67 fc ff ff       	call   c0107452 <__vmm_map_alloc>
c01077eb:	83 c4 20             	add    $0x20,%esp
c01077ee:	85 c0                	test   %eax,%eax
c01077f0:	75 3a                	jne    c010782c <vmm_alloc_pages+0xa4>
                     pid,
                     l1_index, l2_index, (uintptr_t)pp, tattr, false)) {
            // if one failed, release previous allocated pages.
            va_ = va;
c01077f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
            for (size_t j = 0; j < i; j++, va_ += PG_SIZE) {
c01077f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077ff:	eb 1c                	jmp    c010781d <vmm_alloc_pages+0x95>
                vmm_unmap_page(pid, va_);
c0107801:	83 ec 08             	sub    $0x8,%esp
c0107804:	ff 75 f4             	push   -0xc(%ebp)
c0107807:	ff 75 08             	push   0x8(%ebp)
c010780a:	e8 41 01 00 00       	call   c0107950 <vmm_unmap_page>
c010780f:	83 c4 10             	add    $0x10,%esp
            for (size_t j = 0; j < i; j++, va_ += PG_SIZE) {
c0107812:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107816:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010781d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107820:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107823:	72 dc                	jb     c0107801 <vmm_alloc_pages+0x79>
            }

            return false;
c0107825:	b8 00 00 00 00       	mov    $0x0,%eax
c010782a:	eb 1f                	jmp    c010784b <vmm_alloc_pages+0xc3>
    for (size_t i = 0; i < (sz >> PG_SIZE_BITS); i++, va_ += PG_SIZE) {
c010782c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0107830:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0107837:	8b 45 10             	mov    0x10(%ebp),%eax
c010783a:	c1 e8 0c             	shr    $0xc,%eax
c010783d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0107840:	0f 82 5a ff ff ff    	jb     c01077a0 <vmm_alloc_pages+0x18>
        }
    }

    return true;
c0107846:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010784b:	c9                   	leave  
c010784c:	c3                   	ret    

c010784d <vmm_set_mapping>:

int vmm_set_mapping(pid_t pid, void* va, void* pa, pt_attr attr)
{
c010784d:	55                   	push   %ebp
c010784e:	89 e5                	mov    %esp,%ebp
c0107850:	83 ec 18             	sub    $0x18,%esp
    //assert(((uintptr_t)va & 0xFFFU) == 0);

    uint32_t l1_index = PD_INDEX(va);
c0107853:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107856:	c1 e8 16             	shr    $0x16,%eax
c0107859:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c010785c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010785f:	c1 e8 0c             	shr    $0xc,%eax
c0107862:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107867:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // prevent map of recursive mapping region
    if (l1_index == 1023) {
c010786a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107871:	75 07                	jne    c010787a <vmm_set_mapping+0x2d>
        return 0;
c0107873:	b8 00 00 00 00       	mov    $0x0,%eax
c0107878:	eb 22                	jmp    c010789c <vmm_set_mapping+0x4f>
    }
    
    __vmm_map_alloc(pid, l1_index, l2_index, (uintptr_t)pa, attr, false);
c010787a:	8b 45 10             	mov    0x10(%ebp),%eax
c010787d:	83 ec 08             	sub    $0x8,%esp
c0107880:	6a 00                	push   $0x0
c0107882:	ff 75 14             	push   0x14(%ebp)
c0107885:	50                   	push   %eax
c0107886:	ff 75 f0             	push   -0x10(%ebp)
c0107889:	ff 75 f4             	push   -0xc(%ebp)
c010788c:	ff 75 08             	push   0x8(%ebp)
c010788f:	e8 be fb ff ff       	call   c0107452 <__vmm_map_alloc>
c0107894:	83 c4 20             	add    $0x20,%esp
    return 1;
c0107897:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010789c:	c9                   	leave  
c010789d:	c3                   	ret    

c010789e <__vmm_unmap_unalloc>:

void __vmm_unmap_unalloc(pid_t pid, void* va, int free_ppage)
{
c010789e:	55                   	push   %ebp
c010789f:	89 e5                	mov    %esp,%ebp
c01078a1:	83 ec 28             	sub    $0x28,%esp
    //assert(((uintptr_t)va & 0xFFFU) == 0);

    uint32_t l1_index = PD_INDEX(va);
c01078a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078a7:	c1 e8 16             	shr    $0x16,%eax
c01078aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c01078ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078b0:	c1 e8 0c             	shr    $0xc,%eax
c01078b3:	25 ff 03 00 00       	and    $0x3ff,%eax
c01078b8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // prevent unmap of recursive mapping region
    if (l1_index == 1023) {
c01078bb:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c01078c2:	0f 84 85 00 00 00    	je     c010794d <__vmm_unmap_unalloc+0xaf>
        return;
    }

    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01078c8:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    if (ptd[l1_index]) {
c01078cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01078d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078dc:	01 d0                	add    %edx,%eax
c01078de:	8b 00                	mov    (%eax),%eax
c01078e0:	85 c0                	test   %eax,%eax
c01078e2:	74 6a                	je     c010794e <__vmm_unmap_unalloc+0xb0>
        pt_t* pt = (uintptr_t)PT_VADDR(l1_index);
c01078e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078e7:	c1 e0 0c             	shl    $0xc,%eax
c01078ea:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01078ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
        pt_t pte = pt[l2_index];
c01078f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01078fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01078ff:	01 d0                	add    %edx,%eax
c0107901:	8b 00                	mov    (%eax),%eax
c0107903:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (IS_PRESENT(pte) && free_ppage) {
c0107906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107909:	83 e0 01             	and    $0x1,%eax
c010790c:	85 c0                	test   %eax,%eax
c010790e:	74 18                	je     c0107928 <__vmm_unmap_unalloc+0x8a>
c0107910:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107914:	74 12                	je     c0107928 <__vmm_unmap_unalloc+0x8a>
            pmm_free_page(pid, (void*)pte);
c0107916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107919:	83 ec 08             	sub    $0x8,%esp
c010791c:	50                   	push   %eax
c010791d:	ff 75 08             	push   0x8(%ebp)
c0107920:	e8 8d f0 ff ff       	call   c01069b2 <pmm_free_page>
c0107925:	83 c4 10             	add    $0x10,%esp
        }
        cpu_invplg(va);
c0107928:	83 ec 0c             	sub    $0xc,%esp
c010792b:	ff 75 0c             	push   0xc(%ebp)
c010792e:	e8 80 fa ff ff       	call   c01073b3 <cpu_invplg>
c0107933:	83 c4 10             	add    $0x10,%esp
        //kprintf("%d ", l2_index);
        pt[l2_index] = NULL;
c0107936:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107939:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107940:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107943:	01 d0                	add    %edx,%eax
c0107945:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010794b:	eb 01                	jmp    c010794e <__vmm_unmap_unalloc+0xb0>
        return;
c010794d:	90                   	nop
    }
}
c010794e:	c9                   	leave  
c010794f:	c3                   	ret    

c0107950 <vmm_unmap_page>:

void vmm_unmap_page(pid_t pid, void* va)
{
c0107950:	55                   	push   %ebp
c0107951:	89 e5                	mov    %esp,%ebp
c0107953:	83 ec 08             	sub    $0x8,%esp
    __vmm_unmap_unalloc(pid, va, true);
c0107956:	83 ec 04             	sub    $0x4,%esp
c0107959:	6a 01                	push   $0x1
c010795b:	ff 75 0c             	push   0xc(%ebp)
c010795e:	ff 75 08             	push   0x8(%ebp)
c0107961:	e8 38 ff ff ff       	call   c010789e <__vmm_unmap_unalloc>
c0107966:	83 c4 10             	add    $0x10,%esp
}
c0107969:	90                   	nop
c010796a:	c9                   	leave  
c010796b:	c3                   	ret    

c010796c <vmm_unset_mapping>:

void vmm_unset_mapping(void* va)
{
c010796c:	55                   	push   %ebp
c010796d:	89 e5                	mov    %esp,%ebp
c010796f:	83 ec 08             	sub    $0x8,%esp
    __vmm_unmap_unalloc(0, va, false);
c0107972:	83 ec 04             	sub    $0x4,%esp
c0107975:	6a 00                	push   $0x0
c0107977:	ff 75 08             	push   0x8(%ebp)
c010797a:	6a 00                	push   $0x0
c010797c:	e8 1d ff ff ff       	call   c010789e <__vmm_unmap_unalloc>
c0107981:	83 c4 10             	add    $0x10,%esp
}
c0107984:	90                   	nop
c0107985:	c9                   	leave  
c0107986:	c3                   	ret    

c0107987 <vmm_lookup>:

v_mapping vmm_lookup(void* va)
{
c0107987:	55                   	push   %ebp
c0107988:	89 e5                	mov    %esp,%ebp
c010798a:	83 ec 28             	sub    $0x28,%esp
    assert(((uintptr_t)va & 0xFFFU) == 0);
c010798d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107990:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107995:	85 c0                	test   %eax,%eax
c0107997:	74 1a                	je     c01079b3 <vmm_lookup+0x2c>
c0107999:	83 ec 04             	sub    $0x4,%esp
c010799c:	68 87 01 00 00       	push   $0x187
c01079a1:	68 87 d2 d0 c0       	push   $0xc0d0d287
c01079a6:	68 a0 d2 d0 c0       	push   $0xc0d0d2a0
c01079ab:	e8 da 15 00 00       	call   c0108f8a <__assert_fail>
c01079b0:	83 c4 10             	add    $0x10,%esp

    uint32_t l1_index = PD_INDEX(va);
c01079b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079b6:	c1 e8 16             	shr    $0x16,%eax
c01079b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c01079bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079bf:	c1 e8 0c             	shr    $0xc,%eax
c01079c2:	25 ff 03 00 00       	and    $0x3ff,%eax
c01079c7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01079ca:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    v_mapping mapping = { .flags = 0, .pa = 0, .pn = 0 };
c01079d1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c01079d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01079df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01079e6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    if (ptd[l1_index]) {
c01079ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01079f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079fa:	01 d0                	add    %edx,%eax
c01079fc:	8b 00                	mov    (%eax),%eax
c01079fe:	85 c0                	test   %eax,%eax
c0107a00:	74 49                	je     c0107a4b <vmm_lookup+0xc4>
        //pt_t* pt = (uintptr_t)PT_VADDR(l1_index);
        pt_t* l2pte = &(((pt_t*)PT_VADDR(l1_index))[l2_index]);
c0107a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a0f:	c1 e0 0c             	shl    $0xc,%eax
c0107a12:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107a17:	01 d0                	add    %edx,%eax
c0107a19:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //pt_t* l2pte = &pt[l2_index];
        if (l2pte) {
c0107a1c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107a20:	74 29                	je     c0107a4b <vmm_lookup+0xc4>
            mapping.flags = PG_ENTRY_FLAGS(*l2pte);
c0107a22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a25:	8b 00                	mov    (%eax),%eax
c0107a27:	66 25 ff 0f          	and    $0xfff,%ax
c0107a2b:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
            mapping.pa = PG_ENTRY_ADDR(*l2pte);
c0107a2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a32:	8b 00                	mov    (%eax),%eax
c0107a34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107a39:	89 45 dc             	mov    %eax,-0x24(%ebp)
            mapping.pn = mapping.pa >> PG_SIZE_BITS;
c0107a3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a3f:	c1 e8 0c             	shr    $0xc,%eax
c0107a42:	89 45 d8             	mov    %eax,-0x28(%ebp)
            mapping.pte = l2pte;
c0107a45:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
    }

    return mapping;
c0107a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a4e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107a51:	89 10                	mov    %edx,(%eax)
c0107a53:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a56:	89 50 04             	mov    %edx,0x4(%eax)
c0107a59:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a5c:	89 50 08             	mov    %edx,0x8(%eax)
c0107a5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a62:	89 50 0c             	mov    %edx,0xc(%eax)
}
c0107a65:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a68:	c9                   	leave  
c0107a69:	c2 04 00             	ret    $0x4

c0107a6c <vmm_v2p>:

void* vmm_v2p(void* va)
{
c0107a6c:	55                   	push   %ebp
c0107a6d:	89 e5                	mov    %esp,%ebp
c0107a6f:	83 ec 18             	sub    $0x18,%esp
    return (void*)vmm_lookup(va).pa;
c0107a72:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107a75:	83 ec 08             	sub    $0x8,%esp
c0107a78:	ff 75 08             	push   0x8(%ebp)
c0107a7b:	50                   	push   %eax
c0107a7c:	e8 06 ff ff ff       	call   c0107987 <vmm_lookup>
c0107a81:	83 c4 0c             	add    $0xc,%esp
c0107a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0107a87:	c9                   	leave  
c0107a88:	c3                   	ret    

c0107a89 <vmm_dup_page>:

void* vmm_dup_page(pid_t pid, void* pa)
{
c0107a89:	55                   	push   %ebp
c0107a8a:	89 e5                	mov    %esp,%ebp
c0107a8c:	57                   	push   %edi
c0107a8d:	56                   	push   %esi
c0107a8e:	53                   	push   %ebx
c0107a8f:	83 ec 1c             	sub    $0x1c,%esp
    void* new_ppg = pmm_alloc_page(pid, 0);
c0107a92:	83 ec 08             	sub    $0x8,%esp
c0107a95:	6a 00                	push   $0x0
c0107a97:	ff 75 08             	push   0x8(%ebp)
c0107a9a:	e8 cc ed ff ff       	call   c010686b <pmm_alloc_page>
c0107a9f:	83 c4 10             	add    $0x10,%esp
c0107aa2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    vmm_cover_map_page(pid, PG_MOUNT_3, new_ppg, PG_PREM_RW,PG_PREM_RW);
c0107aa5:	83 ec 0c             	sub    $0xc,%esp
c0107aa8:	6a 03                	push   $0x3
c0107aaa:	6a 03                	push   $0x3
c0107aac:	ff 75 e4             	push   -0x1c(%ebp)
c0107aaf:	68 00 d0 7f af       	push   $0xaf7fd000
c0107ab4:	ff 75 08             	push   0x8(%ebp)
c0107ab7:	e8 00 fc ff ff       	call   c01076bc <vmm_cover_map_page>
c0107abc:	83 c4 20             	add    $0x20,%esp
    vmm_cover_map_page(pid, PG_MOUNT_4, pa, PG_PREM_RW,PG_PREM_RW);
c0107abf:	83 ec 0c             	sub    $0xc,%esp
c0107ac2:	6a 03                	push   $0x3
c0107ac4:	6a 03                	push   $0x3
c0107ac6:	ff 75 0c             	push   0xc(%ebp)
c0107ac9:	68 00 c0 7f af       	push   $0xaf7fc000
c0107ace:	ff 75 08             	push   0x8(%ebp)
c0107ad1:	e8 e6 fb ff ff       	call   c01076bc <vmm_cover_map_page>
c0107ad6:	83 c4 20             	add    $0x20,%esp

    asm volatile (
c0107ad9:	b8 00 04 00 00       	mov    $0x400,%eax
c0107ade:	ba 00 d0 7f af       	mov    $0xaf7fd000,%edx
c0107ae3:	bb 00 c0 7f af       	mov    $0xaf7fc000,%ebx
c0107ae8:	89 c1                	mov    %eax,%ecx
c0107aea:	89 d7                	mov    %edx,%edi
c0107aec:	89 de                	mov    %ebx,%esi
c0107aee:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        "movl %2, %%esi\n"
        "rep movsl\n"
        :: "c"(1024), "r"(PG_MOUNT_3), "r"(PG_MOUNT_4)
        : "memory", "%edi", "%esi");

    vmm_unset_mapping(PG_MOUNT_3);
c0107af0:	83 ec 0c             	sub    $0xc,%esp
c0107af3:	68 00 d0 7f af       	push   $0xaf7fd000
c0107af8:	e8 6f fe ff ff       	call   c010796c <vmm_unset_mapping>
c0107afd:	83 c4 10             	add    $0x10,%esp
    vmm_unset_mapping(PG_MOUNT_4);
c0107b00:	83 ec 0c             	sub    $0xc,%esp
c0107b03:	68 00 c0 7f af       	push   $0xaf7fc000
c0107b08:	e8 5f fe ff ff       	call   c010796c <vmm_unset_mapping>
c0107b0d:	83 c4 10             	add    $0x10,%esp

    return new_ppg;
c0107b10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0107b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107b16:	5b                   	pop    %ebx
c0107b17:	5e                   	pop    %esi
c0107b18:	5f                   	pop    %edi
c0107b19:	5d                   	pop    %ebp
c0107b1a:	c3                   	ret    

c0107b1b <vmm_mount_pd>:

void* vmm_mount_pd(uintptr_t mnt, void* pde)
{
c0107b1b:	55                   	push   %ebp
c0107b1c:	89 e5                	mov    %esp,%ebp
c0107b1e:	83 ec 10             	sub    $0x10,%esp
    ptd_t* l1pt = (ptd_t*)PTD_BASE_VADDR;
c0107b21:	c7 45 fc 00 f0 ff ff 	movl   $0xfffff000,-0x4(%ebp)
    l1pt[(mnt >> 22)] = PDE(T_SELF_REF_PERM, pde);
c0107b28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107b30:	89 c2                	mov    %eax,%edx
c0107b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b35:	c1 e8 16             	shr    $0x16,%eax
c0107b38:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0107b3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b42:	01 c8                	add    %ecx,%eax
c0107b44:	83 ca 1b             	or     $0x1b,%edx
c0107b47:	89 10                	mov    %edx,(%eax)
    cpu_invplg(mnt);
c0107b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b4c:	50                   	push   %eax
c0107b4d:	e8 61 f8 ff ff       	call   c01073b3 <cpu_invplg>
c0107b52:	83 c4 04             	add    $0x4,%esp
    return mnt;
c0107b55:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0107b58:	c9                   	leave  
c0107b59:	c3                   	ret    

c0107b5a <vmm_unmount_pd>:

void* vmm_unmount_pd(uintptr_t mnt)
{
c0107b5a:	55                   	push   %ebp
c0107b5b:	89 e5                	mov    %esp,%ebp
c0107b5d:	83 ec 10             	sub    $0x10,%esp
    ptd_t* l1pt = (ptd_t*)PTD_BASE_VADDR;
c0107b60:	c7 45 fc 00 f0 ff ff 	movl   $0xfffff000,-0x4(%ebp)
    l1pt[(mnt >> 22)] = 0;
c0107b67:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b6a:	c1 e8 16             	shr    $0x16,%eax
c0107b6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107b74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b77:	01 d0                	add    %edx,%eax
c0107b79:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    cpu_invplg(mnt);
c0107b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b82:	50                   	push   %eax
c0107b83:	e8 2b f8 ff ff       	call   c01073b3 <cpu_invplg>
c0107b88:	83 c4 04             	add    $0x4,%esp
}
c0107b8b:	90                   	nop
c0107b8c:	c9                   	leave  
c0107b8d:	c3                   	ret    

c0107b8e <io_outb>:
                 : "memory", "cc");
}

static inline void
io_outb(int port, uint8_t data)
{
c0107b8e:	55                   	push   %ebp
c0107b8f:	89 e5                	mov    %esp,%ebp
c0107b91:	83 ec 04             	sub    $0x4,%esp
c0107b94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b97:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0107b9a:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107b9e:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ba1:	ee                   	out    %al,(%dx)
}
c0107ba2:	90                   	nop
c0107ba3:	c9                   	leave  
c0107ba4:	c3                   	ret    

c0107ba5 <frequence_set>:
uint32_t sched_ticks;
void do_intr_time_handler(isr_param int_param);

static void frequence_set(uint8_t counter_port, uint8_t counter_no, 
                         uint8_t rwl, uint8_t counter_mode, uint16_t counter_value)
{
c0107ba5:	55                   	push   %ebp
c0107ba6:	89 e5                	mov    %esp,%ebp
c0107ba8:	57                   	push   %edi
c0107ba9:	56                   	push   %esi
c0107baa:	53                   	push   %ebx
c0107bab:	83 ec 14             	sub    $0x14,%esp
c0107bae:	8b 75 08             	mov    0x8(%ebp),%esi
c0107bb1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0107bb4:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0107bb7:	8b 55 14             	mov    0x14(%ebp),%edx
c0107bba:	8b 7d 18             	mov    0x18(%ebp),%edi
c0107bbd:	89 f0                	mov    %esi,%eax
c0107bbf:	88 45 f0             	mov    %al,-0x10(%ebp)
c0107bc2:	88 5d ec             	mov    %bl,-0x14(%ebp)
c0107bc5:	88 4d e8             	mov    %cl,-0x18(%ebp)
c0107bc8:	88 55 e4             	mov    %dl,-0x1c(%ebp)
c0107bcb:	89 f8                	mov    %edi,%eax
c0107bcd:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    io_outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0107bd1:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0107bd5:	c1 e0 06             	shl    $0x6,%eax
c0107bd8:	89 c2                	mov    %eax,%edx
c0107bda:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0107bde:	c1 e0 04             	shl    $0x4,%eax
c0107be1:	09 c2                	or     %eax,%edx
c0107be3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0107be7:	01 c0                	add    %eax,%eax
c0107be9:	09 d0                	or     %edx,%eax
c0107beb:	0f b6 c0             	movzbl %al,%eax
c0107bee:	50                   	push   %eax
c0107bef:	6a 43                	push   $0x43
c0107bf1:	e8 98 ff ff ff       	call   c0107b8e <io_outb>
c0107bf6:	83 c4 08             	add    $0x8,%esp
    io_outb(counter_port, (uint8_t)counter_value);
c0107bf9:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0107bfd:	0f b6 d0             	movzbl %al,%edx
c0107c00:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0107c04:	52                   	push   %edx
c0107c05:	50                   	push   %eax
c0107c06:	e8 83 ff ff ff       	call   c0107b8e <io_outb>
c0107c0b:	83 c4 08             	add    $0x8,%esp
    io_outb(counter_port, (uint8_t)(counter_value >> 8));
c0107c0e:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0107c12:	66 c1 e8 08          	shr    $0x8,%ax
c0107c16:	0f b6 d0             	movzbl %al,%edx
c0107c19:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0107c1d:	52                   	push   %edx
c0107c1e:	50                   	push   %eax
c0107c1f:	e8 6a ff ff ff       	call   c0107b8e <io_outb>
c0107c24:	83 c4 08             	add    $0x8,%esp
}
c0107c27:	90                   	nop
c0107c28:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107c2b:	5b                   	pop    %ebx
c0107c2c:	5e                   	pop    %esi
c0107c2d:	5f                   	pop    %edi
c0107c2e:	5d                   	pop    %ebp
c0107c2f:	c3                   	ret    

c0107c30 <timer_init>:

void timer_init(){
c0107c30:	55                   	push   %ebp
c0107c31:	89 e5                	mov    %esp,%ebp
c0107c33:	83 ec 08             	sub    $0x8,%esp
    ticks = 0;
c0107c36:	c7 05 f0 a0 d0 c0 00 	movl   $0x0,0xc0d0a0f0
c0107c3d:	00 00 00 
    kprintf("timer intr start\n");
c0107c40:	83 ec 0c             	sub    $0xc,%esp
c0107c43:	68 be d2 d0 c0       	push   $0xc0d0d2be
c0107c48:	e8 e4 1e 00 00       	call   c0109b31 <kprintf>
c0107c4d:	83 c4 10             	add    $0x10,%esp
    frequence_set(CURRENTR0_PORT, CURRENTR0_NO, READ_WRITE_LATCH, CURRENTR_MODE, CURRENTR0_VALUE);
c0107c50:	83 ec 0c             	sub    $0xc,%esp
c0107c53:	68 9b 2e 00 00       	push   $0x2e9b
c0107c58:	6a 02                	push   $0x2
c0107c5a:	6a 03                	push   $0x3
c0107c5c:	6a 00                	push   $0x0
c0107c5e:	6a 40                	push   $0x40
c0107c60:	e8 40 ff ff ff       	call   c0107ba5 <frequence_set>
c0107c65:	83 c4 20             	add    $0x20,%esp
    _set_idt_entry(HARDWARE_TIME_INT, 0x08, &intr_time_handler, 0);
c0107c68:	6a 00                	push   $0x0
c0107c6a:	68 f8 81 10 c0       	push   $0xc01081f8
c0107c6f:	6a 08                	push   $0x8
c0107c71:	6a 20                	push   $0x20
c0107c73:	e8 33 0a 00 00       	call   c01086ab <_set_idt_entry>
c0107c78:	83 c4 10             	add    $0x10,%esp
    intr_subscribe(MELOX_SYS_CALL, do_intr_time_handler);
c0107c7b:	83 ec 08             	sub    $0x8,%esp
c0107c7e:	68 a4 7c 10 c0       	push   $0xc0107ca4
c0107c83:	68 80 00 00 00       	push   $0x80
c0107c88:	e8 36 02 00 00       	call   c0107ec3 <intr_subscribe>
c0107c8d:	83 c4 10             	add    $0x10,%esp
    kprintf("timer init down\n");
c0107c90:	83 ec 0c             	sub    $0xc,%esp
c0107c93:	68 d0 d2 d0 c0       	push   $0xc0d0d2d0
c0107c98:	e8 94 1e 00 00       	call   c0109b31 <kprintf>
c0107c9d:	83 c4 10             	add    $0x10,%esp
    asm("sti");
c0107ca0:	fb                   	sti    
}
c0107ca1:	90                   	nop
c0107ca2:	c9                   	leave  
c0107ca3:	c3                   	ret    

c0107ca4 <do_intr_time_handler>:

void do_intr_time_handler(isr_param int_param)
{
c0107ca4:	55                   	push   %ebp
c0107ca5:	89 e5                	mov    %esp,%ebp
c0107ca7:	83 ec 08             	sub    $0x8,%esp
    ticks++;
c0107caa:	a1 f0 a0 d0 c0       	mov    0xc0d0a0f0,%eax
c0107caf:	83 c0 01             	add    $0x1,%eax
c0107cb2:	a3 f0 a0 d0 c0       	mov    %eax,0xc0d0a0f0
    __current->intr_contxt = int_param;
c0107cb7:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107cbc:	8b 55 08             	mov    0x8(%ebp),%edx
c0107cbf:	89 50 08             	mov    %edx,0x8(%eax)
c0107cc2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107cc5:	89 50 0c             	mov    %edx,0xc(%eax)
c0107cc8:	8b 55 10             	mov    0x10(%ebp),%edx
c0107ccb:	89 50 10             	mov    %edx,0x10(%eax)
c0107cce:	8b 55 14             	mov    0x14(%ebp),%edx
c0107cd1:	89 50 14             	mov    %edx,0x14(%eax)
c0107cd4:	8b 55 18             	mov    0x18(%ebp),%edx
c0107cd7:	89 50 18             	mov    %edx,0x18(%eax)
c0107cda:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0107cdd:	89 50 1c             	mov    %edx,0x1c(%eax)
c0107ce0:	8b 55 20             	mov    0x20(%ebp),%edx
c0107ce3:	89 50 20             	mov    %edx,0x20(%eax)
c0107ce6:	8b 55 24             	mov    0x24(%ebp),%edx
c0107ce9:	89 50 24             	mov    %edx,0x24(%eax)
c0107cec:	8b 55 28             	mov    0x28(%ebp),%edx
c0107cef:	89 50 28             	mov    %edx,0x28(%eax)
c0107cf2:	8b 55 2c             	mov    0x2c(%ebp),%edx
c0107cf5:	89 50 2c             	mov    %edx,0x2c(%eax)
c0107cf8:	8b 55 30             	mov    0x30(%ebp),%edx
c0107cfb:	89 50 30             	mov    %edx,0x30(%eax)
c0107cfe:	8b 55 34             	mov    0x34(%ebp),%edx
c0107d01:	89 50 34             	mov    %edx,0x34(%eax)
c0107d04:	8b 55 38             	mov    0x38(%ebp),%edx
c0107d07:	89 50 38             	mov    %edx,0x38(%eax)
c0107d0a:	8b 55 3c             	mov    0x3c(%ebp),%edx
c0107d0d:	89 50 3c             	mov    %edx,0x3c(%eax)
c0107d10:	8b 55 40             	mov    0x40(%ebp),%edx
c0107d13:	89 50 40             	mov    %edx,0x40(%eax)
    if(__current->pro_ticks == 0)
c0107d16:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107d1b:	8b 40 5c             	mov    0x5c(%eax),%eax
c0107d1e:	85 c0                	test   %eax,%eax
c0107d20:	75 07                	jne    c0107d29 <do_intr_time_handler+0x85>
        schedule();
c0107d22:	e8 5d 1a 00 00       	call   c0109784 <schedule>
    else
        __current->pro_ticks--;
c0107d27:	eb 0e                	jmp    c0107d37 <do_intr_time_handler+0x93>
        __current->pro_ticks--;
c0107d29:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107d2e:	8b 50 5c             	mov    0x5c(%eax),%edx
c0107d31:	83 ea 01             	sub    $0x1,%edx
c0107d34:	89 50 5c             	mov    %edx,0x5c(%eax)
c0107d37:	90                   	nop
c0107d38:	c9                   	leave  
c0107d39:	c3                   	ret    

c0107d3a <syscall>:
void
syscall_install();

static void*
syscall(unsigned int callcode)
{
c0107d3a:	55                   	push   %ebp
c0107d3b:	89 e5                	mov    %esp,%ebp
c0107d3d:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0107d3e:	8b 55 08             	mov    0x8(%ebp),%edx
c0107d41:	89 d7                	mov    %edx,%edi
c0107d43:	cd 80                	int    $0x80
}
c0107d45:	90                   	nop
c0107d46:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0107d49:	c9                   	leave  
c0107d4a:	c3                   	ret    

c0107d4b <fork>:
#include <syscall/syscall.h>
#include <stdint.h>

typedef int32_t pid_t;

__MXSYSCALL(pid_t, fork)
c0107d4b:	55                   	push   %ebp
c0107d4c:	89 e5                	mov    %esp,%ebp
c0107d4e:	83 ec 10             	sub    $0x10,%esp
c0107d51:	b8 01 00 00 00       	mov    $0x1,%eax
c0107d56:	cd 80                	int    $0x80
c0107d58:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107d5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d5e:	c9                   	leave  
c0107d5f:	c3                   	ret    

c0107d60 <getpid>:

// __MXSYSCALL1(int, sbrk, void*, addr)

// __MXSYSCALL1(void*, brk, unsigned long, size)

__MXSYSCALL(pid_t, getpid)
c0107d60:	55                   	push   %ebp
c0107d61:	89 e5                	mov    %esp,%ebp
c0107d63:	83 ec 10             	sub    $0x10,%esp
c0107d66:	b8 02 00 00 00       	mov    $0x2,%eax
c0107d6b:	cd 80                	int    $0x80
c0107d6d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107d70:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d73:	c9                   	leave  
c0107d74:	c3                   	ret    

c0107d75 <getppid>:

__MXSYSCALL(pid_t, getppid)
c0107d75:	55                   	push   %ebp
c0107d76:	89 e5                	mov    %esp,%ebp
c0107d78:	83 ec 10             	sub    $0x10,%esp
c0107d7b:	b8 03 00 00 00       	mov    $0x3,%eax
c0107d80:	cd 80                	int    $0x80
c0107d82:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107d85:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d88:	c9                   	leave  
c0107d89:	c3                   	ret    

c0107d8a <_exit>:

__MXSYSCALL1(void, _exit, int, status)
c0107d8a:	55                   	push   %ebp
c0107d8b:	89 e5                	mov    %esp,%ebp
c0107d8d:	53                   	push   %ebx
c0107d8e:	83 ec 10             	sub    $0x10,%esp
c0107d91:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d94:	89 c3                	mov    %eax,%ebx
c0107d96:	b8 04 00 00 00       	mov    $0x4,%eax
c0107d9b:	cd 80                	int    $0x80
c0107d9d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107da0:	90                   	nop
c0107da1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107da4:	c9                   	leave  
c0107da5:	c3                   	ret    

c0107da6 <__proc0>:
#include <syscall/meloxstd.h>
extern void __init_phykernel_end;
void init_platform();
extern void _mxinit_main(); /* mxinit.c */
void __proc0()
{
c0107da6:	55                   	push   %ebp
c0107da7:	89 e5                	mov    %esp,%ebp
c0107da9:	83 ec 08             	sub    $0x8,%esp
    init_platform();
c0107dac:	e8 39 00 00 00       	call   c0107dea <init_platform>
    kprintf("This is proc0!\n");
c0107db1:	83 ec 0c             	sub    $0xc,%esp
c0107db4:	68 e1 d2 d0 c0       	push   $0xc0d0d2e1
c0107db9:	e8 73 1d 00 00       	call   c0109b31 <kprintf>
c0107dbe:	83 c4 10             	add    $0x10,%esp
    if (1 == fork()) {
c0107dc1:	e8 85 ff ff ff       	call   c0107d4b <fork>
c0107dc6:	83 f8 01             	cmp    $0x1,%eax
c0107dc9:	75 1a                	jne    c0107de5 <__proc0+0x3f>
        schedule();
c0107dcb:	e8 b4 19 00 00       	call   c0109784 <schedule>
        kprintf("fork sucess!\n");
c0107dd0:	83 ec 0c             	sub    $0xc,%esp
c0107dd3:	68 f1 d2 d0 c0       	push   $0xc0d0d2f1
c0107dd8:	e8 54 1d 00 00       	call   c0109b31 <kprintf>
c0107ddd:	83 c4 10             	add    $0x10,%esp
        asm("jmp _mxinit_main");
c0107de0:	e9 8e 00 00 00       	jmp    c0107e73 <_mxinit_main>
    }

    asm("1: jmp 1b");
c0107de5:	eb fe                	jmp    c0107de5 <__proc0+0x3f>
}
c0107de7:	90                   	nop
c0107de8:	c9                   	leave  
c0107de9:	c3                   	ret    

c0107dea <init_platform>:

void init_platform()
{
c0107dea:	55                   	push   %ebp
c0107deb:	89 e5                	mov    %esp,%ebp
c0107ded:	83 ec 08             	sub    $0x8,%esp
    //size_t virk_init_pg_count = ((uintptr_t)(&__init_phykernel_end)) >> 12;
    //init malloc
    mem_init();
c0107df0:	e8 df ef ff ff       	call   c0106dd4 <mem_init>
    timer_init();
c0107df5:	e8 36 fe ff ff       	call   c0107c30 <timer_init>
    init_keyboard();
c0107dfa:	e8 33 0e 00 00       	call   c0108c32 <init_keyboard>

    syscall_install();
c0107dff:	e8 2c 11 00 00       	call   c0108f30 <syscall_install>
    // for (size_t i = 0; i < virk_init_pg_count; i++) {

    //     vmm_unmap_page(KERNEL_PID, (i << 12));
    // }
    // kprintf("[MM] Releaseing %d pages from 0x0.\n", virk_init_pg_count);
c0107e04:	90                   	nop
c0107e05:	c9                   	leave  
c0107e06:	c3                   	ret    

c0107e07 <syscall>:
{
c0107e07:	55                   	push   %ebp
c0107e08:	89 e5                	mov    %esp,%ebp
c0107e0a:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0107e0b:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e0e:	89 d7                	mov    %edx,%edi
c0107e10:	cd 80                	int    $0x80
}
c0107e12:	90                   	nop
c0107e13:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0107e16:	c9                   	leave  
c0107e17:	c3                   	ret    

c0107e18 <fork>:
__MXSYSCALL(pid_t, fork)
c0107e18:	55                   	push   %ebp
c0107e19:	89 e5                	mov    %esp,%ebp
c0107e1b:	83 ec 10             	sub    $0x10,%esp
c0107e1e:	b8 01 00 00 00       	mov    $0x1,%eax
c0107e23:	cd 80                	int    $0x80
c0107e25:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107e28:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e2b:	c9                   	leave  
c0107e2c:	c3                   	ret    

c0107e2d <getpid>:
__MXSYSCALL(pid_t, getpid)
c0107e2d:	55                   	push   %ebp
c0107e2e:	89 e5                	mov    %esp,%ebp
c0107e30:	83 ec 10             	sub    $0x10,%esp
c0107e33:	b8 02 00 00 00       	mov    $0x2,%eax
c0107e38:	cd 80                	int    $0x80
c0107e3a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107e3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e40:	c9                   	leave  
c0107e41:	c3                   	ret    

c0107e42 <getppid>:
__MXSYSCALL(pid_t, getppid)
c0107e42:	55                   	push   %ebp
c0107e43:	89 e5                	mov    %esp,%ebp
c0107e45:	83 ec 10             	sub    $0x10,%esp
c0107e48:	b8 03 00 00 00       	mov    $0x3,%eax
c0107e4d:	cd 80                	int    $0x80
c0107e4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107e52:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e55:	c9                   	leave  
c0107e56:	c3                   	ret    

c0107e57 <_exit>:
__MXSYSCALL1(void, _exit, int, status)
c0107e57:	55                   	push   %ebp
c0107e58:	89 e5                	mov    %esp,%ebp
c0107e5a:	53                   	push   %ebx
c0107e5b:	83 ec 10             	sub    $0x10,%esp
c0107e5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e61:	89 c3                	mov    %eax,%ebx
c0107e63:	b8 04 00 00 00       	mov    $0x4,%eax
c0107e68:	cd 80                	int    $0x80
c0107e6a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107e6d:	90                   	nop
c0107e6e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107e71:	c9                   	leave  
c0107e72:	c3                   	ret    

c0107e73 <_mxinit_main>:
#include <kernel/process/sched.h>
#include <syscall/meloxstd.h>
#include <syscall/syscall.h>

void _mxinit_main()
{
c0107e73:	55                   	push   %ebp
c0107e74:	89 e5                	mov    %esp,%ebp
c0107e76:	83 ec 08             	sub    $0x8,%esp
    //     }
    //     kprintf("Forked %d\n", pid);
    // }

    // char buf[64];
    kprintf("Hello processes!\n");
c0107e79:	83 ec 0c             	sub    $0xc,%esp
c0107e7c:	68 ff d2 d0 c0       	push   $0xc0d0d2ff
c0107e81:	e8 ab 1c 00 00       	call   c0109b31 <kprintf>
c0107e86:	83 c4 10             	add    $0x10,%esp

    while(1);
c0107e89:	eb fe                	jmp    c0107e89 <_mxinit_main+0x16>

c0107e8b <io_outb>:
{
c0107e8b:	55                   	push   %ebp
c0107e8c:	89 e5                	mov    %esp,%ebp
c0107e8e:	83 ec 04             	sub    $0x4,%esp
c0107e91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e94:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0107e97:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107e9b:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e9e:	ee                   	out    %al,(%dx)
}
c0107e9f:	90                   	nop
c0107ea0:	c9                   	leave  
c0107ea1:	c3                   	ret    

c0107ea2 <pic_end_eoi>:

static inline void cpu_delay(){
    for(int i = 0; i < 3; i++);
}

static inline void pic_end_eoi(){
c0107ea2:	55                   	push   %ebp
c0107ea3:	89 e5                	mov    %esp,%ebp
    io_outb(0x20, 0x20);
c0107ea5:	6a 20                	push   $0x20
c0107ea7:	6a 20                	push   $0x20
c0107ea9:	e8 dd ff ff ff       	call   c0107e8b <io_outb>
c0107eae:	83 c4 08             	add    $0x8,%esp
    io_outb(0xa0, 0x20);//EOI end the int
c0107eb1:	6a 20                	push   $0x20
c0107eb3:	68 a0 00 00 00       	push   $0xa0
c0107eb8:	e8 ce ff ff ff       	call   c0107e8b <io_outb>
c0107ebd:	83 c4 08             	add    $0x8,%esp
}
c0107ec0:	90                   	nop
c0107ec1:	c9                   	leave  
c0107ec2:	c3                   	ret    

c0107ec3 <intr_subscribe>:
#include <kernel/process/peocess.h>
#include <kernel/cpu/io.h>

static int_subscriber subscribers[256];

void intr_subscribe(const uint8_t vector, int_subscriber subscriber) {
c0107ec3:	55                   	push   %ebp
c0107ec4:	89 e5                	mov    %esp,%ebp
c0107ec6:	83 ec 04             	sub    $0x4,%esp
c0107ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ecc:	88 45 fc             	mov    %al,-0x4(%ebp)
    subscribers[vector] = subscriber;
c0107ecf:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107ed3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ed6:	89 14 85 00 a1 d0 c0 	mov    %edx,-0x3f2f5f00(,%eax,4)
}
c0107edd:	90                   	nop
c0107ede:	c9                   	leave  
c0107edf:	c3                   	ret    

c0107ee0 <intr_unsubscribe>:

void intr_unsubscribe(const uint8_t vector, int_subscriber subscriber) {
c0107ee0:	55                   	push   %ebp
c0107ee1:	89 e5                	mov    %esp,%ebp
c0107ee3:	83 ec 04             	sub    $0x4,%esp
c0107ee6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ee9:	88 45 fc             	mov    %al,-0x4(%ebp)
    if (subscribers[vector] == subscriber) {
c0107eec:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107ef0:	8b 04 85 00 a1 d0 c0 	mov    -0x3f2f5f00(,%eax,4),%eax
c0107ef7:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0107efa:	75 0f                	jne    c0107f0b <intr_unsubscribe+0x2b>
        subscribers[vector] = (int_subscriber) 0;
c0107efc:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107f00:	c7 04 85 00 a1 d0 c0 	movl   $0x0,-0x3f2f5f00(,%eax,4)
c0107f07:	00 00 00 00 
    }
}
c0107f0b:	90                   	nop
c0107f0c:	c9                   	leave  
c0107f0d:	c3                   	ret    

c0107f0e <intr_handler>:

void intr_handler(isr_param* param)
{
c0107f0e:	55                   	push   %ebp
c0107f0f:	89 e5                	mov    %esp,%ebp
c0107f11:	53                   	push   %ebx
c0107f12:	83 ec 14             	sub    $0x14,%esp
	__current->intr_contxt = *param;
c0107f15:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107f1a:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f1d:	8b 0a                	mov    (%edx),%ecx
c0107f1f:	89 48 08             	mov    %ecx,0x8(%eax)
c0107f22:	8b 4a 04             	mov    0x4(%edx),%ecx
c0107f25:	89 48 0c             	mov    %ecx,0xc(%eax)
c0107f28:	8b 4a 08             	mov    0x8(%edx),%ecx
c0107f2b:	89 48 10             	mov    %ecx,0x10(%eax)
c0107f2e:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0107f31:	89 48 14             	mov    %ecx,0x14(%eax)
c0107f34:	8b 4a 10             	mov    0x10(%edx),%ecx
c0107f37:	89 48 18             	mov    %ecx,0x18(%eax)
c0107f3a:	8b 4a 14             	mov    0x14(%edx),%ecx
c0107f3d:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0107f40:	8b 4a 18             	mov    0x18(%edx),%ecx
c0107f43:	89 48 20             	mov    %ecx,0x20(%eax)
c0107f46:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0107f49:	89 48 24             	mov    %ecx,0x24(%eax)
c0107f4c:	8b 4a 20             	mov    0x20(%edx),%ecx
c0107f4f:	89 48 28             	mov    %ecx,0x28(%eax)
c0107f52:	8b 4a 24             	mov    0x24(%edx),%ecx
c0107f55:	89 48 2c             	mov    %ecx,0x2c(%eax)
c0107f58:	8b 4a 28             	mov    0x28(%edx),%ecx
c0107f5b:	89 48 30             	mov    %ecx,0x30(%eax)
c0107f5e:	8b 4a 2c             	mov    0x2c(%edx),%ecx
c0107f61:	89 48 34             	mov    %ecx,0x34(%eax)
c0107f64:	8b 4a 30             	mov    0x30(%edx),%ecx
c0107f67:	89 48 38             	mov    %ecx,0x38(%eax)
c0107f6a:	8b 4a 34             	mov    0x34(%edx),%ecx
c0107f6d:	89 48 3c             	mov    %ecx,0x3c(%eax)
c0107f70:	8b 52 38             	mov    0x38(%edx),%edx
c0107f73:	89 50 40             	mov    %edx,0x40(%eax)
    cpu_lcr3(__kernel_ptd);

    vmm_mount_pd(PD_MOUNT_1, __current->page_table);
#endif

    isr_param *lparam = &__current->intr_contxt;
c0107f76:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0107f7b:	83 c0 08             	add    $0x8,%eax
c0107f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (lparam->vector <= 255) {
c0107f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f84:	8b 40 20             	mov    0x20(%eax),%eax
c0107f87:	3d ff 00 00 00       	cmp    $0xff,%eax
c0107f8c:	77 26                	ja     c0107fb4 <intr_handler+0xa6>
        int_subscriber subscriber = subscribers[lparam->vector];
c0107f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f91:	8b 40 20             	mov    0x20(%eax),%eax
c0107f94:	8b 04 85 00 a1 d0 c0 	mov    -0x3f2f5f00(,%eax,4),%eax
c0107f9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (subscriber) {
c0107f9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107fa2:	74 10                	je     c0107fb4 <intr_handler+0xa6>
            subscriber(param);
c0107fa4:	83 ec 0c             	sub    $0xc,%esp
c0107fa7:	ff 75 08             	push   0x8(%ebp)
c0107faa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fad:	ff d0                	call   *%eax
c0107faf:	83 c4 10             	add    $0x10,%esp
            goto done;
c0107fb2:	eb 2c                	jmp    c0107fe0 <intr_handler+0xd2>
    // if (fallback) {
    //     fallback(lparam);
    //     goto done;
    // }
    
    kprintf("INT %x: (%x) [%x: %x] Unknown",
c0107fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb7:	8b 58 28             	mov    0x28(%eax),%ebx
c0107fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fbd:	8b 48 2c             	mov    0x2c(%eax),%ecx
c0107fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fc3:	8b 50 24             	mov    0x24(%eax),%edx
c0107fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fc9:	8b 40 20             	mov    0x20(%eax),%eax
c0107fcc:	83 ec 0c             	sub    $0xc,%esp
c0107fcf:	53                   	push   %ebx
c0107fd0:	51                   	push   %ecx
c0107fd1:	52                   	push   %edx
c0107fd2:	50                   	push   %eax
c0107fd3:	68 14 d3 d0 c0       	push   $0xc0d0d314
c0107fd8:	e8 54 1b 00 00       	call   c0109b31 <kprintf>
c0107fdd:	83 c4 20             	add    $0x20,%esp
            lparam->cs,
            lparam->eip);

done:
    // for all external interrupts except the spurious interrupt
    if (lparam->vector >= EXTERN_INTER) {
c0107fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fe3:	8b 40 20             	mov    0x20(%eax),%eax
c0107fe6:	83 f8 1f             	cmp    $0x1f,%eax
c0107fe9:	76 06                	jbe    c0107ff1 <intr_handler+0xe3>
        pic_end_eoi();
c0107feb:	e8 b2 fe ff ff       	call   c0107ea2 <pic_end_eoi>
	}

#ifdef USE_KERNEL_PT
    cpu_lcr3(__current->page_table);
#endif
    return;
c0107ff0:	90                   	nop
c0107ff1:	90                   	nop
}
c0107ff2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107ff5:	c9                   	leave  
c0107ff6:	c3                   	ret    

c0107ff7 <_divide_err>:

void _divide_err(unsigned long addr, int err_code)
{
c0107ff7:	55                   	push   %ebp
c0107ff8:	89 e5                	mov    %esp,%ebp
c0107ffa:	83 ec 08             	sub    $0x8,%esp
    vga_set_show(1,VGA_COLOR_BLACK,VGA_COLOR_BLUE);
c0107ffd:	83 ec 04             	sub    $0x4,%esp
c0108000:	6a 01                	push   $0x1
c0108002:	6a 00                	push   $0x0
c0108004:	6a 01                	push   $0x1
c0108006:	e8 c9 e0 ff ff       	call   c01060d4 <vga_set_show>
c010800b:	83 c4 10             	add    $0x10,%esp
    kprintf("divide err addr = 0x%x,err code = %d\n", addr,err_code);
c010800e:	83 ec 04             	sub    $0x4,%esp
c0108011:	ff 75 0c             	push   0xc(%ebp)
c0108014:	ff 75 08             	push   0x8(%ebp)
c0108017:	68 34 d3 d0 c0       	push   $0xc0d0d334
c010801c:	e8 10 1b 00 00       	call   c0109b31 <kprintf>
c0108021:	83 c4 10             	add    $0x10,%esp
}
c0108024:	90                   	nop
c0108025:	c9                   	leave  
c0108026:	c3                   	ret    

c0108027 <do_double_fault>:

void do_double_fault(unsigned long addr, int err_code)
{
c0108027:	55                   	push   %ebp
c0108028:	89 e5                	mov    %esp,%ebp
c010802a:	83 ec 08             	sub    $0x8,%esp
	kprintf("double_fault addr = 0x%x,err code = %d\n", addr,err_code);
c010802d:	83 ec 04             	sub    $0x4,%esp
c0108030:	ff 75 0c             	push   0xc(%ebp)
c0108033:	ff 75 08             	push   0x8(%ebp)
c0108036:	68 5c d3 d0 c0       	push   $0xc0d0d35c
c010803b:	e8 f1 1a 00 00       	call   c0109b31 <kprintf>
c0108040:	83 c4 10             	add    $0x10,%esp
}
c0108043:	90                   	nop
c0108044:	c9                   	leave  
c0108045:	c3                   	ret    

c0108046 <do_general_protection>:

void do_general_protection(unsigned long addr, int err_code)
{
c0108046:	55                   	push   %ebp
c0108047:	89 e5                	mov    %esp,%ebp
c0108049:	83 ec 08             	sub    $0x8,%esp
	kprintf("general_protection addr = 0x%x,err code = %d\n", addr,err_code);
c010804c:	83 ec 04             	sub    $0x4,%esp
c010804f:	ff 75 0c             	push   0xc(%ebp)
c0108052:	ff 75 08             	push   0x8(%ebp)
c0108055:	68 84 d3 d0 c0       	push   $0xc0d0d384
c010805a:	e8 d2 1a 00 00       	call   c0109b31 <kprintf>
c010805f:	83 c4 10             	add    $0x10,%esp
}
c0108062:	90                   	nop
c0108063:	c9                   	leave  
c0108064:	c3                   	ret    

c0108065 <do_int3>:


void do_int3(unsigned long addr, int err_code)
{
c0108065:	55                   	push   %ebp
c0108066:	89 e5                	mov    %esp,%ebp
c0108068:	83 ec 08             	sub    $0x8,%esp
    kprintf("int3 addr = 0x%x,err code = %d\n", addr,err_code);
c010806b:	83 ec 04             	sub    $0x4,%esp
c010806e:	ff 75 0c             	push   0xc(%ebp)
c0108071:	ff 75 08             	push   0x8(%ebp)
c0108074:	68 b4 d3 d0 c0       	push   $0xc0d0d3b4
c0108079:	e8 b3 1a 00 00       	call   c0109b31 <kprintf>
c010807e:	83 c4 10             	add    $0x10,%esp
}
c0108081:	90                   	nop
c0108082:	c9                   	leave  
c0108083:	c3                   	ret    

c0108084 <do_nmi>:

void do_nmi(unsigned long addr, int err_code)
{
c0108084:	55                   	push   %ebp
c0108085:	89 e5                	mov    %esp,%ebp
c0108087:	83 ec 08             	sub    $0x8,%esp
	kprintf("nmi addr = 0x%x,err code = %d\n", addr,err_code);
c010808a:	83 ec 04             	sub    $0x4,%esp
c010808d:	ff 75 0c             	push   0xc(%ebp)
c0108090:	ff 75 08             	push   0x8(%ebp)
c0108093:	68 d4 d3 d0 c0       	push   $0xc0d0d3d4
c0108098:	e8 94 1a 00 00       	call   c0109b31 <kprintf>
c010809d:	83 c4 10             	add    $0x10,%esp
}
c01080a0:	90                   	nop
c01080a1:	c9                   	leave  
c01080a2:	c3                   	ret    

c01080a3 <do_debug>:

void do_debug(unsigned long addr, int err_code)
{
c01080a3:	55                   	push   %ebp
c01080a4:	89 e5                	mov    %esp,%ebp
c01080a6:	83 ec 08             	sub    $0x8,%esp
	kprintf("debug addr = 0x%x,err code = %d\n", addr,err_code);
c01080a9:	83 ec 04             	sub    $0x4,%esp
c01080ac:	ff 75 0c             	push   0xc(%ebp)
c01080af:	ff 75 08             	push   0x8(%ebp)
c01080b2:	68 f4 d3 d0 c0       	push   $0xc0d0d3f4
c01080b7:	e8 75 1a 00 00       	call   c0109b31 <kprintf>
c01080bc:	83 c4 10             	add    $0x10,%esp
}
c01080bf:	90                   	nop
c01080c0:	c9                   	leave  
c01080c1:	c3                   	ret    

c01080c2 <do_overflow>:

void do_overflow(unsigned long addr, int err_code)
{
c01080c2:	55                   	push   %ebp
c01080c3:	89 e5                	mov    %esp,%ebp
c01080c5:	83 ec 08             	sub    $0x8,%esp
	kprintf("overflow addr = 0x%x,err code = %d\n", addr,err_code);
c01080c8:	83 ec 04             	sub    $0x4,%esp
c01080cb:	ff 75 0c             	push   0xc(%ebp)
c01080ce:	ff 75 08             	push   0x8(%ebp)
c01080d1:	68 18 d4 d0 c0       	push   $0xc0d0d418
c01080d6:	e8 56 1a 00 00       	call   c0109b31 <kprintf>
c01080db:	83 c4 10             	add    $0x10,%esp
}
c01080de:	90                   	nop
c01080df:	c9                   	leave  
c01080e0:	c3                   	ret    

c01080e1 <do_bounds>:

void do_bounds(unsigned long addr, int err_code)
{
c01080e1:	55                   	push   %ebp
c01080e2:	89 e5                	mov    %esp,%ebp
c01080e4:	83 ec 08             	sub    $0x8,%esp
	kprintf("bounds addr = 0x%x,err code = %d\n", addr,err_code);
c01080e7:	83 ec 04             	sub    $0x4,%esp
c01080ea:	ff 75 0c             	push   0xc(%ebp)
c01080ed:	ff 75 08             	push   0x8(%ebp)
c01080f0:	68 3c d4 d0 c0       	push   $0xc0d0d43c
c01080f5:	e8 37 1a 00 00       	call   c0109b31 <kprintf>
c01080fa:	83 c4 10             	add    $0x10,%esp
}
c01080fd:	90                   	nop
c01080fe:	c9                   	leave  
c01080ff:	c3                   	ret    

c0108100 <do_invalid_op>:

void do_invalid_op(unsigned long addr, int err_code)
{
c0108100:	55                   	push   %ebp
c0108101:	89 e5                	mov    %esp,%ebp
c0108103:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_op addr = 0x%x,err code = %d\n", addr,err_code);
c0108106:	83 ec 04             	sub    $0x4,%esp
c0108109:	ff 75 0c             	push   0xc(%ebp)
c010810c:	ff 75 08             	push   0x8(%ebp)
c010810f:	68 60 d4 d0 c0       	push   $0xc0d0d460
c0108114:	e8 18 1a 00 00       	call   c0109b31 <kprintf>
c0108119:	83 c4 10             	add    $0x10,%esp
}
c010811c:	90                   	nop
c010811d:	c9                   	leave  
c010811e:	c3                   	ret    

c010811f <do_device_not_available>:

void do_device_not_available(unsigned long addr, int err_code)
{
c010811f:	55                   	push   %ebp
c0108120:	89 e5                	mov    %esp,%ebp
c0108122:	83 ec 08             	sub    $0x8,%esp
	kprintf("device_not_availabel addr = 0x%x,err code = %d\n", addr,err_code);
c0108125:	83 ec 04             	sub    $0x4,%esp
c0108128:	ff 75 0c             	push   0xc(%ebp)
c010812b:	ff 75 08             	push   0x8(%ebp)
c010812e:	68 88 d4 d0 c0       	push   $0xc0d0d488
c0108133:	e8 f9 19 00 00       	call   c0109b31 <kprintf>
c0108138:	83 c4 10             	add    $0x10,%esp
}
c010813b:	90                   	nop
c010813c:	c9                   	leave  
c010813d:	c3                   	ret    

c010813e <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(unsigned long addr, int err_code)
{
c010813e:	55                   	push   %ebp
c010813f:	89 e5                	mov    %esp,%ebp
c0108141:	83 ec 08             	sub    $0x8,%esp
	kprintf("coprprocessor_segment_overrun addr = 0x%x,err code = %d\n", addr,err_code);
c0108144:	83 ec 04             	sub    $0x4,%esp
c0108147:	ff 75 0c             	push   0xc(%ebp)
c010814a:	ff 75 08             	push   0x8(%ebp)
c010814d:	68 b8 d4 d0 c0       	push   $0xc0d0d4b8
c0108152:	e8 da 19 00 00       	call   c0109b31 <kprintf>
c0108157:	83 c4 10             	add    $0x10,%esp
}
c010815a:	90                   	nop
c010815b:	c9                   	leave  
c010815c:	c3                   	ret    

c010815d <do_invalid_TSS>:

void do_invalid_TSS(unsigned long addr, int err_code)
{
c010815d:	55                   	push   %ebp
c010815e:	89 e5                	mov    %esp,%ebp
c0108160:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_TSS addr = 0x%x,err code = %d\n", addr,err_code);
c0108163:	83 ec 04             	sub    $0x4,%esp
c0108166:	ff 75 0c             	push   0xc(%ebp)
c0108169:	ff 75 08             	push   0x8(%ebp)
c010816c:	68 f4 d4 d0 c0       	push   $0xc0d0d4f4
c0108171:	e8 bb 19 00 00       	call   c0109b31 <kprintf>
c0108176:	83 c4 10             	add    $0x10,%esp
}
c0108179:	90                   	nop
c010817a:	c9                   	leave  
c010817b:	c3                   	ret    

c010817c <do_segment_not_present>:

void do_segment_not_present(unsigned long addr, int err_code)
{
c010817c:	55                   	push   %ebp
c010817d:	89 e5                	mov    %esp,%ebp
c010817f:	83 ec 08             	sub    $0x8,%esp
	kprintf("segment not present addr = 0x%x,err code = %d\n", addr,err_code);
c0108182:	83 ec 04             	sub    $0x4,%esp
c0108185:	ff 75 0c             	push   0xc(%ebp)
c0108188:	ff 75 08             	push   0x8(%ebp)
c010818b:	68 1c d5 d0 c0       	push   $0xc0d0d51c
c0108190:	e8 9c 19 00 00       	call   c0109b31 <kprintf>
c0108195:	83 c4 10             	add    $0x10,%esp
}
c0108198:	90                   	nop
c0108199:	c9                   	leave  
c010819a:	c3                   	ret    

c010819b <do_stack_segment>:

void do_stack_segment(unsigned long addr, int err_code)
{
c010819b:	55                   	push   %ebp
c010819c:	89 e5                	mov    %esp,%ebp
c010819e:	83 ec 08             	sub    $0x8,%esp
	kprintf("stack_segment addr = 0x%x,err code = %d\n", addr,err_code);
c01081a1:	83 ec 04             	sub    $0x4,%esp
c01081a4:	ff 75 0c             	push   0xc(%ebp)
c01081a7:	ff 75 08             	push   0x8(%ebp)
c01081aa:	68 4c d5 d0 c0       	push   $0xc0d0d54c
c01081af:	e8 7d 19 00 00       	call   c0109b31 <kprintf>
c01081b4:	83 c4 10             	add    $0x10,%esp
}
c01081b7:	90                   	nop
c01081b8:	c9                   	leave  
c01081b9:	c3                   	ret    

c01081ba <do_coprocessor_error>:

void do_coprocessor_error(unsigned long addr, int err_code)
{
c01081ba:	55                   	push   %ebp
c01081bb:	89 e5                	mov    %esp,%ebp
c01081bd:	83 ec 08             	sub    $0x8,%esp
    kprintf("coprocessor_err addr = 0x%x,err code = %d\n", addr,err_code);
c01081c0:	83 ec 04             	sub    $0x4,%esp
c01081c3:	ff 75 0c             	push   0xc(%ebp)
c01081c6:	ff 75 08             	push   0x8(%ebp)
c01081c9:	68 78 d5 d0 c0       	push   $0xc0d0d578
c01081ce:	e8 5e 19 00 00       	call   c0109b31 <kprintf>
c01081d3:	83 c4 10             	add    $0x10,%esp
}
c01081d6:	90                   	nop
c01081d7:	c9                   	leave  
c01081d8:	c3                   	ret    

c01081d9 <do_reserved>:

void do_reserved(unsigned long addr, int err_code)
{
c01081d9:	55                   	push   %ebp
c01081da:	89 e5                	mov    %esp,%ebp
c01081dc:	83 ec 08             	sub    $0x8,%esp
	kprintf("reserved addr = 0x%x,err code = %d\n", addr,err_code);
c01081df:	83 ec 04             	sub    $0x4,%esp
c01081e2:	ff 75 0c             	push   0xc(%ebp)
c01081e5:	ff 75 08             	push   0x8(%ebp)
c01081e8:	68 a4 d5 d0 c0       	push   $0xc0d0d5a4
c01081ed:	e8 3f 19 00 00       	call   c0109b31 <kprintf>
c01081f2:	83 c4 10             	add    $0x10,%esp
}
c01081f5:	90                   	nop
c01081f6:	c9                   	leave  
c01081f7:	c3                   	ret    

c01081f8 <intr_time_handler>:
c01081f8:	6a 00                	push   $0x0
c01081fa:	6a 20                	push   $0x20
c01081fc:	eb 09                	jmp    c0108207 <interrupt_wrapper>

c01081fe <intr_syscall_handler>:
c01081fe:	6a 00                	push   $0x0
c0108200:	68 80 00 00 00       	push   $0x80
c0108205:	eb 00                	jmp    c0108207 <interrupt_wrapper>

c0108207 <interrupt_wrapper>:
c0108207:	54                   	push   %esp
c0108208:	56                   	push   %esi
c0108209:	55                   	push   %ebp
c010820a:	57                   	push   %edi
c010820b:	52                   	push   %edx
c010820c:	51                   	push   %ecx
c010820d:	53                   	push   %ebx
c010820e:	50                   	push   %eax
c010820f:	89 e0                	mov    %esp,%eax
c0108211:	83 e4 f0             	and    $0xfffffff0,%esp
c0108214:	83 ec 10             	sub    $0x10,%esp
c0108217:	89 04 24             	mov    %eax,(%esp)
c010821a:	e8 ef fc ff ff       	call   c0107f0e <intr_handler>

c010821f <soft_iret>:
c010821f:	5c                   	pop    %esp
c0108220:	58                   	pop    %eax
c0108221:	5b                   	pop    %ebx
c0108222:	59                   	pop    %ecx
c0108223:	5a                   	pop    %edx
c0108224:	5f                   	pop    %edi
c0108225:	5d                   	pop    %ebp
c0108226:	5e                   	pop    %esi
c0108227:	5c                   	pop    %esp
c0108228:	83 c4 08             	add    $0x8,%esp
c010822b:	cf                   	iret   

c010822c <_no_err_code>:
c010822c:	87 04 24             	xchg   %eax,(%esp)
c010822f:	53                   	push   %ebx
c0108230:	51                   	push   %ecx
c0108231:	52                   	push   %edx
c0108232:	57                   	push   %edi
c0108233:	56                   	push   %esi
c0108234:	55                   	push   %ebp
c0108235:	1e                   	push   %ds
c0108236:	06                   	push   %es
c0108237:	0f a0                	push   %fs
c0108239:	6a 00                	push   $0x0
c010823b:	8d 54 24 2c          	lea    0x2c(%esp),%edx
c010823f:	52                   	push   %edx
c0108240:	ba 10 00 00 00       	mov    $0x10,%edx
c0108245:	8e da                	mov    %edx,%ds
c0108247:	8e c2                	mov    %edx,%es
c0108249:	8e e2                	mov    %edx,%fs
c010824b:	ff d0                	call   *%eax
c010824d:	83 c4 08             	add    $0x8,%esp
c0108250:	0f a1                	pop    %fs
c0108252:	07                   	pop    %es
c0108253:	1f                   	pop    %ds
c0108254:	5d                   	pop    %ebp
c0108255:	5e                   	pop    %esi
c0108256:	5f                   	pop    %edi
c0108257:	5a                   	pop    %edx
c0108258:	59                   	pop    %ecx
c0108259:	5b                   	pop    %ebx
c010825a:	58                   	pop    %eax
c010825b:	cf                   	iret   

c010825c <_err_code>:
c010825c:	87 44 24 04          	xchg   %eax,0x4(%esp)
c0108260:	87 1c 24             	xchg   %ebx,(%esp)
c0108263:	51                   	push   %ecx
c0108264:	52                   	push   %edx
c0108265:	57                   	push   %edi
c0108266:	56                   	push   %esi
c0108267:	55                   	push   %ebp
c0108268:	1e                   	push   %ds
c0108269:	06                   	push   %es
c010826a:	0f a0                	push   %fs
c010826c:	50                   	push   %eax
c010826d:	8d 44 24 2c          	lea    0x2c(%esp),%eax
c0108271:	50                   	push   %eax
c0108272:	b8 10 00 00 00       	mov    $0x10,%eax
c0108277:	8e d8                	mov    %eax,%ds
c0108279:	8e c0                	mov    %eax,%es
c010827b:	8e e0                	mov    %eax,%fs
c010827d:	ff d3                	call   *%ebx
c010827f:	83 c4 08             	add    $0x8,%esp
c0108282:	0f a1                	pop    %fs
c0108284:	07                   	pop    %es
c0108285:	1f                   	pop    %ds
c0108286:	5d                   	pop    %ebp
c0108287:	5e                   	pop    %esi
c0108288:	5f                   	pop    %edi
c0108289:	5a                   	pop    %edx
c010828a:	59                   	pop    %ecx
c010828b:	5b                   	pop    %ebx
c010828c:	58                   	pop    %eax
c010828d:	cf                   	iret   

c010828e <divide_error>:
c010828e:	68 f7 7f 10 c0       	push   $0xc0107ff7
c0108293:	eb 97                	jmp    c010822c <_no_err_code>

c0108295 <debug>:
c0108295:	68 65 80 10 c0       	push   $0xc0108065
c010829a:	eb 90                	jmp    c010822c <_no_err_code>

c010829c <nmi>:
c010829c:	68 84 80 10 c0       	push   $0xc0108084
c01082a1:	eb 89                	jmp    c010822c <_no_err_code>

c01082a3 <int3>:
c01082a3:	68 65 80 10 c0       	push   $0xc0108065
c01082a8:	eb 82                	jmp    c010822c <_no_err_code>

c01082aa <overflow>:
c01082aa:	68 c2 80 10 c0       	push   $0xc01080c2
c01082af:	e9 78 ff ff ff       	jmp    c010822c <_no_err_code>

c01082b4 <bounds>:
c01082b4:	68 e1 80 10 c0       	push   $0xc01080e1
c01082b9:	e9 6e ff ff ff       	jmp    c010822c <_no_err_code>

c01082be <invalid_op>:
c01082be:	68 00 81 10 c0       	push   $0xc0108100
c01082c3:	e9 64 ff ff ff       	jmp    c010822c <_no_err_code>

c01082c8 <coprocessor_segment_overrun>:
c01082c8:	68 3e 81 10 c0       	push   $0xc010813e
c01082cd:	e9 5a ff ff ff       	jmp    c010822c <_no_err_code>

c01082d2 <reserved>:
c01082d2:	68 d9 81 10 c0       	push   $0xc01081d9
c01082d7:	e9 50 ff ff ff       	jmp    c010822c <_no_err_code>

c01082dc <invalid_TSS>:
c01082dc:	68 5d 81 10 c0       	push   $0xc010815d
c01082e1:	e9 76 ff ff ff       	jmp    c010825c <_err_code>

c01082e6 <segment_not_present>:
c01082e6:	68 7c 81 10 c0       	push   $0xc010817c
c01082eb:	e9 6c ff ff ff       	jmp    c010825c <_err_code>

c01082f0 <stack_segment>:
c01082f0:	68 9b 81 10 c0       	push   $0xc010819b
c01082f5:	e9 62 ff ff ff       	jmp    c010825c <_err_code>

c01082fa <general_protection>:
c01082fa:	68 46 80 10 c0       	push   $0xc0108046
c01082ff:	e9 58 ff ff ff       	jmp    c010825c <_err_code>

c0108304 <__get_cpuid_max>:
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
c0108304:	55                   	push   %ebp
c0108305:	89 e5                	mov    %esp,%ebp
c0108307:	53                   	push   %ebx
c0108308:	83 ec 10             	sub    $0x10,%esp
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
c010830b:	9c                   	pushf  
c010830c:	9c                   	pushf  
c010830d:	5a                   	pop    %edx
c010830e:	89 d0                	mov    %edx,%eax
c0108310:	81 f2 00 00 20 00    	xor    $0x200000,%edx
c0108316:	52                   	push   %edx
c0108317:	9d                   	popf   
c0108318:	9c                   	pushf  
c0108319:	5a                   	pop    %edx
c010831a:	9d                   	popf   
c010831b:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010831e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
c0108321:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108324:	33 45 f4             	xor    -0xc(%ebp),%eax
c0108327:	25 00 00 20 00       	and    $0x200000,%eax
c010832c:	85 c0                	test   %eax,%eax
c010832e:	75 07                	jne    c0108337 <__get_cpuid_max+0x33>
    return 0;
c0108330:	b8 00 00 00 00       	mov    $0x0,%eax
c0108335:	eb 30                	jmp    c0108367 <__get_cpuid_max+0x63>
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
c0108337:	8b 45 08             	mov    0x8(%ebp),%eax
c010833a:	b9 00 00 00 00       	mov    $0x0,%ecx
c010833f:	ba 00 00 00 00       	mov    $0x0,%edx
c0108344:	89 cb                	mov    %ecx,%ebx
c0108346:	89 d1                	mov    %edx,%ecx
c0108348:	0f a2                	cpuid  
c010834a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010834d:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c0108350:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0108353:	89 55 ec             	mov    %edx,-0x14(%ebp)

  if (__sig)
c0108356:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010835a:	74 08                	je     c0108364 <__get_cpuid_max+0x60>
    *__sig = __ebx;
c010835c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010835f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108362:	89 10                	mov    %edx,(%eax)

  return __eax;
c0108364:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0108367:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010836a:	c9                   	leave  
c010836b:	c3                   	ret    

c010836c <__get_cpuid>:

static __inline int
__get_cpuid (unsigned int __leaf,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
c010836c:	55                   	push   %ebp
c010836d:	89 e5                	mov    %esp,%ebp
c010836f:	56                   	push   %esi
c0108370:	53                   	push   %ebx
c0108371:	83 ec 10             	sub    $0x10,%esp
  unsigned int __ext = __leaf & 0x80000000;
c0108374:	8b 45 08             	mov    0x8(%ebp),%eax
c0108377:	25 00 00 00 80       	and    $0x80000000,%eax
c010837c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  unsigned int __maxlevel = __get_cpuid_max (__ext, 0);
c010837f:	6a 00                	push   $0x0
c0108381:	ff 75 f4             	push   -0xc(%ebp)
c0108384:	e8 7b ff ff ff       	call   c0108304 <__get_cpuid_max>
c0108389:	83 c4 08             	add    $0x8,%esp
c010838c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (__maxlevel == 0 || __maxlevel < __leaf)
c010838f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108393:	74 08                	je     c010839d <__get_cpuid+0x31>
c0108395:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108398:	3b 45 08             	cmp    0x8(%ebp),%eax
c010839b:	73 07                	jae    c01083a4 <__get_cpuid+0x38>
    return 0;
c010839d:	b8 00 00 00 00       	mov    $0x0,%eax
c01083a2:	eb 2c                	jmp    c01083d0 <__get_cpuid+0x64>

  __cpuid (__leaf, *__eax, *__ebx, *__ecx, *__edx);
c01083a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01083a7:	b9 00 00 00 00       	mov    $0x0,%ecx
c01083ac:	ba 00 00 00 00       	mov    $0x0,%edx
c01083b1:	89 cb                	mov    %ecx,%ebx
c01083b3:	89 d1                	mov    %edx,%ecx
c01083b5:	0f a2                	cpuid  
c01083b7:	8b 75 0c             	mov    0xc(%ebp),%esi
c01083ba:	89 06                	mov    %eax,(%esi)
c01083bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01083bf:	89 18                	mov    %ebx,(%eax)
c01083c1:	8b 45 14             	mov    0x14(%ebp),%eax
c01083c4:	89 08                	mov    %ecx,(%eax)
c01083c6:	8b 45 18             	mov    0x18(%ebp),%eax
c01083c9:	89 10                	mov    %edx,(%eax)
  return 1;
c01083cb:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01083d0:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01083d3:	5b                   	pop    %ebx
c01083d4:	5e                   	pop    %esi
c01083d5:	5d                   	pop    %ebp
c01083d6:	c3                   	ret    

c01083d7 <cpu_get_model>:
#include <kernel/cpu/cpu.h>
#include <stdint.h>
#include <cpuid.h>

void cpu_get_model(char* model_out) {
c01083d7:	55                   	push   %ebp
c01083d8:	89 e5                	mov    %esp,%ebp
c01083da:	83 ec 20             	sub    $0x20,%esp
    uint32_t* out = (uint32_t*)model_out;
c01083dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01083e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    reg32 eax, ebx, edx, ecx;
    
    __get_cpuid(0, &eax, &ebx, &ecx, &edx);
c01083e3:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01083e6:	50                   	push   %eax
c01083e7:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01083ea:	50                   	push   %eax
c01083eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01083ee:	50                   	push   %eax
c01083ef:	8d 45 f8             	lea    -0x8(%ebp),%eax
c01083f2:	50                   	push   %eax
c01083f3:	6a 00                	push   $0x0
c01083f5:	e8 72 ff ff ff       	call   c010836c <__get_cpuid>
c01083fa:	83 c4 14             	add    $0x14,%esp

    out[0] = ebx;
c01083fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108400:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108403:	89 10                	mov    %edx,(%eax)
    out[1] = edx;
c0108405:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108408:	8d 50 04             	lea    0x4(%eax),%edx
c010840b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010840e:	89 02                	mov    %eax,(%edx)
    out[2] = ecx;
c0108410:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108413:	8d 50 08             	lea    0x8(%eax),%edx
c0108416:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108419:	89 02                	mov    %eax,(%edx)
    model_out[12] = '\0';
c010841b:	8b 45 08             	mov    0x8(%ebp),%eax
c010841e:	83 c0 0c             	add    $0xc,%eax
c0108421:	c6 00 00             	movb   $0x0,(%eax)
}
c0108424:	90                   	nop
c0108425:	c9                   	leave  
c0108426:	c3                   	ret    

c0108427 <cpu_brand_string_supported>:

#define BRAND_LEAF 0x80000000UL

int cpu_brand_string_supported() {
c0108427:	55                   	push   %ebp
c0108428:	89 e5                	mov    %esp,%ebp
c010842a:	83 ec 10             	sub    $0x10,%esp
    reg32 supported = __get_cpuid_max(BRAND_LEAF, 0);
c010842d:	6a 00                	push   $0x0
c010842f:	68 00 00 00 80       	push   $0x80000000
c0108434:	e8 cb fe ff ff       	call   c0108304 <__get_cpuid_max>
c0108439:	83 c4 08             	add    $0x8,%esp
c010843c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (supported >= 0x80000004UL);
c010843f:	81 7d fc 03 00 00 80 	cmpl   $0x80000003,-0x4(%ebp)
c0108446:	0f 97 c0             	seta   %al
c0108449:	0f b6 c0             	movzbl %al,%eax
}
c010844c:	c9                   	leave  
c010844d:	c3                   	ret    

c010844e <cpu_get_brand>:

void cpu_get_brand(char* brand_out) {
c010844e:	55                   	push   %ebp
c010844f:	89 e5                	mov    %esp,%ebp
c0108451:	83 ec 20             	sub    $0x20,%esp
    if(!cpu_brand_string_supported()) {
c0108454:	e8 ce ff ff ff       	call   c0108427 <cpu_brand_string_supported>
c0108459:	85 c0                	test   %eax,%eax
c010845b:	75 0f                	jne    c010846c <cpu_get_brand+0x1e>
        brand_out[0] = '?';
c010845d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108460:	c6 00 3f             	movb   $0x3f,(%eax)
        brand_out[1] = '\0';
c0108463:	8b 45 08             	mov    0x8(%ebp),%eax
c0108466:	83 c0 01             	add    $0x1,%eax
c0108469:	c6 00 00             	movb   $0x0,(%eax)
    }
    uint32_t* out = (uint32_t*) brand_out;
c010846c:	8b 45 08             	mov    0x8(%ebp),%eax
c010846f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    reg32 eax, ebx, edx, ecx;
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0108472:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
c0108479:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0108480:	e9 83 00 00 00       	jmp    c0108508 <cpu_get_brand+0xba>
    {
        __get_cpuid(BRAND_LEAF + i, &eax, &ebx, &ecx, &edx);
c0108485:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108488:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
c010848e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0108491:	50                   	push   %eax
c0108492:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0108495:	50                   	push   %eax
c0108496:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108499:	50                   	push   %eax
c010849a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010849d:	50                   	push   %eax
c010849e:	52                   	push   %edx
c010849f:	e8 c8 fe ff ff       	call   c010836c <__get_cpuid>
c01084a4:	83 c4 14             	add    $0x14,%esp
        out[j] = eax;
c01084a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01084aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01084b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084b4:	01 c2                	add    %eax,%edx
c01084b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084b9:	89 02                	mov    %eax,(%edx)
        out[j + 1] = ebx;
c01084bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01084be:	83 c0 01             	add    $0x1,%eax
c01084c1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01084c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084cb:	01 c2                	add    %eax,%edx
c01084cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084d0:	89 02                	mov    %eax,(%edx)
        out[j + 2] = ecx;
c01084d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01084d5:	83 c0 02             	add    $0x2,%eax
c01084d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01084df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e2:	01 c2                	add    %eax,%edx
c01084e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084e7:	89 02                	mov    %eax,(%edx)
        out[j + 3] = edx;
c01084e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01084ec:	83 c0 03             	add    $0x3,%eax
c01084ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01084f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084f9:	01 c2                	add    %eax,%edx
c01084fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084fe:	89 02                	mov    %eax,(%edx)
        j+=4;
c0108500:	83 45 f8 04          	addl   $0x4,-0x8(%ebp)
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0108504:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0108508:	83 7d fc 04          	cmpl   $0x4,-0x4(%ebp)
c010850c:	0f 86 73 ff ff ff    	jbe    c0108485 <cpu_get_brand+0x37>
    }
    brand_out[48] = '\0';
c0108512:	8b 45 08             	mov    0x8(%ebp),%eax
c0108515:	83 c0 30             	add    $0x30,%eax
c0108518:	c6 00 00             	movb   $0x0,(%eax)
}
c010851b:	90                   	nop
c010851c:	c9                   	leave  
c010851d:	c3                   	ret    

c010851e <cpu_r_cr0>:

reg32 cpu_r_cr0() {
c010851e:	55                   	push   %ebp
c010851f:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr0, %eax");
c0108521:	0f 20 c0             	mov    %cr0,%eax
}
c0108524:	90                   	nop
c0108525:	5d                   	pop    %ebp
c0108526:	c3                   	ret    

c0108527 <cpu_r_cr2>:

reg32 cpu_r_cr2() {
c0108527:	55                   	push   %ebp
c0108528:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr2, %eax");
c010852a:	0f 20 d0             	mov    %cr2,%eax
}
c010852d:	90                   	nop
c010852e:	5d                   	pop    %ebp
c010852f:	c3                   	ret    

c0108530 <cpu_r_cr3>:

reg32 cpu_r_cr3() {
c0108530:	55                   	push   %ebp
c0108531:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr3, %eax");
c0108533:	0f 20 d8             	mov    %cr3,%eax
}
c0108536:	90                   	nop
c0108537:	5d                   	pop    %ebp
c0108538:	c3                   	ret    

c0108539 <cpu_w_cr0>:

void cpu_w_cr0(reg32 v) {
c0108539:	55                   	push   %ebp
c010853a:	89 e5                	mov    %esp,%ebp
    asm volatile (
c010853c:	8b 45 08             	mov    0x8(%ebp),%eax
c010853f:	0f 22 c0             	mov    %eax,%cr0
        "mov %0, %%cr0"
        :: "r"(v)
    );
}
c0108542:	90                   	nop
c0108543:	5d                   	pop    %ebp
c0108544:	c3                   	ret    

c0108545 <cpu_w_cr2>:

void cpu_w_cr2(reg32 v) {
c0108545:	55                   	push   %ebp
c0108546:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0108548:	8b 45 08             	mov    0x8(%ebp),%eax
c010854b:	0f 22 d0             	mov    %eax,%cr2
        "mov %0, %%cr2"
        :: "r"(v)
    );
}
c010854e:	90                   	nop
c010854f:	5d                   	pop    %ebp
c0108550:	c3                   	ret    

c0108551 <cpu_w_cr3>:

void cpu_w_cr3(reg32 v) {
c0108551:	55                   	push   %ebp
c0108552:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0108554:	8b 45 08             	mov    0x8(%ebp),%eax
c0108557:	0f 22 d8             	mov    %eax,%cr3
        "mov %0, %%cr3"
        :: "r"(v)
    );
}
c010855a:	90                   	nop
c010855b:	5d                   	pop    %ebp
c010855c:	c3                   	ret    

c010855d <_set_gdt_entry>:
uint64_t _gdt[GDT_ENTRY];
uint16_t _gdt_limit = sizeof(_gdt) - 1;

extern struct x86_tss _tss;

void _set_gdt_entry(uint32_t index, uint32_t base, uint32_t limit, uint32_t flags) {
c010855d:	55                   	push   %ebp
c010855e:	89 e5                	mov    %esp,%ebp
c0108560:	57                   	push   %edi
c0108561:	56                   	push   %esi
c0108562:	53                   	push   %ebx
c0108563:	83 ec 0c             	sub    $0xc,%esp
    _gdt[index] = SEG_BASE_H(base) | flags | SEG_LIM_H(limit) | SEG_BASE_M(base);
c0108566:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108569:	25 00 00 00 ff       	and    $0xff000000,%eax
c010856e:	0b 45 14             	or     0x14(%ebp),%eax
c0108571:	89 c2                	mov    %eax,%edx
c0108573:	8b 45 10             	mov    0x10(%ebp),%eax
c0108576:	25 00 00 0f 00       	and    $0xf0000,%eax
c010857b:	09 c2                	or     %eax,%edx
c010857d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108580:	c1 e8 10             	shr    $0x10,%eax
c0108583:	0f b6 c0             	movzbl %al,%eax
c0108586:	09 d0                	or     %edx,%eax
c0108588:	ba 00 00 00 00       	mov    $0x0,%edx
c010858d:	8b 75 08             	mov    0x8(%ebp),%esi
c0108590:	89 04 f5 00 a5 d0 c0 	mov    %eax,-0x3f2f5b00(,%esi,8)
c0108597:	89 14 f5 04 a5 d0 c0 	mov    %edx,-0x3f2f5afc(,%esi,8)
    _gdt[index] <<= 32;
c010859e:	8b 45 08             	mov    0x8(%ebp),%eax
c01085a1:	8b 14 c5 04 a5 d0 c0 	mov    -0x3f2f5afc(,%eax,8),%edx
c01085a8:	8b 04 c5 00 a5 d0 c0 	mov    -0x3f2f5b00(,%eax,8),%eax
c01085af:	89 c2                	mov    %eax,%edx
c01085b1:	b8 00 00 00 00       	mov    $0x0,%eax
c01085b6:	8b 75 08             	mov    0x8(%ebp),%esi
c01085b9:	89 04 f5 00 a5 d0 c0 	mov    %eax,-0x3f2f5b00(,%esi,8)
c01085c0:	89 14 f5 04 a5 d0 c0 	mov    %edx,-0x3f2f5afc(,%esi,8)
    _gdt[index] |= SEG_BASE_L(base) | SEG_LIM_L(limit);
c01085c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01085ca:	8b 14 c5 04 a5 d0 c0 	mov    -0x3f2f5afc(,%eax,8),%edx
c01085d1:	8b 04 c5 00 a5 d0 c0 	mov    -0x3f2f5b00(,%eax,8),%eax
c01085d8:	8b 75 0c             	mov    0xc(%ebp),%esi
c01085db:	89 f7                	mov    %esi,%edi
c01085dd:	c1 e7 10             	shl    $0x10,%edi
c01085e0:	8b 75 10             	mov    0x10(%ebp),%esi
c01085e3:	0f b7 f6             	movzwl %si,%esi
c01085e6:	09 fe                	or     %edi,%esi
c01085e8:	bf 00 00 00 00       	mov    $0x0,%edi
c01085ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01085f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01085f3:	09 f0                	or     %esi,%eax
c01085f5:	89 c1                	mov    %eax,%ecx
c01085f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085fa:	09 f8                	or     %edi,%eax
c01085fc:	89 c3                	mov    %eax,%ebx
c01085fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0108601:	89 0c c5 00 a5 d0 c0 	mov    %ecx,-0x3f2f5b00(,%eax,8)
c0108608:	89 1c c5 04 a5 d0 c0 	mov    %ebx,-0x3f2f5afc(,%eax,8)
}
c010860f:	90                   	nop
c0108610:	83 c4 0c             	add    $0xc,%esp
c0108613:	5b                   	pop    %ebx
c0108614:	5e                   	pop    %esi
c0108615:	5f                   	pop    %edi
c0108616:	5d                   	pop    %ebp
c0108617:	c3                   	ret    

c0108618 <_init_gdt>:
// 
void
_init_gdt() {
c0108618:	55                   	push   %ebp
c0108619:	89 e5                	mov    %esp,%ebp
    _set_gdt_entry(0, 0, 0, 0);
c010861b:	6a 00                	push   $0x0
c010861d:	6a 00                	push   $0x0
c010861f:	6a 00                	push   $0x0
c0108621:	6a 00                	push   $0x0
c0108623:	e8 35 ff ff ff       	call   c010855d <_set_gdt_entry>
c0108628:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(1, 0, 0xfffff, SEG_R0_CODE);
c010862b:	68 00 9a c0 00       	push   $0xc09a00
c0108630:	68 ff ff 0f 00       	push   $0xfffff
c0108635:	6a 00                	push   $0x0
c0108637:	6a 01                	push   $0x1
c0108639:	e8 1f ff ff ff       	call   c010855d <_set_gdt_entry>
c010863e:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(2, 0, 0xfffff, SEG_R0_DATA);
c0108641:	68 00 92 c0 00       	push   $0xc09200
c0108646:	68 ff ff 0f 00       	push   $0xfffff
c010864b:	6a 00                	push   $0x0
c010864d:	6a 02                	push   $0x2
c010864f:	e8 09 ff ff ff       	call   c010855d <_set_gdt_entry>
c0108654:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(3, 0, 0xfffff, SEG_R3_CODE);
c0108657:	68 00 fa c0 00       	push   $0xc0fa00
c010865c:	68 ff ff 0f 00       	push   $0xfffff
c0108661:	6a 00                	push   $0x0
c0108663:	6a 03                	push   $0x3
c0108665:	e8 f3 fe ff ff       	call   c010855d <_set_gdt_entry>
c010866a:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(4, 0, 0xfffff, SEG_R3_DATA);
c010866d:	68 00 f2 c0 00       	push   $0xc0f200
c0108672:	68 ff ff 0f 00       	push   $0xfffff
c0108677:	6a 00                	push   $0x0
c0108679:	6a 04                	push   $0x4
c010867b:	e8 dd fe ff ff       	call   c010855d <_set_gdt_entry>
c0108680:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(5, &_tss, sizeof(struct x86_tss) - 1, SEG_TSS);
c0108683:	b8 20 c0 d0 c0       	mov    $0xc0d0c020,%eax
c0108688:	68 00 89 00 00       	push   $0x8900
c010868d:	6a 67                	push   $0x67
c010868f:	50                   	push   %eax
c0108690:	6a 05                	push   $0x5
c0108692:	e8 c6 fe ff ff       	call   c010855d <_set_gdt_entry>
c0108697:	83 c4 10             	add    $0x10,%esp
c010869a:	90                   	nop
c010869b:	c9                   	leave  
c010869c:	c3                   	ret    

c010869d <tss_update_esp>:
    .esp0 = KSTACK_START,
    .ss0  = KDATA_SEG,
    .__padding = {0}
};

void tss_update_esp(uint32_t esp0) {
c010869d:	55                   	push   %ebp
c010869e:	89 e5                	mov    %esp,%ebp
    _tss.esp0 = esp0;
c01086a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01086a3:	a3 24 c0 d0 c0       	mov    %eax,0xc0d0c024
c01086a8:	90                   	nop
c01086a9:	5d                   	pop    %ebp
c01086aa:	c3                   	ret    

c01086ab <_set_idt_entry>:
#define IDT_ENTRY 256

uint64_t _idt[IDT_ENTRY];
uint16_t _idt_limit = sizeof(_idt) - 1;

void _set_idt_entry(uint32_t vector, uint16_t seg_selector, void (*isr)(), uint8_t dpl) {
c01086ab:	55                   	push   %ebp
c01086ac:	89 e5                	mov    %esp,%ebp
c01086ae:	57                   	push   %edi
c01086af:	56                   	push   %esi
c01086b0:	53                   	push   %ebx
c01086b1:	83 ec 24             	sub    $0x24,%esp
c01086b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086b7:	8b 55 14             	mov    0x14(%ebp),%edx
c01086ba:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c01086be:	89 d0                	mov    %edx,%eax
c01086c0:	88 45 d8             	mov    %al,-0x28(%ebp)
    uintptr_t offset = (uintptr_t)isr;
c01086c3:	8b 45 10             	mov    0x10(%ebp),%eax
c01086c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    _idt[vector] = (offset & 0xffff0000) | IDT_ATTR(dpl);
c01086c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086cc:	66 b8 00 00          	mov    $0x0,%ax
c01086d0:	89 c2                	mov    %eax,%edx
c01086d2:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01086d6:	c1 e0 0d             	shl    $0xd,%eax
c01086d9:	25 00 60 00 00       	and    $0x6000,%eax
c01086de:	09 d0                	or     %edx,%eax
c01086e0:	80 cc 8e             	or     $0x8e,%ah
c01086e3:	ba 00 00 00 00       	mov    $0x0,%edx
c01086e8:	8b 75 08             	mov    0x8(%ebp),%esi
c01086eb:	89 04 f5 40 a5 d0 c0 	mov    %eax,-0x3f2f5ac0(,%esi,8)
c01086f2:	89 14 f5 44 a5 d0 c0 	mov    %edx,-0x3f2f5abc(,%esi,8)
    _idt[vector] <<= 32;
c01086f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01086fc:	8b 14 c5 44 a5 d0 c0 	mov    -0x3f2f5abc(,%eax,8),%edx
c0108703:	8b 04 c5 40 a5 d0 c0 	mov    -0x3f2f5ac0(,%eax,8),%eax
c010870a:	89 c2                	mov    %eax,%edx
c010870c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108711:	8b 75 08             	mov    0x8(%ebp),%esi
c0108714:	89 04 f5 40 a5 d0 c0 	mov    %eax,-0x3f2f5ac0(,%esi,8)
c010871b:	89 14 f5 44 a5 d0 c0 	mov    %edx,-0x3f2f5abc(,%esi,8)
    _idt[vector] |= (seg_selector << 16) | (offset & 0x0000ffff);
c0108722:	8b 45 08             	mov    0x8(%ebp),%eax
c0108725:	8b 14 c5 44 a5 d0 c0 	mov    -0x3f2f5abc(,%eax,8),%edx
c010872c:	8b 04 c5 40 a5 d0 c0 	mov    -0x3f2f5ac0(,%eax,8),%eax
c0108733:	0f b7 75 dc          	movzwl -0x24(%ebp),%esi
c0108737:	c1 e6 10             	shl    $0x10,%esi
c010873a:	89 f7                	mov    %esi,%edi
c010873c:	8b 75 ec             	mov    -0x14(%ebp),%esi
c010873f:	0f b7 f6             	movzwl %si,%esi
c0108742:	09 fe                	or     %edi,%esi
c0108744:	bf 00 00 00 00       	mov    $0x0,%edi
c0108749:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010874c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010874f:	09 f0                	or     %esi,%eax
c0108751:	89 c1                	mov    %eax,%ecx
c0108753:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108756:	09 f8                	or     %edi,%eax
c0108758:	89 c3                	mov    %eax,%ebx
c010875a:	8b 45 08             	mov    0x8(%ebp),%eax
c010875d:	89 0c c5 40 a5 d0 c0 	mov    %ecx,-0x3f2f5ac0(,%eax,8)
c0108764:	89 1c c5 44 a5 d0 c0 	mov    %ebx,-0x3f2f5abc(,%eax,8)
}
c010876b:	90                   	nop
c010876c:	83 c4 24             	add    $0x24,%esp
c010876f:	5b                   	pop    %ebx
c0108770:	5e                   	pop    %esi
c0108771:	5f                   	pop    %edi
c0108772:	5d                   	pop    %ebp
c0108773:	c3                   	ret    

c0108774 <_init_idt>:

void _init_idt()
{
c0108774:	55                   	push   %ebp
c0108775:	89 e5                	mov    %esp,%ebp
c0108777:	83 ec 10             	sub    $0x10,%esp
    _set_idt_entry(FAULT_DIVISION_ERROR, 0x08, &divide_error, 0);
c010877a:	6a 00                	push   $0x0
c010877c:	68 8e 82 10 c0       	push   $0xc010828e
c0108781:	6a 08                	push   $0x8
c0108783:	6a 00                	push   $0x0
c0108785:	e8 21 ff ff ff       	call   c01086ab <_set_idt_entry>
c010878a:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_TRAP_DEBUG_EXCEPTION, 0x08, &debug, 0);
c010878d:	6a 00                	push   $0x0
c010878f:	68 95 82 10 c0       	push   $0xc0108295
c0108794:	6a 08                	push   $0x8
c0108796:	6a 01                	push   $0x1
c0108798:	e8 0e ff ff ff       	call   c01086ab <_set_idt_entry>
c010879d:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(INT_NMI, 0x08, &nmi, 0);
c01087a0:	6a 00                	push   $0x0
c01087a2:	68 9c 82 10 c0       	push   $0xc010829c
c01087a7:	6a 08                	push   $0x8
c01087a9:	6a 02                	push   $0x2
c01087ab:	e8 fb fe ff ff       	call   c01086ab <_set_idt_entry>
c01087b0:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_BREAKPOINT, 0x08, &int3, 0);
c01087b3:	6a 00                	push   $0x0
c01087b5:	68 a3 82 10 c0       	push   $0xc01082a3
c01087ba:	6a 08                	push   $0x8
c01087bc:	6a 03                	push   $0x3
c01087be:	e8 e8 fe ff ff       	call   c01086ab <_set_idt_entry>
c01087c3:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_OVERFLOW, 0x08, &overflow, 0);
c01087c6:	6a 00                	push   $0x0
c01087c8:	68 aa 82 10 c0       	push   $0xc01082aa
c01087cd:	6a 08                	push   $0x8
c01087cf:	6a 04                	push   $0x4
c01087d1:	e8 d5 fe ff ff       	call   c01086ab <_set_idt_entry>
c01087d6:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_BOUND_EXCEED, 0x08, &bounds, 0);
c01087d9:	6a 00                	push   $0x0
c01087db:	68 b4 82 10 c0       	push   $0xc01082b4
c01087e0:	6a 08                	push   $0x8
c01087e2:	6a 05                	push   $0x5
c01087e4:	e8 c2 fe ff ff       	call   c01086ab <_set_idt_entry>
c01087e9:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_OPCODE, 0x08, &invalid_op, 0);
c01087ec:	6a 00                	push   $0x0
c01087ee:	68 be 82 10 c0       	push   $0xc01082be
c01087f3:	6a 08                	push   $0x8
c01087f5:	6a 06                	push   $0x6
c01087f7:	e8 af fe ff ff       	call   c01086ab <_set_idt_entry>
c01087fc:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_NO_MATH_PROCESSOR, 0x08, &device_not_available, 0);
    //_set_idt_entry(ABORT_DOUBLE_FAULT, 0x08, &double_fault, 0);
    _set_idt_entry(FAULT_RESERVED_0, 0x08, &coprocessor_segment_overrun, 0);
c01087ff:	6a 00                	push   $0x0
c0108801:	68 c8 82 10 c0       	push   $0xc01082c8
c0108806:	6a 08                	push   $0x8
c0108808:	6a 09                	push   $0x9
c010880a:	e8 9c fe ff ff       	call   c01086ab <_set_idt_entry>
c010880f:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_TSS, 0x08, &invalid_TSS, 0);
c0108812:	6a 00                	push   $0x0
c0108814:	68 dc 82 10 c0       	push   $0xc01082dc
c0108819:	6a 08                	push   $0x8
c010881b:	6a 0a                	push   $0xa
c010881d:	e8 89 fe ff ff       	call   c01086ab <_set_idt_entry>
c0108822:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_SEG_NOT_PRESENT, 0x08, &segment_not_present, 0);
c0108825:	6a 00                	push   $0x0
c0108827:	68 e6 82 10 c0       	push   $0xc01082e6
c010882c:	6a 08                	push   $0x8
c010882e:	6a 0b                	push   $0xb
c0108830:	e8 76 fe ff ff       	call   c01086ab <_set_idt_entry>
c0108835:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_STACK_SEG_FAULT, 0x08, &stack_segment, 0);
c0108838:	6a 00                	push   $0x0
c010883a:	68 f0 82 10 c0       	push   $0xc01082f0
c010883f:	6a 08                	push   $0x8
c0108841:	6a 0c                	push   $0xc
c0108843:	e8 63 fe ff ff       	call   c01086ab <_set_idt_entry>
c0108848:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_GENERAL_PROTECTION, 0x08, &general_protection, 0);
c010884b:	6a 00                	push   $0x0
c010884d:	68 fa 82 10 c0       	push   $0xc01082fa
c0108852:	6a 08                	push   $0x8
c0108854:	6a 0d                	push   $0xd
c0108856:	e8 50 fe ff ff       	call   c01086ab <_set_idt_entry>
c010885b:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_PAGE_FAULT, 0x08, &page_fault, 0);
c010885e:	6a 00                	push   $0x0
c0108860:	68 bd 71 10 c0       	push   $0xc01071bd
c0108865:	6a 08                	push   $0x8
c0108867:	6a 0e                	push   $0xe
c0108869:	e8 3d fe ff ff       	call   c01086ab <_set_idt_entry>
c010886e:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_RESERVED_1, 0x08, &reserved, 0);
c0108871:	6a 00                	push   $0x0
c0108873:	68 d2 82 10 c0       	push   $0xc01082d2
c0108878:	6a 08                	push   $0x8
c010887a:	6a 0f                	push   $0xf
c010887c:	e8 2a fe ff ff       	call   c01086ab <_set_idt_entry>
c0108881:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_X87_FAULT, 0x08, coprocessor_error, 0);
    for (int i=17;i < 48;i++)
c0108884:	c7 45 fc 11 00 00 00 	movl   $0x11,-0x4(%ebp)
c010888b:	eb 19                	jmp    c01088a6 <_init_idt+0x132>
		  _set_idt_entry(i, 0x08, &reserved, 0);
c010888d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108890:	6a 00                	push   $0x0
c0108892:	68 d2 82 10 c0       	push   $0xc01082d2
c0108897:	6a 08                	push   $0x8
c0108899:	50                   	push   %eax
c010889a:	e8 0c fe ff ff       	call   c01086ab <_set_idt_entry>
c010889f:	83 c4 10             	add    $0x10,%esp
    for (int i=17;i < 48;i++)
c01088a2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01088a6:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%ebp)
c01088aa:	7e e1                	jle    c010888d <_init_idt+0x119>
    //_set_idt_entry(45, 0x08, irq13, 0);
    _set_idt_entry(MELOX_SYS_CALL, 0x08, &intr_syscall_handler, 3);
c01088ac:	6a 03                	push   $0x3
c01088ae:	68 fe 81 10 c0       	push   $0xc01081fe
c01088b3:	6a 08                	push   $0x8
c01088b5:	68 80 00 00 00       	push   $0x80
c01088ba:	e8 ec fd ff ff       	call   c01086ab <_set_idt_entry>
c01088bf:	83 c4 10             	add    $0x10,%esp
c01088c2:	90                   	nop
c01088c3:	c9                   	leave  
c01088c4:	c3                   	ret    

c01088c5 <_kernel_start>:
c01088c5:	e8 4e fd ff ff       	call   c0108618 <_init_gdt>
c01088ca:	68 00 a5 d0 c0       	push   $0xc0d0a500
c01088cf:	66 ff 35 00 c0 d0 c0 	pushw  0xc0d0c000
c01088d6:	0f 01 14 24          	lgdtl  (%esp)
c01088da:	66 b9 10 00          	mov    $0x10,%cx
c01088de:	8e c1                	mov    %ecx,%es
c01088e0:	8e d9                	mov    %ecx,%ds
c01088e2:	8e e1                	mov    %ecx,%fs
c01088e4:	8e e9                	mov    %ecx,%gs
c01088e6:	8e d1                	mov    %ecx,%ss
c01088e8:	66 6a 08             	pushw  $0x8
c01088eb:	68 f1 88 10 c0       	push   $0xc01088f1
c01088f0:	cb                   	lret   

c01088f1 <_after_gdt>:
c01088f1:	c7 04 24 00 10 10 00 	movl   $0x101000,(%esp)
c01088f8:	e8 41 d9 ff ff       	call   c010623e <_vir_kernel_init>
c01088fd:	83 ec 06             	sub    $0x6,%esp
c0108900:	c7 44 24 02 40 a5 d0 	movl   $0xc0d0a540,0x2(%esp)
c0108907:	c0 
c0108908:	66 a1 88 c0 d0 c0    	mov    0xc0d0c088,%ax
c010890e:	66 89 04 24          	mov    %ax,(%esp)
c0108912:	0f 01 1c 24          	lidtl  (%esp)
c0108916:	66 b8 28 00          	mov    $0x28,%ax
c010891a:	0f 00 d8             	ltr    %ax
c010891d:	83 c4 06             	add    $0x6,%esp
c0108920:	e8 80 dc ff ff       	call   c01065a5 <_kernel_main>

c0108925 <j_>:
c0108925:	f4                   	hlt    
c0108926:	eb fd                	jmp    c0108925 <j_>

c0108928 <io_inb>:
{
c0108928:	55                   	push   %ebp
c0108929:	89 e5                	mov    %esp,%ebp
c010892b:	83 ec 10             	sub    $0x10,%esp
    asm volatile("inb %w1,%0" : "=a"(data) : "d"(port));
c010892e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108931:	89 c2                	mov    %eax,%edx
c0108933:	ec                   	in     (%dx),%al
c0108934:	88 45 ff             	mov    %al,-0x1(%ebp)
    return data;
c0108937:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
c010893b:	c9                   	leave  
c010893c:	c3                   	ret    

c010893d <io_outb>:
{
c010893d:	55                   	push   %ebp
c010893e:	89 e5                	mov    %esp,%ebp
c0108940:	83 ec 04             	sub    $0x4,%esp
c0108943:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108946:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0108949:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010894d:	8b 55 08             	mov    0x8(%ebp),%edx
c0108950:	ee                   	out    %al,(%dx)
}
c0108951:	90                   	nop
c0108952:	c9                   	leave  
c0108953:	c3                   	ret    

c0108954 <cpu_delay>:
static inline void cpu_delay(){
c0108954:	55                   	push   %ebp
c0108955:	89 e5                	mov    %esp,%ebp
c0108957:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; i < 3; i++);
c010895a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0108961:	eb 04                	jmp    c0108967 <cpu_delay+0x13>
c0108963:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0108967:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
c010896b:	7e f6                	jle    c0108963 <cpu_delay+0xf>
}
c010896d:	90                   	nop
c010896e:	90                   	nop
c010896f:	c9                   	leave  
c0108970:	c3                   	ret    

c0108971 <init_8259>:
//other keys tmp do not hand
};
#endif

void init_8259()
{
c0108971:	55                   	push   %ebp
c0108972:	89 e5                	mov    %esp,%ebp
    asm volatile("cli");
c0108974:	fa                   	cli    

    //ICW1
    io_outb(0x20, 0x11);
c0108975:	6a 11                	push   $0x11
c0108977:	6a 20                	push   $0x20
c0108979:	e8 bf ff ff ff       	call   c010893d <io_outb>
c010897e:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108981:	e8 ce ff ff ff       	call   c0108954 <cpu_delay>
    io_outb(0xa0, 0x11);
c0108986:	6a 11                	push   $0x11
c0108988:	68 a0 00 00 00       	push   $0xa0
c010898d:	e8 ab ff ff ff       	call   c010893d <io_outb>
c0108992:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108995:	e8 ba ff ff ff       	call   c0108954 <cpu_delay>

    //ICW2
    io_outb(0x21, 0x20);
c010899a:	6a 20                	push   $0x20
c010899c:	6a 21                	push   $0x21
c010899e:	e8 9a ff ff ff       	call   c010893d <io_outb>
c01089a3:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01089a6:	e8 a9 ff ff ff       	call   c0108954 <cpu_delay>
    io_outb(0xa1, 0x28);
c01089ab:	6a 28                	push   $0x28
c01089ad:	68 a1 00 00 00       	push   $0xa1
c01089b2:	e8 86 ff ff ff       	call   c010893d <io_outb>
c01089b7:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01089ba:	e8 95 ff ff ff       	call   c0108954 <cpu_delay>

    //ICW3
    io_outb(0x21, 0x04);
c01089bf:	6a 04                	push   $0x4
c01089c1:	6a 21                	push   $0x21
c01089c3:	e8 75 ff ff ff       	call   c010893d <io_outb>
c01089c8:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01089cb:	e8 84 ff ff ff       	call   c0108954 <cpu_delay>
    io_outb(0xa1, 0x02);
c01089d0:	6a 02                	push   $0x2
c01089d2:	68 a1 00 00 00       	push   $0xa1
c01089d7:	e8 61 ff ff ff       	call   c010893d <io_outb>
c01089dc:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01089df:	e8 70 ff ff ff       	call   c0108954 <cpu_delay>

    //ICW4
    io_outb(0x21, 0x01);
c01089e4:	6a 01                	push   $0x1
c01089e6:	6a 21                	push   $0x21
c01089e8:	e8 50 ff ff ff       	call   c010893d <io_outb>
c01089ed:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01089f0:	e8 5f ff ff ff       	call   c0108954 <cpu_delay>
    io_outb(0xa1, 0x01);
c01089f5:	6a 01                	push   $0x1
c01089f7:	68 a1 00 00 00       	push   $0xa1
c01089fc:	e8 3c ff ff ff       	call   c010893d <io_outb>
c0108a01:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a04:	e8 4b ff ff ff       	call   c0108954 <cpu_delay>

    //OCW1
    io_outb(0x21, 0xff);
c0108a09:	68 ff 00 00 00       	push   $0xff
c0108a0e:	6a 21                	push   $0x21
c0108a10:	e8 28 ff ff ff       	call   c010893d <io_outb>
c0108a15:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108a18:	e8 37 ff ff ff       	call   c0108954 <cpu_delay>
    io_outb(0xa1, 0xff);
c0108a1d:	68 ff 00 00 00       	push   $0xff
c0108a22:	68 a1 00 00 00       	push   $0xa1
c0108a27:	e8 11 ff ff ff       	call   c010893d <io_outb>
c0108a2c:	83 c4 08             	add    $0x8,%esp

    asm volatile("sti");
c0108a2f:	fb                   	sti    
}
c0108a30:	90                   	nop
c0108a31:	c9                   	leave  
c0108a32:	c3                   	ret    

c0108a33 <ps2_post_cmd>:


static void ps2_post_cmd(uint8_t port, char cmd, uint16_t arg) {
c0108a33:	55                   	push   %ebp
c0108a34:	89 e5                	mov    %esp,%ebp
c0108a36:	83 ec 1c             	sub    $0x1c,%esp
c0108a39:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0108a3c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108a3f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a42:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0108a45:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0108a48:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    char result;
    // 等待PS/2输入缓冲区清空，这样我们才可以写入命令
    while((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_IFULL);
c0108a4c:	90                   	nop
c0108a4d:	6a 64                	push   $0x64
c0108a4f:	e8 d4 fe ff ff       	call   c0108928 <io_inb>
c0108a54:	83 c4 04             	add    $0x4,%esp
c0108a57:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108a5a:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108a5e:	83 e0 02             	and    $0x2,%eax
c0108a61:	85 c0                	test   %eax,%eax
c0108a63:	75 e8                	jne    c0108a4d <ps2_post_cmd+0x1a>

    io_outb(port, cmd);
c0108a65:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0108a69:	0f b6 d0             	movzbl %al,%edx
c0108a6c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0108a70:	52                   	push   %edx
c0108a71:	50                   	push   %eax
c0108a72:	e8 c6 fe ff ff       	call   c010893d <io_outb>
c0108a77:	83 c4 08             	add    $0x8,%esp
    if (!(arg & PS2_NO_ARG)) {
c0108a7a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0108a7e:	25 00 ff 00 00       	and    $0xff00,%eax
c0108a83:	85 c0                	test   %eax,%eax
c0108a85:	75 12                	jne    c0108a99 <ps2_post_cmd+0x66>
        // 所有参数一律通过0x60传入。
        io_outb(PS2_PORT_ENC_CMDREG, (uint8_t)(arg & 0x00ff));
c0108a87:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0108a8b:	0f b6 c0             	movzbl %al,%eax
c0108a8e:	50                   	push   %eax
c0108a8f:	6a 60                	push   $0x60
c0108a91:	e8 a7 fe ff ff       	call   c010893d <io_outb>
c0108a96:	83 c4 08             	add    $0x8,%esp
    }
}
c0108a99:	90                   	nop
c0108a9a:	c9                   	leave  
c0108a9b:	c3                   	ret    

c0108a9c <ps2_issue_cmd>:

static uint8_t ps2_issue_cmd(char cmd, uint16_t arg) {
c0108a9c:	55                   	push   %ebp
c0108a9d:	89 e5                	mov    %esp,%ebp
c0108a9f:	83 ec 18             	sub    $0x18,%esp
c0108aa2:	8b 55 08             	mov    0x8(%ebp),%edx
c0108aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108aa8:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0108aab:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, cmd, arg);
c0108aaf:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0108ab3:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0108ab7:	52                   	push   %edx
c0108ab8:	50                   	push   %eax
c0108ab9:	6a 64                	push   $0x64
c0108abb:	e8 73 ff ff ff       	call   c0108a33 <ps2_post_cmd>
c0108ac0:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0108ac3:	90                   	nop
c0108ac4:	6a 64                	push   $0x64
c0108ac6:	e8 5d fe ff ff       	call   c0108928 <io_inb>
c0108acb:	83 c4 04             	add    $0x4,%esp
c0108ace:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108ad1:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108ad5:	83 e0 01             	and    $0x1,%eax
c0108ad8:	85 c0                	test   %eax,%eax
c0108ada:	74 e8                	je     c0108ac4 <ps2_issue_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0108adc:	6a 60                	push   $0x60
c0108ade:	e8 45 fe ff ff       	call   c0108928 <io_inb>
c0108ae3:	83 c4 04             	add    $0x4,%esp
}
c0108ae6:	c9                   	leave  
c0108ae7:	c3                   	ret    

c0108ae8 <ps2_issue_dev_cmd>:

static uint8_t ps2_issue_dev_cmd(char cmd, uint16_t arg) {
c0108ae8:	55                   	push   %ebp
c0108ae9:	89 e5                	mov    %esp,%ebp
c0108aeb:	83 ec 18             	sub    $0x18,%esp
c0108aee:	8b 55 08             	mov    0x8(%ebp),%edx
c0108af1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108af4:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0108af7:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_ENC_CMDREG, cmd, arg);
c0108afb:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0108aff:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0108b03:	52                   	push   %edx
c0108b04:	50                   	push   %eax
c0108b05:	6a 60                	push   $0x60
c0108b07:	e8 27 ff ff ff       	call   c0108a33 <ps2_post_cmd>
c0108b0c:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0108b0f:	90                   	nop
c0108b10:	6a 64                	push   $0x64
c0108b12:	e8 11 fe ff ff       	call   c0108928 <io_inb>
c0108b17:	83 c4 04             	add    $0x4,%esp
c0108b1a:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108b1d:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108b21:	83 e0 01             	and    $0x1,%eax
c0108b24:	85 c0                	test   %eax,%eax
c0108b26:	74 e8                	je     c0108b10 <ps2_issue_dev_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0108b28:	6a 60                	push   $0x60
c0108b2a:	e8 f9 fd ff ff       	call   c0108928 <io_inb>
c0108b2f:	83 c4 04             	add    $0x4,%esp
}
c0108b32:	c9                   	leave  
c0108b33:	c3                   	ret    

c0108b34 <init_ps2k>:

void init_ps2k()
{
c0108b34:	55                   	push   %ebp
c0108b35:	89 e5                	mov    %esp,%ebp
c0108b37:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0108b3a:	fa                   	cli    

     // 1、禁用任何的PS/2设备
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_DISABLE, PS2_NO_ARG);
c0108b3b:	68 00 ff 00 00       	push   $0xff00
c0108b40:	6a ad                	push   $0xffffffad
c0108b42:	6a 64                	push   $0x64
c0108b44:	e8 ea fe ff ff       	call   c0108a33 <ps2_post_cmd>
c0108b49:	83 c4 0c             	add    $0xc,%esp
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT2_DISABLE, PS2_NO_ARG);
c0108b4c:	68 00 ff 00 00       	push   $0xff00
c0108b51:	6a a7                	push   $0xffffffa7
c0108b53:	6a 64                	push   $0x64
c0108b55:	e8 d9 fe ff ff       	call   c0108a33 <ps2_post_cmd>
c0108b5a:	83 c4 0c             	add    $0xc,%esp
    
    // 2、清空控制器缓冲区
    io_inb(PS2_PORT_ENC_DATA);
c0108b5d:	6a 60                	push   $0x60
c0108b5f:	e8 c4 fd ff ff       	call   c0108928 <io_inb>
c0108b64:	83 c4 04             	add    $0x4,%esp

    char result;

    // 3、屏蔽所有PS/2设备（端口1&2）IRQ，并且禁用键盘键码转换功能
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0108b67:	68 00 ff 00 00       	push   $0xff00
c0108b6c:	6a 20                	push   $0x20
c0108b6e:	e8 29 ff ff ff       	call   c0108a9c <ps2_issue_cmd>
c0108b73:	83 c4 08             	add    $0x8,%esp
c0108b76:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result & ~(PS2_CFG_P1INT | PS2_CFG_P2INT | PS2_CFG_TRANSLATION);
c0108b79:	80 65 f7 bc          	andb   $0xbc,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0108b7d:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0108b82:	0f b7 c0             	movzwl %ax,%eax
c0108b85:	50                   	push   %eax
c0108b86:	6a 60                	push   $0x60
c0108b88:	6a 64                	push   $0x64
c0108b8a:	e8 a4 fe ff ff       	call   c0108a33 <ps2_post_cmd>
c0108b8f:	83 c4 0c             	add    $0xc,%esp

    // 4、控制器自检
    result = ps2_issue_cmd(PS2_CMD_SELFTEST, PS2_NO_ARG);
c0108b92:	68 00 ff 00 00       	push   $0xff00
c0108b97:	6a aa                	push   $0xffffffaa
c0108b99:	e8 fe fe ff ff       	call   c0108a9c <ps2_issue_cmd>
c0108b9e:	83 c4 08             	add    $0x8,%esp
c0108ba1:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != PS2_RESULT_TEST_OK) {
c0108ba4:	80 7d f7 55          	cmpb   $0x55,-0x9(%ebp)
c0108ba8:	74 12                	je     c0108bbc <init_ps2k+0x88>
        kprintf("Controller self-test failed.");
c0108baa:	83 ec 0c             	sub    $0xc,%esp
c0108bad:	68 c8 d5 d0 c0       	push   $0xc0d0d5c8
c0108bb2:	e8 7a 0f 00 00       	call   c0109b31 <kprintf>
c0108bb7:	83 c4 10             	add    $0x10,%esp
        goto done;
c0108bba:	eb 72                	jmp    c0108c2e <init_ps2k+0xfa>
    }

    // 5、设备自检（端口1自检，通常是我们的键盘）
    result = ps2_issue_cmd(PS2_CMD_SELFTEST_PORT1, PS2_NO_ARG);
c0108bbc:	83 ec 08             	sub    $0x8,%esp
c0108bbf:	68 00 ff 00 00       	push   $0xff00
c0108bc4:	6a ab                	push   $0xffffffab
c0108bc6:	e8 d1 fe ff ff       	call   c0108a9c <ps2_issue_cmd>
c0108bcb:	83 c4 10             	add    $0x10,%esp
c0108bce:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != 0) {
c0108bd1:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0108bd5:	74 12                	je     c0108be9 <init_ps2k+0xb5>
        kprintf("Interface test on port 1 failed.");
c0108bd7:	83 ec 0c             	sub    $0xc,%esp
c0108bda:	68 e8 d5 d0 c0       	push   $0xc0d0d5e8
c0108bdf:	e8 4d 0f 00 00       	call   c0109b31 <kprintf>
c0108be4:	83 c4 10             	add    $0x10,%esp
        goto done;
c0108be7:	eb 45                	jmp    c0108c2e <init_ps2k+0xfa>
    }

    // 6、开启位于端口1的 IRQ，并启用端口1。不用理会端口2，那儿一般是鼠标。
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_ENABLE, PS2_NO_ARG);
c0108be9:	83 ec 04             	sub    $0x4,%esp
c0108bec:	68 00 ff 00 00       	push   $0xff00
c0108bf1:	6a ae                	push   $0xffffffae
c0108bf3:	6a 64                	push   $0x64
c0108bf5:	e8 39 fe ff ff       	call   c0108a33 <ps2_post_cmd>
c0108bfa:	83 c4 10             	add    $0x10,%esp
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0108bfd:	83 ec 08             	sub    $0x8,%esp
c0108c00:	68 00 ff 00 00       	push   $0xff00
c0108c05:	6a 20                	push   $0x20
c0108c07:	e8 90 fe ff ff       	call   c0108a9c <ps2_issue_cmd>
c0108c0c:	83 c4 10             	add    $0x10,%esp
c0108c0f:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result | PS2_CFG_P1INT;
c0108c12:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0108c16:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0108c1b:	0f b7 c0             	movzwl %ax,%eax
c0108c1e:	83 ec 04             	sub    $0x4,%esp
c0108c21:	50                   	push   %eax
c0108c22:	6a 60                	push   $0x60
c0108c24:	6a 64                	push   $0x64
c0108c26:	e8 08 fe ff ff       	call   c0108a33 <ps2_post_cmd>
c0108c2b:	83 c4 10             	add    $0x10,%esp

    // 至此，PS/2控制器和设备已完成初始化，可以正常使用。

done:
    asm volatile("sti");
c0108c2e:	fb                   	sti    
}
c0108c2f:	90                   	nop
c0108c30:	c9                   	leave  
c0108c31:	c3                   	ret    

c0108c32 <init_keyboard>:



void init_keyboard()
{
c0108c32:	55                   	push   %ebp
c0108c33:	89 e5                	mov    %esp,%ebp
c0108c35:	83 ec 18             	sub    $0x18,%esp
    asm("cli");
c0108c38:	fa                   	cli    
    init_8259();
c0108c39:	e8 33 fd ff ff       	call   c0108971 <init_8259>

    uint8_t result = io_inb(0x21);
c0108c3e:	6a 21                	push   $0x21
c0108c40:	e8 e3 fc ff ff       	call   c0108928 <io_inb>
c0108c45:	83 c4 04             	add    $0x4,%esp
c0108c48:	88 45 f7             	mov    %al,-0x9(%ebp)
    io_outb(0x21, result & 0xfd);
c0108c4b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0108c4f:	25 fd 00 00 00       	and    $0xfd,%eax
c0108c54:	50                   	push   %eax
c0108c55:	6a 21                	push   $0x21
c0108c57:	e8 e1 fc ff ff       	call   c010893d <io_outb>
c0108c5c:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108c5f:	e8 f0 fc ff ff       	call   c0108954 <cpu_delay>
    result = io_inb(0x21);
c0108c64:	6a 21                	push   $0x21
c0108c66:	e8 bd fc ff ff       	call   c0108928 <io_inb>
c0108c6b:	83 c4 04             	add    $0x4,%esp
c0108c6e:	88 45 f7             	mov    %al,-0x9(%ebp)

    init_ps2k();
c0108c71:	e8 be fe ff ff       	call   c0108b34 <init_ps2k>
    
    _set_idt_entry(0x21, 0x08, &handle_keywords, 0);
c0108c76:	6a 00                	push   $0x0
c0108c78:	68 8d 8c 10 c0       	push   $0xc0108c8d
c0108c7d:	6a 08                	push   $0x8
c0108c7f:	6a 21                	push   $0x21
c0108c81:	e8 25 fa ff ff       	call   c01086ab <_set_idt_entry>
c0108c86:	83 c4 10             	add    $0x10,%esp
    asm("sti");
c0108c89:	fb                   	sti    
}
c0108c8a:	90                   	nop
c0108c8b:	c9                   	leave  
c0108c8c:	c3                   	ret    

c0108c8d <handle_keywords>:

static void handle_keywords()
{
c0108c8d:	55                   	push   %ebp
c0108c8e:	89 e5                	mov    %esp,%ebp
c0108c90:	83 ec 18             	sub    $0x18,%esp
    crtl_status, shift_status, alt_status, caps_lock_status, ext_scancode = 0;
c0108c93:	c6 05 44 ad d0 c0 00 	movb   $0x0,0xc0d0ad44
    asm volatile("cli");
c0108c9a:	fa                   	cli    
    io_outb(0x61, 0x20);
c0108c9b:	6a 20                	push   $0x20
c0108c9d:	6a 61                	push   $0x61
c0108c9f:	e8 99 fc ff ff       	call   c010893d <io_outb>
c0108ca4:	83 c4 08             	add    $0x8,%esp
    uint8_t ctrl_down_last = crtl_status;
c0108ca7:	0f b6 05 40 ad d0 c0 	movzbl 0xc0d0ad40,%eax
c0108cae:	88 45 f4             	mov    %al,-0xc(%ebp)
    uint8_t shift_down_last = shift_status;
c0108cb1:	0f b6 05 41 ad d0 c0 	movzbl 0xc0d0ad41,%eax
c0108cb8:	88 45 f3             	mov    %al,-0xd(%ebp)
    uint8_t caps_lock_last = caps_lock_status;
c0108cbb:	0f b6 05 43 ad d0 c0 	movzbl 0xc0d0ad43,%eax
c0108cc2:	88 45 f2             	mov    %al,-0xe(%ebp)

    uint8_t break_code;
    uint16_t scancode = io_inb(0x60);
c0108cc5:	6a 60                	push   $0x60
c0108cc7:	e8 5c fc ff ff       	call   c0108928 <io_inb>
c0108ccc:	83 c4 04             	add    $0x4,%esp
c0108ccf:	0f b6 c0             	movzbl %al,%eax
c0108cd2:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    
    if(scancode == 0xe0){
c0108cd6:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0108cdc:	75 25                	jne    c0108d03 <handle_keywords+0x76>
        ext_scancode = 1;
c0108cde:	c6 05 44 ad d0 c0 01 	movb   $0x1,0xc0d0ad44
        io_outb(0x20, 0x20);
c0108ce5:	6a 20                	push   $0x20
c0108ce7:	6a 20                	push   $0x20
c0108ce9:	e8 4f fc ff ff       	call   c010893d <io_outb>
c0108cee:	83 c4 08             	add    $0x8,%esp
        io_outb(0x20, 0x20);
c0108cf1:	6a 20                	push   $0x20
c0108cf3:	6a 20                	push   $0x20
c0108cf5:	e8 43 fc ff ff       	call   c010893d <io_outb>
c0108cfa:	83 c4 08             	add    $0x8,%esp
        asm volatile("sti");
c0108cfd:	fb                   	sti    
        return;
c0108cfe:	e9 1a 02 00 00       	jmp    c0108f1d <handle_keywords+0x290>
    }
    if(ext_scancode){
c0108d03:	0f b6 05 44 ad d0 c0 	movzbl 0xc0d0ad44,%eax
c0108d0a:	84 c0                	test   %al,%al
c0108d0c:	74 0d                	je     c0108d1b <handle_keywords+0x8e>
        scancode = ((0xe000) | scancode);
c0108d0e:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
        ext_scancode = 0;
c0108d14:	c6 05 44 ad d0 c0 00 	movb   $0x0,0xc0d0ad44
    }

    break_code = ((0x0080 & scancode) != 0);
c0108d1b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108d1f:	66 25 80 00          	and    $0x80,%ax
c0108d23:	66 85 c0             	test   %ax,%ax
c0108d26:	0f 95 c0             	setne  %al
c0108d29:	88 45 f1             	mov    %al,-0xf(%ebp)

    if(break_code)//tan qi ma
c0108d2c:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c0108d30:	74 6d                	je     c0108d9f <handle_keywords+0x112>
    {
        uint16_t make_code = (scancode & 0xff7f);
c0108d32:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108d36:	24 7f                	and    $0x7f,%al
c0108d38:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

        if(make_code == crtl_l_make || make_code == crtl_r_make)
c0108d3c:	66 83 7d ec 1d       	cmpw   $0x1d,-0x14(%ebp)
c0108d41:	74 08                	je     c0108d4b <handle_keywords+0xbe>
c0108d43:	66 81 7d ec 1d e0    	cmpw   $0xe01d,-0x14(%ebp)
c0108d49:	75 09                	jne    c0108d54 <handle_keywords+0xc7>
        {
            crtl_status = 0;
c0108d4b:	c6 05 40 ad d0 c0 00 	movb   $0x0,0xc0d0ad40
c0108d52:	eb 2d                	jmp    c0108d81 <handle_keywords+0xf4>
        }else if(make_code == shift_l_make || make_code == shift_r_make){
c0108d54:	66 83 7d ec 2a       	cmpw   $0x2a,-0x14(%ebp)
c0108d59:	74 07                	je     c0108d62 <handle_keywords+0xd5>
c0108d5b:	66 83 7d ec 36       	cmpw   $0x36,-0x14(%ebp)
c0108d60:	75 09                	jne    c0108d6b <handle_keywords+0xde>
            shift_status = 0;
c0108d62:	c6 05 41 ad d0 c0 00 	movb   $0x0,0xc0d0ad41
c0108d69:	eb 16                	jmp    c0108d81 <handle_keywords+0xf4>
        }else if(make_code == alt_l_make || make_code == alt_r_make){
c0108d6b:	66 83 7d ec 38       	cmpw   $0x38,-0x14(%ebp)
c0108d70:	74 08                	je     c0108d7a <handle_keywords+0xed>
c0108d72:	66 81 7d ec 38 e0    	cmpw   $0xe038,-0x14(%ebp)
c0108d78:	75 07                	jne    c0108d81 <handle_keywords+0xf4>
            alt_status = 0;
c0108d7a:	c6 05 42 ad d0 c0 00 	movb   $0x0,0xc0d0ad42
        }
        io_outb(0x20, 0x20);
c0108d81:	6a 20                	push   $0x20
c0108d83:	6a 20                	push   $0x20
c0108d85:	e8 b3 fb ff ff       	call   c010893d <io_outb>
c0108d8a:	83 c4 08             	add    $0x8,%esp
        io_outb(0x20, 0x20);
c0108d8d:	6a 20                	push   $0x20
c0108d8f:	6a 20                	push   $0x20
c0108d91:	e8 a7 fb ff ff       	call   c010893d <io_outb>
c0108d96:	83 c4 08             	add    $0x8,%esp
        asm volatile("sti");
c0108d99:	fb                   	sti    
        return;
c0108d9a:	e9 7e 01 00 00       	jmp    c0108f1d <handle_keywords+0x290>
    }//if is common word, hand
    else if((scancode > 0x00 && scancode < 0x3b) ||\
c0108d9f:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0108da4:	74 07                	je     c0108dad <handle_keywords+0x120>
c0108da6:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0108dab:	76 14                	jbe    c0108dc1 <handle_keywords+0x134>
c0108dad:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0108db3:	74 0c                	je     c0108dc1 <handle_keywords+0x134>
            (scancode == alt_r_make) || \
c0108db5:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0108dbb:	0f 85 20 01 00 00    	jne    c0108ee1 <handle_keywords+0x254>
            (scancode == crtl_r_make)){
        uint8_t shift = 0;
c0108dc1:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        if((scancode < 0x0e) || (scancode == 0x29) || \
c0108dc5:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0108dca:	76 3f                	jbe    c0108e0b <handle_keywords+0x17e>
c0108dcc:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0108dd1:	74 38                	je     c0108e0b <handle_keywords+0x17e>
c0108dd3:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0108dd8:	74 31                	je     c0108e0b <handle_keywords+0x17e>
           (scancode == 0x1a) || (scancode == 0x1b) ||\
c0108dda:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0108ddf:	74 2a                	je     c0108e0b <handle_keywords+0x17e>
c0108de1:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0108de6:	74 23                	je     c0108e0b <handle_keywords+0x17e>
           (scancode == 0x2b) || (scancode == 0x27) ||\
c0108de8:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0108ded:	74 1c                	je     c0108e0b <handle_keywords+0x17e>
c0108def:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0108df4:	74 15                	je     c0108e0b <handle_keywords+0x17e>
           (scancode == 0x28) || (scancode == 0x33) ||\
c0108df6:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0108dfb:	74 0e                	je     c0108e0b <handle_keywords+0x17e>
c0108dfd:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0108e02:	74 07                	je     c0108e0b <handle_keywords+0x17e>
           (scancode == 0x34) || (scancode == 0x35)){
c0108e04:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0108e09:	75 34                	jne    c0108e3f <handle_keywords+0x1b2>
            if(shift_down_last)
c0108e0b:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108e0f:	74 06                	je     c0108e17 <handle_keywords+0x18a>
                shift = 1;
c0108e11:	c6 45 f5 01          	movb   $0x1,-0xb(%ebp)
c0108e15:	eb 28                	jmp    c0108e3f <handle_keywords+0x1b2>
            else{
                if(shift_down_last && caps_lock_last)
c0108e17:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108e1b:	74 0c                	je     c0108e29 <handle_keywords+0x19c>
c0108e1d:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c0108e21:	74 06                	je     c0108e29 <handle_keywords+0x19c>
                    shift = 0;
c0108e23:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
c0108e27:	eb 16                	jmp    c0108e3f <handle_keywords+0x1b2>
                else if(shift_down_last || caps_lock_last)
c0108e29:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108e2d:	75 06                	jne    c0108e35 <handle_keywords+0x1a8>
c0108e2f:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c0108e33:	74 06                	je     c0108e3b <handle_keywords+0x1ae>
                    shift = 1;
c0108e35:	c6 45 f5 01          	movb   $0x1,-0xb(%ebp)
c0108e39:	eb 04                	jmp    c0108e3f <handle_keywords+0x1b2>
                else
                    shift = 0;
c0108e3b:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
                }
           }
        uint8_t index = (scancode &= 0x00ff);
c0108e3f:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0108e45:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108e49:	88 45 f0             	mov    %al,-0x10(%ebp)
        char cur_char = key_map[index][shift];
c0108e4c:	0f b6 55 f0          	movzbl -0x10(%ebp),%edx
c0108e50:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0108e54:	0f b6 84 50 a0 c0 d0 	movzbl -0x3f2f3f60(%eax,%edx,2),%eax
c0108e5b:	c0 
c0108e5c:	88 45 ef             	mov    %al,-0x11(%ebp)

        if(cur_char){
c0108e5f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0108e63:	74 34                	je     c0108e99 <handle_keywords+0x20c>
            vga_put_char(cur_char);
c0108e65:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0108e69:	83 ec 0c             	sub    $0xc,%esp
c0108e6c:	50                   	push   %eax
c0108e6d:	e8 ac d1 ff ff       	call   c010601e <vga_put_char>
c0108e72:	83 c4 10             	add    $0x10,%esp
            io_outb(0x20, 0x20);
c0108e75:	83 ec 08             	sub    $0x8,%esp
c0108e78:	6a 20                	push   $0x20
c0108e7a:	6a 20                	push   $0x20
c0108e7c:	e8 bc fa ff ff       	call   c010893d <io_outb>
c0108e81:	83 c4 10             	add    $0x10,%esp
            io_outb(0x20, 0x20);
c0108e84:	83 ec 08             	sub    $0x8,%esp
c0108e87:	6a 20                	push   $0x20
c0108e89:	6a 20                	push   $0x20
c0108e8b:	e8 ad fa ff ff       	call   c010893d <io_outb>
c0108e90:	83 c4 10             	add    $0x10,%esp
            asm volatile("sti");
c0108e93:	fb                   	sti    
            return;
c0108e94:	e9 84 00 00 00       	jmp    c0108f1d <handle_keywords+0x290>
        }

        if(scancode == crtl_l_make || scancode == crtl_r_make)
c0108e99:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0108e9e:	74 08                	je     c0108ea8 <handle_keywords+0x21b>
c0108ea0:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0108ea6:	75 09                	jne    c0108eb1 <handle_keywords+0x224>
            crtl_status = 1;
c0108ea8:	c6 05 40 ad d0 c0 01 	movb   $0x1,0xc0d0ad40
c0108eaf:	eb 2e                	jmp    c0108edf <handle_keywords+0x252>
        else if(scancode == shift_l_make || scancode == shift_r_make)
c0108eb1:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0108eb6:	74 07                	je     c0108ebf <handle_keywords+0x232>
c0108eb8:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0108ebd:	75 09                	jne    c0108ec8 <handle_keywords+0x23b>
            shift_status = 1;
c0108ebf:	c6 05 41 ad d0 c0 01 	movb   $0x1,0xc0d0ad41
c0108ec6:	eb 17                	jmp    c0108edf <handle_keywords+0x252>
        else if(scancode == caps_lock_make)
c0108ec8:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0108ecd:	75 4d                	jne    c0108f1c <handle_keywords+0x28f>
            caps_lock_status = ~caps_lock_status;
c0108ecf:	0f b6 05 43 ad d0 c0 	movzbl 0xc0d0ad43,%eax
c0108ed6:	f7 d0                	not    %eax
c0108ed8:	a2 43 ad d0 c0       	mov    %al,0xc0d0ad43
            (scancode == crtl_r_make)){
c0108edd:	eb 3d                	jmp    c0108f1c <handle_keywords+0x28f>
c0108edf:	eb 3b                	jmp    c0108f1c <handle_keywords+0x28f>
    }else{
        vga_put_char((char)(scancode && 0x00ff));
c0108ee1:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0108ee6:	0f 95 c0             	setne  %al
c0108ee9:	0f b6 c0             	movzbl %al,%eax
c0108eec:	0f be c0             	movsbl %al,%eax
c0108eef:	83 ec 0c             	sub    $0xc,%esp
c0108ef2:	50                   	push   %eax
c0108ef3:	e8 26 d1 ff ff       	call   c010601e <vga_put_char>
c0108ef8:	83 c4 10             	add    $0x10,%esp
        io_outb(0x20, 0x20);
c0108efb:	83 ec 08             	sub    $0x8,%esp
c0108efe:	6a 20                	push   $0x20
c0108f00:	6a 20                	push   $0x20
c0108f02:	e8 36 fa ff ff       	call   c010893d <io_outb>
c0108f07:	83 c4 10             	add    $0x10,%esp
        io_outb(0x20, 0x20);
c0108f0a:	83 ec 08             	sub    $0x8,%esp
c0108f0d:	6a 20                	push   $0x20
c0108f0f:	6a 20                	push   $0x20
c0108f11:	e8 27 fa ff ff       	call   c010893d <io_outb>
c0108f16:	83 c4 10             	add    $0x10,%esp
        asm volatile("sti");
c0108f19:	fb                   	sti    
c0108f1a:	eb 01                	jmp    c0108f1d <handle_keywords+0x290>
            (scancode == crtl_r_make)){
c0108f1c:	90                   	nop
    }
c0108f1d:	c9                   	leave  
c0108f1e:	c3                   	ret    

c0108f1f <syscall>:
{
c0108f1f:	55                   	push   %ebp
c0108f20:	89 e5                	mov    %esp,%ebp
c0108f22:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0108f23:	8b 55 08             	mov    0x8(%ebp),%edx
c0108f26:	89 d7                	mov    %edx,%edi
c0108f28:	cd 80                	int    $0x80
}
c0108f2a:	90                   	nop
c0108f2b:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0108f2e:	c9                   	leave  
c0108f2f:	c3                   	ret    

c0108f30 <syscall_install>:
#include <kernel/process/peocess.h>
#include <syscall/syscall.h>

extern void syscall_handlr(isr_param* param);

void syscall_install() {
c0108f30:	55                   	push   %ebp
c0108f31:	89 e5                	mov    %esp,%ebp
c0108f33:	83 ec 08             	sub    $0x8,%esp
    intr_subscribe(MELOX_SYS_CALL, syscall_handlr);
c0108f36:	83 ec 08             	sub    $0x8,%esp
c0108f39:	68 4e 8f 10 c0       	push   $0xc0108f4e
c0108f3e:	68 80 00 00 00       	push   $0x80
c0108f43:	e8 7b ef ff ff       	call   c0107ec3 <intr_subscribe>
c0108f48:	83 c4 10             	add    $0x10,%esp
}
c0108f4b:	90                   	nop
c0108f4c:	c9                   	leave  
c0108f4d:	c3                   	ret    

c0108f4e <syscall_handlr>:
c0108f4e:	55                   	push   %ebp
c0108f4f:	8b 6c 24 08          	mov    0x8(%esp),%ebp
c0108f53:	8b 45 00             	mov    0x0(%ebp),%eax
c0108f56:	3d 00 01 00 00       	cmp    $0x100,%eax
c0108f5b:	73 0d                	jae    c0108f6a <syscall_handlr+0x1c>
c0108f5d:	c1 e0 02             	shl    $0x2,%eax
c0108f60:	05 74 c1 d0 c0       	add    $0xc0d0c174,%eax
c0108f65:	83 38 00             	cmpl   $0x0,(%eax)
c0108f68:	75 04                	jne    c0108f6e <syscall_handlr+0x20>
c0108f6a:	f7 d8                	neg    %eax
c0108f6c:	5d                   	pop    %ebp
c0108f6d:	c3                   	ret    
c0108f6e:	ff 75 18             	push   0x18(%ebp)
c0108f71:	ff 75 14             	push   0x14(%ebp)
c0108f74:	ff 75 10             	push   0x10(%ebp)
c0108f77:	ff 75 0c             	push   0xc(%ebp)
c0108f7a:	ff 75 08             	push   0x8(%ebp)
c0108f7d:	ff 75 04             	push   0x4(%ebp)
c0108f80:	ff 10                	call   *(%eax)
c0108f82:	89 45 00             	mov    %eax,0x0(%ebp)
c0108f85:	83 c4 18             	add    $0x18,%esp
c0108f88:	5d                   	pop    %ebp
c0108f89:	c3                   	ret    

c0108f8a <__assert_fail>:
#include <common.h>
#include <libs/mstdio.h>

static char buffer[1024];

void __assert_fail(const char* expr, const char* file, unsigned int line) {
c0108f8a:	55                   	push   %ebp
c0108f8b:	89 e5                	mov    %esp,%ebp
c0108f8d:	57                   	push   %edi
c0108f8e:	83 ec 04             	sub    $0x4,%esp
    kprintf(buffer, "%s (%s:%u)", expr, file, line);
c0108f91:	83 ec 0c             	sub    $0xc,%esp
c0108f94:	ff 75 10             	push   0x10(%ebp)
c0108f97:	ff 75 0c             	push   0xc(%ebp)
c0108f9a:	ff 75 08             	push   0x8(%ebp)
c0108f9d:	68 09 d6 d0 c0       	push   $0xc0d0d609
c0108fa2:	68 60 ad d0 c0       	push   $0xc0d0ad60
c0108fa7:	e8 85 0b 00 00       	call   c0109b31 <kprintf>
c0108fac:	83 c4 20             	add    $0x20,%esp

    // Here we load the buffer's address into %edi ("D" constraint)
    //  This is a convention we made that the LUNAIX_SYS_PANIC syscall will
    //  print the panic message passed via %edi. (see kernel/asm/x86/interrupts.c)
    asm(
c0108faf:	b8 60 ad d0 c0       	mov    $0xc0d0ad60,%eax
c0108fb4:	89 c7                	mov    %eax,%edi
c0108fb6:	cd 20                	int    $0x20
        "int %0"
        ::"i"(32), "D"(buffer)
    );

    while(1);     // never reach
c0108fb8:	eb fe                	jmp    c0108fb8 <__assert_fail+0x2e>

c0108fba <cpu_rcr3>:
{
c0108fba:	55                   	push   %ebp
c0108fbb:	89 e5                	mov    %esp,%ebp
c0108fbd:	83 ec 10             	sub    $0x10,%esp
    asm volatile("movl %%cr3,%0" : "=r" (val));
c0108fc0:	0f 20 d8             	mov    %cr3,%eax
c0108fc3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return val;
c0108fc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0108fc9:	c9                   	leave  
c0108fca:	c3                   	ret    

c0108fcb <cpu_invplg>:
{
c0108fcb:	55                   	push   %ebp
c0108fcc:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c0108fce:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fd1:	0f 01 38             	invlpg (%eax)
};
c0108fd4:	90                   	nop
c0108fd5:	5d                   	pop    %ebp
c0108fd6:	c3                   	ret    

c0108fd7 <llist_init_head>:
static inline void llist_init_head(struct llist_header* head) {
c0108fd7:	55                   	push   %ebp
c0108fd8:	89 e5                	mov    %esp,%ebp
    head->next = head;
c0108fda:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fdd:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fe0:	89 50 04             	mov    %edx,0x4(%eax)
    head->prev = head;
c0108fe3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe6:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fe9:	89 10                	mov    %edx,(%eax)
}
c0108feb:	90                   	nop
c0108fec:	5d                   	pop    %ebp
c0108fed:	c3                   	ret    

c0108fee <syscall>:
{
c0108fee:	55                   	push   %ebp
c0108fef:	89 e5                	mov    %esp,%ebp
c0108ff1:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c0108ff2:	8b 55 08             	mov    0x8(%ebp),%edx
c0108ff5:	89 d7                	mov    %edx,%edi
c0108ff7:	cd 80                	int    $0x80
}
c0108ff9:	90                   	nop
c0108ffa:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0108ffd:	c9                   	leave  
c0108ffe:	c3                   	ret    

c0108fff <__mxsys_fork>:
#include <libs/mstdio.h>

extern volatile struct m_pcb* __current;//TODO MOVE TO .H AND TODO SCHEDULE

__DEFINE_MXSYSCALL(pid_t, fork)
{
c0108fff:	55                   	push   %ebp
c0109000:	89 e5                	mov    %esp,%ebp
c0109002:	83 ec 08             	sub    $0x8,%esp
    return m_fork();
c0109005:	e8 a5 02 00 00       	call   c01092af <m_fork>
}
c010900a:	c9                   	leave  
c010900b:	c3                   	ret    

c010900c <__mxsys_getpid>:

__DEFINE_MXSYSCALL(pid_t, getpid)
{
c010900c:	55                   	push   %ebp
c010900d:	89 e5                	mov    %esp,%ebp
    return __current->pid;
c010900f:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109014:	8b 00                	mov    (%eax),%eax
}
c0109016:	5d                   	pop    %ebp
c0109017:	c3                   	ret    

c0109018 <__mxsys_getppid>:

__DEFINE_MXSYSCALL(pid_t, getppid)
{
c0109018:	55                   	push   %ebp
c0109019:	89 e5                	mov    %esp,%ebp
    return __current->parent->pid;
c010901b:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109020:	8b 40 04             	mov    0x4(%eax),%eax
c0109023:	8b 00                	mov    (%eax),%eax
}
c0109025:	5d                   	pop    %ebp
c0109026:	c3                   	ret    

c0109027 <init_proc>:

void init_proc(struct m_pcb* pcb)
{
c0109027:	55                   	push   %ebp
c0109028:	89 e5                	mov    %esp,%ebp
c010902a:	83 ec 08             	sub    $0x8,%esp
    memset(pcb, 0, sizeof(*pcb));
c010902d:	83 ec 04             	sub    $0x4,%esp
c0109030:	6a 6c                	push   $0x6c
c0109032:	6a 00                	push   $0x0
c0109034:	ff 75 08             	push   0x8(%ebp)
c0109037:	e8 8c 0d 00 00       	call   c0109dc8 <memset>
c010903c:	83 c4 10             	add    $0x10,%esp

    pcb->pid = alloc_pid();
c010903f:	e8 b1 07 00 00       	call   c01097f5 <alloc_pid>
c0109044:	8b 55 08             	mov    0x8(%ebp),%edx
c0109047:	89 02                	mov    %eax,(%edx)
    pcb->state = PROC_CREATED;
c0109049:	8b 45 08             	mov    0x8(%ebp),%eax
c010904c:	c6 40 44 10          	movb   $0x10,0x44(%eax)
    pcb->pro_ticks = 10;
c0109050:	8b 45 08             	mov    0x8(%ebp),%eax
c0109053:	c7 40 5c 0a 00 00 00 	movl   $0xa,0x5c(%eax)
}
c010905a:	90                   	nop
c010905b:	c9                   	leave  
c010905c:	c3                   	ret    

c010905d <copy_pagetable>:

void* copy_pagetable(pid_t pid, uintptr_t mount_point)
{
c010905d:	55                   	push   %ebp
c010905e:	89 e5                	mov    %esp,%ebp
c0109060:	83 ec 38             	sub    $0x38,%esp
    uint32_t a;
    if(pid == 1)
c0109063:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0109067:	75 08                	jne    c0109071 <copy_pagetable+0x14>
        a = cpu_rcr3();
c0109069:	e8 4c ff ff ff       	call   c0108fba <cpu_rcr3>
c010906e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    void* ptd_pp = pmm_alloc_page(pid, PP_FGPERSIST);
c0109071:	83 ec 08             	sub    $0x8,%esp
c0109074:	6a 01                	push   $0x1
c0109076:	ff 75 08             	push   0x8(%ebp)
c0109079:	e8 ed d7 ff ff       	call   c010686b <pmm_alloc_page>
c010907e:	83 c4 10             	add    $0x10,%esp
c0109081:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pt_t* ptd = vmm_cover_map_page(pid, PD_MOUNT_1, ptd_pp, PG_PREM_RW,PG_PREM_RW);
c0109084:	83 ec 0c             	sub    $0xc,%esp
c0109087:	6a 03                	push   $0x3
c0109089:	6a 03                	push   $0x3
c010908b:	ff 75 e8             	push   -0x18(%ebp)
c010908e:	68 00 00 c0 af       	push   $0xafc00000
c0109093:	ff 75 08             	push   0x8(%ebp)
c0109096:	e8 21 e6 ff ff       	call   c01076bc <vmm_cover_map_page>
c010909b:	83 c4 20             	add    $0x20,%esp
c010909e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    ptd_t* pptd = (ptd_t*)(mount_point | (0x3FF << 12));
c01090a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090a4:	0d 00 f0 3f 00       	or     $0x3ff000,%eax
c01090a9:	89 45 e0             	mov    %eax,-0x20(%ebp)

    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c01090ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01090b3:	e9 f8 00 00 00       	jmp    c01091b0 <copy_pagetable+0x153>
        ptd_t ptde = pptd[i];
c01090b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01090c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090c5:	01 d0                	add    %edx,%eax
c01090c7:	8b 00                	mov    (%eax),%eax
c01090c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (!ptde || !(ptde & PG_PRESENT)) {
c01090cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01090d0:	74 0a                	je     c01090dc <copy_pagetable+0x7f>
c01090d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090d5:	83 e0 01             	and    $0x1,%eax
c01090d8:	85 c0                	test   %eax,%eax
c01090da:	75 19                	jne    c01090f5 <copy_pagetable+0x98>
            ptd[i] = ptde;
c01090dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01090e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090e9:	01 c2                	add    %eax,%edx
c01090eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090ee:	89 02                	mov    %eax,(%edx)
            continue;
c01090f0:	e9 b7 00 00 00       	jmp    c01091ac <copy_pagetable+0x14f>
        }

        pt_t* ppt = (pt_t*)(mount_point | (i << 12));
c01090f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090f8:	c1 e0 0c             	shl    $0xc,%eax
c01090fb:	0b 45 0c             	or     0xc(%ebp),%eax
c01090fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void* pt_pp = pmm_alloc_page(pid, PP_FGPERSIST);
c0109101:	83 ec 08             	sub    $0x8,%esp
c0109104:	6a 01                	push   $0x1
c0109106:	ff 75 08             	push   0x8(%ebp)
c0109109:	e8 5d d7 ff ff       	call   c010686b <pmm_alloc_page>
c010910e:	83 c4 10             	add    $0x10,%esp
c0109111:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        // if(pid == 1)
        //     kprintf("index%d,p0pde%x ", i, pt_pp);
        pt_t* pt = vmm_cover_map_page(pid, PG_MOUNT_2, pt_pp, PG_PREM_RW,PG_PREM_RW);
c0109114:	83 ec 0c             	sub    $0xc,%esp
c0109117:	6a 03                	push   $0x3
c0109119:	6a 03                	push   $0x3
c010911b:	ff 75 d4             	push   -0x2c(%ebp)
c010911e:	68 00 e0 7f af       	push   $0xaf7fe000
c0109123:	ff 75 08             	push   0x8(%ebp)
c0109126:	e8 91 e5 ff ff       	call   c01076bc <vmm_cover_map_page>
c010912b:	83 c4 20             	add    $0x20,%esp
c010912e:	89 45 d0             	mov    %eax,-0x30(%ebp)
        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c0109131:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0109138:	eb 43                	jmp    c010917d <copy_pagetable+0x120>
            pt_t pte = ppt[j];
c010913a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010913d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109144:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109147:	01 d0                	add    %edx,%eax
c0109149:	8b 00                	mov    (%eax),%eax
c010914b:	89 45 cc             	mov    %eax,-0x34(%ebp)
            pmm_ref_page(pid, PG_ENTRY_ADDR(pte));
c010914e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109151:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109156:	83 ec 08             	sub    $0x8,%esp
c0109159:	50                   	push   %eax
c010915a:	ff 75 08             	push   0x8(%ebp)
c010915d:	e8 d9 d8 ff ff       	call   c0106a3b <pmm_ref_page>
c0109162:	83 c4 10             	add    $0x10,%esp
            pt[j] = pte;
c0109165:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109168:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010916f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109172:	01 c2                	add    %eax,%edx
c0109174:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109177:	89 02                	mov    %eax,(%edx)
        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c0109179:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010917d:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0109184:	76 b4                	jbe    c010913a <copy_pagetable+0xdd>
        }
        ptd[i] = (uint32_t)pt_pp | PG_PREM_RW;
c0109186:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109189:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010918c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0109193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109196:	01 c8                	add    %ecx,%eax
c0109198:	83 ca 03             	or     $0x3,%edx
c010919b:	89 10                	mov    %edx,(%eax)
        cpu_invplg(ptde);
c010919d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091a0:	83 ec 0c             	sub    $0xc,%esp
c01091a3:	50                   	push   %eax
c01091a4:	e8 22 fe ff ff       	call   c0108fcb <cpu_invplg>
c01091a9:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c01091ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01091b0:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01091b7:	0f 86 fb fe ff ff    	jbe    c01090b8 <copy_pagetable+0x5b>
    }
    ptd[PG_MAX_ENTRIES - 1] = PDE(T_SELF_REF_PERM, ptd_pp);
c01091bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01091c5:	89 c2                	mov    %eax,%edx
c01091c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01091ca:	05 fc 0f 00 00       	add    $0xffc,%eax
c01091cf:	83 ca 1b             	or     $0x1b,%edx
c01091d2:	89 10                	mov    %edx,(%eax)
    //pt_t* ppt = (pt_t*)(0xffc00000);
    //uint32_t b = ppt[1];
    return ptd_pp;
c01091d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01091d7:	c9                   	leave  
c01091d8:	c3                   	ret    

c01091d9 <setup_proc_mem>:

void* setup_proc_mem(struct m_pcb* proc, uintptr_t usedMnt)
{
c01091d9:	55                   	push   %ebp
c01091da:	89 e5                	mov    %esp,%ebp
c01091dc:	83 ec 28             	sub    $0x28,%esp
    // copy the entire kernel page table
    pid_t pid = proc->pid;
c01091df:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e2:	8b 00                	mov    (%eax),%eax
c01091e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    void* pt_copy = copy_pagetable(pid, usedMnt);
c01091e7:	83 ec 08             	sub    $0x8,%esp
c01091ea:	ff 75 0c             	push   0xc(%ebp)
c01091ed:	ff 75 f0             	push   -0x10(%ebp)
c01091f0:	e8 68 fe ff ff       	call   c010905d <copy_pagetable>
c01091f5:	83 c4 10             	add    $0x10,%esp
c01091f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vmm_unmount_pd(PD_MOUNT_1);
c01091fb:	83 ec 0c             	sub    $0xc,%esp
c01091fe:	68 00 00 c0 af       	push   $0xafc00000
c0109203:	e8 52 e9 ff ff       	call   c0107b5a <vmm_unmount_pd>
c0109208:	83 c4 10             	add    $0x10,%esp
    vmm_mount_pd(PD_MOUNT_2, pt_copy); // 将新进程的页表挂载到挂载点#2
c010920b:	83 ec 08             	sub    $0x8,%esp
c010920e:	ff 75 ec             	push   -0x14(%ebp)
c0109211:	68 00 00 80 af       	push   $0xaf800000
c0109216:	e8 00 e9 ff ff       	call   c0107b1b <vmm_mount_pd>
c010921b:	83 c4 10             	add    $0x10,%esp
    //kprintf("pid%d, cr3%x ",pid, pt_copy);
    // copy the kernel stack
    int c = 0;
c010921e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    for (size_t i = KSTACK_START >> 12; i <= (KSATCK_TOP >> 12); i++) {
c0109225:	c7 45 f4 f0 fb 0f 00 	movl   $0xffbf0,-0xc(%ebp)
c010922c:	eb 6c                	jmp    c010929a <setup_proc_mem+0xc1>
        volatile pt_t* ppte = &PTE_MOUNTED(PD_MOUNT_2, i);//get the stack page phy addr address point
c010922e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109231:	25 ff 03 00 00       	and    $0x3ff,%eax
c0109236:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010923d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109240:	c1 e0 02             	shl    $0x2,%eax
c0109243:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0109248:	0d 00 00 80 af       	or     $0xaf800000,%eax
c010924d:	01 d0                	add    %edx,%eax
c010924f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //kprintf("ppte0x%x", ppte);
        /*
            The TLB caching keep the rewrite to PTE
            from updating. 
        */
        cpu_invplg(ppte);
c0109252:	83 ec 0c             	sub    $0xc,%esp
c0109255:	ff 75 e4             	push   -0x1c(%ebp)
c0109258:	e8 6e fd ff ff       	call   c0108fcb <cpu_invplg>
c010925d:	83 c4 10             	add    $0x10,%esp

        pt_t p = *ppte;
c0109260:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109263:	8b 00                	mov    (%eax),%eax
c0109265:	89 45 e0             	mov    %eax,-0x20(%ebp)
        //kprintf("inex %d, padd%x ", c++, p);
        void* ppa = vmm_dup_page(pid, PG_ENTRY_ADDR(p));
c0109268:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010926b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109270:	83 ec 08             	sub    $0x8,%esp
c0109273:	50                   	push   %eax
c0109274:	ff 75 f0             	push   -0x10(%ebp)
c0109277:	e8 0d e8 ff ff       	call   c0107a89 <vmm_dup_page>
c010927c:	83 c4 10             	add    $0x10,%esp
c010927f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //kprintf("ppa0x%x ", ppa);
        *ppte = (p & 0xfff) | (uintptr_t)ppa;
c0109282:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109285:	25 ff 0f 00 00       	and    $0xfff,%eax
c010928a:	89 c2                	mov    %eax,%edx
c010928c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010928f:	09 c2                	or     %eax,%edx
c0109291:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109294:	89 10                	mov    %edx,(%eax)
    for (size_t i = KSTACK_START >> 12; i <= (KSATCK_TOP >> 12); i++) {
c0109296:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010929a:	81 7d f4 ff fb 0f 00 	cmpl   $0xffbff,-0xc(%ebp)
c01092a1:	76 8b                	jbe    c010922e <setup_proc_mem+0x55>
    // 定义用户栈区域，但是不分配实际的物理页。我们会在Page fault
    // handler里面实现动态分配物理页的逻辑。
    // if(pid == 0)
    //     proc->page_table = __current->page_table;
    // else
    proc->page_table = pt_copy;
c01092a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01092a9:	89 50 64             	mov    %edx,0x64(%eax)
}
c01092ac:	90                   	nop
c01092ad:	c9                   	leave  
c01092ae:	c3                   	ret    

c01092af <m_fork>:

pid_t m_fork()
{
c01092af:	55                   	push   %ebp
c01092b0:	89 e5                	mov    %esp,%ebp
c01092b2:	81 ec a8 00 00 00    	sub    $0xa8,%esp
    struct m_pcb curr_pcb;
    init_proc(&curr_pcb);
c01092b8:	83 ec 0c             	sub    $0xc,%esp
c01092bb:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c01092c1:	50                   	push   %eax
c01092c2:	e8 60 fd ff ff       	call   c0109027 <init_proc>
c01092c7:	83 c4 10             	add    $0x10,%esp

    curr_pcb.process_mm = __current->process_mm;
c01092ca:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01092cf:	8b 40 58             	mov    0x58(%eax),%eax
c01092d2:	89 45 bc             	mov    %eax,-0x44(%ebp)
    curr_pcb.intr_contxt = __current->intr_contxt;
c01092d5:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01092da:	8b 50 08             	mov    0x8(%eax),%edx
c01092dd:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
c01092e3:	8b 50 0c             	mov    0xc(%eax),%edx
c01092e6:	89 95 70 ff ff ff    	mov    %edx,-0x90(%ebp)
c01092ec:	8b 50 10             	mov    0x10(%eax),%edx
c01092ef:	89 95 74 ff ff ff    	mov    %edx,-0x8c(%ebp)
c01092f5:	8b 50 14             	mov    0x14(%eax),%edx
c01092f8:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
c01092fe:	8b 50 18             	mov    0x18(%eax),%edx
c0109301:	89 95 7c ff ff ff    	mov    %edx,-0x84(%ebp)
c0109307:	8b 50 1c             	mov    0x1c(%eax),%edx
c010930a:	89 55 80             	mov    %edx,-0x80(%ebp)
c010930d:	8b 50 20             	mov    0x20(%eax),%edx
c0109310:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0109313:	8b 50 24             	mov    0x24(%eax),%edx
c0109316:	89 55 88             	mov    %edx,-0x78(%ebp)
c0109319:	8b 50 28             	mov    0x28(%eax),%edx
c010931c:	89 55 8c             	mov    %edx,-0x74(%ebp)
c010931f:	8b 50 2c             	mov    0x2c(%eax),%edx
c0109322:	89 55 90             	mov    %edx,-0x70(%ebp)
c0109325:	8b 50 30             	mov    0x30(%eax),%edx
c0109328:	89 55 94             	mov    %edx,-0x6c(%ebp)
c010932b:	8b 50 34             	mov    0x34(%eax),%edx
c010932e:	89 55 98             	mov    %edx,-0x68(%ebp)
c0109331:	8b 50 38             	mov    0x38(%eax),%edx
c0109334:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0109337:	8b 50 3c             	mov    0x3c(%eax),%edx
c010933a:	89 55 a0             	mov    %edx,-0x60(%ebp)
c010933d:	8b 40 40             	mov    0x40(%eax),%eax
c0109340:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    curr_pcb.parent = __current;
c0109343:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109348:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

#ifdef USE_KERNEL_PG
    setup_proc_mem(&pcb, PD_MOUNT_1); //挂载点#1是当前进程的页表
#else
    setup_proc_mem(&curr_pcb, PD_REFERENCED);
c010934e:	83 ec 08             	sub    $0x8,%esp
c0109351:	68 00 00 c0 ff       	push   $0xffc00000
c0109356:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010935c:	50                   	push   %eax
c010935d:	e8 77 fe ff ff       	call   c01091d9 <setup_proc_mem>
c0109362:	83 c4 10             	add    $0x10,%esp
#endif

        // 根据 mm_region 进一步配置页表
    if (!__current->process_mm) {
c0109365:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010936a:	8b 40 58             	mov    0x58(%eax),%eax
c010936d:	85 c0                	test   %eax,%eax
c010936f:	0f 84 68 01 00 00    	je     c01094dd <m_fork+0x22e>
        goto not_copy;
    }

    llist_init_head(&curr_pcb.process_mm);
c0109375:	83 ec 0c             	sub    $0xc,%esp
c0109378:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010937e:	83 c0 58             	add    $0x58,%eax
c0109381:	50                   	push   %eax
c0109382:	e8 50 fc ff ff       	call   c0108fd7 <llist_init_head>
c0109387:	83 c4 10             	add    $0x10,%esp
    struct mm_region *pos, *n;
    llist_for_each(pos, n, &__current->process_mm->head, head)
c010938a:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010938f:	8b 40 58             	mov    0x58(%eax),%eax
c0109392:	8b 40 04             	mov    0x4(%eax),%eax
c0109395:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109398:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010939b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010939e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093a1:	8b 40 04             	mov    0x4(%eax),%eax
c01093a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01093a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01093aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01093ad:	e9 18 01 00 00       	jmp    c01094ca <m_fork+0x21b>
    {
        region_add(&curr_pcb, pos->start, pos->end, pos->attr);
c01093b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093b5:	8b 48 10             	mov    0x10(%eax),%ecx
c01093b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093bb:	8b 50 0c             	mov    0xc(%eax),%edx
c01093be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093c1:	8b 40 08             	mov    0x8(%eax),%eax
c01093c4:	51                   	push   %ecx
c01093c5:	52                   	push   %edx
c01093c6:	50                   	push   %eax
c01093c7:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c01093cd:	50                   	push   %eax
c01093ce:	e8 6b de ff ff       	call   c010723e <region_add>
c01093d3:	83 c4 10             	add    $0x10,%esp

        // 如果写共享，则不作处理。
        if ((pos->attr & REGION_WSHARED)) {
c01093d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093d9:	8b 40 10             	mov    0x10(%eax),%eax
c01093dc:	83 e0 02             	and    $0x2,%eax
c01093df:	85 c0                	test   %eax,%eax
c01093e1:	0f 85 cd 00 00 00    	jne    c01094b4 <m_fork+0x205>
            continue;
        }

        uintptr_t start_vpn = PG_ALIGN(pos->start) >> 12;
c01093e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093ea:	8b 40 08             	mov    0x8(%eax),%eax
c01093ed:	c1 e8 0c             	shr    $0xc,%eax
c01093f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t end_vpn = PG_ALIGN(pos->end) >> 12;
c01093f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093f6:	8b 40 0c             	mov    0xc(%eax),%eax
c01093f9:	c1 e8 0c             	shr    $0xc,%eax
c01093fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
        for (size_t i = start_vpn; i < end_vpn; i++) {
c01093ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109402:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109405:	e9 9c 00 00 00       	jmp    c01094a6 <m_fork+0x1f7>
            pt_t* curproc = &PTE_MOUNTED(PD_MOUNT_1, i);
c010940a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010940d:	25 ff 03 00 00       	and    $0x3ff,%eax
c0109412:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109419:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010941c:	c1 e0 02             	shl    $0x2,%eax
c010941f:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0109424:	0d 00 00 c0 af       	or     $0xafc00000,%eax
c0109429:	01 d0                	add    %edx,%eax
c010942b:	89 45 d8             	mov    %eax,-0x28(%ebp)
            pt_t* newproc = &PTE_MOUNTED(PD_MOUNT_2, i);
c010942e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109431:	25 ff 03 00 00       	and    $0x3ff,%eax
c0109436:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010943d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109440:	c1 e0 02             	shl    $0x2,%eax
c0109443:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0109448:	0d 00 00 80 af       	or     $0xaf800000,%eax
c010944d:	01 d0                	add    %edx,%eax
c010944f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            cpu_invplg(newproc);
c0109452:	83 ec 0c             	sub    $0xc,%esp
c0109455:	ff 75 d4             	push   -0x2c(%ebp)
c0109458:	e8 6e fb ff ff       	call   c0108fcb <cpu_invplg>
c010945d:	83 c4 10             	add    $0x10,%esp

            if (pos->attr == REGION_RSHARED) {
c0109460:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109463:	8b 40 10             	mov    0x10(%eax),%eax
c0109466:	83 f8 01             	cmp    $0x1,%eax
c0109469:	75 2e                	jne    c0109499 <m_fork+0x1ea>
                // 如果读共享，则将两者的都标注为只读，那么任何写入都将会应用COW策略。
                cpu_invplg(curproc);
c010946b:	83 ec 0c             	sub    $0xc,%esp
c010946e:	ff 75 d8             	push   -0x28(%ebp)
c0109471:	e8 55 fb ff ff       	call   c0108fcb <cpu_invplg>
c0109476:	83 c4 10             	add    $0x10,%esp
                *curproc = *curproc & ~PG_WRITE;
c0109479:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010947c:	8b 00                	mov    (%eax),%eax
c010947e:	83 e0 fd             	and    $0xfffffffd,%eax
c0109481:	89 c2                	mov    %eax,%edx
c0109483:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109486:	89 10                	mov    %edx,(%eax)
                *newproc = *newproc & ~PG_WRITE;
c0109488:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010948b:	8b 00                	mov    (%eax),%eax
c010948d:	83 e0 fd             	and    $0xfffffffd,%eax
c0109490:	89 c2                	mov    %eax,%edx
c0109492:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109495:	89 10                	mov    %edx,(%eax)
c0109497:	eb 09                	jmp    c01094a2 <m_fork+0x1f3>
            } else {
                // 如果是私有页，则将该页从新进程中移除。
                *newproc = 0;
c0109499:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010949c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        for (size_t i = start_vpn; i < end_vpn; i++) {
c01094a2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01094a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094a9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01094ac:	0f 82 58 ff ff ff    	jb     c010940a <m_fork+0x15b>
c01094b2:	eb 01                	jmp    c01094b5 <m_fork+0x206>
            continue;
c01094b4:	90                   	nop
    llist_for_each(pos, n, &__current->process_mm->head, head)
c01094b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094be:	8b 40 04             	mov    0x4(%eax),%eax
c01094c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01094c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01094c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01094ca:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01094cf:	8b 40 58             	mov    0x58(%eax),%eax
c01094d2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01094d5:	0f 85 d7 fe ff ff    	jne    c01093b2 <m_fork+0x103>
            }
        }
    }

not_copy:
c01094db:	eb 01                	jmp    c01094de <m_fork+0x22f>
        goto not_copy;
c01094dd:	90                   	nop
    vmm_unmount_pd(PD_MOUNT_2);
c01094de:	83 ec 0c             	sub    $0xc,%esp
c01094e1:	68 00 00 80 af       	push   $0xaf800000
c01094e6:	e8 6f e6 ff ff       	call   c0107b5a <vmm_unmount_pd>
c01094eb:	83 c4 10             	add    $0x10,%esp
    vmm_unmount_pd(PD_MOUNT_1);
c01094ee:	83 ec 0c             	sub    $0xc,%esp
c01094f1:	68 00 00 c0 af       	push   $0xafc00000
c01094f6:	e8 5f e6 ff ff       	call   c0107b5a <vmm_unmount_pd>
c01094fb:	83 c4 10             	add    $0x10,%esp
    vmm_unmount_pd(PG_MOUNT_2);
c01094fe:	83 ec 0c             	sub    $0xc,%esp
c0109501:	68 00 e0 7f af       	push   $0xaf7fe000
c0109506:	e8 4f e6 ff ff       	call   c0107b5a <vmm_unmount_pd>
c010950b:	83 c4 10             	add    $0x10,%esp
    // 正如同fork，返回两次。
    curr_pcb.intr_contxt.registers.eax = 0;
c010950e:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%ebp)
c0109515:	00 00 00 

    push_process(&curr_pcb);
c0109518:	83 ec 0c             	sub    $0xc,%esp
c010951b:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c0109521:	50                   	push   %eax
c0109522:	e8 22 03 00 00       	call   c0109849 <push_process>
c0109527:	83 c4 10             	add    $0x10,%esp

    return curr_pcb.pid;
c010952a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
}
c0109530:	c9                   	leave  
c0109531:	c3                   	ret    

c0109532 <__del_pagetable>:

void __del_pagetable(pid_t pid, uintptr_t mount_point)
{
c0109532:	55                   	push   %ebp
c0109533:	89 e5                	mov    %esp,%ebp
c0109535:	83 ec 28             	sub    $0x28,%esp
    ptd_t* pptd = (ptd_t*)(mount_point | (0x3FF << 12));
c0109538:	8b 45 0c             	mov    0xc(%ebp),%eax
c010953b:	0d 00 f0 3f 00       	or     $0x3ff000,%eax
c0109540:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c0109543:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010954a:	e9 99 00 00 00       	jmp    c01095e8 <__del_pagetable+0xb6>
        ptd_t ptde = pptd[i];
c010954f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109552:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109559:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010955c:	01 d0                	add    %edx,%eax
c010955e:	8b 00                	mov    (%eax),%eax
c0109560:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (!ptde || !(ptde & PG_PRESENT)) {
c0109563:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109567:	74 7a                	je     c01095e3 <__del_pagetable+0xb1>
c0109569:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010956c:	83 e0 01             	and    $0x1,%eax
c010956f:	85 c0                	test   %eax,%eax
c0109571:	74 70                	je     c01095e3 <__del_pagetable+0xb1>
            continue;
        }

        pt_t* ppt = (pt_t*)(mount_point | (i << 12));
c0109573:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109576:	c1 e0 0c             	shl    $0xc,%eax
c0109579:	0b 45 0c             	or     0xc(%ebp),%eax
c010957c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c010957f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0109586:	eb 39                	jmp    c01095c1 <__del_pagetable+0x8f>
            pt_t pte = ppt[j];
c0109588:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010958b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109592:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109595:	01 d0                	add    %edx,%eax
c0109597:	8b 00                	mov    (%eax),%eax
c0109599:	89 45 e0             	mov    %eax,-0x20(%ebp)
            // free the 4KB data page
            if ((pte & PG_PRESENT)) {
c010959c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010959f:	83 e0 01             	and    $0x1,%eax
c01095a2:	85 c0                	test   %eax,%eax
c01095a4:	74 17                	je     c01095bd <__del_pagetable+0x8b>
                pmm_free_page(pid, PG_ENTRY_ADDR(pte));
c01095a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01095a9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01095ae:	83 ec 08             	sub    $0x8,%esp
c01095b1:	50                   	push   %eax
c01095b2:	ff 75 08             	push   0x8(%ebp)
c01095b5:	e8 f8 d3 ff ff       	call   c01069b2 <pmm_free_page>
c01095ba:	83 c4 10             	add    $0x10,%esp
        for (size_t j = 0; j < PG_MAX_ENTRIES; j++) {
c01095bd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01095c1:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c01095c8:	76 be                	jbe    c0109588 <__del_pagetable+0x56>
            }
        }
        // free the L2 page table
        pmm_free_page(pid, PG_ENTRY_ADDR(ptde));
c01095ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01095cd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01095d2:	83 ec 08             	sub    $0x8,%esp
c01095d5:	50                   	push   %eax
c01095d6:	ff 75 08             	push   0x8(%ebp)
c01095d9:	e8 d4 d3 ff ff       	call   c01069b2 <pmm_free_page>
c01095de:	83 c4 10             	add    $0x10,%esp
c01095e1:	eb 01                	jmp    c01095e4 <__del_pagetable+0xb2>
            continue;
c01095e3:	90                   	nop
    for (size_t i = 0; i < PG_MAX_ENTRIES - 1; i++) {
c01095e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01095e8:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01095ef:	0f 86 5a ff ff ff    	jbe    c010954f <__del_pagetable+0x1d>
    }
    // free the L1 directory
    pmm_free_page(pid, PG_ENTRY_ADDR(pptd[PG_MAX_ENTRIES - 1]));
c01095f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01095f8:	05 fc 0f 00 00       	add    $0xffc,%eax
c01095fd:	8b 00                	mov    (%eax),%eax
c01095ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109604:	83 ec 08             	sub    $0x8,%esp
c0109607:	50                   	push   %eax
c0109608:	ff 75 08             	push   0x8(%ebp)
c010960b:	e8 a2 d3 ff ff       	call   c01069b2 <pmm_free_page>
c0109610:	83 c4 10             	add    $0x10,%esp
c0109613:	90                   	nop
c0109614:	c9                   	leave  
c0109615:	c3                   	ret    

c0109616 <__llist_add>:
{
c0109616:	55                   	push   %ebp
c0109617:	89 e5                	mov    %esp,%ebp
    next->prev = elem;
c0109619:	8b 45 10             	mov    0x10(%ebp),%eax
c010961c:	8b 55 08             	mov    0x8(%ebp),%edx
c010961f:	89 10                	mov    %edx,(%eax)
    elem->next = next;
c0109621:	8b 45 08             	mov    0x8(%ebp),%eax
c0109624:	8b 55 10             	mov    0x10(%ebp),%edx
c0109627:	89 50 04             	mov    %edx,0x4(%eax)
    elem->prev = prev;
c010962a:	8b 45 08             	mov    0x8(%ebp),%eax
c010962d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109630:	89 10                	mov    %edx,(%eax)
    prev->next = elem;
c0109632:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109635:	8b 55 08             	mov    0x8(%ebp),%edx
c0109638:	89 50 04             	mov    %edx,0x4(%eax)
}
c010963b:	90                   	nop
c010963c:	5d                   	pop    %ebp
c010963d:	c3                   	ret    

c010963e <llist_init_head>:
static inline void llist_init_head(struct llist_header* head) {
c010963e:	55                   	push   %ebp
c010963f:	89 e5                	mov    %esp,%ebp
    head->next = head;
c0109641:	8b 45 08             	mov    0x8(%ebp),%eax
c0109644:	8b 55 08             	mov    0x8(%ebp),%edx
c0109647:	89 50 04             	mov    %edx,0x4(%eax)
    head->prev = head;
c010964a:	8b 45 08             	mov    0x8(%ebp),%eax
c010964d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109650:	89 10                	mov    %edx,(%eax)
}
c0109652:	90                   	nop
c0109653:	5d                   	pop    %ebp
c0109654:	c3                   	ret    

c0109655 <llist_append>:
{
c0109655:	55                   	push   %ebp
c0109656:	89 e5                	mov    %esp,%ebp
    __llist_add(elem, head, head->next);
c0109658:	8b 45 08             	mov    0x8(%ebp),%eax
c010965b:	8b 40 04             	mov    0x4(%eax),%eax
c010965e:	50                   	push   %eax
c010965f:	ff 75 08             	push   0x8(%ebp)
c0109662:	ff 75 0c             	push   0xc(%ebp)
c0109665:	e8 ac ff ff ff       	call   c0109616 <__llist_add>
c010966a:	83 c4 0c             	add    $0xc,%esp
}
c010966d:	90                   	nop
c010966e:	c9                   	leave  
c010966f:	c3                   	ret    

c0109670 <llist_empty>:

static inline int llist_empty(struct llist_header* elem) {
c0109670:	55                   	push   %ebp
c0109671:	89 e5                	mov    %esp,%ebp
    return elem->next == elem;
c0109673:	8b 45 08             	mov    0x8(%ebp),%eax
c0109676:	8b 40 04             	mov    0x4(%eax),%eax
c0109679:	39 45 08             	cmp    %eax,0x8(%ebp)
c010967c:	0f 94 c0             	sete   %al
c010967f:	0f b6 c0             	movzbl %al,%eax
}
c0109682:	5d                   	pop    %ebp
c0109683:	c3                   	ret    

c0109684 <llist_delete>:

static inline void
llist_delete(struct llist_header* elem) {
c0109684:	55                   	push   %ebp
c0109685:	89 e5                	mov    %esp,%ebp
    elem->prev->next = elem->next;
c0109687:	8b 45 08             	mov    0x8(%ebp),%eax
c010968a:	8b 00                	mov    (%eax),%eax
c010968c:	8b 55 08             	mov    0x8(%ebp),%edx
c010968f:	8b 52 04             	mov    0x4(%edx),%edx
c0109692:	89 50 04             	mov    %edx,0x4(%eax)
    elem->next->prev = elem->next;
c0109695:	8b 45 08             	mov    0x8(%ebp),%eax
c0109698:	8b 40 04             	mov    0x4(%eax),%eax
c010969b:	8b 55 08             	mov    0x8(%ebp),%edx
c010969e:	8b 52 04             	mov    0x4(%edx),%edx
c01096a1:	89 10                	mov    %edx,(%eax)
    
    // make elem orphaned
    elem->prev = elem;
c01096a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a6:	8b 55 08             	mov    0x8(%ebp),%edx
c01096a9:	89 10                	mov    %edx,(%eax)
    elem->next = elem;
c01096ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ae:	8b 55 08             	mov    0x8(%ebp),%edx
c01096b1:	89 50 04             	mov    %edx,0x4(%eax)
}
c01096b4:	90                   	nop
c01096b5:	5d                   	pop    %ebp
c01096b6:	c3                   	ret    

c01096b7 <syscall>:
{
c01096b7:	55                   	push   %ebp
c01096b8:	89 e5                	mov    %esp,%ebp
c01096ba:	57                   	push   %edi
    asm volatile("int %0" ::"i"(0x80), "D"(callcode) : "eax");
c01096bb:	8b 55 08             	mov    0x8(%ebp),%edx
c01096be:	89 d7                	mov    %edx,%edi
c01096c0:	cd 80                	int    $0x80
}
c01096c2:	90                   	nop
c01096c3:	8b 7d fc             	mov    -0x4(%ebp),%edi
c01096c6:	c9                   	leave  
c01096c7:	c3                   	ret    

c01096c8 <sched_init>:
extern void __proc_table;

struct scheduler sched_ctx;

int sched_init()
{
c01096c8:	55                   	push   %ebp
c01096c9:	89 e5                	mov    %esp,%ebp
c01096cb:	83 ec 18             	sub    $0x18,%esp
    size_t pg_size = ROUNDUP(sizeof(struct m_pcb) * MAX_PROCESS, 0x1000);
c01096ce:	c7 45 f4 00 e0 00 00 	movl   $0xe000,-0xc(%ebp)
    if(vmm_alloc_pages(KERNEL_PID, &__proc_table, pg_size, PG_PREM_RW, PP_FGPERSIST)){
c01096d5:	83 ec 0c             	sub    $0xc,%esp
c01096d8:	6a 01                	push   $0x1
c01096da:	6a 03                	push   $0x3
c01096dc:	ff 75 f4             	push   -0xc(%ebp)
c01096df:	68 00 80 d1 c0       	push   $0xc0d18000
c01096e4:	6a ff                	push   $0xffffffff
c01096e6:	e8 9d e0 ff ff       	call   c0107788 <vmm_alloc_pages>
c01096eb:	83 c4 20             	add    $0x20,%esp
c01096ee:	85 c0                	test   %eax,%eax
c01096f0:	74 25                	je     c0109717 <sched_init+0x4f>
        sched_ctx = (struct scheduler){ ._procs = (struct m_pcb*)&__proc_table,
c01096f2:	c7 05 ec b1 d0 c0 00 	movl   $0xc0d18000,0xc0d0b1ec
c01096f9:	80 d1 c0 
c01096fc:	c7 05 f0 b1 d0 c0 00 	movl   $0x0,0xc0d0b1f0
c0109703:	00 00 00 
c0109706:	c7 05 f4 b1 d0 c0 00 	movl   $0x0,0xc0d0b1f4
c010970d:	00 00 00 
                                    .ptable_len = 0,
                                    .procs_index = 0 };
                                    return 1;}
c0109710:	b8 01 00 00 00       	mov    $0x1,%eax
c0109715:	eb 05                	jmp    c010971c <sched_init+0x54>
    return 0;
c0109717:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
c010971c:	c9                   	leave  
c010971d:	c3                   	ret    

c010971e <run>:

void run(struct m_pcb* proc)
{
c010971e:	55                   	push   %ebp
c010971f:	89 e5                	mov    %esp,%ebp
    if (!(__current->state & ~PROC_RUNNING)) {
c0109721:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109726:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c010972a:	0f b6 c0             	movzbl %al,%eax
c010972d:	83 e0 fe             	and    $0xfffffffe,%eax
c0109730:	85 c0                	test   %eax,%eax
c0109732:	75 09                	jne    c010973d <run+0x1f>
        __current->state = PROC_STOPPED;
c0109734:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109739:	c6 40 44 00          	movb   $0x0,0x44(%eax)
    }
    proc->state = PROC_RUNNING;
c010973d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109740:	c6 40 44 01          	movb   $0x1,0x44(%eax)


    if (__current->page_table != proc->page_table) {
c0109744:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109749:	8b 50 64             	mov    0x64(%eax),%edx
c010974c:	8b 45 08             	mov    0x8(%ebp),%eax
c010974f:	8b 40 64             	mov    0x64(%eax),%eax
c0109752:	39 c2                	cmp    %eax,%edx
c0109754:	74 15                	je     c010976b <run+0x4d>
        __current = proc;
c0109756:	8b 45 08             	mov    0x8(%ebp),%eax
c0109759:	a3 60 b1 d0 c0       	mov    %eax,0xc0d0b160
        //asm("cli");
        //__asm__("movl %%ebx,%%cr3"::"b" (__current->page_table));
        __asm__("mov %0, %%cr3" ::"r"(__current->page_table));
c010975e:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109763:	8b 40 64             	mov    0x64(%eax),%eax
c0109766:	0f 22 d8             	mov    %eax,%cr3
c0109769:	eb 08                	jmp    c0109773 <run+0x55>
        //cpu_lcr3(__current->page_table);
        //asm("sti");
    } else {
        __current = proc;
c010976b:	8b 45 08             	mov    0x8(%ebp),%eax
c010976e:	a3 60 b1 d0 c0       	mov    %eax,0xc0d0b160

    // io_outb(0x20, 0x20);
    // io_outb(0xa0, 0x20);//EOI end the int

    asm volatile("pushl %0\n"
                 "jmp soft_iret\n" ::"r"(&__current->intr_contxt)
c0109773:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109778:	83 c0 08             	add    $0x8,%eax
    asm volatile("pushl %0\n"
c010977b:	50                   	push   %eax
c010977c:	e9 9e ea ff ff       	jmp    c010821f <soft_iret>
                 : "memory");
}
c0109781:	90                   	nop
c0109782:	5d                   	pop    %ebp
c0109783:	c3                   	ret    

c0109784 <schedule>:

void schedule()
{
c0109784:	55                   	push   %ebp
c0109785:	89 e5                	mov    %esp,%ebp
c0109787:	83 ec 10             	sub    $0x10,%esp
    if (!sched_ctx.ptable_len) {
c010978a:	a1 f4 b1 d0 c0       	mov    0xc0d0b1f4,%eax
c010978f:	85 c0                	test   %eax,%eax
c0109791:	74 5f                	je     c01097f2 <schedule+0x6e>
        return;
    }

    struct m_pcb* next;
    int prev_ptr = sched_ctx.procs_index;
c0109793:	a1 f0 b1 d0 c0       	mov    0xc0d0b1f0,%eax
c0109798:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int ptr = prev_ptr;
c010979b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010979e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // round-robin scheduler
    do {
        ptr = (ptr + 1) % sched_ctx.ptable_len;
c01097a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097a4:	83 c0 01             	add    $0x1,%eax
c01097a7:	8b 0d f4 b1 d0 c0    	mov    0xc0d0b1f4,%ecx
c01097ad:	ba 00 00 00 00       	mov    $0x0,%edx
c01097b2:	f7 f1                	div    %ecx
c01097b4:	89 d0                	mov    %edx,%eax
c01097b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
        next = &sched_ctx._procs[ptr];
c01097b9:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c01097bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097c2:	6b c0 6c             	imul   $0x6c,%eax,%eax
c01097c5:	01 d0                	add    %edx,%eax
c01097c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    } while (next->state != PROC_STOPPED && ptr != prev_ptr);
c01097ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097cd:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c01097d1:	84 c0                	test   %al,%al
c01097d3:	74 08                	je     c01097dd <schedule+0x59>
c01097d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097d8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01097db:	75 c4                	jne    c01097a1 <schedule+0x1d>

    sched_ctx.procs_index = ptr;
c01097dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097e0:	a3 f0 b1 d0 c0       	mov    %eax,0xc0d0b1f0

    run(next);
c01097e5:	ff 75 f4             	push   -0xc(%ebp)
c01097e8:	e8 31 ff ff ff       	call   c010971e <run>
c01097ed:	83 c4 04             	add    $0x4,%esp
c01097f0:	eb 01                	jmp    c01097f3 <schedule+0x6f>
        return;
c01097f2:	90                   	nop
}
c01097f3:	c9                   	leave  
c01097f4:	c3                   	ret    

c01097f5 <alloc_pid>:

pid_t alloc_pid()
{
c01097f5:	55                   	push   %ebp
c01097f6:	89 e5                	mov    %esp,%ebp
c01097f8:	83 ec 18             	sub    $0x18,%esp
    pid_t i = 0;
c01097fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;
c0109802:	eb 04                	jmp    c0109808 <alloc_pid+0x13>
         i < sched_ctx.ptable_len && sched_ctx._procs[i].state != PROC_DESTROY;
         i++)
c0109804:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
         i < sched_ctx.ptable_len && sched_ctx._procs[i].state != PROC_DESTROY;
c0109808:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c010980e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109811:	39 c2                	cmp    %eax,%edx
c0109813:	76 16                	jbe    c010982b <alloc_pid+0x36>
c0109815:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c010981b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010981e:	6b c0 6c             	imul   $0x6c,%eax,%eax
c0109821:	01 d0                	add    %edx,%eax
c0109823:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c0109827:	3c 04                	cmp    $0x4,%al
c0109829:	75 d9                	jne    c0109804 <alloc_pid+0xf>
        ;

    if (i == MAX_PROCESS) {
c010982b:	81 7d f4 00 02 00 00 	cmpl   $0x200,-0xc(%ebp)
c0109832:	75 10                	jne    c0109844 <alloc_pid+0x4f>
        kprintf("Panic in Ponyville shimmer!");
c0109834:	83 ec 0c             	sub    $0xc,%esp
c0109837:	68 14 d6 d0 c0       	push   $0xc0d0d614
c010983c:	e8 f0 02 00 00       	call   c0109b31 <kprintf>
c0109841:	83 c4 10             	add    $0x10,%esp
    }
    return i;
c0109844:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109847:	c9                   	leave  
c0109848:	c3                   	ret    

c0109849 <push_process>:

void
push_process(struct m_pcb* process)
{
c0109849:	55                   	push   %ebp
c010984a:	89 e5                	mov    %esp,%ebp
c010984c:	57                   	push   %edi
c010984d:	56                   	push   %esi
c010984e:	53                   	push   %ebx
c010984f:	83 ec 10             	sub    $0x10,%esp
    int index = process->pid;
c0109852:	8b 45 08             	mov    0x8(%ebp),%eax
c0109855:	8b 00                	mov    (%eax),%eax
c0109857:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (index < 0 || index > sched_ctx.ptable_len) {
c010985a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010985e:	78 0d                	js     c010986d <push_process+0x24>
c0109860:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c0109866:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109869:	39 c2                	cmp    %eax,%edx
c010986b:	73 11                	jae    c010987e <push_process+0x35>
        __current->k_status = MXINVLDPID;
c010986d:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109872:	c7 40 68 fc ff ff ff 	movl   $0xfffffffc,0x68(%eax)
        return;
c0109879:	e9 92 00 00 00       	jmp    c0109910 <push_process+0xc7>
    }

    if (index == sched_ctx.ptable_len) {
c010987e:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c0109884:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109887:	39 c2                	cmp    %eax,%edx
c0109889:	75 0d                	jne    c0109898 <push_process+0x4f>
        sched_ctx.ptable_len++;
c010988b:	a1 f4 b1 d0 c0       	mov    0xc0d0b1f4,%eax
c0109890:	83 c0 01             	add    $0x1,%eax
c0109893:	a3 f4 b1 d0 c0       	mov    %eax,0xc0d0b1f4
    }

    sched_ctx._procs[index] = *process;
c0109898:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c010989e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098a1:	6b c0 6c             	imul   $0x6c,%eax,%eax
c01098a4:	01 c2                	add    %eax,%edx
c01098a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098a9:	89 c3                	mov    %eax,%ebx
c01098ab:	b8 1b 00 00 00       	mov    $0x1b,%eax
c01098b0:	89 d7                	mov    %edx,%edi
c01098b2:	89 de                	mov    %ebx,%esi
c01098b4:	89 c1                	mov    %eax,%ecx
c01098b6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

    process = &sched_ctx._procs[index];
c01098b8:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c01098be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098c1:	6b c0 6c             	imul   $0x6c,%eax,%eax
c01098c4:	01 d0                	add    %edx,%eax
c01098c6:	89 45 08             	mov    %eax,0x8(%ebp)

    // make sure the address is in the range of process table
    llist_init_head(&process->children);
c01098c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098cc:	83 c0 50             	add    $0x50,%eax
c01098cf:	50                   	push   %eax
c01098d0:	e8 69 fd ff ff       	call   c010963e <llist_init_head>
c01098d5:	83 c4 04             	add    $0x4,%esp
    // every process is the child of first process (pid=1)
    if (process->parent) {
c01098d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01098db:	8b 40 04             	mov    0x4(%eax),%eax
c01098de:	85 c0                	test   %eax,%eax
c01098e0:	74 1b                	je     c01098fd <push_process+0xb4>
        llist_append(&process->parent->children, &process->siblings);
c01098e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e5:	8d 50 48             	lea    0x48(%eax),%edx
c01098e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01098eb:	8b 40 04             	mov    0x4(%eax),%eax
c01098ee:	83 c0 50             	add    $0x50,%eax
c01098f1:	52                   	push   %edx
c01098f2:	50                   	push   %eax
c01098f3:	e8 5d fd ff ff       	call   c0109655 <llist_append>
c01098f8:	83 c4 08             	add    $0x8,%esp
c01098fb:	eb 0c                	jmp    c0109909 <push_process+0xc0>
    } else {
        process->parent = &sched_ctx._procs[0];
c01098fd:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c0109903:	8b 45 08             	mov    0x8(%ebp),%eax
c0109906:	89 50 04             	mov    %edx,0x4(%eax)
    }

    process->state = PROC_STOPPED;
c0109909:	8b 45 08             	mov    0x8(%ebp),%eax
c010990c:	c6 40 44 00          	movb   $0x0,0x44(%eax)
}
c0109910:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0109913:	5b                   	pop    %ebx
c0109914:	5e                   	pop    %esi
c0109915:	5f                   	pop    %edi
c0109916:	5d                   	pop    %ebp
c0109917:	c3                   	ret    

c0109918 <terminate_proc>:

void terminate_proc(int exit_code)
{
c0109918:	55                   	push   %ebp
c0109919:	89 e5                	mov    %esp,%ebp
    __current->state = PROC_TERMNAT;
c010991b:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109920:	c6 40 44 02          	movb   $0x2,0x44(%eax)
    __current->exit_code = exit_code;
c0109924:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109929:	8b 55 08             	mov    0x8(%ebp),%edx
c010992c:	89 50 60             	mov    %edx,0x60(%eax)

    schedule();
c010992f:	e8 50 fe ff ff       	call   c0109784 <schedule>
}
c0109934:	90                   	nop
c0109935:	5d                   	pop    %ebp
c0109936:	c3                   	ret    

c0109937 <__mxsys_sleep>:

__DEFINE_MXSYSCALL1(unsigned int, sleep, unsigned int, seconds)
{
c0109937:	55                   	push   %ebp
c0109938:	89 e5                	mov    %esp,%ebp
    if (!seconds) {
c010993a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010993e:	75 07                	jne    c0109947 <__mxsys_sleep+0x10>
        return 0;
c0109940:	b8 00 00 00 00       	mov    $0x0,%eax
c0109945:	eb 2f                	jmp    c0109976 <__mxsys_sleep+0x3f>
    }
    if (__current->pro_ticks) {
c0109947:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010994c:	8b 40 5c             	mov    0x5c(%eax),%eax
c010994f:	85 c0                	test   %eax,%eax
c0109951:	74 0a                	je     c010995d <__mxsys_sleep+0x26>
        return __current->pro_ticks;
c0109953:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109958:	8b 40 5c             	mov    0x5c(%eax),%eax
c010995b:	eb 19                	jmp    c0109976 <__mxsys_sleep+0x3f>
    }

    __current->intr_contxt.registers.eax = seconds;
c010995d:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109962:	8b 55 08             	mov    0x8(%ebp),%edx
c0109965:	89 50 08             	mov    %edx,0x8(%eax)
    __current->state = PROC_BLOCKED;
c0109968:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010996d:	c6 40 44 08          	movb   $0x8,0x44(%eax)
    schedule();
c0109971:	e8 0e fe ff ff       	call   c0109784 <schedule>
}
c0109976:	5d                   	pop    %ebp
c0109977:	c3                   	ret    

c0109978 <__mxsys_exit>:

__DEFINE_MXSYSCALL1(void, exit, int, status)
{
c0109978:	55                   	push   %ebp
c0109979:	89 e5                	mov    %esp,%ebp
    terminate_proc(status);
c010997b:	ff 75 08             	push   0x8(%ebp)
c010997e:	e8 95 ff ff ff       	call   c0109918 <terminate_proc>
c0109983:	83 c4 04             	add    $0x4,%esp
}
c0109986:	90                   	nop
c0109987:	c9                   	leave  
c0109988:	c3                   	ret    

c0109989 <__mxsys_yield>:

__DEFINE_MXSYSCALL(void, yield)
{
c0109989:	55                   	push   %ebp
c010998a:	89 e5                	mov    %esp,%ebp
    schedule();
c010998c:	e8 f3 fd ff ff       	call   c0109784 <schedule>
}
c0109991:	90                   	nop
c0109992:	5d                   	pop    %ebp
c0109993:	c3                   	ret    

c0109994 <__mxsys_wait>:

__DEFINE_MXSYSCALL1(pid_t, wait, int*, status)
{
c0109994:	55                   	push   %ebp
c0109995:	89 e5                	mov    %esp,%ebp
c0109997:	83 ec 28             	sub    $0x28,%esp
    pid_t cur = __current->pid;
c010999a:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c010999f:	8b 00                	mov    (%eax),%eax
c01099a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct m_pcb *proc, *n;
    if (llist_empty(&__current->children)) {
c01099a4:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01099a9:	83 c0 50             	add    $0x50,%eax
c01099ac:	50                   	push   %eax
c01099ad:	e8 be fc ff ff       	call   c0109670 <llist_empty>
c01099b2:	83 c4 04             	add    $0x4,%esp
c01099b5:	85 c0                	test   %eax,%eax
c01099b7:	74 07                	je     c01099c0 <__mxsys_wait+0x2c>
        return -1;
c01099b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01099be:	eb 7d                	jmp    c0109a3d <__mxsys_wait+0xa9>
    }
repeat:
c01099c0:	90                   	nop
    llist_for_each(proc, n, &__current->children, siblings)
c01099c1:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c01099c6:	8b 40 54             	mov    0x54(%eax),%eax
c01099c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01099cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01099cf:	83 e8 48             	sub    $0x48,%eax
c01099d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099d8:	8b 40 4c             	mov    0x4c(%eax),%eax
c01099db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01099de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01099e1:	83 e8 48             	sub    $0x48,%eax
c01099e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01099e7:	eb 23                	jmp    c0109a0c <__mxsys_wait+0x78>
    {
        if (proc->state == PROC_TERMNAT) {
c01099e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099ec:	0f b6 40 44          	movzbl 0x44(%eax),%eax
c01099f0:	3c 02                	cmp    $0x2,%al
c01099f2:	74 2c                	je     c0109a20 <__mxsys_wait+0x8c>
    llist_for_each(proc, n, &__current->children, siblings)
c01099f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099fd:	8b 40 4c             	mov    0x4c(%eax),%eax
c0109a00:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109a03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109a06:	83 e8 48             	sub    $0x48,%eax
c0109a09:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a0f:	8d 50 48             	lea    0x48(%eax),%edx
c0109a12:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a17:	83 c0 50             	add    $0x50,%eax
c0109a1a:	39 c2                	cmp    %eax,%edx
c0109a1c:	75 cb                	jne    c01099e9 <__mxsys_wait+0x55>
            goto done;
        }
    }
    // FIXME: 除了循环，也许有更高效的办法……
    // (在这里进行schedule，需要重写context switch!)
    goto repeat;
c0109a1e:	eb a1                	jmp    c01099c1 <__mxsys_wait+0x2d>
            goto done;
c0109a20:	90                   	nop

done:
    *status = proc->exit_code;
c0109a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a24:	8b 50 60             	mov    0x60(%eax),%edx
c0109a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2a:	89 10                	mov    %edx,(%eax)
    return destroy_process(proc->pid);
c0109a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a2f:	8b 00                	mov    (%eax),%eax
c0109a31:	83 ec 0c             	sub    $0xc,%esp
c0109a34:	50                   	push   %eax
c0109a35:	e8 05 00 00 00       	call   c0109a3f <destroy_process>
c0109a3a:	83 c4 10             	add    $0x10,%esp
}
c0109a3d:	c9                   	leave  
c0109a3e:	c3                   	ret    

c0109a3f <destroy_process>:

extern void __del_pagetable(pid_t pid, uintptr_t mount_point);

pid_t destroy_process(pid_t pid)
{
c0109a3f:	55                   	push   %ebp
c0109a40:	89 e5                	mov    %esp,%ebp
c0109a42:	83 ec 28             	sub    $0x28,%esp
    int index = pid;
c0109a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a48:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (index <= 0 || index > sched_ctx.ptable_len) {
c0109a4b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109a4f:	7e 0d                	jle    c0109a5e <destroy_process+0x1f>
c0109a51:	8b 15 f4 b1 d0 c0    	mov    0xc0d0b1f4,%edx
c0109a57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a5a:	39 c2                	cmp    %eax,%edx
c0109a5c:	73 12                	jae    c0109a70 <destroy_process+0x31>
        __current->k_status = MXINVLDPID;
c0109a5e:	a1 60 b1 d0 c0       	mov    0xc0d0b160,%eax
c0109a63:	c7 40 68 fc ff ff ff 	movl   $0xfffffffc,0x68(%eax)
        return;
c0109a6a:	90                   	nop
c0109a6b:	e9 bf 00 00 00       	jmp    c0109b2f <destroy_process+0xf0>
    }
    struct m_pcb* proc = &sched_ctx._procs[index];
c0109a70:	8b 15 ec b1 d0 c0    	mov    0xc0d0b1ec,%edx
c0109a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a79:	6b c0 6c             	imul   $0x6c,%eax,%eax
c0109a7c:	01 d0                	add    %edx,%eax
c0109a7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    proc->state = PROC_DESTROY;
c0109a81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a84:	c6 40 44 04          	movb   $0x4,0x44(%eax)
    llist_delete(&proc->siblings);
c0109a88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a8b:	83 c0 48             	add    $0x48,%eax
c0109a8e:	50                   	push   %eax
c0109a8f:	e8 f0 fb ff ff       	call   c0109684 <llist_delete>
c0109a94:	83 c4 04             	add    $0x4,%esp

    if (proc->process_mm) {
c0109a97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a9a:	8b 40 58             	mov    0x58(%eax),%eax
c0109a9d:	85 c0                	test   %eax,%eax
c0109a9f:	74 51                	je     c0109af2 <destroy_process+0xb3>
        struct mm_region *pos, *n;
        llist_for_each(pos, n, &proc->process_mm->head, head)
c0109aa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109aa4:	8b 40 58             	mov    0x58(%eax),%eax
c0109aa7:	8b 40 04             	mov    0x4(%eax),%eax
c0109aaa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109aad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ab6:	8b 40 04             	mov    0x4(%eax),%eax
c0109ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109abc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109abf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ac2:	eb 23                	jmp    c0109ae7 <destroy_process+0xa8>
        {
            malloc_free(pos);
c0109ac4:	83 ec 0c             	sub    $0xc,%esp
c0109ac7:	ff 75 f4             	push   -0xc(%ebp)
c0109aca:	e8 b2 d4 ff ff       	call   c0106f81 <malloc_free>
c0109acf:	83 c4 10             	add    $0x10,%esp
        llist_for_each(pos, n, &proc->process_mm->head, head)
c0109ad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ad8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109adb:	8b 40 04             	mov    0x4(%eax),%eax
c0109ade:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109ae1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ae7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109aea:	8b 40 58             	mov    0x58(%eax),%eax
c0109aed:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109af0:	75 d2                	jne    c0109ac4 <destroy_process+0x85>
        }
    }

    vmm_mount_pd(PD_MOUNT_2, proc->page_table);
c0109af2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109af5:	8b 40 64             	mov    0x64(%eax),%eax
c0109af8:	83 ec 08             	sub    $0x8,%esp
c0109afb:	50                   	push   %eax
c0109afc:	68 00 00 80 af       	push   $0xaf800000
c0109b01:	e8 15 e0 ff ff       	call   c0107b1b <vmm_mount_pd>
c0109b06:	83 c4 10             	add    $0x10,%esp

    __del_pagetable(pid, PD_MOUNT_2);
c0109b09:	83 ec 08             	sub    $0x8,%esp
c0109b0c:	68 00 00 80 af       	push   $0xaf800000
c0109b11:	ff 75 08             	push   0x8(%ebp)
c0109b14:	e8 19 fa ff ff       	call   c0109532 <__del_pagetable>
c0109b19:	83 c4 10             	add    $0x10,%esp

    vmm_unmount_pd(PD_MOUNT_2);
c0109b1c:	83 ec 0c             	sub    $0xc,%esp
c0109b1f:	68 00 00 80 af       	push   $0xaf800000
c0109b24:	e8 31 e0 ff ff       	call   c0107b5a <vmm_unmount_pd>
c0109b29:	83 c4 10             	add    $0x10,%esp

    return pid;
c0109b2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b2f:	c9                   	leave  
c0109b30:	c3                   	ret    

c0109b31 <kprintf>:
#include <libs/mstdio.h>
#include <vga/vga.h>
void kprintf (const char *format, ...)
{
c0109b31:	55                   	push   %ebp
c0109b32:	89 e5                	mov    %esp,%ebp
c0109b34:	83 ec 38             	sub    $0x38,%esp
  char **arg = (char **) &format;
c0109b37:	8d 45 08             	lea    0x8(%ebp),%eax
c0109b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int c;
  char buf[20];

  arg++;
c0109b3d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  while ((c = *format++) != 0)
c0109b41:	e9 83 01 00 00       	jmp    c0109cc9 <kprintf+0x198>
    {
      if (c != '%')
c0109b46:	83 7d f0 25          	cmpl   $0x25,-0x10(%ebp)
c0109b4a:	74 17                	je     c0109b63 <kprintf+0x32>
        vga_put_char (c);
c0109b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b4f:	0f be c0             	movsbl %al,%eax
c0109b52:	83 ec 0c             	sub    $0xc,%esp
c0109b55:	50                   	push   %eax
c0109b56:	e8 c3 c4 ff ff       	call   c010601e <vga_put_char>
c0109b5b:	83 c4 10             	add    $0x10,%esp
c0109b5e:	e9 66 01 00 00       	jmp    c0109cc9 <kprintf+0x198>
      else
        {
          char *p, *p2;
          int pad0 = 0, pad = 0;
c0109b63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0109b6a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
          
          c = *format++;
c0109b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b74:	8d 50 01             	lea    0x1(%eax),%edx
c0109b77:	89 55 08             	mov    %edx,0x8(%ebp)
c0109b7a:	0f b6 00             	movzbl (%eax),%eax
c0109b7d:	0f be c0             	movsbl %al,%eax
c0109b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (c == '0')
c0109b83:	83 7d f0 30          	cmpl   $0x30,-0x10(%ebp)
c0109b87:	75 19                	jne    c0109ba2 <kprintf+0x71>
            {
              pad0 = 1;
c0109b89:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
              c = *format++;
c0109b90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b93:	8d 50 01             	lea    0x1(%eax),%edx
c0109b96:	89 55 08             	mov    %edx,0x8(%ebp)
c0109b99:	0f b6 00             	movzbl (%eax),%eax
c0109b9c:	0f be c0             	movsbl %al,%eax
c0109b9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          if (c >= '0' && c <= '9')
c0109ba2:	83 7d f0 2f          	cmpl   $0x2f,-0x10(%ebp)
c0109ba6:	7e 21                	jle    c0109bc9 <kprintf+0x98>
c0109ba8:	83 7d f0 39          	cmpl   $0x39,-0x10(%ebp)
c0109bac:	7f 1b                	jg     c0109bc9 <kprintf+0x98>
            {
              pad = c - '0';
c0109bae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bb1:	83 e8 30             	sub    $0x30,%eax
c0109bb4:	89 45 e0             	mov    %eax,-0x20(%ebp)
              c = *format++;
c0109bb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bba:	8d 50 01             	lea    0x1(%eax),%edx
c0109bbd:	89 55 08             	mov    %edx,0x8(%ebp)
c0109bc0:	0f b6 00             	movzbl (%eax),%eax
c0109bc3:	0f be c0             	movsbl %al,%eax
c0109bc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          switch (c)
c0109bc9:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0109bcd:	74 2b                	je     c0109bfa <kprintf+0xc9>
c0109bcf:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0109bd3:	0f 8f d5 00 00 00    	jg     c0109cae <kprintf+0x17d>
c0109bd9:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0109bdd:	74 1b                	je     c0109bfa <kprintf+0xc9>
c0109bdf:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0109be3:	0f 8f c5 00 00 00    	jg     c0109cae <kprintf+0x17d>
c0109be9:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
c0109bed:	74 0b                	je     c0109bfa <kprintf+0xc9>
c0109bef:	83 7d f0 73          	cmpl   $0x73,-0x10(%ebp)
c0109bf3:	74 2b                	je     c0109c20 <kprintf+0xef>
c0109bf5:	e9 b4 00 00 00       	jmp    c0109cae <kprintf+0x17d>
            {
            case 'd':
            case 'u':
            case 'x':
              itoa (buf, c, *((int *) arg++));
c0109bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bfd:	8d 50 04             	lea    0x4(%eax),%edx
c0109c00:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109c03:	8b 00                	mov    (%eax),%eax
c0109c05:	83 ec 04             	sub    $0x4,%esp
c0109c08:	50                   	push   %eax
c0109c09:	ff 75 f0             	push   -0x10(%ebp)
c0109c0c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0109c0f:	50                   	push   %eax
c0109c10:	e8 d4 00 00 00       	call   c0109ce9 <itoa>
c0109c15:	83 c4 10             	add    $0x10,%esp
              p = buf;
c0109c18:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0109c1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
              goto string;
c0109c1e:	eb 1e                	jmp    c0109c3e <kprintf+0x10d>
              break;

            case 's':
              p = *arg++;
c0109c20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c23:	8d 50 04             	lea    0x4(%eax),%edx
c0109c26:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109c29:	8b 00                	mov    (%eax),%eax
c0109c2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
              if (! p)
c0109c2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109c32:	75 09                	jne    c0109c3d <kprintf+0x10c>
                p = "(null)";
c0109c34:	c7 45 ec 30 d6 d0 c0 	movl   $0xc0d0d630,-0x14(%ebp)
c0109c3b:	eb 01                	jmp    c0109c3e <kprintf+0x10d>

            string:
c0109c3d:	90                   	nop
              for (p2 = p; *p2; p2++);
c0109c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c41:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109c44:	eb 04                	jmp    c0109c4a <kprintf+0x119>
c0109c46:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0109c4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c4d:	0f b6 00             	movzbl (%eax),%eax
c0109c50:	84 c0                	test   %al,%al
c0109c52:	75 f2                	jne    c0109c46 <kprintf+0x115>
              for (; p2 < p + pad; p2++)
c0109c54:	eb 22                	jmp    c0109c78 <kprintf+0x147>
                vga_put_char (pad0 ? '0' : ' ');
c0109c56:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109c5a:	74 07                	je     c0109c63 <kprintf+0x132>
c0109c5c:	b8 30 00 00 00       	mov    $0x30,%eax
c0109c61:	eb 05                	jmp    c0109c68 <kprintf+0x137>
c0109c63:	b8 20 00 00 00       	mov    $0x20,%eax
c0109c68:	83 ec 0c             	sub    $0xc,%esp
c0109c6b:	50                   	push   %eax
c0109c6c:	e8 ad c3 ff ff       	call   c010601e <vga_put_char>
c0109c71:	83 c4 10             	add    $0x10,%esp
              for (; p2 < p + pad; p2++)
c0109c74:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0109c78:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109c7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c7e:	01 d0                	add    %edx,%eax
c0109c80:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0109c83:	72 d1                	jb     c0109c56 <kprintf+0x125>
              while (*p)
c0109c85:	eb 1b                	jmp    c0109ca2 <kprintf+0x171>
                vga_put_char (*p++);
c0109c87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c8a:	8d 50 01             	lea    0x1(%eax),%edx
c0109c8d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109c90:	0f b6 00             	movzbl (%eax),%eax
c0109c93:	0f be c0             	movsbl %al,%eax
c0109c96:	83 ec 0c             	sub    $0xc,%esp
c0109c99:	50                   	push   %eax
c0109c9a:	e8 7f c3 ff ff       	call   c010601e <vga_put_char>
c0109c9f:	83 c4 10             	add    $0x10,%esp
              while (*p)
c0109ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ca5:	0f b6 00             	movzbl (%eax),%eax
c0109ca8:	84 c0                	test   %al,%al
c0109caa:	75 db                	jne    c0109c87 <kprintf+0x156>
              break;
c0109cac:	eb 1b                	jmp    c0109cc9 <kprintf+0x198>

            default:
              vga_put_char (*((int *) arg++));
c0109cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cb1:	8d 50 04             	lea    0x4(%eax),%edx
c0109cb4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109cb7:	8b 00                	mov    (%eax),%eax
c0109cb9:	0f be c0             	movsbl %al,%eax
c0109cbc:	83 ec 0c             	sub    $0xc,%esp
c0109cbf:	50                   	push   %eax
c0109cc0:	e8 59 c3 ff ff       	call   c010601e <vga_put_char>
c0109cc5:	83 c4 10             	add    $0x10,%esp
              break;
c0109cc8:	90                   	nop
  while ((c = *format++) != 0)
c0109cc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ccc:	8d 50 01             	lea    0x1(%eax),%edx
c0109ccf:	89 55 08             	mov    %edx,0x8(%ebp)
c0109cd2:	0f b6 00             	movzbl (%eax),%eax
c0109cd5:	0f be c0             	movsbl %al,%eax
c0109cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109cdb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109cdf:	0f 85 61 fe ff ff    	jne    c0109b46 <kprintf+0x15>
            }
        }
    }
}
c0109ce5:	90                   	nop
c0109ce6:	90                   	nop
c0109ce7:	c9                   	leave  
c0109ce8:	c3                   	ret    

c0109ce9 <itoa>:
#include <libs/mstdlib.h>

void
itoa (char *buf, int base, int d)
{
c0109ce9:	55                   	push   %ebp
c0109cea:	89 e5                	mov    %esp,%ebp
c0109cec:	83 ec 20             	sub    $0x20,%esp
  char *p = buf;
c0109cef:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  char *p1, *p2;
  unsigned long ud = d;
c0109cf5:	8b 45 10             	mov    0x10(%ebp),%eax
c0109cf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int divisor = 10;
c0109cfb:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
  
  /* If %d is specified and D is minus, put ‘-’ in the head. */
  if (base == 'd' && d < 0)
c0109d02:	83 7d 0c 64          	cmpl   $0x64,0xc(%ebp)
c0109d06:	75 20                	jne    c0109d28 <itoa+0x3f>
c0109d08:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109d0c:	79 1a                	jns    c0109d28 <itoa+0x3f>
    {
      *p++ = '-';
c0109d0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d11:	8d 50 01             	lea    0x1(%eax),%edx
c0109d14:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0109d17:	c6 00 2d             	movb   $0x2d,(%eax)
      buf++;
c0109d1a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      ud = -d;
c0109d1e:	8b 45 10             	mov    0x10(%ebp),%eax
c0109d21:	f7 d8                	neg    %eax
c0109d23:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d26:	eb 0d                	jmp    c0109d35 <itoa+0x4c>
    }
  else if (base == 'x')
c0109d28:	83 7d 0c 78          	cmpl   $0x78,0xc(%ebp)
c0109d2c:	75 07                	jne    c0109d35 <itoa+0x4c>
    divisor = 16;
c0109d2e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)

  /* Divide UD by DIVISOR until UD == 0. */
  do
    {
      int remainder = ud % divisor;
c0109d35:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0109d38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d3b:	ba 00 00 00 00       	mov    $0x0,%edx
c0109d40:	f7 f1                	div    %ecx
c0109d42:	89 d0                	mov    %edx,%eax
c0109d44:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
c0109d47:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
c0109d4b:	7f 0a                	jg     c0109d57 <itoa+0x6e>
c0109d4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d50:	83 c0 30             	add    $0x30,%eax
c0109d53:	89 c1                	mov    %eax,%ecx
c0109d55:	eb 08                	jmp    c0109d5f <itoa+0x76>
c0109d57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d5a:	83 c0 57             	add    $0x57,%eax
c0109d5d:	89 c1                	mov    %eax,%ecx
c0109d5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d62:	8d 50 01             	lea    0x1(%eax),%edx
c0109d65:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0109d68:	88 08                	mov    %cl,(%eax)
    }
  while (ud /= divisor);
c0109d6a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0109d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d70:	ba 00 00 00 00       	mov    $0x0,%edx
c0109d75:	f7 f1                	div    %ecx
c0109d77:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109d7e:	75 b5                	jne    c0109d35 <itoa+0x4c>

  /* Terminate BUF. */
  *p = 0;
c0109d80:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d83:	c6 00 00             	movb   $0x0,(%eax)
  
  /* Reverse BUF. */
  p1 = buf;
c0109d86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d89:	89 45 f8             	mov    %eax,-0x8(%ebp)
  p2 = p - 1;
c0109d8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d8f:	83 e8 01             	sub    $0x1,%eax
c0109d92:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (p1 < p2)
c0109d95:	eb 25                	jmp    c0109dbc <itoa+0xd3>
    {
      char tmp = *p1;
c0109d97:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109d9a:	0f b6 00             	movzbl (%eax),%eax
c0109d9d:	88 45 e7             	mov    %al,-0x19(%ebp)
      *p1 = *p2;
c0109da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109da3:	0f b6 10             	movzbl (%eax),%edx
c0109da6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109da9:	88 10                	mov    %dl,(%eax)
      *p2 = tmp;
c0109dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dae:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0109db2:	88 10                	mov    %dl,(%eax)
      p1++;
c0109db4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
      p2--;
c0109db8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  while (p1 < p2)
c0109dbc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109dbf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109dc2:	72 d3                	jb     c0109d97 <itoa+0xae>
    }
c0109dc4:	90                   	nop
c0109dc5:	90                   	nop
c0109dc6:	c9                   	leave  
c0109dc7:	c3                   	ret    

c0109dc8 <memset>:
#include <libs/mstring.h>
#include <stdint.h>

void* memset(void* ptr, int value, size_t num)
{
c0109dc8:	55                   	push   %ebp
c0109dc9:	89 e5                	mov    %esp,%ebp
c0109dcb:	83 ec 10             	sub    $0x10,%esp
    uint8_t* c_ptr = (uint8_t*)ptr;
c0109dce:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dd1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (size_t i = 0; i < num; i++) {
c0109dd4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0109ddb:	eb 11                	jmp    c0109dee <memset+0x26>
        *(c_ptr + i) = (uint8_t)value;
c0109ddd:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109de0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109de3:	01 d0                	add    %edx,%eax
c0109de5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109de8:	88 10                	mov    %dl,(%eax)
    for (size_t i = 0; i < num; i++) {
c0109dea:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109dee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109df1:	3b 45 10             	cmp    0x10(%ebp),%eax
c0109df4:	72 e7                	jb     c0109ddd <memset+0x15>
    }
    return ptr;
c0109df6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109df9:	c9                   	leave  
c0109dfa:	c3                   	ret    
