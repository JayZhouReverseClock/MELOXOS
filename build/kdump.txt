
build/bin/melox.bin:     file format elf32-i386


Disassembly of section .virk_init_text:

00100000 <start-0xc>:
  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fb                   	sti    
  100009:	4f                   	dec    %edi
  10000a:	52                   	push   %edx
  10000b:	e4                   	.byte 0xe4

0010000c <start>:
  10000c:	bc 00 60 10 00       	mov    $0x106000,%esp
  100011:	68 00 10 10 00       	push   $0x101000
  100016:	53                   	push   %ebx
  100017:	e8 64 00 00 00       	call   100080 <save_multiboot_info>
  10001c:	58                   	pop    %eax
  10001d:	58                   	pop    %eax
  10001e:	68 00 60 00 00       	push   $0x6000
  100023:	68 00 c0 12 00       	push   $0x12c000
  100028:	e8 a4 02 00 00       	call   1002d1 <kerner_init>
  10002d:	8b 04 24             	mov    (%esp),%eax
  100030:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100035:	0f 22 d8             	mov    %eax,%cr3
  100038:	0f 20 c0             	mov    %cr0,%eax
  10003b:	0d 00 00 00 80       	or     $0x80000000,%eax
  100040:	0f 22 c0             	mov    %eax,%cr0
  100043:	58                   	pop    %eax
  100044:	58                   	pop    %eax
  100045:	68 dd 7a 10 c0       	push   $0xc0107add
  10004a:	c3                   	ret    

0010004b <_save_>:
extern uint8_t virkernel_start;
extern uint8_t virkernel_end ;
extern uint8_t __init_phykernel_end;
extern uint8_t _kernel_stack;

uint32_t _save_(uint8_t* destination, uint8_t* base, multiboot_uint32_t size) {
  10004b:	55                   	push   %ebp
  10004c:	89 e5                	mov    %esp,%ebp
  10004e:	83 ec 10             	sub    $0x10,%esp
    multiboot_uint32_t i = 0;
  100051:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (; i < size; i++)
  100058:	eb 19                	jmp    100073 <_save_+0x28>
    {
        *(destination + i) = *(base + i);
  10005a:	8b 55 0c             	mov    0xc(%ebp),%edx
  10005d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100060:	01 d0                	add    %edx,%eax
  100062:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100065:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100068:	01 ca                	add    %ecx,%edx
  10006a:	0f b6 00             	movzbl (%eax),%eax
  10006d:	88 02                	mov    %al,(%edx)
    for (; i < size; i++)
  10006f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100073:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100076:	3b 45 10             	cmp    0x10(%ebp),%eax
  100079:	72 df                	jb     10005a <_save_+0xf>
    }
    return i;
  10007b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10007e:	c9                   	leave  
  10007f:	c3                   	ret    

00100080 <save_multiboot_info>:

void save_multiboot_info(multiboot_info_t* mb_info, multiboot_uint8_t* dest)
{
  100080:	55                   	push   %ebp
  100081:	89 e5                	mov    %esp,%ebp
  100083:	53                   	push   %ebx
  100084:	83 ec 10             	sub    $0x10,%esp
    uint32_t current = 0;
  100087:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    uint8_t* info_b = (uint8_t*) mb_info;
  10008e:	8b 45 08             	mov    0x8(%ebp),%eax
  100091:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; current < sizeof(multiboot_info_t); current++)
  100094:	eb 19                	jmp    1000af <save_multiboot_info+0x2f>
    {
        *(dest + current) = *(info_b + current);
  100096:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100099:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10009c:	01 d0                	add    %edx,%eax
  10009e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1000a1:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000a4:	01 ca                	add    %ecx,%edx
  1000a6:	0f b6 00             	movzbl (%eax),%eax
  1000a9:	88 02                	mov    %al,(%edx)
    for (; current < sizeof(multiboot_info_t); current++)
  1000ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1000af:	83 7d f8 77          	cmpl   $0x77,-0x8(%ebp)
  1000b3:	76 e1                	jbe    100096 <save_multiboot_info+0x16>
    }

    ((multiboot_info_t*) dest)->mmap_addr = (uintptr_t)dest + current;
  1000b5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000bb:	01 c2                	add    %eax,%edx
  1000bd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000c0:	89 50 30             	mov    %edx,0x30(%eax)
    current += _save_(dest + current, (uint8_t*)mb_info->mmap_addr, mb_info->mmap_length);
  1000c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1000c6:	8b 40 2c             	mov    0x2c(%eax),%eax
  1000c9:	8b 55 08             	mov    0x8(%ebp),%edx
  1000cc:	8b 52 30             	mov    0x30(%edx),%edx
  1000cf:	89 d1                	mov    %edx,%ecx
  1000d1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1000d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000d7:	01 da                	add    %ebx,%edx
  1000d9:	50                   	push   %eax
  1000da:	51                   	push   %ecx
  1000db:	52                   	push   %edx
  1000dc:	e8 6a ff ff ff       	call   10004b <_save_>
  1000e1:	83 c4 0c             	add    $0xc,%esp
  1000e4:	01 45 f8             	add    %eax,-0x8(%ebp)

    if (present(mb_info->flags, MULTIBOOT_INFO_DRIVE_INFO)) {
  1000e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1000ea:	8b 00                	mov    (%eax),%eax
  1000ec:	25 80 00 00 00       	and    $0x80,%eax
  1000f1:	85 c0                	test   %eax,%eax
  1000f3:	74 32                	je     100127 <save_multiboot_info+0xa7>
        ((multiboot_info_t*) dest)->drives_addr = (uintptr_t)dest + current;
  1000f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000fb:	01 c2                	add    %eax,%edx
  1000fd:	8b 45 0c             	mov    0xc(%ebp),%eax
  100100:	89 50 38             	mov    %edx,0x38(%eax)
        current += _save_(dest + current, (uint8_t*)mb_info->drives_addr, mb_info->drives_length);
  100103:	8b 45 08             	mov    0x8(%ebp),%eax
  100106:	8b 40 34             	mov    0x34(%eax),%eax
  100109:	8b 55 08             	mov    0x8(%ebp),%edx
  10010c:	8b 52 38             	mov    0x38(%edx),%edx
  10010f:	89 d1                	mov    %edx,%ecx
  100111:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  100114:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100117:	01 da                	add    %ebx,%edx
  100119:	50                   	push   %eax
  10011a:	51                   	push   %ecx
  10011b:	52                   	push   %edx
  10011c:	e8 2a ff ff ff       	call   10004b <_save_>
  100121:	83 c4 0c             	add    $0xc,%esp
  100124:	01 45 f8             	add    %eax,-0x8(%ebp)
    }
    multiboot_info_t* test = (multiboot_info_t*) dest;
  100127:	8b 45 0c             	mov    0xc(%ebp),%eax
  10012a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    multiboot_memory_map_t* testmap = (multiboot_memory_map_t*)mb_info->mmap_addr;
  10012d:	8b 45 08             	mov    0x8(%ebp),%eax
  100130:	8b 40 30             	mov    0x30(%eax),%eax
  100133:	89 45 ec             	mov    %eax,-0x14(%ebp)
}
  100136:	90                   	nop
  100137:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10013a:	c9                   	leave  
  10013b:	c3                   	ret    

0010013c <init_page>:

void init_page(ptd_t* pt)
{
  10013c:	55                   	push   %ebp
  10013d:	89 e5                	mov    %esp,%ebp
  10013f:	83 ec 30             	sub    $0x30,%esp
    SET_PDE(pt, 0, PDE(PG_PRESENT, pt + PG_MAX_ENTRIES));
  100142:	8b 45 08             	mov    0x8(%ebp),%eax
  100145:	05 00 10 00 00       	add    $0x1000,%eax
  10014a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10014f:	83 c8 01             	or     $0x1,%eax
  100152:	89 c2                	mov    %eax,%edx
  100154:	8b 45 08             	mov    0x8(%ebp),%eax
  100157:	89 10                	mov    %edx,(%eax)
    ptd_t * tmp_paged_phy_addr = pt;
  100159:	8b 45 08             	mov    0x8(%ebp),%eax
  10015c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptd_t * tmp_paget_phy_addr = pt + 1024;
  10015f:	8b 45 08             	mov    0x8(%ebp),%eax
  100162:	05 00 10 00 00       	add    $0x1000,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //identity map 1M memory
    for(uint32_t i = 0; i < 256; i++)
  10016a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100171:	eb 20                	jmp    100193 <init_page+0x57>
        *(tmp_paget_phy_addr + i) = ((i << 12) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff);
  100173:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100176:	c1 e0 0c             	shl    $0xc,%eax
  100179:	89 c2                	mov    %eax,%edx
  10017b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10017e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100185:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100188:	01 c8                	add    %ecx,%eax
  10018a:	83 ca 03             	or     $0x3,%edx
  10018d:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < 256; i++)
  10018f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100193:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
  10019a:	76 d7                	jbe    100173 <init_page+0x37>

    //identity map virkernel_init memory
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  10019c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001a3:	eb 29                	jmp    1001ce <init_page+0x92>
        *(tmp_paget_phy_addr + i + 256) = (((i << 12) + MEM_1M) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff);
  1001a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001a8:	c1 e0 0c             	shl    $0xc,%eax
  1001ab:	8d 90 00 00 10 00    	lea    0x100000(%eax),%edx
  1001b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001b4:	05 00 01 00 00       	add    $0x100,%eax
  1001b9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1001c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1001c3:	01 c8                	add    %ecx,%eax
  1001c5:	83 ca 03             	or     $0x3,%edx
  1001c8:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  1001ca:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1001ce:	b8 00 60 10 00       	mov    $0x106000,%eax
  1001d3:	2d 01 f0 0f 00       	sub    $0xff001,%eax
  1001d8:	c1 e8 0c             	shr    $0xc,%eax
  1001db:	39 45 f8             	cmp    %eax,-0x8(%ebp)
  1001de:	72 c5                	jb     1001a5 <init_page+0x69>

    //now we map the kernel
    //calculate the virtrue kernrl page index
    uint32_t virk_pde_index = PD_INDEX(sym_val(virkernel_start));
  1001e0:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001e5:	c1 e8 16             	shr    $0x16,%eax
  1001e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t virk_pte_index = PT_INDEX(sym_val(virkernel_start));
  1001eb:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001f0:	c1 e8 0c             	shr    $0xc,%eax
  1001f3:	25 ff 03 00 00       	and    $0x3ff,%eax
  1001f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t virk_pg_counts = KERNEL_PAGE_COUNT;
  1001fb:	b8 00 20 13 c0       	mov    $0xc0132000,%eax
  100200:	05 00 10 00 00       	add    $0x1000,%eax
  100205:	83 e8 01             	sub    $0x1,%eax
  100208:	ba 00 60 10 c0       	mov    $0xc0106000,%edx
  10020d:	29 d0                	sub    %edx,%eax
  10020f:	c1 e8 0c             	shr    $0xc,%eax
  100212:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //regist the vir_kernel page to page direction
    //we give 3 pagetable to virkel, is 3 * 4 = 12 mib size
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  100215:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10021c:	eb 34                	jmp    100252 <init_page+0x116>
    {
        *(tmp_paged_phy_addr + virk_pde_index + i) = PDE(PG_PREM_RW, PT_ADDR(pt, PG_TABLE_KERNEL + i));
  10021e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100221:	83 c0 02             	add    $0x2,%eax
  100224:	c1 e0 0c             	shl    $0xc,%eax
  100227:	89 c2                	mov    %eax,%edx
  100229:	8b 45 08             	mov    0x8(%ebp),%eax
  10022c:	01 d0                	add    %edx,%eax
  10022e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100233:	89 c2                	mov    %eax,%edx
  100235:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100238:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10023b:	01 c8                	add    %ecx,%eax
  10023d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100244:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100247:	01 c8                	add    %ecx,%eax
  100249:	83 ca 03             	or     $0x3,%edx
  10024c:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  10024e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100252:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
  100256:	76 c6                	jbe    10021e <init_page+0xe2>
    }

    //avoid kernel size > prepared page count
    if(virk_pg_counts > (PG_TABLE_STACK - PG_TABLE_KERNEL) * 1024)
  100258:	81 7d dc 00 0c 00 00 	cmpl   $0xc00,-0x24(%ebp)
  10025f:	76 02                	jbe    100263 <init_page+0x127>
    {
        while(1);
  100261:	eb fe                	jmp    100261 <init_page+0x125>
    }

    //calcul the phy address
    uint32_t virk_phy_addr = V2P(&virkernel_start);
  100263:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  100268:	05 00 00 00 40       	add    $0x40000000,%eax
  10026d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    //map virtrue kernel page
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  100270:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100277:	eb 36                	jmp    1002af <init_page+0x173>
    {
        *(tmp_paget_phy_addr + 1024 + virk_pte_index + i) = (((virk_phy_addr + (i << 12)) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100279:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10027c:	c1 e0 0c             	shl    $0xc,%eax
  10027f:	89 c2                	mov    %eax,%edx
  100281:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100284:	01 d0                	add    %edx,%eax
  100286:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10028b:	89 c2                	mov    %eax,%edx
  10028d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100290:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100293:	01 c8                	add    %ecx,%eax
  100295:	05 00 04 00 00       	add    $0x400,%eax
  10029a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1002a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1002a4:	01 c8                	add    %ecx,%eax
  1002a6:	83 ca 03             	or     $0x3,%edx
  1002a9:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  1002ab:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1002af:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1002b2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1002b5:	72 c2                	jb     100279 <init_page+0x13d>
    }

    //self map pd, to give the pd virture address
    SET_PDE(pt, 1023, PDE(T_SELF_REF_PERM, pt));
  1002b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1002ba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1002bf:	89 c2                	mov    %eax,%edx
  1002c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1002c4:	05 fc 0f 00 00       	add    $0xffc,%eax
  1002c9:	83 ca 13             	or     $0x13,%edx
  1002cc:	89 10                	mov    %edx,(%eax)
}
  1002ce:	90                   	nop
  1002cf:	c9                   	leave  
  1002d0:	c3                   	ret    

001002d1 <kerner_init>:

void kerner_init(ptd_t* pt, uint32_t pt_size)
{
  1002d1:	55                   	push   %ebp
  1002d2:	89 e5                	mov    %esp,%ebp
  1002d4:	83 ec 10             	sub    $0x10,%esp
    uint8_t* kpg = (uint8_t*) pt;
  1002d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1002da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (uint32_t i = 0; i < pt_size; i++)
  1002dd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1002e4:	eb 0f                	jmp    1002f5 <kerner_init+0x24>
    {
        *(kpg + i) = 0;
  1002e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1002e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ec:	01 d0                	add    %edx,%eax
  1002ee:	c6 00 00             	movb   $0x0,(%eax)
    for (uint32_t i = 0; i < pt_size; i++)
  1002f1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1002f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1002fb:	72 e9                	jb     1002e6 <kerner_init+0x15>
    }
    init_page(pt);
  1002fd:	ff 75 08             	push   0x8(%ebp)
  100300:	e8 37 fe ff ff       	call   10013c <init_page>
  100305:	83 c4 04             	add    $0x4,%esp
  100308:	90                   	nop
  100309:	c9                   	leave  
  10030a:	c3                   	ret    

Disassembly of section .text:

c0106000 <init_vga_buffer>:
int XPOS = 0;

vga_attr *video;

void init_vga_buffer()
{
c0106000:	55                   	push   %ebp
c0106001:	89 e5                	mov    %esp,%ebp
    video = (vga_attr *) VIDEO;
c0106003:	c7 05 0c 90 10 c0 00 	movl   $0xb8000,0xc010900c
c010600a:	80 0b 00 
}
c010600d:	90                   	nop
c010600e:	5d                   	pop    %ebp
c010600f:	c3                   	ret    

c0106010 <set_vga_buffer>:

void set_vga_buffer(void* vga_buf)
{
c0106010:	55                   	push   %ebp
c0106011:	89 e5                	mov    %esp,%ebp
    video = (vga_attr*)vga_buf;
c0106013:	8b 45 08             	mov    0x8(%ebp),%eax
c0106016:	a3 0c 90 10 c0       	mov    %eax,0xc010900c
}
c010601b:	90                   	nop
c010601c:	5d                   	pop    %ebp
c010601d:	c3                   	ret    

c010601e <vga_put_char>:

void vga_put_char(char c)
{
c010601e:	55                   	push   %ebp
c010601f:	89 e5                	mov    %esp,%ebp
c0106021:	53                   	push   %ebx
c0106022:	83 ec 14             	sub    $0x14,%esp
c0106025:	8b 45 08             	mov    0x8(%ebp),%eax
c0106028:	88 45 f4             	mov    %al,-0xc(%ebp)
    if(c == '\n')
c010602b:	80 7d f4 0a          	cmpb   $0xa,-0xc(%ebp)
c010602f:	75 19                	jne    c010604a <vga_put_char+0x2c>
    {
        YPOS++;
c0106031:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106036:	83 c0 01             	add    $0x1,%eax
c0106039:	a3 04 90 10 c0       	mov    %eax,0xc0109004
        XPOS = 0;
c010603e:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c0106045:	00 00 00 
c0106048:	eb 54                	jmp    c010609e <vga_put_char+0x80>
    }else if(c == '\r')
c010604a:	80 7d f4 0d          	cmpb   $0xd,-0xc(%ebp)
c010604e:	75 0c                	jne    c010605c <vga_put_char+0x3e>
        XPOS = 0;
c0106050:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c0106057:	00 00 00 
c010605a:	eb 42                	jmp    c010609e <vga_put_char+0x80>
    else{
        *(video + XPOS + YPOS * WIDTH) = (theme_color | c);
c010605c:	66 0f be 55 f4       	movsbw -0xc(%ebp),%dx
c0106061:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c0106068:	09 c2                	or     %eax,%edx
c010606a:	8b 0d 0c 90 10 c0    	mov    0xc010900c,%ecx
c0106070:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106075:	89 c3                	mov    %eax,%ebx
c0106077:	89 d8                	mov    %ebx,%eax
c0106079:	c1 e0 02             	shl    $0x2,%eax
c010607c:	01 d8                	add    %ebx,%eax
c010607e:	c1 e0 04             	shl    $0x4,%eax
c0106081:	89 c3                	mov    %eax,%ebx
c0106083:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c0106088:	01 d8                	add    %ebx,%eax
c010608a:	01 c0                	add    %eax,%eax
c010608c:	01 c8                	add    %ecx,%eax
c010608e:	66 89 10             	mov    %dx,(%eax)
        XPOS++;
c0106091:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c0106096:	83 c0 01             	add    $0x1,%eax
c0106099:	a3 08 90 10 c0       	mov    %eax,0xc0109008
    }
    if (XPOS >= WIDTH)
c010609e:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c01060a3:	83 f8 4f             	cmp    $0x4f,%eax
c01060a6:	7e 17                	jle    c01060bf <vga_put_char+0xa1>
    {
        YPOS++;
c01060a8:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c01060ad:	83 c0 01             	add    $0x1,%eax
c01060b0:	a3 04 90 10 c0       	mov    %eax,0xc0109004
        XPOS = 0;
c01060b5:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c01060bc:	00 00 00 
    }
    if(YPOS >= HIGHT)
c01060bf:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c01060c4:	83 f8 18             	cmp    $0x18,%eax
c01060c7:	7e 05                	jle    c01060ce <vga_put_char+0xb0>
        vga_scrollup();
c01060c9:	e8 be 00 00 00       	call   c010618c <vga_scrollup>
}
c01060ce:	90                   	nop
c01060cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01060d2:	c9                   	leave  
c01060d3:	c3                   	ret    

c01060d4 <vga_set_show>:

void vga_set_show(vga_attr flashing, vga_attr backgroud, vga_attr frontcolor)
{
c01060d4:	55                   	push   %ebp
c01060d5:	89 e5                	mov    %esp,%ebp
c01060d7:	83 ec 0c             	sub    $0xc,%esp
c01060da:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01060dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01060e3:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
c01060e7:	66 89 55 f8          	mov    %dx,-0x8(%ebp)
c01060eb:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    theme_color = (flashing << 7 | backgroud << 4 | frontcolor) << 8;
c01060ef:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01060f3:	c1 e0 07             	shl    $0x7,%eax
c01060f6:	89 c2                	mov    %eax,%edx
c01060f8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c01060fc:	c1 e0 04             	shl    $0x4,%eax
c01060ff:	09 c2                	or     %eax,%edx
c0106101:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0106105:	09 d0                	or     %edx,%eax
c0106107:	c1 e0 08             	shl    $0x8,%eax
c010610a:	66 a3 00 90 10 c0    	mov    %ax,0xc0109000
}
c0106110:	90                   	nop
c0106111:	c9                   	leave  
c0106112:	c3                   	ret    

c0106113 <vga_put_str>:

void vga_put_str(char* str)
{
c0106113:	55                   	push   %ebp
c0106114:	89 e5                	mov    %esp,%ebp
c0106116:	83 ec 08             	sub    $0x8,%esp
    while (*str != '\0')
c0106119:	eb 19                	jmp    c0106134 <vga_put_str+0x21>
    {
        vga_put_char(*str);
c010611b:	8b 45 08             	mov    0x8(%ebp),%eax
c010611e:	0f b6 00             	movzbl (%eax),%eax
c0106121:	0f be c0             	movsbl %al,%eax
c0106124:	83 ec 0c             	sub    $0xc,%esp
c0106127:	50                   	push   %eax
c0106128:	e8 f1 fe ff ff       	call   c010601e <vga_put_char>
c010612d:	83 c4 10             	add    $0x10,%esp
        str++;
c0106130:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*str != '\0')
c0106134:	8b 45 08             	mov    0x8(%ebp),%eax
c0106137:	0f b6 00             	movzbl (%eax),%eax
c010613a:	84 c0                	test   %al,%al
c010613c:	75 dd                	jne    c010611b <vga_put_str+0x8>
    }
}
c010613e:	90                   	nop
c010613f:	90                   	nop
c0106140:	c9                   	leave  
c0106141:	c3                   	ret    

c0106142 <vga_clear>:

void vga_clear()
{
c0106142:	55                   	push   %ebp
c0106143:	89 e5                	mov    %esp,%ebp
c0106145:	83 ec 10             	sub    $0x10,%esp
  
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106148:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010614f:	eb 1b                	jmp    c010616c <vga_clear+0x2a>
        *(video + i) = theme_color;
c0106151:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c0106157:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010615a:	01 c0                	add    %eax,%eax
c010615c:	01 c2                	add    %eax,%edx
c010615e:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c0106165:	66 89 02             	mov    %ax,(%edx)
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106168:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010616c:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
c0106173:	7e dc                	jle    c0106151 <vga_clear+0xf>

    XPOS = 0;
c0106175:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c010617c:	00 00 00 
    YPOS = 0;
c010617f:	c7 05 04 90 10 c0 00 	movl   $0x0,0xc0109004
c0106186:	00 00 00 
}
c0106189:	90                   	nop
c010618a:	c9                   	leave  
c010618b:	c3                   	ret    

c010618c <vga_scrollup>:

void vga_scrollup()
{
c010618c:	55                   	push   %ebp
c010618d:	89 e5                	mov    %esp,%ebp
c010618f:	83 ec 10             	sub    $0x10,%esp
    unsigned int last_line = WIDTH * (HIGHT - 1);
c0106192:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
    for (unsigned int i = 0; i < last_line; i++) {
c0106199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01061a0:	eb 27                	jmp    c01061c9 <vga_scrollup+0x3d>
        *(video + i) = *(video + WIDTH + i);
c01061a2:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c01061a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061ab:	83 c0 50             	add    $0x50,%eax
c01061ae:	01 c0                	add    %eax,%eax
c01061b0:	01 d0                	add    %edx,%eax
c01061b2:	8b 0d 0c 90 10 c0    	mov    0xc010900c,%ecx
c01061b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01061bb:	01 d2                	add    %edx,%edx
c01061bd:	01 ca                	add    %ecx,%edx
c01061bf:	0f b7 00             	movzwl (%eax),%eax
c01061c2:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < last_line; i++) {
c01061c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01061c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061cf:	72 d1                	jb     c01061a2 <vga_scrollup+0x16>
    }
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01061d8:	eb 20                	jmp    c01061fa <vga_scrollup+0x6e>
        *(video + i + last_line) = theme_color;
c01061da:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c01061e0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c01061e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061e6:	01 c8                	add    %ecx,%eax
c01061e8:	01 c0                	add    %eax,%eax
c01061ea:	01 c2                	add    %eax,%edx
c01061ec:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c01061f3:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061f6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01061fa:	83 7d f8 4f          	cmpl   $0x4f,-0x8(%ebp)
c01061fe:	76 da                	jbe    c01061da <vga_scrollup+0x4e>
    }
    YPOS = YPOS == 0 ? 0 : HIGHT - 1;
c0106200:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106205:	85 c0                	test   %eax,%eax
c0106207:	75 07                	jne    c0106210 <vga_scrollup+0x84>
c0106209:	b8 00 00 00 00       	mov    $0x0,%eax
c010620e:	eb 05                	jmp    c0106215 <vga_scrollup+0x89>
c0106210:	b8 18 00 00 00       	mov    $0x18,%eax
c0106215:	a3 04 90 10 c0       	mov    %eax,0xc0109004
c010621a:	90                   	nop
c010621b:	c9                   	leave  
c010621c:	c3                   	ret    

c010621d <_kernel_init>:

/* Forward declarations. */
void _kernel_init (unsigned long addr);

void _kernel_init(unsigned long addr)
{
c010621d:	55                   	push   %ebp
c010621e:	89 e5                	mov    %esp,%ebp
c0106220:	53                   	push   %ebx
c0106221:	83 ec 44             	sub    $0x44,%esp
    multiboot_info_t *mbi;
    mbi = (multiboot_info_t *) addr;
c0106224:	8b 45 08             	mov    0x8(%ebp),%eax
c0106227:	89 45 e8             	mov    %eax,-0x18(%ebp)
    multiboot_memory_map_t* map = (multiboot_memory_map_t*)mbi->mmap_addr;
c010622a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010622d:	8b 40 30             	mov    0x30(%eax),%eax
c0106230:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    _init_idt();
c0106233:	e8 7c 17 00 00       	call   c01079b4 <_init_idt>
    pmm_init(MEM_1MB + (mbi->mem_upper << 10));
c0106238:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010623b:	8b 40 08             	mov    0x8(%eax),%eax
c010623e:	c1 e0 0a             	shl    $0xa,%eax
c0106241:	05 00 00 10 00       	add    $0x100000,%eax
c0106246:	83 ec 0c             	sub    $0xc,%esp
c0106249:	50                   	push   %eax
c010624a:	e8 52 04 00 00       	call   c01066a1 <pmm_init>
c010624f:	83 c4 10             	add    $0x10,%esp
    vmm_init();
c0106252:	e8 a0 0c 00 00       	call   c0106ef7 <vmm_init>

    init_vga_buffer();
c0106257:	e8 a4 fd ff ff       	call   c0106000 <init_vga_buffer>
    vga_set_show(0,VGA_COLOR_BLACK,VGA_COLOR_LIGHT_WHITE);
c010625c:	83 ec 04             	sub    $0x4,%esp
c010625f:	6a 0f                	push   $0xf
c0106261:	6a 00                	push   $0x0
c0106263:	6a 00                	push   $0x0
c0106265:	e8 6a fe ff ff       	call   c01060d4 <vga_set_show>
c010626a:	83 c4 10             	add    $0x10,%esp
    /* Clear the screen. */
    vga_clear();
c010626d:	e8 d0 fe ff ff       	call   c0106142 <vga_clear>
    // }

    /* Set MBI to the address of the Multiboot information structure. */

    /* Print out the flags. */
    kprintf("flags = 0x%x\n", (unsigned) mbi->flags);
c0106272:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106275:	8b 00                	mov    (%eax),%eax
c0106277:	83 ec 08             	sub    $0x8,%esp
c010627a:	50                   	push   %eax
c010627b:	68 00 b0 12 c0       	push   $0xc012b000
c0106280:	e8 5d 1c 00 00       	call   c0107ee2 <kprintf>
c0106285:	83 c4 10             	add    $0x10,%esp

    /* Are mem_* valid? */
    if (CHECK_FLAG(mbi->flags, 0))
c0106288:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010628b:	8b 00                	mov    (%eax),%eax
c010628d:	83 e0 01             	and    $0x1,%eax
c0106290:	85 c0                	test   %eax,%eax
c0106292:	74 1e                	je     c01062b2 <_kernel_init+0x95>
        kprintf("mem_lower = %uKB, mem_upper = %uKB\n",(unsigned) mbi->mem_lower, (unsigned) mbi->mem_upper);
c0106294:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106297:	8b 50 08             	mov    0x8(%eax),%edx
c010629a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010629d:	8b 40 04             	mov    0x4(%eax),%eax
c01062a0:	83 ec 04             	sub    $0x4,%esp
c01062a3:	52                   	push   %edx
c01062a4:	50                   	push   %eax
c01062a5:	68 10 b0 12 c0       	push   $0xc012b010
c01062aa:	e8 33 1c 00 00       	call   c0107ee2 <kprintf>
c01062af:	83 c4 10             	add    $0x10,%esp
    
    unsigned int map_size = mbi->mmap_length / sizeof(multiboot_memory_map_t);
c01062b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01062b5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01062b8:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
c01062bd:	f7 e2                	mul    %edx
c01062bf:	89 d0                	mov    %edx,%eax
c01062c1:	c1 e8 04             	shr    $0x4,%eax
c01062c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    for (unsigned int i = 0; i < map_size; i++) {
c01062c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01062ce:	e9 1e 01 00 00       	jmp    c01063f1 <_kernel_init+0x1d4>
        multiboot_memory_map_t mmap = map[i];
c01062d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01062d6:	89 d0                	mov    %edx,%eax
c01062d8:	01 c0                	add    %eax,%eax
c01062da:	01 d0                	add    %edx,%eax
c01062dc:	c1 e0 03             	shl    $0x3,%eax
c01062df:	89 c2                	mov    %eax,%edx
c01062e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062e4:	01 d0                	add    %edx,%eax
c01062e6:	8b 10                	mov    (%eax),%edx
c01062e8:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01062eb:	8b 50 04             	mov    0x4(%eax),%edx
c01062ee:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01062f1:	8b 50 08             	mov    0x8(%eax),%edx
c01062f4:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01062f7:	8b 50 0c             	mov    0xc(%eax),%edx
c01062fa:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01062fd:	8b 50 10             	mov    0x10(%eax),%edx
c0106300:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0106303:	8b 40 14             	mov    0x14(%eax),%eax
c0106306:	89 45 d0             	mov    %eax,-0x30(%ebp)
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
               map[i].addr_low,
               map[i].len_low >> 10,
               map[i].type);
c0106309:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010630c:	89 d0                	mov    %edx,%eax
c010630e:	01 c0                	add    %eax,%eax
c0106310:	01 d0                	add    %edx,%eax
c0106312:	c1 e0 03             	shl    $0x3,%eax
c0106315:	89 c2                	mov    %eax,%edx
c0106317:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010631a:	01 d0                	add    %edx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c010631c:	8b 50 14             	mov    0x14(%eax),%edx
               map[i].len_low >> 10,
c010631f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0106322:	89 c8                	mov    %ecx,%eax
c0106324:	01 c0                	add    %eax,%eax
c0106326:	01 c8                	add    %ecx,%eax
c0106328:	c1 e0 03             	shl    $0x3,%eax
c010632b:	89 c1                	mov    %eax,%ecx
c010632d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106330:	01 c8                	add    %ecx,%eax
c0106332:	8b 40 0c             	mov    0xc(%eax),%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c0106335:	c1 e8 0a             	shr    $0xa,%eax
c0106338:	89 c3                	mov    %eax,%ebx
               map[i].addr_low,
c010633a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010633d:	89 c8                	mov    %ecx,%eax
c010633f:	01 c0                	add    %eax,%eax
c0106341:	01 c8                	add    %ecx,%eax
c0106343:	c1 e0 03             	shl    $0x3,%eax
c0106346:	89 c1                	mov    %eax,%ecx
c0106348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010634b:	01 c8                	add    %ecx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c010634d:	8b 40 04             	mov    0x4(%eax),%eax
c0106350:	52                   	push   %edx
c0106351:	53                   	push   %ebx
c0106352:	50                   	push   %eax
c0106353:	68 34 b0 12 c0       	push   $0xc012b034
c0106358:	e8 85 1b 00 00       	call   c0107ee2 <kprintf>
c010635d:	83 c4 10             	add    $0x10,%esp
        if (mmap.type == MULTIBOOT_MEMORY_AVAILABLE) {
c0106360:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106363:	83 f8 01             	cmp    $0x1,%eax
c0106366:	0f 85 81 00 00 00    	jne    c01063ed <_kernel_init+0x1d0>
            // 整数向上取整除法
            uintptr_t pg = map[i].addr_low + 0x0fffU;
c010636c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010636f:	89 d0                	mov    %edx,%eax
c0106371:	01 c0                	add    %eax,%eax
c0106373:	01 d0                	add    %edx,%eax
c0106375:	c1 e0 03             	shl    $0x3,%eax
c0106378:	89 c2                	mov    %eax,%edx
c010637a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010637d:	01 d0                	add    %edx,%eax
c010637f:	8b 40 04             	mov    0x4(%eax),%eax
c0106382:	05 ff 0f 00 00       	add    $0xfff,%eax
c0106387:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            pmm_mark_chunk_free(pg >> 12, map[i].len_low >> 12);
c010638a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010638d:	89 d0                	mov    %edx,%eax
c010638f:	01 c0                	add    %eax,%eax
c0106391:	01 d0                	add    %edx,%eax
c0106393:	c1 e0 03             	shl    $0x3,%eax
c0106396:	89 c2                	mov    %eax,%edx
c0106398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010639b:	01 d0                	add    %edx,%eax
c010639d:	8b 40 0c             	mov    0xc(%eax),%eax
c01063a0:	c1 e8 0c             	shr    $0xc,%eax
c01063a3:	89 c2                	mov    %eax,%edx
c01063a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063a8:	c1 e8 0c             	shr    $0xc,%eax
c01063ab:	83 ec 08             	sub    $0x8,%esp
c01063ae:	52                   	push   %edx
c01063af:	50                   	push   %eax
c01063b0:	e8 9c 03 00 00       	call   c0106751 <pmm_mark_chunk_free>
c01063b5:	83 c4 10             	add    $0x10,%esp
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c01063b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01063c0:	89 c1                	mov    %eax,%ecx
                   map[i].len_low >> 12,
c01063c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01063c5:	89 d0                	mov    %edx,%eax
c01063c7:	01 c0                	add    %eax,%eax
c01063c9:	01 d0                	add    %edx,%eax
c01063cb:	c1 e0 03             	shl    $0x3,%eax
c01063ce:	89 c2                	mov    %eax,%edx
c01063d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d3:	01 d0                	add    %edx,%eax
c01063d5:	8b 40 0c             	mov    0xc(%eax),%eax
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c01063d8:	c1 e8 0c             	shr    $0xc,%eax
c01063db:	83 ec 04             	sub    $0x4,%esp
c01063de:	51                   	push   %ecx
c01063df:	50                   	push   %eax
c01063e0:	68 5c b0 12 c0       	push   $0xc012b05c
c01063e5:	e8 f8 1a 00 00       	call   c0107ee2 <kprintf>
c01063ea:	83 c4 10             	add    $0x10,%esp
    for (unsigned int i = 0; i < map_size; i++) {
c01063ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01063f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063f4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01063f7:	0f 82 d6 fe ff ff    	jb     c01062d3 <_kernel_init+0xb6>
                   pg & ~0x0fffU);
        }
    }

    // 将内核占据的页设为已占用
    size_t pg_count = (uintptr_t)(&virkernel_end  - &virkernel_start) >> 12;
c01063fd:	b8 00 20 13 c0       	mov    $0xc0132000,%eax
c0106402:	2d 00 60 10 c0       	sub    $0xc0106000,%eax
c0106407:	c1 e8 0c             	shr    $0xc,%eax
c010640a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    pmm_mark_chunk_occupied(V2P(&virkernel_start) >> 12, pg_count);
c010640d:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
c0106412:	05 00 00 00 40       	add    $0x40000000,%eax
c0106417:	c1 e8 0c             	shr    $0xc,%eax
c010641a:	83 ec 08             	sub    $0x8,%esp
c010641d:	ff 75 dc             	push   -0x24(%ebp)
c0106420:	50                   	push   %eax
c0106421:	e8 8f 03 00 00       	call   c01067b5 <pmm_mark_chunk_occupied>
c0106426:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Allocated %d pages for kernel.\n", pg_count);
c0106429:	83 ec 08             	sub    $0x8,%esp
c010642c:	ff 75 dc             	push   -0x24(%ebp)
c010642f:	68 84 b0 12 c0       	push   $0xc012b084
c0106434:	e8 a9 1a 00 00       	call   c0107ee2 <kprintf>
c0106439:	83 c4 10             	add    $0x10,%esp

    size_t vga_buf_pgs = VGA_BUFFER_SIZE >> 12;
c010643c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
    
    // 首先，标记VGA部分为已占用
    pmm_mark_chunk_occupied(VIDEO >> 12, vga_buf_pgs);
c0106443:	83 ec 08             	sub    $0x8,%esp
c0106446:	ff 75 d8             	push   -0x28(%ebp)
c0106449:	68 b8 00 00 00       	push   $0xb8
c010644e:	e8 62 03 00 00       	call   c01067b5 <pmm_mark_chunk_occupied>
c0106453:	83 c4 10             	add    $0x10,%esp
    
    // 重映射VGA文本缓冲区（以后会变成显存，i.e., framebuffer）
    for (size_t i = 0; i < vga_buf_pgs; i++)
c0106456:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010645d:	eb 2a                	jmp    c0106489 <_kernel_init+0x26c>
    {
        vmm_map_page(VGA_BUFFER_VADDR + (i << 12), VIDEO + (i << 12), PG_PREM_RW, PG_PREM_RW);
c010645f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106462:	c1 e0 0c             	shl    $0xc,%eax
c0106465:	05 00 80 0b 00       	add    $0xb8000,%eax
c010646a:	89 c2                	mov    %eax,%edx
c010646c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010646f:	c1 e0 0c             	shl    $0xc,%eax
c0106472:	2d 00 00 00 50       	sub    $0x50000000,%eax
c0106477:	6a 03                	push   $0x3
c0106479:	6a 03                	push   $0x3
c010647b:	52                   	push   %edx
c010647c:	50                   	push   %eax
c010647d:	e8 fe 0a 00 00       	call   c0106f80 <vmm_map_page>
c0106482:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < vga_buf_pgs; i++)
c0106485:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0106489:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010648c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c010648f:	72 ce                	jb     c010645f <_kernel_init+0x242>
    }
    set_vga_buffer(VGA_BUFFER_VADDR);
c0106491:	83 ec 0c             	sub    $0xc,%esp
c0106494:	68 00 00 00 b0       	push   $0xb0000000
c0106499:	e8 72 fb ff ff       	call   c0106010 <set_vga_buffer>
c010649e:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Mapped VGA to %x.\n", VGA_BUFFER_VADDR);
c01064a1:	83 ec 08             	sub    $0x8,%esp
c01064a4:	68 00 00 00 b0       	push   $0xb0000000
c01064a9:	68 a9 b0 12 c0       	push   $0xc012b0a9
c01064ae:	e8 2f 1a 00 00       	call   c0107ee2 <kprintf>
c01064b3:	83 c4 10             	add    $0x10,%esp

    // 为内核创建一个专属栈空间。
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c01064b6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01064bd:	eb 1f                	jmp    c01064de <_kernel_init+0x2c1>
        vmm_alloc_page(K_STACK_START + (i << 12), PG_PREM_RW, PG_PREM_RW);
c01064bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064c2:	c1 e0 0c             	shl    $0xc,%eax
c01064c5:	2d 00 00 50 00       	sub    $0x500000,%eax
c01064ca:	83 ec 04             	sub    $0x4,%esp
c01064cd:	6a 03                	push   $0x3
c01064cf:	6a 03                	push   $0x3
c01064d1:	50                   	push   %eax
c01064d2:	e8 6f 0c 00 00       	call   c0107146 <vmm_alloc_page>
c01064d7:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c01064da:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01064de:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%ebp)
c01064e5:	76 d8                	jbe    c01064bf <_kernel_init+0x2a2>
    }
    kprintf("[MM] Allocated %d pages for stack start at %p\n", K_STACK_SIZE>>12, K_STACK_START);
c01064e7:	83 ec 04             	sub    $0x4,%esp
c01064ea:	68 00 00 b0 ff       	push   $0xffb00000
c01064ef:	68 00 01 00 00       	push   $0x100
c01064f4:	68 c4 b0 12 c0       	push   $0xc012b0c4
c01064f9:	e8 e4 19 00 00       	call   c0107ee2 <kprintf>
c01064fe:	83 c4 10             	add    $0x10,%esp

    //give malloc init
    mem_init();
c0106501:	e8 68 07 00 00       	call   c0106c6e <mem_init>
    kprintf("[MM] Malloc Init Success \n");
c0106506:	83 ec 0c             	sub    $0xc,%esp
c0106509:	68 f3 b0 12 c0       	push   $0xc012b0f3
c010650e:	e8 cf 19 00 00       	call   c0107ee2 <kprintf>
c0106513:	83 c4 10             	add    $0x10,%esp
    kprintf("[KERNEL] === Initialization Done === \n\n");
c0106516:	83 ec 0c             	sub    $0xc,%esp
c0106519:	68 10 b1 12 c0       	push   $0xc012b110
c010651e:	e8 bf 19 00 00       	call   c0107ee2 <kprintf>
c0106523:	83 c4 10             	add    $0x10,%esp

    vga_put_str("MELOX OS\n");
c0106526:	83 ec 0c             	sub    $0xc,%esp
c0106529:	68 38 b1 12 c0       	push   $0xc012b138
c010652e:	e8 e0 fb ff ff       	call   c0106113 <vga_put_str>
c0106533:	83 c4 10             	add    $0x10,%esp
     //__asm__("int $1");
}
c0106536:	90                   	nop
c0106537:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010653a:	c9                   	leave  
c010653b:	c3                   	ret    

c010653c <_kernel_finnal_init>:

void _kernel_finnal_init() {
c010653c:	55                   	push   %ebp
c010653d:	89 e5                	mov    %esp,%ebp
c010653f:	83 ec 18             	sub    $0x18,%esp
    //kprintf("[KERNEL] === Post Initialization === \n");
    size_t virk_init_pg_count = ((uintptr_t)(&__init_phykernel_end)) >> 12;
c0106542:	b8 00 60 10 00       	mov    $0x106000,%eax
c0106547:	c1 e8 0c             	shr    $0xc,%eax
c010654a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kprintf("[MM] Releaseing %d pages from 0x0.\n", virk_init_pg_count);
c010654d:	83 ec 08             	sub    $0x8,%esp
c0106550:	ff 75 ec             	push   -0x14(%ebp)
c0106553:	68 44 b1 12 c0       	push   $0xc012b144
c0106558:	e8 85 19 00 00       	call   c0107ee2 <kprintf>
c010655d:	83 c4 10             	add    $0x10,%esp

    // 清除 hhk_init 与前1MiB的映射
    for (size_t i = 0; i < 256; i++) {
c0106560:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106567:	eb 16                	jmp    c010657f <_kernel_finnal_init+0x43>

        vmm_unmap_page((i << 12));
c0106569:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010656c:	c1 e0 0c             	shl    $0xc,%eax
c010656f:	83 ec 0c             	sub    $0xc,%esp
c0106572:	50                   	push   %eax
c0106573:	e8 0c 0c 00 00       	call   c0107184 <vmm_unmap_page>
c0106578:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < 256; i++) {
c010657b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010657f:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
c0106586:	76 e1                	jbe    c0106569 <_kernel_finnal_init+0x2d>
    }
    for (size_t i = 256; i < virk_init_pg_count; i++) {
c0106588:	c7 45 f0 00 01 00 00 	movl   $0x100,-0x10(%ebp)
c010658f:	eb 16                	jmp    c01065a7 <_kernel_finnal_init+0x6b>

        vmm_unmap_page((i << 12));
c0106591:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106594:	c1 e0 0c             	shl    $0xc,%eax
c0106597:	83 ec 0c             	sub    $0xc,%esp
c010659a:	50                   	push   %eax
c010659b:	e8 e4 0b 00 00       	call   c0107184 <vmm_unmap_page>
c01065a0:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 256; i < virk_init_pg_count; i++) {
c01065a3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01065a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065aa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01065ad:	72 e2                	jb     c0106591 <_kernel_finnal_init+0x55>
    }
    kprintf("[KERNEL] === Post Initialization Done === \n\n");
c01065af:	83 ec 0c             	sub    $0xc,%esp
c01065b2:	68 68 b1 12 c0       	push   $0xc012b168
c01065b7:	e8 26 19 00 00       	call   c0107ee2 <kprintf>
c01065bc:	83 c4 10             	add    $0x10,%esp
}
c01065bf:	90                   	nop
c01065c0:	c9                   	leave  
c01065c1:	c3                   	ret    

c01065c2 <_kernel_main>:

void _kernel_main()
{
c01065c2:	55                   	push   %ebp
c01065c3:	89 e5                	mov    %esp,%ebp
c01065c5:	81 ec 18 01 00 00    	sub    $0x118,%esp
    char* buf[64];
    
    kprintf("We are now running in virtual address space!\n\n");
c01065cb:	83 ec 0c             	sub    $0xc,%esp
c01065ce:	68 98 b1 12 c0       	push   $0xc012b198
c01065d3:	e8 0a 19 00 00       	call   c0107ee2 <kprintf>
c01065d8:	83 c4 10             	add    $0x10,%esp
    
    cpu_get_brand(buf);
c01065db:	83 ec 0c             	sub    $0xc,%esp
c01065de:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
c01065e4:	50                   	push   %eax
c01065e5:	e8 c9 10 00 00       	call   c01076b3 <cpu_get_brand>
c01065ea:	83 c4 10             	add    $0x10,%esp
    kprintf("CPU: %s\n\n", buf);
c01065ed:	83 ec 08             	sub    $0x8,%esp
c01065f0:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
c01065f6:	50                   	push   %eax
c01065f7:	68 c7 b1 12 c0       	push   $0xc012b1c7
c01065fc:	e8 e1 18 00 00       	call   c0107ee2 <kprintf>
c0106601:	83 c4 10             	add    $0x10,%esp

    uintptr_t k_start = vmm_v2p(&virkernel_start);
c0106604:	83 ec 0c             	sub    $0xc,%esp
c0106607:	68 00 60 10 c0       	push   $0xc0106000
c010660c:	e8 0e 0c 00 00       	call   c010721f <vmm_v2p>
c0106611:	83 c4 10             	add    $0x10,%esp
c0106614:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf("The kernel's base address mapping: %x->%x\n", &virkernel_start, k_start);
c0106617:	83 ec 04             	sub    $0x4,%esp
c010661a:	ff 75 f4             	push   -0xc(%ebp)
c010661d:	68 00 60 10 c0       	push   $0xc0106000
c0106622:	68 d4 b1 12 c0       	push   $0xc012b1d4
c0106627:	e8 b6 18 00 00       	call   c0107ee2 <kprintf>
c010662c:	83 c4 10             	add    $0x10,%esp
    //__asm__("int $0");
    // test malloc & free

    uint8_t* big_ = k_malloc(1000);
c010662f:	83 ec 0c             	sub    $0xc,%esp
c0106632:	68 e8 03 00 00       	push   $0x3e8
c0106637:	e8 19 08 00 00       	call   c0106e55 <k_malloc>
c010663c:	83 c4 10             	add    $0x10,%esp
c010663f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    big_[0] = 123;
c0106642:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106645:	c6 00 7b             	movb   $0x7b,(%eax)
    big_[1] = 23;
c0106648:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010664b:	83 c0 01             	add    $0x1,%eax
c010664e:	c6 00 17             	movb   $0x17,(%eax)
    big_[2] = 3;
c0106651:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106654:	83 c0 02             	add    $0x2,%eax
c0106657:	c6 00 03             	movb   $0x3,(%eax)

    kprintf("malloc %d, %d, %d\n", big_[0], big_[1], big_[2]);
c010665a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010665d:	83 c0 02             	add    $0x2,%eax
c0106660:	0f b6 00             	movzbl (%eax),%eax
c0106663:	0f b6 c8             	movzbl %al,%ecx
c0106666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106669:	83 c0 01             	add    $0x1,%eax
c010666c:	0f b6 00             	movzbl (%eax),%eax
c010666f:	0f b6 d0             	movzbl %al,%edx
c0106672:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106675:	0f b6 00             	movzbl (%eax),%eax
c0106678:	0f b6 c0             	movzbl %al,%eax
c010667b:	51                   	push   %ecx
c010667c:	52                   	push   %edx
c010667d:	50                   	push   %eax
c010667e:	68 ff b1 12 c0       	push   $0xc012b1ff
c0106683:	e8 5a 18 00 00       	call   c0107ee2 <kprintf>
c0106688:	83 c4 10             	add    $0x10,%esp
    malloc_free(big_);
c010668b:	83 ec 0c             	sub    $0xc,%esp
c010668e:	ff 75 f0             	push   -0x10(%ebp)
c0106691:	e8 7a 07 00 00       	call   c0106e10 <malloc_free>
c0106696:	83 c4 10             	add    $0x10,%esp

    init_keyboard();
c0106699:	e8 9a 17 00 00       	call   c0107e38 <init_keyboard>
c010669e:	90                   	nop
c010669f:	c9                   	leave  
c01066a0:	c3                   	ret    

c01066a1 <pmm_init>:
#include <kernel/memory/page.h>
size_t pg_lookup_ptr;
uint8_t pm_bitmap[PM_BMP_MAX_SIZE];
uintptr_t max_pg;
void pmm_init(uintptr_t mem_upper_lim)
{
c01066a1:	55                   	push   %ebp
c01066a2:	89 e5                	mov    %esp,%ebp
c01066a4:	83 ec 10             	sub    $0x10,%esp
    pg_lookup_ptr = LOOKUP_START;
c01066a7:	c7 05 20 90 10 c0 01 	movl   $0x1,0xc0109020
c01066ae:	00 00 00 
    max_pg = (PG_ALIGN(mem_upper_lim) >> 12);
c01066b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01066b4:	c1 e8 0c             	shr    $0xc,%eax
c01066b7:	a3 40 90 12 c0       	mov    %eax,0xc0129040

    for(int i = 0; i < PM_BMP_MAX_SIZE; i++)
c01066bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01066c3:	eb 0f                	jmp    c01066d4 <pmm_init+0x33>
    {
        pm_bitmap[i] = 0xffU;
c01066c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01066c8:	05 40 90 10 c0       	add    $0xc0109040,%eax
c01066cd:	c6 00 ff             	movb   $0xff,(%eax)
    for(int i = 0; i < PM_BMP_MAX_SIZE; i++)
c01066d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01066d4:	81 7d fc ff ff 01 00 	cmpl   $0x1ffff,-0x4(%ebp)
c01066db:	7e e8                	jle    c01066c5 <pmm_init+0x24>
    }
}
c01066dd:	90                   	nop
c01066de:	90                   	nop
c01066df:	c9                   	leave  
c01066e0:	c3                   	ret    

c01066e1 <pmm_mark_page_free>:

void pmm_mark_page_free(uintptr_t ppn)
{
c01066e1:	55                   	push   %ebp
c01066e2:	89 e5                	mov    %esp,%ebp
c01066e4:	53                   	push   %ebx
    pm_bitmap[ppn / 8] = pm_bitmap[ppn / 8] & (0xff7fU >> (ppn % 8));
c01066e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01066e8:	c1 e8 03             	shr    $0x3,%eax
c01066eb:	0f b6 90 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%edx
c01066f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01066f5:	83 e0 07             	and    $0x7,%eax
c01066f8:	bb 7f ff 00 00       	mov    $0xff7f,%ebx
c01066fd:	89 c1                	mov    %eax,%ecx
c01066ff:	d3 eb                	shr    %cl,%ebx
c0106701:	89 d8                	mov    %ebx,%eax
c0106703:	89 c1                	mov    %eax,%ecx
c0106705:	8b 45 08             	mov    0x8(%ebp),%eax
c0106708:	c1 e8 03             	shr    $0x3,%eax
c010670b:	21 ca                	and    %ecx,%edx
c010670d:	88 90 40 90 10 c0    	mov    %dl,-0x3fef6fc0(%eax)
}
c0106713:	90                   	nop
c0106714:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106717:	c9                   	leave  
c0106718:	c3                   	ret    

c0106719 <pmm_mark_page_occupied>:

void pmm_mark_page_occupied(uintptr_t ppn)
{
c0106719:	55                   	push   %ebp
c010671a:	89 e5                	mov    %esp,%ebp
c010671c:	53                   	push   %ebx
    pm_bitmap[ppn / 8] = pm_bitmap[ppn / 8] | (0x80U >> (ppn % 8));
c010671d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106720:	c1 e8 03             	shr    $0x3,%eax
c0106723:	0f b6 90 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%edx
c010672a:	8b 45 08             	mov    0x8(%ebp),%eax
c010672d:	83 e0 07             	and    $0x7,%eax
c0106730:	bb 80 00 00 00       	mov    $0x80,%ebx
c0106735:	89 c1                	mov    %eax,%ecx
c0106737:	d3 eb                	shr    %cl,%ebx
c0106739:	89 d8                	mov    %ebx,%eax
c010673b:	89 c1                	mov    %eax,%ecx
c010673d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106740:	c1 e8 03             	shr    $0x3,%eax
c0106743:	09 ca                	or     %ecx,%edx
c0106745:	88 90 40 90 10 c0    	mov    %dl,-0x3fef6fc0(%eax)
}
c010674b:	90                   	nop
c010674c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010674f:	c9                   	leave  
c0106750:	c3                   	ret    

c0106751 <pmm_mark_chunk_free>:

void pmm_mark_chunk_free(uintptr_t start_ppn, size_t page_count)
{
c0106751:	55                   	push   %ebp
c0106752:	89 e5                	mov    %esp,%ebp
c0106754:	53                   	push   %ebx
c0106755:	83 ec 10             	sub    $0x10,%esp
    for(int i = start_ppn; i < page_count; i++)
c0106758:	8b 45 08             	mov    0x8(%ebp),%eax
c010675b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010675e:	eb 46                	jmp    c01067a6 <pmm_mark_chunk_free+0x55>
        pm_bitmap[i / 8] = pm_bitmap[i / 8] & (0xff7fU >> (i % 8));
c0106760:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106763:	8d 50 07             	lea    0x7(%eax),%edx
c0106766:	85 c0                	test   %eax,%eax
c0106768:	0f 48 c2             	cmovs  %edx,%eax
c010676b:	c1 f8 03             	sar    $0x3,%eax
c010676e:	0f b6 98 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%ebx
c0106775:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106778:	83 e0 07             	and    $0x7,%eax
c010677b:	ba 7f ff 00 00       	mov    $0xff7f,%edx
c0106780:	89 c1                	mov    %eax,%ecx
c0106782:	d3 ea                	shr    %cl,%edx
c0106784:	89 d0                	mov    %edx,%eax
c0106786:	89 c1                	mov    %eax,%ecx
c0106788:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010678b:	8d 50 07             	lea    0x7(%eax),%edx
c010678e:	85 c0                	test   %eax,%eax
c0106790:	0f 48 c2             	cmovs  %edx,%eax
c0106793:	c1 f8 03             	sar    $0x3,%eax
c0106796:	89 c2                	mov    %eax,%edx
c0106798:	89 d8                	mov    %ebx,%eax
c010679a:	21 c8                	and    %ecx,%eax
c010679c:	88 82 40 90 10 c0    	mov    %al,-0x3fef6fc0(%edx)
    for(int i = start_ppn; i < page_count; i++)
c01067a2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01067a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067a9:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01067ac:	77 b2                	ja     c0106760 <pmm_mark_chunk_free+0xf>
}
c01067ae:	90                   	nop
c01067af:	90                   	nop
c01067b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01067b3:	c9                   	leave  
c01067b4:	c3                   	ret    

c01067b5 <pmm_mark_chunk_occupied>:

void pmm_mark_chunk_occupied(uintptr_t start_ppn, size_t page_count)
{
c01067b5:	55                   	push   %ebp
c01067b6:	89 e5                	mov    %esp,%ebp
c01067b8:	53                   	push   %ebx
c01067b9:	83 ec 10             	sub    $0x10,%esp
    for(int i = start_ppn; i < page_count; i++)
c01067bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01067bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01067c2:	eb 46                	jmp    c010680a <pmm_mark_chunk_occupied+0x55>
        pm_bitmap[i / 8] = pm_bitmap[i / 8] | (0x80U >> (i % 8));
c01067c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067c7:	8d 50 07             	lea    0x7(%eax),%edx
c01067ca:	85 c0                	test   %eax,%eax
c01067cc:	0f 48 c2             	cmovs  %edx,%eax
c01067cf:	c1 f8 03             	sar    $0x3,%eax
c01067d2:	0f b6 98 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%ebx
c01067d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067dc:	83 e0 07             	and    $0x7,%eax
c01067df:	ba 80 00 00 00       	mov    $0x80,%edx
c01067e4:	89 c1                	mov    %eax,%ecx
c01067e6:	d3 ea                	shr    %cl,%edx
c01067e8:	89 d0                	mov    %edx,%eax
c01067ea:	89 c1                	mov    %eax,%ecx
c01067ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01067ef:	8d 50 07             	lea    0x7(%eax),%edx
c01067f2:	85 c0                	test   %eax,%eax
c01067f4:	0f 48 c2             	cmovs  %edx,%eax
c01067f7:	c1 f8 03             	sar    $0x3,%eax
c01067fa:	89 c2                	mov    %eax,%edx
c01067fc:	89 d8                	mov    %ebx,%eax
c01067fe:	09 c8                	or     %ecx,%eax
c0106800:	88 82 40 90 10 c0    	mov    %al,-0x3fef6fc0(%edx)
    for(int i = start_ppn; i < page_count; i++)
c0106806:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010680a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010680d:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0106810:	77 b2                	ja     c01067c4 <pmm_mark_chunk_occupied+0xf>
}
c0106812:	90                   	nop
c0106813:	90                   	nop
c0106814:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106817:	c9                   	leave  
c0106818:	c3                   	ret    

c0106819 <pmm_alloc_page>:

void* pmm_alloc_page()
{
c0106819:	55                   	push   %ebp
c010681a:	89 e5                	mov    %esp,%ebp
c010681c:	53                   	push   %ebx
c010681d:	83 ec 20             	sub    $0x20,%esp
    // Next fit approach. Maximize the throughput!
    uintptr_t good_page_found = NULL;
c0106820:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    size_t old_pg_ptr = pg_lookup_ptr;
c0106827:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010682c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t upper_lim = max_pg;
c010682f:	a1 40 90 12 c0       	mov    0xc0129040,%eax
c0106834:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint8_t chunk = 0;
c0106837:	c6 45 eb 00          	movb   $0x0,-0x15(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c010683b:	e9 a5 00 00 00       	jmp    c01068e5 <pmm_alloc_page+0xcc>
        chunk = pm_bitmap[pg_lookup_ptr >> 3];
c0106840:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106845:	c1 e8 03             	shr    $0x3,%eax
c0106848:	0f b6 80 40 90 10 c0 	movzbl -0x3fef6fc0(%eax),%eax
c010684f:	88 45 eb             	mov    %al,-0x15(%ebp)

        // skip the fully occupied chunk, reduce # of iterations
        if (chunk != 0xFFU) {
c0106852:	80 7d eb ff          	cmpb   $0xff,-0x15(%ebp)
c0106856:	74 59                	je     c01068b1 <pmm_alloc_page+0x98>
            for (size_t i = pg_lookup_ptr % 8; i < 8; i++, pg_lookup_ptr++) {
c0106858:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010685d:	83 e0 07             	and    $0x7,%eax
c0106860:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106863:	eb 44                	jmp    c01068a9 <pmm_alloc_page+0x90>
                if (!(chunk & (0x80U >> i))) {
c0106865:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
c0106869:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010686c:	bb 80 00 00 00       	mov    $0x80,%ebx
c0106871:	89 c1                	mov    %eax,%ecx
c0106873:	d3 eb                	shr    %cl,%ebx
c0106875:	89 d8                	mov    %ebx,%eax
c0106877:	21 d0                	and    %edx,%eax
c0106879:	85 c0                	test   %eax,%eax
c010687b:	75 1b                	jne    c0106898 <pmm_alloc_page+0x7f>
                    pmm_mark_page_occupied(pg_lookup_ptr);
c010687d:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106882:	50                   	push   %eax
c0106883:	e8 91 fe ff ff       	call   c0106719 <pmm_mark_page_occupied>
c0106888:	83 c4 04             	add    $0x4,%esp
                    good_page_found = pg_lookup_ptr << 12;
c010688b:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106890:	c1 e0 0c             	shl    $0xc,%eax
c0106893:	89 45 f8             	mov    %eax,-0x8(%ebp)
                    break;
c0106896:	eb 4d                	jmp    c01068e5 <pmm_alloc_page+0xcc>
            for (size_t i = pg_lookup_ptr % 8; i < 8; i++, pg_lookup_ptr++) {
c0106898:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010689c:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c01068a1:	83 c0 01             	add    $0x1,%eax
c01068a4:	a3 20 90 10 c0       	mov    %eax,0xc0109020
c01068a9:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
c01068ad:	76 b6                	jbe    c0106865 <pmm_alloc_page+0x4c>
c01068af:	eb 34                	jmp    c01068e5 <pmm_alloc_page+0xcc>
                }
            }
        } else {
            pg_lookup_ptr += 8;
c01068b1:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c01068b6:	83 c0 08             	add    $0x8,%eax
c01068b9:	a3 20 90 10 c0       	mov    %eax,0xc0109020

            // We've searched the interval [old_pg_ptr, max_pg) but failed
            //   may be chances in [1, old_pg_ptr) ?
            // Let's find out!
            if (pg_lookup_ptr >= upper_lim && old_pg_ptr != LOOKUP_START) {
c01068be:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c01068c3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01068c6:	77 1d                	ja     c01068e5 <pmm_alloc_page+0xcc>
c01068c8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c01068cc:	74 17                	je     c01068e5 <pmm_alloc_page+0xcc>
                upper_lim = old_pg_ptr;
c01068ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
                pg_lookup_ptr = LOOKUP_START;
c01068d4:	c7 05 20 90 10 c0 01 	movl   $0x1,0xc0109020
c01068db:	00 00 00 
                old_pg_ptr = LOOKUP_START;
c01068de:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c01068e5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01068e9:	75 0e                	jne    c01068f9 <pmm_alloc_page+0xe0>
c01068eb:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c01068f0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01068f3:	0f 87 47 ff ff ff    	ja     c0106840 <pmm_alloc_page+0x27>
            }
        }
    }
    return (void*)good_page_found;
c01068f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01068fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01068ff:	c9                   	leave  
c0106900:	c3                   	ret    

c0106901 <pmm_free_page>:

int
pmm_free_page(void* page)
{
c0106901:	55                   	push   %ebp
c0106902:	89 e5                	mov    %esp,%ebp
c0106904:	83 ec 10             	sub    $0x10,%esp
    // TODO: Add kernel reserved memory page check
    uint32_t pg = (uintptr_t)page >> 12;
c0106907:	8b 45 08             	mov    0x8(%ebp),%eax
c010690a:	c1 e8 0c             	shr    $0xc,%eax
c010690d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (pg && pg < max_pg)
c0106910:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106914:	74 1c                	je     c0106932 <pmm_free_page+0x31>
c0106916:	a1 40 90 12 c0       	mov    0xc0129040,%eax
c010691b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010691e:	73 12                	jae    c0106932 <pmm_free_page+0x31>
    {
        pmm_mark_page_free(pg);
c0106920:	ff 75 fc             	push   -0x4(%ebp)
c0106923:	e8 b9 fd ff ff       	call   c01066e1 <pmm_mark_page_free>
c0106928:	83 c4 04             	add    $0x4,%esp
        return 1;
c010692b:	b8 01 00 00 00       	mov    $0x1,%eax
c0106930:	eb 05                	jmp    c0106937 <pmm_free_page+0x36>
    }
    return 0;
c0106932:	b8 00 00 00 00       	mov    $0x0,%eax
c0106937:	c9                   	leave  
c0106938:	c3                   	ret    

c0106939 <extend_heap>:
 * @brief extend heap
 * 
 * @param extend size
 */
static void* extend_heap(size_t words)
{
c0106939:	55                   	push   %ebp
c010693a:	89 e5                	mov    %esp,%ebp
c010693c:	83 ec 18             	sub    $0x18,%esp
    char* bp = mem_brk;
c010693f:	a1 4c 90 12 c0       	mov    0xc012904c,%eax
c0106944:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size;
    //align
    size = (words % 2) ? words * WSIZE : (words + 1) * WSIZE;
c0106947:	8b 45 08             	mov    0x8(%ebp),%eax
c010694a:	83 e0 01             	and    $0x1,%eax
c010694d:	85 c0                	test   %eax,%eax
c010694f:	74 08                	je     c0106959 <extend_heap+0x20>
c0106951:	8b 45 08             	mov    0x8(%ebp),%eax
c0106954:	c1 e0 02             	shl    $0x2,%eax
c0106957:	eb 09                	jmp    c0106962 <extend_heap+0x29>
c0106959:	8b 45 08             	mov    0x8(%ebp),%eax
c010695c:	83 c0 01             	add    $0x1,%eax
c010695f:	c1 e0 02             	shl    $0x2,%eax
c0106962:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_sbrk(size + WSIZE);
c0106965:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106968:	83 c0 04             	add    $0x4,%eax
c010696b:	83 ec 0c             	sub    $0xc,%esp
c010696e:	50                   	push   %eax
c010696f:	e8 60 03 00 00       	call   c0106cd4 <mem_sbrk>
c0106974:	83 c4 10             	add    $0x10,%esp

    //initialize free block header/footer and the epilogue header
    PUT(HDRP(bp), PACK(size, 0)); // free block header
c0106977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010697a:	8d 50 fc             	lea    -0x4(%eax),%edx
c010697d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106980:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0)); // free block foot //TODO CRUSH HERE, ADD ONE PAGE OUT OF RANGE, WE ONLY GIVE ONE PAGE, MEYBE PAGE FAULT
c0106982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106985:	83 e8 04             	sub    $0x4,%eax
c0106988:	8b 00                	mov    (%eax),%eax
c010698a:	83 e0 f8             	and    $0xfffffff8,%eax
c010698d:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106990:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106993:	01 c2                	add    %eax,%edx
c0106995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106998:	89 02                	mov    %eax,(%edx)
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); //NEW Epilogue header
c010699a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010699d:	83 e8 04             	sub    $0x4,%eax
c01069a0:	8b 00                	mov    (%eax),%eax
c01069a2:	83 e0 f8             	and    $0xfffffff8,%eax
c01069a5:	8d 50 fc             	lea    -0x4(%eax),%edx
c01069a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069ab:	01 d0                	add    %edx,%eax
c01069ad:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //Coalesce if previous block is free
    return coalesce(bp);
c01069b3:	83 ec 0c             	sub    $0xc,%esp
c01069b6:	ff 75 f4             	push   -0xc(%ebp)
c01069b9:	e8 05 00 00 00       	call   c01069c3 <coalesce>
c01069be:	83 c4 10             	add    $0x10,%esp
}
c01069c1:	c9                   	leave  
c01069c2:	c3                   	ret    

c01069c3 <coalesce>:
 * @brief Coalesce free blk
 * 
 * @param Coalesce bp pointer
 */
static void* coalesce(void* bp)
{
c01069c3:	55                   	push   %ebp
c01069c4:	89 e5                	mov    %esp,%ebp
c01069c6:	83 ec 10             	sub    $0x10,%esp
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
c01069c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01069cc:	83 e8 04             	sub    $0x4,%eax
c01069cf:	8b 00                	mov    (%eax),%eax
c01069d1:	83 e0 f8             	and    $0xfffffff8,%eax
c01069d4:	8d 50 f8             	lea    -0x8(%eax),%edx
c01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01069da:	01 d0                	add    %edx,%eax
c01069dc:	8b 00                	mov    (%eax),%eax
c01069de:	83 e0 01             	and    $0x1,%eax
c01069e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
c01069e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01069e7:	83 e8 04             	sub    $0x4,%eax
c01069ea:	8b 00                	mov    (%eax),%eax
c01069ec:	83 e0 f8             	and    $0xfffffff8,%eax
c01069ef:	8d 50 fc             	lea    -0x4(%eax),%edx
c01069f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01069f5:	01 d0                	add    %edx,%eax
c01069f7:	8b 00                	mov    (%eax),%eax
c01069f9:	83 e0 01             	and    $0x1,%eax
c01069fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t size = GET_SIZE(HDRP(bp));
c01069ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a02:	83 e8 04             	sub    $0x4,%eax
c0106a05:	8b 00                	mov    (%eax),%eax
c0106a07:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(prev_alloc && next_alloc)
c0106a0d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106a11:	74 0e                	je     c0106a21 <coalesce+0x5e>
c0106a13:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106a17:	74 08                	je     c0106a21 <coalesce+0x5e>
        return bp;
c0106a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a1c:	e9 3e 01 00 00       	jmp    c0106b5f <coalesce+0x19c>

    else if(prev_alloc && !next_alloc)
c0106a21:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106a25:	74 49                	je     c0106a70 <coalesce+0xad>
c0106a27:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106a2b:	75 43                	jne    c0106a70 <coalesce+0xad>
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
c0106a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a30:	83 e8 04             	sub    $0x4,%eax
c0106a33:	8b 00                	mov    (%eax),%eax
c0106a35:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a38:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106a3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a3e:	01 d0                	add    %edx,%eax
c0106a40:	8b 00                	mov    (%eax),%eax
c0106a42:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a45:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(HDRP(bp), PACK(size, 0));
c0106a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a4b:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a51:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(bp), PACK(size, 0));
c0106a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a56:	83 e8 04             	sub    $0x4,%eax
c0106a59:	8b 00                	mov    (%eax),%eax
c0106a5b:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a5e:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a64:	01 c2                	add    %eax,%edx
c0106a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a69:	89 02                	mov    %eax,(%edx)
c0106a6b:	e9 ec 00 00 00       	jmp    c0106b5c <coalesce+0x199>
    }

    else if(!prev_alloc && next_alloc)
c0106a70:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106a74:	75 6b                	jne    c0106ae1 <coalesce+0x11e>
c0106a76:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106a7a:	74 65                	je     c0106ae1 <coalesce+0x11e>
    {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));//TO DO ,THERE IS PEOBLEM, CRUSH HERE
c0106a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a7f:	83 e8 08             	sub    $0x8,%eax
c0106a82:	8b 00                	mov    (%eax),%eax
c0106a84:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a87:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106a8c:	29 c2                	sub    %eax,%edx
c0106a8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a91:	01 d0                	add    %edx,%eax
c0106a93:	8b 00                	mov    (%eax),%eax
c0106a95:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a98:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(bp), PACK(size, 0));
c0106a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a9e:	83 e8 04             	sub    $0x4,%eax
c0106aa1:	8b 00                	mov    (%eax),%eax
c0106aa3:	83 e0 f8             	and    $0xfffffff8,%eax
c0106aa6:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106aa9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aac:	01 c2                	add    %eax,%edx
c0106aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ab1:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
c0106ab3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ab6:	83 e8 08             	sub    $0x8,%eax
c0106ab9:	8b 00                	mov    (%eax),%eax
c0106abb:	83 e0 f8             	and    $0xfffffff8,%eax
c0106abe:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106ac3:	29 c2                	sub    %eax,%edx
c0106ac5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ac8:	01 c2                	add    %eax,%edx
c0106aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106acd:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ad2:	83 e8 08             	sub    $0x8,%eax
c0106ad5:	8b 00                	mov    (%eax),%eax
c0106ad7:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ada:	f7 d8                	neg    %eax
c0106adc:	01 45 08             	add    %eax,0x8(%ebp)
c0106adf:	eb 7b                	jmp    c0106b5c <coalesce+0x199>
    }

    else{
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
c0106ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ae4:	83 e8 08             	sub    $0x8,%eax
c0106ae7:	8b 00                	mov    (%eax),%eax
c0106ae9:	83 e0 f8             	and    $0xfffffff8,%eax
c0106aec:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106af1:	29 c2                	sub    %eax,%edx
c0106af3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106af6:	01 d0                	add    %edx,%eax
c0106af8:	8b 00                	mov    (%eax),%eax
c0106afa:	83 e0 f8             	and    $0xfffffff8,%eax
c0106afd:	89 c2                	mov    %eax,%edx
c0106aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b02:	83 e8 04             	sub    $0x4,%eax
c0106b05:	8b 00                	mov    (%eax),%eax
c0106b07:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b0a:	8d 48 f8             	lea    -0x8(%eax),%ecx
c0106b0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b10:	01 c8                	add    %ecx,%eax
c0106b12:	8b 00                	mov    (%eax),%eax
c0106b14:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b17:	01 d0                	add    %edx,%eax
c0106b19:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(PREV_BLKP(bp)), PACK(size, 0));
c0106b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b1f:	83 e8 04             	sub    $0x4,%eax
c0106b22:	8b 00                	mov    (%eax),%eax
c0106b24:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b27:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106b2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b2d:	01 c2                	add    %eax,%edx
c0106b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b32:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(size, 0));
c0106b34:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b37:	83 e8 04             	sub    $0x4,%eax
c0106b3a:	8b 00                	mov    (%eax),%eax
c0106b3c:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b3f:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b45:	01 c2                	add    %eax,%edx
c0106b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b4a:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106b4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b4f:	83 e8 08             	sub    $0x8,%eax
c0106b52:	8b 00                	mov    (%eax),%eax
c0106b54:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b57:	f7 d8                	neg    %eax
c0106b59:	01 45 08             	add    %eax,0x8(%ebp)
    }
    return bp;
c0106b5c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106b5f:	c9                   	leave  
c0106b60:	c3                   	ret    

c0106b61 <find_fit>:
 * @brief find free blk
 * 
 * @param find size
 */
static void* find_fit(size_t asize)// we just traverse heap
{
c0106b61:	55                   	push   %ebp
c0106b62:	89 e5                	mov    %esp,%ebp
c0106b64:	83 ec 10             	sub    $0x10,%esp
    void* bp = heap_listp;
c0106b67:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106b6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106b6f:	eb 2f                	jmp    c0106ba0 <find_fit+0x3f>
    {
        if(GET_SIZE(bp) != 0 && GET_ALLOC(bp) != 1)
c0106b71:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b74:	8b 00                	mov    (%eax),%eax
c0106b76:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b79:	85 c0                	test   %eax,%eax
c0106b7b:	74 1c                	je     c0106b99 <find_fit+0x38>
c0106b7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b80:	8b 00                	mov    (%eax),%eax
c0106b82:	83 e0 01             	and    $0x1,%eax
c0106b85:	85 c0                	test   %eax,%eax
c0106b87:	75 10                	jne    c0106b99 <find_fit+0x38>
            bp = NEXT_BLKP(bp);
c0106b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b8c:	83 e8 04             	sub    $0x4,%eax
c0106b8f:	8b 00                	mov    (%eax),%eax
c0106b91:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b94:	01 45 fc             	add    %eax,-0x4(%ebp)
c0106b97:	eb 07                	jmp    c0106ba0 <find_fit+0x3f>
        else
            return NULL;
c0106b99:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b9e:	eb 22                	jmp    c0106bc2 <find_fit+0x61>
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106ba0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ba3:	83 e8 04             	sub    $0x4,%eax
c0106ba6:	8b 00                	mov    (%eax),%eax
c0106ba8:	83 e0 01             	and    $0x1,%eax
c0106bab:	85 c0                	test   %eax,%eax
c0106bad:	75 c2                	jne    c0106b71 <find_fit+0x10>
c0106baf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bb2:	83 e8 04             	sub    $0x4,%eax
c0106bb5:	8b 00                	mov    (%eax),%eax
c0106bb7:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bba:	39 45 08             	cmp    %eax,0x8(%ebp)
c0106bbd:	77 b2                	ja     c0106b71 <find_fit+0x10>
    }
    return bp;
c0106bbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106bc2:	c9                   	leave  
c0106bc3:	c3                   	ret    

c0106bc4 <place>:
 * @brief place the blk
 * 
 * @param blk,size
 */
static void place(void* bp, size_t asize)
{
c0106bc4:	55                   	push   %ebp
c0106bc5:	89 e5                	mov    %esp,%ebp
c0106bc7:	83 ec 10             	sub    $0x10,%esp
    size_t bp_allsize = GET_SIZE(HDRP(bp));
c0106bca:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bcd:	83 e8 04             	sub    $0x4,%eax
c0106bd0:	8b 00                	mov    (%eax),%eax
c0106bd2:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t remain_size = bp_allsize - asize;
c0106bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bdb:	2b 45 0c             	sub    0xc(%ebp),%eax
c0106bde:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(remain_size >= 2*DSIZE)
c0106be1:	83 7d f8 0f          	cmpl   $0xf,-0x8(%ebp)
c0106be5:	76 5b                	jbe    c0106c42 <place+0x7e>
    {
        PUT(HDRP(bp), PACK(asize, 1));
c0106be7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bea:	83 e8 04             	sub    $0x4,%eax
c0106bed:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106bf0:	83 ca 01             	or     $0x1,%edx
c0106bf3:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(asize, 1));
c0106bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bf8:	83 e8 04             	sub    $0x4,%eax
c0106bfb:	8b 00                	mov    (%eax),%eax
c0106bfd:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c00:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c03:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c06:	01 d0                	add    %edx,%eax
c0106c08:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106c0b:	83 ca 01             	or     $0x1,%edx
c0106c0e:	89 10                	mov    %edx,(%eax)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106c10:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c13:	83 e8 04             	sub    $0x4,%eax
c0106c16:	8b 00                	mov    (%eax),%eax
c0106c18:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c1b:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106c1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c21:	01 c2                	add    %eax,%edx
c0106c23:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106c26:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c2b:	83 e8 04             	sub    $0x4,%eax
c0106c2e:	8b 00                	mov    (%eax),%eax
c0106c30:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c33:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c39:	01 c2                	add    %eax,%edx
c0106c3b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106c3e:	89 02                	mov    %eax,(%edx)
    }else{
        PUT(HDRP(bp), PACK(bp_allsize, 1));
        PUT(FTRP(bp), PACK(bp_allsize, 1));
    }
}
c0106c40:	eb 29                	jmp    c0106c6b <place+0xa7>
        PUT(HDRP(bp), PACK(bp_allsize, 1));
c0106c42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c45:	83 e8 04             	sub    $0x4,%eax
c0106c48:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106c4b:	83 ca 01             	or     $0x1,%edx
c0106c4e:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(bp_allsize, 1));
c0106c50:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c53:	83 e8 04             	sub    $0x4,%eax
c0106c56:	8b 00                	mov    (%eax),%eax
c0106c58:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c5b:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c61:	01 d0                	add    %edx,%eax
c0106c63:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106c66:	83 ca 01             	or     $0x1,%edx
c0106c69:	89 10                	mov    %edx,(%eax)
}
c0106c6b:	90                   	nop
c0106c6c:	c9                   	leave  
c0106c6d:	c3                   	ret    

c0106c6e <mem_init>:

//following is head file function

void mem_init()
{
c0106c6e:	55                   	push   %ebp
c0106c6f:	89 e5                	mov    %esp,%ebp
c0106c71:	83 ec 18             	sub    $0x18,%esp
    mem_heap = &__heap_start;
c0106c74:	c7 05 48 90 12 c0 00 	movl   $0xc0132000,0xc0129048
c0106c7b:	20 13 c0 
    //mem_heap = (char*)Malloc(MAX_HEAP);
    mem_brk = mem_heap;
c0106c7e:	a1 48 90 12 c0       	mov    0xc0129048,%eax
c0106c83:	a3 4c 90 12 c0       	mov    %eax,0xc012904c
    //mem_max_addr = (char*)(mem_heap + MAX_HEAP);
    mem_max_addr = (char*)K_STACK_START;
c0106c88:	c7 05 50 90 12 c0 00 	movl   $0xffb00000,0xc0129050
c0106c8f:	00 b0 ff 
    uint8_t* pgaddr = 0;
c0106c92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if((pgaddr = vmm_alloc_page(mem_brk, PG_PREM_RW, PG_PREM_RW)) == NULL)
c0106c99:	a1 4c 90 12 c0       	mov    0xc012904c,%eax
c0106c9e:	83 ec 04             	sub    $0x4,%esp
c0106ca1:	6a 03                	push   $0x3
c0106ca3:	6a 03                	push   $0x3
c0106ca5:	50                   	push   %eax
c0106ca6:	e8 9b 04 00 00       	call   c0107146 <vmm_alloc_page>
c0106cab:	83 c4 10             	add    $0x10,%esp
c0106cae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106cb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106cb5:	74 1a                	je     c0106cd1 <mem_init+0x63>
        return;
    kprintf("malloc init phy address is 0x%x\n", pgaddr);
c0106cb7:	83 ec 08             	sub    $0x8,%esp
c0106cba:	ff 75 f4             	push   -0xc(%ebp)
c0106cbd:	68 14 b2 12 c0       	push   $0xc012b214
c0106cc2:	e8 1b 12 00 00       	call   c0107ee2 <kprintf>
c0106cc7:	83 c4 10             	add    $0x10,%esp
    malloc_init();
c0106cca:	e8 b4 00 00 00       	call   c0106d83 <malloc_init>
c0106ccf:	eb 01                	jmp    c0106cd2 <mem_init+0x64>
        return;
c0106cd1:	90                   	nop
}
c0106cd2:	c9                   	leave  
c0106cd3:	c3                   	ret    

c0106cd4 <mem_sbrk>:

void* mem_sbrk(int incr)
{
c0106cd4:	55                   	push   %ebp
c0106cd5:	89 e5                	mov    %esp,%ebp
c0106cd7:	83 ec 18             	sub    $0x18,%esp
    char* old = mem_brk;
c0106cda:	a1 4c 90 12 c0       	mov    0xc012904c,%eax
c0106cdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if((incr < 0) || ((mem_brk + incr) > mem_max_addr))
c0106ce2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106ce6:	78 14                	js     c0106cfc <mem_sbrk+0x28>
c0106ce8:	8b 15 4c 90 12 c0    	mov    0xc012904c,%edx
c0106cee:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cf1:	01 c2                	add    %eax,%edx
c0106cf3:	a1 50 90 12 c0       	mov    0xc0129050,%eax
c0106cf8:	39 c2                	cmp    %eax,%edx
c0106cfa:	76 07                	jbe    c0106d03 <mem_sbrk+0x2f>
    {
        return (void*)-1;
c0106cfc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106d01:	eb 7e                	jmp    c0106d81 <mem_sbrk+0xad>
    }
    char* new = mem_brk + incr;
c0106d03:	8b 15 4c 90 12 c0    	mov    0xc012904c,%edx
c0106d09:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d0c:	01 d0                	add    %edx,%eax
c0106d0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned int diff = PG_ALIGN(new) - PG_ALIGN(old);
c0106d11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d14:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d19:	89 c2                	mov    %eax,%edx
c0106d1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d1e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d23:	89 c1                	mov    %eax,%ecx
c0106d25:	89 d0                	mov    %edx,%eax
c0106d27:	29 c8                	sub    %ecx,%eax
c0106d29:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(diff)
c0106d2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106d30:	74 3c                	je     c0106d6e <mem_sbrk+0x9a>
    {
        uint8_t* pgaddr = -1;
c0106d32:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
        if(!(pgaddr = vmm_alloc_page(new,PG_PREM_RW,PG_PREM_RW)))
c0106d39:	83 ec 04             	sub    $0x4,%esp
c0106d3c:	6a 03                	push   $0x3
c0106d3e:	6a 03                	push   $0x3
c0106d40:	ff 75 f0             	push   -0x10(%ebp)
c0106d43:	e8 fe 03 00 00       	call   c0107146 <vmm_alloc_page>
c0106d48:	83 c4 10             	add    $0x10,%esp
c0106d4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106d4e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106d52:	75 07                	jne    c0106d5b <mem_sbrk+0x87>
        {
            return NULL;
c0106d54:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d59:	eb 26                	jmp    c0106d81 <mem_sbrk+0xad>
        }
        kprintf("head new page is 0x%x\n", pgaddr);
c0106d5b:	83 ec 08             	sub    $0x8,%esp
c0106d5e:	ff 75 e8             	push   -0x18(%ebp)
c0106d61:	68 35 b2 12 c0       	push   $0xc012b235
c0106d66:	e8 77 11 00 00       	call   c0107ee2 <kprintf>
c0106d6b:	83 c4 10             	add    $0x10,%esp
    }
    mem_brk += incr;
c0106d6e:	8b 15 4c 90 12 c0    	mov    0xc012904c,%edx
c0106d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d77:	01 d0                	add    %edx,%eax
c0106d79:	a3 4c 90 12 c0       	mov    %eax,0xc012904c
    return (void*)old;
c0106d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106d81:	c9                   	leave  
c0106d82:	c3                   	ret    

c0106d83 <malloc_init>:

int malloc_init()
{
c0106d83:	55                   	push   %ebp
c0106d84:	89 e5                	mov    %esp,%ebp
c0106d86:	83 ec 08             	sub    $0x8,%esp
    if((heap_listp = mem_sbrk(4 * WSIZE)) == (void*) - 1)
c0106d89:	83 ec 0c             	sub    $0xc,%esp
c0106d8c:	6a 10                	push   $0x10
c0106d8e:	e8 41 ff ff ff       	call   c0106cd4 <mem_sbrk>
c0106d93:	83 c4 10             	add    $0x10,%esp
c0106d96:	a3 44 90 12 c0       	mov    %eax,0xc0129044
c0106d9b:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106da0:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106da3:	75 07                	jne    c0106dac <malloc_init+0x29>
        return -1;
c0106da5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106daa:	eb 62                	jmp    c0106e0e <malloc_init+0x8b>
    PUT(heap_listp, 0);
c0106dac:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106db1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));
c0106db7:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106dbc:	83 c0 04             	add    $0x4,%eax
c0106dbf:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));
c0106dc5:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106dca:	83 c0 08             	add    $0x8,%eax
c0106dcd:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));
c0106dd3:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106dd8:	83 c0 0c             	add    $0xc,%eax
c0106ddb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    heap_listp += (2*WSIZE);
c0106de1:	a1 44 90 12 c0       	mov    0xc0129044,%eax
c0106de6:	83 c0 08             	add    $0x8,%eax
c0106de9:	a3 44 90 12 c0       	mov    %eax,0xc0129044

    //extend free heap with free blk og CHUNKSIZE size
    //mem_sbrk((CHUNKSIZE - WSIZE));
    if(extend_heap((CHUNKSIZE - WSIZE)  / WSIZE) == NULL)
c0106dee:	83 ec 0c             	sub    $0xc,%esp
c0106df1:	68 ff 03 00 00       	push   $0x3ff
c0106df6:	e8 3e fb ff ff       	call   c0106939 <extend_heap>
c0106dfb:	83 c4 10             	add    $0x10,%esp
c0106dfe:	85 c0                	test   %eax,%eax
c0106e00:	75 07                	jne    c0106e09 <malloc_init+0x86>
        return -1;
c0106e02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106e07:	eb 05                	jmp    c0106e0e <malloc_init+0x8b>
    return 0;
c0106e09:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106e0e:	c9                   	leave  
c0106e0f:	c3                   	ret    

c0106e10 <malloc_free>:

void malloc_free(void* bp)
{
c0106e10:	55                   	push   %ebp
c0106e11:	89 e5                	mov    %esp,%ebp
c0106e13:	83 ec 10             	sub    $0x10,%esp
    size_t size = GET_SIZE(HDRP(bp));
c0106e16:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e19:	83 e8 04             	sub    $0x4,%eax
c0106e1c:	8b 00                	mov    (%eax),%eax
c0106e1e:	83 e0 f8             	and    $0xfffffff8,%eax
c0106e21:	89 45 fc             	mov    %eax,-0x4(%ebp)

    PUT(HDRP(bp), PACK(size, 0));
c0106e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e27:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106e2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106e2d:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0));
c0106e2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e32:	83 e8 04             	sub    $0x4,%eax
c0106e35:	8b 00                	mov    (%eax),%eax
c0106e37:	83 e0 f8             	and    $0xfffffff8,%eax
c0106e3a:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106e3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e40:	01 c2                	add    %eax,%edx
c0106e42:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106e45:	89 02                	mov    %eax,(%edx)
    coalesce(bp);
c0106e47:	ff 75 08             	push   0x8(%ebp)
c0106e4a:	e8 74 fb ff ff       	call   c01069c3 <coalesce>
c0106e4f:	83 c4 04             	add    $0x4,%esp
}
c0106e52:	90                   	nop
c0106e53:	c9                   	leave  
c0106e54:	c3                   	ret    

c0106e55 <k_malloc>:

void* k_malloc(size_t size)
{
c0106e55:	55                   	push   %ebp
c0106e56:	89 e5                	mov    %esp,%ebp
c0106e58:	83 ec 18             	sub    $0x18,%esp
    size_t asize;
    size_t extendsize;
    char* bp;

    if(size == 0)
c0106e5b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106e5f:	75 0a                	jne    c0106e6b <k_malloc+0x16>
        return NULL;
c0106e61:	b8 00 00 00 00       	mov    $0x0,%eax
c0106e66:	e9 8a 00 00 00       	jmp    c0106ef5 <k_malloc+0xa0>
    
    //THE MIN blk is 2*DSIZE, ONE DSIZE means head and foot, one is align
    if(size <= DSIZE)
c0106e6b:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0106e6f:	77 09                	ja     c0106e7a <k_malloc+0x25>
        asize = 2 * DSIZE;
c0106e71:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c0106e78:	eb 0e                	jmp    c0106e88 <k_malloc+0x33>
    else
        asize = DSIZE * ((size + DSIZE) + (DSIZE - 1)) / DSIZE; // Round up 
c0106e7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e7d:	83 c0 0f             	add    $0xf,%eax
c0106e80:	25 ff ff ff 1f       	and    $0x1fffffff,%eax
c0106e85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //search the free list of fit
    if((bp = find_fit(asize)) != NULL)
c0106e88:	ff 75 f4             	push   -0xc(%ebp)
c0106e8b:	e8 d1 fc ff ff       	call   c0106b61 <find_fit>
c0106e90:	83 c4 04             	add    $0x4,%esp
c0106e93:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106e96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106e9a:	74 13                	je     c0106eaf <k_malloc+0x5a>
    {
        place(bp, asize);
c0106e9c:	ff 75 f4             	push   -0xc(%ebp)
c0106e9f:	ff 75 f0             	push   -0x10(%ebp)
c0106ea2:	e8 1d fd ff ff       	call   c0106bc4 <place>
c0106ea7:	83 c4 08             	add    $0x8,%esp
        return bp;
c0106eaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ead:	eb 46                	jmp    c0106ef5 <k_malloc+0xa0>
    }

    //no fit found try to extend head mem
    extendsize = MAX(asize, CHUNKSIZE);
c0106eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106eb2:	ba 00 10 00 00       	mov    $0x1000,%edx
c0106eb7:	39 d0                	cmp    %edx,%eax
c0106eb9:	0f 42 c2             	cmovb  %edx,%eax
c0106ebc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((bp = extend_heap(extendsize / WSIZE)) == NULL)
c0106ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ec2:	c1 e8 02             	shr    $0x2,%eax
c0106ec5:	83 ec 0c             	sub    $0xc,%esp
c0106ec8:	50                   	push   %eax
c0106ec9:	e8 6b fa ff ff       	call   c0106939 <extend_heap>
c0106ece:	83 c4 10             	add    $0x10,%esp
c0106ed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106ed4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106ed8:	75 07                	jne    c0106ee1 <k_malloc+0x8c>
        return NULL;
c0106eda:	b8 00 00 00 00       	mov    $0x0,%eax
c0106edf:	eb 14                	jmp    c0106ef5 <k_malloc+0xa0>
    place(bp, asize);
c0106ee1:	83 ec 08             	sub    $0x8,%esp
c0106ee4:	ff 75 f4             	push   -0xc(%ebp)
c0106ee7:	ff 75 f0             	push   -0x10(%ebp)
c0106eea:	e8 d5 fc ff ff       	call   c0106bc4 <place>
c0106eef:	83 c4 10             	add    $0x10,%esp
    return bp;
c0106ef2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ef5:	c9                   	leave  
c0106ef6:	c3                   	ret    

c0106ef7 <vmm_init>:
#include <kernel/memory/vir_mem.h>
#include <libs/mstring.h>

void vmm_init() {
c0106ef7:	55                   	push   %ebp
c0106ef8:	89 e5                	mov    %esp,%ebp
    // TODO: something here?
}
c0106efa:	90                   	nop
c0106efb:	5d                   	pop    %ebp
c0106efc:	c3                   	ret    

c0106efd <get_pd>:

// TODO: Move these nasty inline asm stuff into hal
//      These should be arch dependent
ptd_t* get_pd() {
c0106efd:	55                   	push   %ebp
c0106efe:	89 e5                	mov    %esp,%ebp
c0106f00:	83 ec 10             	sub    $0x10,%esp
    ptd_t* pd;
    #ifdef __ARCH_IA32
    __asm__(
c0106f03:	0f 20 d8             	mov    %cr3,%eax
c0106f06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "movl %%cr3, %0\n"
        "andl $0xfffff000, %0"
        : "=r"(pd)
    );
    #endif
    return P2V(pd);
c0106f0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f11:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106f16:	c9                   	leave  
c0106f17:	c3                   	ret    

c0106f18 <set_pd>:

void set_pd(ptd_t* pd) {
c0106f18:	55                   	push   %ebp
c0106f19:	89 e5                	mov    %esp,%ebp
    #ifdef __ARCH_IA32
    __asm__(
c0106f1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f1e:	89 c0                	mov    %eax,%eax
c0106f20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f25:	0f 22 d8             	mov    %eax,%cr3
        "movl %%eax, %%cr3\n"
        :
        : "r" (pd)
    );
    #endif
}
c0106f28:	90                   	nop
c0106f29:	5d                   	pop    %ebp
c0106f2a:	c3                   	ret    

c0106f2b <vmm_init_pd>:

ptd_t* vmm_init_pd() {
c0106f2b:	55                   	push   %ebp
c0106f2c:	89 e5                	mov    %esp,%ebp
c0106f2e:	83 ec 18             	sub    $0x18,%esp
    ptd_t* dir = pmm_alloc_page();
c0106f31:	e8 e3 f8 ff ff       	call   c0106819 <pmm_alloc_page>
c0106f36:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (size_t i = 0; i < 1024; i++)
c0106f39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f40:	eb 19                	jmp    c0106f5b <vmm_init_pd+0x30>
    {
        dir[i] = 0;
c0106f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f4f:	01 d0                	add    %edx,%eax
c0106f51:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < 1024; i++)
c0106f57:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106f5b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0106f62:	76 de                	jbe    c0106f42 <vmm_init_pd+0x17>
    }
    
    // 自己映射自己，方便我们在软件层面进行查表地址转换
    dir[1023] = PDE(T_SELF_REF_PERM, dir);
c0106f64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f67:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f6c:	89 c2                	mov    %eax,%edx
c0106f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f71:	05 fc 0f 00 00       	add    $0xffc,%eax
c0106f76:	83 ca 13             	or     $0x13,%edx
c0106f79:	89 10                	mov    %edx,(%eax)

    return dir;
c0106f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0106f7e:	c9                   	leave  
c0106f7f:	c3                   	ret    

c0106f80 <vmm_map_page>:

void* vmm_map_page(void* va, void* pa, pt_attr dattr, pt_attr tattr) {
c0106f80:	55                   	push   %ebp
c0106f81:	89 e5                	mov    %esp,%ebp
c0106f83:	53                   	push   %ebx
c0106f84:	83 ec 24             	sub    $0x24,%esp
    // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c0106f87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106f8b:	74 06                	je     c0106f93 <vmm_map_page+0x13>
c0106f8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106f91:	75 0a                	jne    c0106f9d <vmm_map_page+0x1d>
        return NULL;
c0106f93:	b8 00 00 00 00       	mov    $0x0,%eax
c0106f98:	e9 a4 01 00 00       	jmp    c0107141 <vmm_map_page+0x1c1>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c0106f9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa0:	c1 e8 16             	shr    $0x16,%eax
c0106fa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c0106fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa9:	c1 e8 0c             	shr    $0xc,%eax
c0106fac:	25 ff 03 00 00       	and    $0x3ff,%eax
c0106fb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c0106fb4:	c7 45 e4 00 f0 ff ff 	movl   $0xfffff000,-0x1c(%ebp)

    // 在页表与页目录中找到一个可用的空位进行映射（位于va或其附近）
    ptd_t* pde = ptd[pd_offset];
c0106fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106fc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fc8:	01 d0                	add    %edx,%eax
c0106fca:	8b 00                	mov    (%eax),%eax
c0106fcc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(pd_offset);
c0106fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fd2:	c1 e0 0c             	shl    $0xc,%eax
c0106fd5:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0106fda:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (pde && pd_offset < 1024) {
c0106fdd:	e9 9b 00 00 00       	jmp    c010707d <vmm_map_page+0xfd>
        if (pt_offset == 1024) {
c0106fe2:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
c0106fe9:	75 2d                	jne    c0107018 <vmm_map_page+0x98>
            pd_offset++;
c0106feb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            pt_offset = 0;
c0106fef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
            pde = ptd[pd_offset];
c0106ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ff9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107000:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107003:	01 d0                	add    %edx,%eax
c0107005:	8b 00                	mov    (%eax),%eax
c0107007:	89 45 ec             	mov    %eax,-0x14(%ebp)
            pt = (pt_t*)PT_VADDR(pd_offset);
c010700a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010700d:	c1 e0 0c             	shl    $0xc,%eax
c0107010:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107015:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
        // 页表有空位，只需要开辟一个新的 PTE
        if (pt && !pt[pt_offset]) {
c0107018:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010701c:	74 5b                	je     c0107079 <vmm_map_page+0xf9>
c010701e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107021:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107028:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010702b:	01 d0                	add    %edx,%eax
c010702d:	8b 00                	mov    (%eax),%eax
c010702f:	85 c0                	test   %eax,%eax
c0107031:	75 46                	jne    c0107079 <vmm_map_page+0xf9>
            pt[pt_offset] = PTE(tattr, pa);
c0107033:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107036:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010703b:	89 c1                	mov    %eax,%ecx
c010703d:	8b 45 14             	mov    0x14(%ebp),%eax
c0107040:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107045:	89 c2                	mov    %eax,%edx
c0107047:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010704a:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c0107051:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107054:	01 d8                	add    %ebx,%eax
c0107056:	09 ca                	or     %ecx,%edx
c0107058:	89 10                	mov    %edx,(%eax)
            return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c010705a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010705d:	c1 e0 16             	shl    $0x16,%eax
c0107060:	89 c2                	mov    %eax,%edx
c0107062:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107065:	c1 e0 0c             	shl    $0xc,%eax
c0107068:	09 c2                	or     %eax,%edx
c010706a:	8b 45 08             	mov    0x8(%ebp),%eax
c010706d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107072:	09 d0                	or     %edx,%eax
c0107074:	e9 c8 00 00 00       	jmp    c0107141 <vmm_map_page+0x1c1>
        }
        pt_offset++;
c0107079:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    while (pde && pd_offset < 1024) {
c010707d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107081:	74 0d                	je     c0107090 <vmm_map_page+0x110>
c0107083:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010708a:	0f 86 52 ff ff ff    	jbe    c0106fe2 <vmm_map_page+0x62>
    }
    
    // 页目录与所有页表已满！
    if (pd_offset > 1024) {
c0107090:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%ebp)
c0107097:	76 0a                	jbe    c01070a3 <vmm_map_page+0x123>
        return NULL;
c0107099:	b8 00 00 00 00       	mov    $0x0,%eax
c010709e:	e9 9e 00 00 00       	jmp    c0107141 <vmm_map_page+0x1c1>
    }

    // 页目录有空位，需要开辟一个新的 PDE
    uint8_t* new_pt_pa = pmm_alloc_page();
c01070a3:	e8 71 f7 ff ff       	call   c0106819 <pmm_alloc_page>
c01070a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    
    // 物理内存已满！
    if (!new_pt_pa) {
c01070ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01070af:	75 0a                	jne    c01070bb <vmm_map_page+0x13b>
        return NULL;
c01070b1:	b8 00 00 00 00       	mov    $0x0,%eax
c01070b6:	e9 86 00 00 00       	jmp    c0107141 <vmm_map_page+0x1c1>
    }
    
    ptd[pd_offset] = PDE(dattr, new_pt_pa);
c01070bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01070be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01070c3:	89 c1                	mov    %eax,%ecx
c01070c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01070c8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01070cd:	89 c2                	mov    %eax,%edx
c01070cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070d2:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01070d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070dc:	01 d8                	add    %ebx,%eax
c01070de:	09 ca                	or     %ecx,%edx
c01070e0:	89 10                	mov    %edx,(%eax)
    
    memset((void*)PT_VADDR(pd_offset), 0, PM_PAGE_SIZE);
c01070e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070e5:	c1 e0 0c             	shl    $0xc,%eax
c01070e8:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01070ed:	83 ec 04             	sub    $0x4,%esp
c01070f0:	68 00 10 00 00       	push   $0x1000
c01070f5:	6a 00                	push   $0x0
c01070f7:	50                   	push   %eax
c01070f8:	e8 7c 10 00 00       	call   c0108179 <memset>
c01070fd:	83 c4 10             	add    $0x10,%esp
    pt[pt_offset] = PTE(tattr, pa);
c0107100:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107103:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107108:	89 c1                	mov    %eax,%ecx
c010710a:	8b 45 14             	mov    0x14(%ebp),%eax
c010710d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107112:	89 c2                	mov    %eax,%edx
c0107114:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107117:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c010711e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107121:	01 d8                	add    %ebx,%eax
c0107123:	09 ca                	or     %ecx,%edx
c0107125:	89 10                	mov    %edx,(%eax)

    return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c0107127:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010712a:	c1 e0 16             	shl    $0x16,%eax
c010712d:	89 c2                	mov    %eax,%edx
c010712f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107132:	c1 e0 0c             	shl    $0xc,%eax
c0107135:	09 c2                	or     %eax,%edx
c0107137:	8b 45 08             	mov    0x8(%ebp),%eax
c010713a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010713f:	09 d0                	or     %edx,%eax
}
c0107141:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107144:	c9                   	leave  
c0107145:	c3                   	ret    

c0107146 <vmm_alloc_page>:

void* vmm_alloc_page(void* vpn, pt_attr dattr, pt_attr tattr) {
c0107146:	55                   	push   %ebp
c0107147:	89 e5                	mov    %esp,%ebp
c0107149:	83 ec 18             	sub    $0x18,%esp
    void* pp = pmm_alloc_page();
c010714c:	e8 c8 f6 ff ff       	call   c0106819 <pmm_alloc_page>
c0107151:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* result = vmm_map_page(vpn, pp, dattr, tattr);
c0107154:	ff 75 10             	push   0x10(%ebp)
c0107157:	ff 75 0c             	push   0xc(%ebp)
c010715a:	ff 75 f4             	push   -0xc(%ebp)
c010715d:	ff 75 08             	push   0x8(%ebp)
c0107160:	e8 1b fe ff ff       	call   c0106f80 <vmm_map_page>
c0107165:	83 c4 10             	add    $0x10,%esp
c0107168:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!result) {
c010716b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010716f:	75 0e                	jne    c010717f <vmm_alloc_page+0x39>
        pmm_free_page(pp);
c0107171:	83 ec 0c             	sub    $0xc,%esp
c0107174:	ff 75 f4             	push   -0xc(%ebp)
c0107177:	e8 85 f7 ff ff       	call   c0106901 <pmm_free_page>
c010717c:	83 c4 10             	add    $0x10,%esp
    }
    return result;
c010717f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107182:	c9                   	leave  
c0107183:	c3                   	ret    

c0107184 <vmm_unmap_page>:

void vmm_unmap_page(void* vpn) {
c0107184:	55                   	push   %ebp
c0107185:	89 e5                	mov    %esp,%ebp
c0107187:	83 ec 28             	sub    $0x28,%esp
    uintptr_t pd_offset = PD_INDEX(vpn);
c010718a:	8b 45 08             	mov    0x8(%ebp),%eax
c010718d:	c1 e8 16             	shr    $0x16,%eax
c0107190:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(vpn);
c0107193:	8b 45 08             	mov    0x8(%ebp),%eax
c0107196:	c1 e8 0c             	shr    $0xc,%eax
c0107199:	25 ff 03 00 00       	and    $0x3ff,%eax
c010719e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* self_pde = PTD_BASE_VADDR;
c01071a1:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    ptd_t pde = self_pde[pd_offset];
c01071a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01071b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01071b5:	01 d0                	add    %edx,%eax
c01071b7:	8b 00                	mov    (%eax),%eax
c01071b9:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (pde) {
c01071bc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01071c0:	74 5a                	je     c010721c <vmm_unmap_page+0x98>
        pt_t* pt = (pt_t*)PT_VADDR(pd_offset);
c01071c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071c5:	c1 e0 0c             	shl    $0xc,%eax
c01071c8:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01071cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        uint32_t pte = pt[pt_offset];
c01071d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01071da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071dd:	01 d0                	add    %edx,%eax
c01071df:	8b 00                	mov    (%eax),%eax
c01071e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (IS_CACHED(pte) && pmm_free_page(pte)) {
c01071e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071e7:	83 e0 01             	and    $0x1,%eax
c01071ea:	85 c0                	test   %eax,%eax
c01071ec:	74 19                	je     c0107207 <vmm_unmap_page+0x83>
c01071ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071f1:	83 ec 0c             	sub    $0xc,%esp
c01071f4:	50                   	push   %eax
c01071f5:	e8 07 f7 ff ff       	call   c0106901 <pmm_free_page>
c01071fa:	83 c4 10             	add    $0x10,%esp
c01071fd:	85 c0                	test   %eax,%eax
c01071ff:	74 06                	je     c0107207 <vmm_unmap_page+0x83>
            // 刷新TLB
            #ifdef __ARCH_IA32
            __asm__("invlpg (%0)" :: "r"((uintptr_t)vpn) : "memory");
c0107201:	8b 45 08             	mov    0x8(%ebp),%eax
c0107204:	0f 01 38             	invlpg (%eax)
            #endif
        }
        //if(pt_offset != 8)
        pt[pt_offset] = 0;
c0107207:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010720a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107211:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107214:	01 d0                	add    %edx,%eax
c0107216:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
}
c010721c:	90                   	nop
c010721d:	c9                   	leave  
c010721e:	c3                   	ret    

c010721f <vmm_v2p>:

void* vmm_v2p(void* va) {
c010721f:	55                   	push   %ebp
c0107220:	89 e5                	mov    %esp,%ebp
c0107222:	83 ec 20             	sub    $0x20,%esp
    uintptr_t pd_offset = PD_INDEX(va);
c0107225:	8b 45 08             	mov    0x8(%ebp),%eax
c0107228:	c1 e8 16             	shr    $0x16,%eax
c010722b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c010722e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107231:	c1 e8 0c             	shr    $0xc,%eax
c0107234:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107239:	89 45 f8             	mov    %eax,-0x8(%ebp)
    uintptr_t po = PG_OFFSET(va);
c010723c:	8b 45 08             	mov    0x8(%ebp),%eax
c010723f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ptd_t* self_pde = PTD_BASE_VADDR;
c0107247:	c7 45 f0 00 f0 ff ff 	movl   $0xfffff000,-0x10(%ebp)

    ptd_t pde = self_pde[pd_offset];
c010724e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107251:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107258:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010725b:	01 d0                	add    %edx,%eax
c010725d:	8b 00                	mov    (%eax),%eax
c010725f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pde) {
c0107262:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107266:	74 36                	je     c010729e <vmm_v2p+0x7f>
        pt_t pte = ((pt_t*)PT_VADDR(pd_offset))[pt_offset];
c0107268:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010726b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107272:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107275:	c1 e0 0c             	shl    $0xc,%eax
c0107278:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c010727d:	01 d0                	add    %edx,%eax
c010727f:	8b 00                	mov    (%eax),%eax
c0107281:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (pte) {
c0107284:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107288:	74 14                	je     c010729e <vmm_v2p+0x7f>
            uintptr_t ppn = pte >> 12;
c010728a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010728d:	c1 e8 0c             	shr    $0xc,%eax
c0107290:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            return (void*)P_ADDR(ppn, po);
c0107293:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107296:	c1 e0 0c             	shl    $0xc,%eax
c0107299:	0b 45 f4             	or     -0xc(%ebp),%eax
c010729c:	eb 05                	jmp    c01072a3 <vmm_v2p+0x84>
        }
    }

    return NULL;
c010729e:	b8 00 00 00 00       	mov    $0x0,%eax
c01072a3:	c9                   	leave  
c01072a4:	c3                   	ret    

c01072a5 <_divide_err>:
#include <libs/mstdio.h>
#include <kernel/interrupt/interupt_fun.h>
#include <vga/vga.h>

void _divide_err(unsigned long addr, int err_code)
{
c01072a5:	55                   	push   %ebp
c01072a6:	89 e5                	mov    %esp,%ebp
c01072a8:	83 ec 08             	sub    $0x8,%esp
    vga_set_show(1,VGA_COLOR_BLACK,VGA_COLOR_BLUE);
c01072ab:	83 ec 04             	sub    $0x4,%esp
c01072ae:	6a 01                	push   $0x1
c01072b0:	6a 00                	push   $0x0
c01072b2:	6a 01                	push   $0x1
c01072b4:	e8 1b ee ff ff       	call   c01060d4 <vga_set_show>
c01072b9:	83 c4 10             	add    $0x10,%esp
    kprintf("divide err addr = 0x%x,err code = %d\n", addr,err_code);
c01072bc:	83 ec 04             	sub    $0x4,%esp
c01072bf:	ff 75 0c             	push   0xc(%ebp)
c01072c2:	ff 75 08             	push   0x8(%ebp)
c01072c5:	68 4c b2 12 c0       	push   $0xc012b24c
c01072ca:	e8 13 0c 00 00       	call   c0107ee2 <kprintf>
c01072cf:	83 c4 10             	add    $0x10,%esp
}
c01072d2:	90                   	nop
c01072d3:	c9                   	leave  
c01072d4:	c3                   	ret    

c01072d5 <do_double_fault>:

void do_double_fault(unsigned long addr, int err_code)
{
c01072d5:	55                   	push   %ebp
c01072d6:	89 e5                	mov    %esp,%ebp
c01072d8:	83 ec 08             	sub    $0x8,%esp
	kprintf("double_fault addr = 0x%x,err code = %d\n", addr,err_code);
c01072db:	83 ec 04             	sub    $0x4,%esp
c01072de:	ff 75 0c             	push   0xc(%ebp)
c01072e1:	ff 75 08             	push   0x8(%ebp)
c01072e4:	68 74 b2 12 c0       	push   $0xc012b274
c01072e9:	e8 f4 0b 00 00       	call   c0107ee2 <kprintf>
c01072ee:	83 c4 10             	add    $0x10,%esp
}
c01072f1:	90                   	nop
c01072f2:	c9                   	leave  
c01072f3:	c3                   	ret    

c01072f4 <do_general_protection>:

void do_general_protection(unsigned long addr, int err_code)
{
c01072f4:	55                   	push   %ebp
c01072f5:	89 e5                	mov    %esp,%ebp
c01072f7:	83 ec 08             	sub    $0x8,%esp
	kprintf("general_protection addr = 0x%x,err code = %d\n", addr,err_code);
c01072fa:	83 ec 04             	sub    $0x4,%esp
c01072fd:	ff 75 0c             	push   0xc(%ebp)
c0107300:	ff 75 08             	push   0x8(%ebp)
c0107303:	68 9c b2 12 c0       	push   $0xc012b29c
c0107308:	e8 d5 0b 00 00       	call   c0107ee2 <kprintf>
c010730d:	83 c4 10             	add    $0x10,%esp
}
c0107310:	90                   	nop
c0107311:	c9                   	leave  
c0107312:	c3                   	ret    

c0107313 <do_int3>:


void do_int3(unsigned long addr, int err_code)
{
c0107313:	55                   	push   %ebp
c0107314:	89 e5                	mov    %esp,%ebp
c0107316:	83 ec 08             	sub    $0x8,%esp
    kprintf("int3 addr = 0x%x,err code = %d\n", addr,err_code);
c0107319:	83 ec 04             	sub    $0x4,%esp
c010731c:	ff 75 0c             	push   0xc(%ebp)
c010731f:	ff 75 08             	push   0x8(%ebp)
c0107322:	68 cc b2 12 c0       	push   $0xc012b2cc
c0107327:	e8 b6 0b 00 00       	call   c0107ee2 <kprintf>
c010732c:	83 c4 10             	add    $0x10,%esp
}
c010732f:	90                   	nop
c0107330:	c9                   	leave  
c0107331:	c3                   	ret    

c0107332 <do_nmi>:

void do_nmi(unsigned long addr, int err_code)
{
c0107332:	55                   	push   %ebp
c0107333:	89 e5                	mov    %esp,%ebp
c0107335:	83 ec 08             	sub    $0x8,%esp
	kprintf("nmi addr = 0x%x,err code = %d\n", addr,err_code);
c0107338:	83 ec 04             	sub    $0x4,%esp
c010733b:	ff 75 0c             	push   0xc(%ebp)
c010733e:	ff 75 08             	push   0x8(%ebp)
c0107341:	68 ec b2 12 c0       	push   $0xc012b2ec
c0107346:	e8 97 0b 00 00       	call   c0107ee2 <kprintf>
c010734b:	83 c4 10             	add    $0x10,%esp
}
c010734e:	90                   	nop
c010734f:	c9                   	leave  
c0107350:	c3                   	ret    

c0107351 <do_debug>:

void do_debug(unsigned long addr, int err_code)
{
c0107351:	55                   	push   %ebp
c0107352:	89 e5                	mov    %esp,%ebp
c0107354:	83 ec 08             	sub    $0x8,%esp
	kprintf("debug addr = 0x%x,err code = %d\n", addr,err_code);
c0107357:	83 ec 04             	sub    $0x4,%esp
c010735a:	ff 75 0c             	push   0xc(%ebp)
c010735d:	ff 75 08             	push   0x8(%ebp)
c0107360:	68 0c b3 12 c0       	push   $0xc012b30c
c0107365:	e8 78 0b 00 00       	call   c0107ee2 <kprintf>
c010736a:	83 c4 10             	add    $0x10,%esp
}
c010736d:	90                   	nop
c010736e:	c9                   	leave  
c010736f:	c3                   	ret    

c0107370 <do_overflow>:

void do_overflow(unsigned long addr, int err_code)
{
c0107370:	55                   	push   %ebp
c0107371:	89 e5                	mov    %esp,%ebp
c0107373:	83 ec 08             	sub    $0x8,%esp
	kprintf("overflow addr = 0x%x,err code = %d\n", addr,err_code);
c0107376:	83 ec 04             	sub    $0x4,%esp
c0107379:	ff 75 0c             	push   0xc(%ebp)
c010737c:	ff 75 08             	push   0x8(%ebp)
c010737f:	68 30 b3 12 c0       	push   $0xc012b330
c0107384:	e8 59 0b 00 00       	call   c0107ee2 <kprintf>
c0107389:	83 c4 10             	add    $0x10,%esp
}
c010738c:	90                   	nop
c010738d:	c9                   	leave  
c010738e:	c3                   	ret    

c010738f <do_bounds>:

void do_bounds(unsigned long addr, int err_code)
{
c010738f:	55                   	push   %ebp
c0107390:	89 e5                	mov    %esp,%ebp
c0107392:	83 ec 08             	sub    $0x8,%esp
	kprintf("bounds addr = 0x%x,err code = %d\n", addr,err_code);
c0107395:	83 ec 04             	sub    $0x4,%esp
c0107398:	ff 75 0c             	push   0xc(%ebp)
c010739b:	ff 75 08             	push   0x8(%ebp)
c010739e:	68 54 b3 12 c0       	push   $0xc012b354
c01073a3:	e8 3a 0b 00 00       	call   c0107ee2 <kprintf>
c01073a8:	83 c4 10             	add    $0x10,%esp
}
c01073ab:	90                   	nop
c01073ac:	c9                   	leave  
c01073ad:	c3                   	ret    

c01073ae <do_invalid_op>:

void do_invalid_op(unsigned long addr, int err_code)
{
c01073ae:	55                   	push   %ebp
c01073af:	89 e5                	mov    %esp,%ebp
c01073b1:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_op addr = 0x%x,err code = %d\n", addr,err_code);
c01073b4:	83 ec 04             	sub    $0x4,%esp
c01073b7:	ff 75 0c             	push   0xc(%ebp)
c01073ba:	ff 75 08             	push   0x8(%ebp)
c01073bd:	68 78 b3 12 c0       	push   $0xc012b378
c01073c2:	e8 1b 0b 00 00       	call   c0107ee2 <kprintf>
c01073c7:	83 c4 10             	add    $0x10,%esp
}
c01073ca:	90                   	nop
c01073cb:	c9                   	leave  
c01073cc:	c3                   	ret    

c01073cd <do_device_not_available>:

void do_device_not_available(unsigned long addr, int err_code)
{
c01073cd:	55                   	push   %ebp
c01073ce:	89 e5                	mov    %esp,%ebp
c01073d0:	83 ec 08             	sub    $0x8,%esp
	kprintf("device_not_availabel addr = 0x%x,err code = %d\n", addr,err_code);
c01073d3:	83 ec 04             	sub    $0x4,%esp
c01073d6:	ff 75 0c             	push   0xc(%ebp)
c01073d9:	ff 75 08             	push   0x8(%ebp)
c01073dc:	68 a0 b3 12 c0       	push   $0xc012b3a0
c01073e1:	e8 fc 0a 00 00       	call   c0107ee2 <kprintf>
c01073e6:	83 c4 10             	add    $0x10,%esp
}
c01073e9:	90                   	nop
c01073ea:	c9                   	leave  
c01073eb:	c3                   	ret    

c01073ec <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(unsigned long addr, int err_code)
{
c01073ec:	55                   	push   %ebp
c01073ed:	89 e5                	mov    %esp,%ebp
c01073ef:	83 ec 08             	sub    $0x8,%esp
	kprintf("coprprocessor_segment_overrun addr = 0x%x,err code = %d\n", addr,err_code);
c01073f2:	83 ec 04             	sub    $0x4,%esp
c01073f5:	ff 75 0c             	push   0xc(%ebp)
c01073f8:	ff 75 08             	push   0x8(%ebp)
c01073fb:	68 d0 b3 12 c0       	push   $0xc012b3d0
c0107400:	e8 dd 0a 00 00       	call   c0107ee2 <kprintf>
c0107405:	83 c4 10             	add    $0x10,%esp
}
c0107408:	90                   	nop
c0107409:	c9                   	leave  
c010740a:	c3                   	ret    

c010740b <do_invalid_TSS>:

void do_invalid_TSS(unsigned long addr, int err_code)
{
c010740b:	55                   	push   %ebp
c010740c:	89 e5                	mov    %esp,%ebp
c010740e:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_TSS addr = 0x%x,err code = %d\n", addr,err_code);
c0107411:	83 ec 04             	sub    $0x4,%esp
c0107414:	ff 75 0c             	push   0xc(%ebp)
c0107417:	ff 75 08             	push   0x8(%ebp)
c010741a:	68 0c b4 12 c0       	push   $0xc012b40c
c010741f:	e8 be 0a 00 00       	call   c0107ee2 <kprintf>
c0107424:	83 c4 10             	add    $0x10,%esp
}
c0107427:	90                   	nop
c0107428:	c9                   	leave  
c0107429:	c3                   	ret    

c010742a <do_segment_not_present>:

void do_segment_not_present(unsigned long addr, int err_code)
{
c010742a:	55                   	push   %ebp
c010742b:	89 e5                	mov    %esp,%ebp
c010742d:	83 ec 08             	sub    $0x8,%esp
	kprintf("segment not present addr = 0x%x,err code = %d\n", addr,err_code);
c0107430:	83 ec 04             	sub    $0x4,%esp
c0107433:	ff 75 0c             	push   0xc(%ebp)
c0107436:	ff 75 08             	push   0x8(%ebp)
c0107439:	68 34 b4 12 c0       	push   $0xc012b434
c010743e:	e8 9f 0a 00 00       	call   c0107ee2 <kprintf>
c0107443:	83 c4 10             	add    $0x10,%esp
}
c0107446:	90                   	nop
c0107447:	c9                   	leave  
c0107448:	c3                   	ret    

c0107449 <do_stack_segment>:

void do_stack_segment(unsigned long addr, int err_code)
{
c0107449:	55                   	push   %ebp
c010744a:	89 e5                	mov    %esp,%ebp
c010744c:	83 ec 08             	sub    $0x8,%esp
	kprintf("stack_segment addr = 0x%x,err code = %d\n", addr,err_code);
c010744f:	83 ec 04             	sub    $0x4,%esp
c0107452:	ff 75 0c             	push   0xc(%ebp)
c0107455:	ff 75 08             	push   0x8(%ebp)
c0107458:	68 64 b4 12 c0       	push   $0xc012b464
c010745d:	e8 80 0a 00 00       	call   c0107ee2 <kprintf>
c0107462:	83 c4 10             	add    $0x10,%esp
}
c0107465:	90                   	nop
c0107466:	c9                   	leave  
c0107467:	c3                   	ret    

c0107468 <do_coprocessor_error>:

void do_coprocessor_error(unsigned long addr, int err_code)
{
c0107468:	55                   	push   %ebp
c0107469:	89 e5                	mov    %esp,%ebp
c010746b:	83 ec 08             	sub    $0x8,%esp
    kprintf("coprocessor_err addr = 0x%x,err code = %d\n", addr,err_code);
c010746e:	83 ec 04             	sub    $0x4,%esp
c0107471:	ff 75 0c             	push   0xc(%ebp)
c0107474:	ff 75 08             	push   0x8(%ebp)
c0107477:	68 90 b4 12 c0       	push   $0xc012b490
c010747c:	e8 61 0a 00 00       	call   c0107ee2 <kprintf>
c0107481:	83 c4 10             	add    $0x10,%esp
}
c0107484:	90                   	nop
c0107485:	c9                   	leave  
c0107486:	c3                   	ret    

c0107487 <do_reserved>:

void do_reserved(unsigned long addr, int err_code)
{
c0107487:	55                   	push   %ebp
c0107488:	89 e5                	mov    %esp,%ebp
c010748a:	83 ec 08             	sub    $0x8,%esp
	kprintf("reserved addr = 0x%x,err code = %d\n", addr,err_code);
c010748d:	83 ec 04             	sub    $0x4,%esp
c0107490:	ff 75 0c             	push   0xc(%ebp)
c0107493:	ff 75 08             	push   0x8(%ebp)
c0107496:	68 bc b4 12 c0       	push   $0xc012b4bc
c010749b:	e8 42 0a 00 00       	call   c0107ee2 <kprintf>
c01074a0:	83 c4 10             	add    $0x10,%esp
}
c01074a3:	90                   	nop
c01074a4:	c9                   	leave  
c01074a5:	c3                   	ret    

c01074a6 <_no_err_code>:
c01074a6:	87 04 24             	xchg   %eax,(%esp)
c01074a9:	53                   	push   %ebx
c01074aa:	52                   	push   %edx
c01074ab:	55                   	push   %ebp
c01074ac:	1e                   	push   %ds
c01074ad:	06                   	push   %es
c01074ae:	0f a0                	push   %fs
c01074b0:	6a 00                	push   $0x0
c01074b2:	8d 54 24 20          	lea    0x20(%esp),%edx
c01074b6:	52                   	push   %edx
c01074b7:	ba 10 00 00 00       	mov    $0x10,%edx
c01074bc:	8e da                	mov    %edx,%ds
c01074be:	8e c2                	mov    %edx,%es
c01074c0:	8e e2                	mov    %edx,%fs
c01074c2:	ff d0                	call   *%eax
c01074c4:	83 c4 08             	add    $0x8,%esp
c01074c7:	0f a1                	pop    %fs
c01074c9:	07                   	pop    %es
c01074ca:	1f                   	pop    %ds
c01074cb:	5d                   	pop    %ebp
c01074cc:	5a                   	pop    %edx
c01074cd:	5b                   	pop    %ebx
c01074ce:	58                   	pop    %eax
c01074cf:	cf                   	iret   

c01074d0 <_err_code>:
c01074d0:	87 44 24 04          	xchg   %eax,0x4(%esp)
c01074d4:	87 1c 24             	xchg   %ebx,(%esp)
c01074d7:	52                   	push   %edx
c01074d8:	55                   	push   %ebp
c01074d9:	1e                   	push   %ds
c01074da:	06                   	push   %es
c01074db:	0f a0                	push   %fs
c01074dd:	50                   	push   %eax
c01074de:	8d 44 24 20          	lea    0x20(%esp),%eax
c01074e2:	50                   	push   %eax
c01074e3:	b8 10 00 00 00       	mov    $0x10,%eax
c01074e8:	8e d8                	mov    %eax,%ds
c01074ea:	8e c0                	mov    %eax,%es
c01074ec:	8e e0                	mov    %eax,%fs
c01074ee:	ff d3                	call   *%ebx
c01074f0:	83 c4 08             	add    $0x8,%esp
c01074f3:	0f a1                	pop    %fs
c01074f5:	07                   	pop    %es
c01074f6:	1f                   	pop    %ds
c01074f7:	5d                   	pop    %ebp
c01074f8:	5a                   	pop    %edx
c01074f9:	5b                   	pop    %ebx
c01074fa:	58                   	pop    %eax
c01074fb:	cf                   	iret   

c01074fc <divide_error>:
c01074fc:	68 a5 72 10 c0       	push   $0xc01072a5
c0107501:	eb a3                	jmp    c01074a6 <_no_err_code>

c0107503 <debug>:
c0107503:	68 13 73 10 c0       	push   $0xc0107313
c0107508:	eb 9c                	jmp    c01074a6 <_no_err_code>

c010750a <nmi>:
c010750a:	68 32 73 10 c0       	push   $0xc0107332
c010750f:	eb 95                	jmp    c01074a6 <_no_err_code>

c0107511 <int3>:
c0107511:	68 13 73 10 c0       	push   $0xc0107313
c0107516:	eb 8e                	jmp    c01074a6 <_no_err_code>

c0107518 <overflow>:
c0107518:	68 70 73 10 c0       	push   $0xc0107370
c010751d:	eb 87                	jmp    c01074a6 <_no_err_code>

c010751f <bounds>:
c010751f:	68 8f 73 10 c0       	push   $0xc010738f
c0107524:	eb 80                	jmp    c01074a6 <_no_err_code>

c0107526 <invalid_op>:
c0107526:	68 ae 73 10 c0       	push   $0xc01073ae
c010752b:	e9 76 ff ff ff       	jmp    c01074a6 <_no_err_code>

c0107530 <coprocessor_segment_overrun>:
c0107530:	68 ec 73 10 c0       	push   $0xc01073ec
c0107535:	e9 6c ff ff ff       	jmp    c01074a6 <_no_err_code>

c010753a <reserved>:
c010753a:	68 87 74 10 c0       	push   $0xc0107487
c010753f:	e9 62 ff ff ff       	jmp    c01074a6 <_no_err_code>

c0107544 <invalid_TSS>:
c0107544:	68 0b 74 10 c0       	push   $0xc010740b
c0107549:	eb 85                	jmp    c01074d0 <_err_code>

c010754b <segment_not_present>:
c010754b:	68 2a 74 10 c0       	push   $0xc010742a
c0107550:	e9 7b ff ff ff       	jmp    c01074d0 <_err_code>

c0107555 <stack_segment>:
c0107555:	68 49 74 10 c0       	push   $0xc0107449
c010755a:	e9 71 ff ff ff       	jmp    c01074d0 <_err_code>

c010755f <general_protection>:
c010755f:	68 f4 72 10 c0       	push   $0xc01072f4
c0107564:	e9 67 ff ff ff       	jmp    c01074d0 <_err_code>

c0107569 <__get_cpuid_max>:
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
c0107569:	55                   	push   %ebp
c010756a:	89 e5                	mov    %esp,%ebp
c010756c:	53                   	push   %ebx
c010756d:	83 ec 10             	sub    $0x10,%esp
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
c0107570:	9c                   	pushf  
c0107571:	9c                   	pushf  
c0107572:	5a                   	pop    %edx
c0107573:	89 d0                	mov    %edx,%eax
c0107575:	81 f2 00 00 20 00    	xor    $0x200000,%edx
c010757b:	52                   	push   %edx
c010757c:	9d                   	popf   
c010757d:	9c                   	pushf  
c010757e:	5a                   	pop    %edx
c010757f:	9d                   	popf   
c0107580:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0107583:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
c0107586:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107589:	33 45 f4             	xor    -0xc(%ebp),%eax
c010758c:	25 00 00 20 00       	and    $0x200000,%eax
c0107591:	85 c0                	test   %eax,%eax
c0107593:	75 07                	jne    c010759c <__get_cpuid_max+0x33>
    return 0;
c0107595:	b8 00 00 00 00       	mov    $0x0,%eax
c010759a:	eb 30                	jmp    c01075cc <__get_cpuid_max+0x63>
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
c010759c:	8b 45 08             	mov    0x8(%ebp),%eax
c010759f:	b9 00 00 00 00       	mov    $0x0,%ecx
c01075a4:	ba 00 00 00 00       	mov    $0x0,%edx
c01075a9:	89 cb                	mov    %ecx,%ebx
c01075ab:	89 d1                	mov    %edx,%ecx
c01075ad:	0f a2                	cpuid  
c01075af:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01075b2:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c01075b5:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c01075b8:	89 55 ec             	mov    %edx,-0x14(%ebp)

  if (__sig)
c01075bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01075bf:	74 08                	je     c01075c9 <__get_cpuid_max+0x60>
    *__sig = __ebx;
c01075c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075c7:	89 10                	mov    %edx,(%eax)

  return __eax;
c01075c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01075cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01075cf:	c9                   	leave  
c01075d0:	c3                   	ret    

c01075d1 <__get_cpuid>:

static __inline int
__get_cpuid (unsigned int __leaf,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
c01075d1:	55                   	push   %ebp
c01075d2:	89 e5                	mov    %esp,%ebp
c01075d4:	56                   	push   %esi
c01075d5:	53                   	push   %ebx
c01075d6:	83 ec 10             	sub    $0x10,%esp
  unsigned int __ext = __leaf & 0x80000000;
c01075d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01075dc:	25 00 00 00 80       	and    $0x80000000,%eax
c01075e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  unsigned int __maxlevel = __get_cpuid_max (__ext, 0);
c01075e4:	6a 00                	push   $0x0
c01075e6:	ff 75 f4             	push   -0xc(%ebp)
c01075e9:	e8 7b ff ff ff       	call   c0107569 <__get_cpuid_max>
c01075ee:	83 c4 08             	add    $0x8,%esp
c01075f1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (__maxlevel == 0 || __maxlevel < __leaf)
c01075f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01075f8:	74 08                	je     c0107602 <__get_cpuid+0x31>
c01075fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01075fd:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107600:	73 07                	jae    c0107609 <__get_cpuid+0x38>
    return 0;
c0107602:	b8 00 00 00 00       	mov    $0x0,%eax
c0107607:	eb 2c                	jmp    c0107635 <__get_cpuid+0x64>

  __cpuid (__leaf, *__eax, *__ebx, *__ecx, *__edx);
c0107609:	8b 45 08             	mov    0x8(%ebp),%eax
c010760c:	b9 00 00 00 00       	mov    $0x0,%ecx
c0107611:	ba 00 00 00 00       	mov    $0x0,%edx
c0107616:	89 cb                	mov    %ecx,%ebx
c0107618:	89 d1                	mov    %edx,%ecx
c010761a:	0f a2                	cpuid  
c010761c:	8b 75 0c             	mov    0xc(%ebp),%esi
c010761f:	89 06                	mov    %eax,(%esi)
c0107621:	8b 45 10             	mov    0x10(%ebp),%eax
c0107624:	89 18                	mov    %ebx,(%eax)
c0107626:	8b 45 14             	mov    0x14(%ebp),%eax
c0107629:	89 08                	mov    %ecx,(%eax)
c010762b:	8b 45 18             	mov    0x18(%ebp),%eax
c010762e:	89 10                	mov    %edx,(%eax)
  return 1;
c0107630:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0107635:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107638:	5b                   	pop    %ebx
c0107639:	5e                   	pop    %esi
c010763a:	5d                   	pop    %ebp
c010763b:	c3                   	ret    

c010763c <cpu_get_model>:
#include <kernel/cpu/cpu.h>
#include <stdint.h>
#include <cpuid.h>

void cpu_get_model(char* model_out) {
c010763c:	55                   	push   %ebp
c010763d:	89 e5                	mov    %esp,%ebp
c010763f:	83 ec 20             	sub    $0x20,%esp
    uint32_t* out = (uint32_t*)model_out;
c0107642:	8b 45 08             	mov    0x8(%ebp),%eax
c0107645:	89 45 fc             	mov    %eax,-0x4(%ebp)
    reg32 eax, ebx, edx, ecx;
    
    __get_cpuid(0, &eax, &ebx, &ecx, &edx);
c0107648:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010764b:	50                   	push   %eax
c010764c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010764f:	50                   	push   %eax
c0107650:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0107653:	50                   	push   %eax
c0107654:	8d 45 f8             	lea    -0x8(%ebp),%eax
c0107657:	50                   	push   %eax
c0107658:	6a 00                	push   $0x0
c010765a:	e8 72 ff ff ff       	call   c01075d1 <__get_cpuid>
c010765f:	83 c4 14             	add    $0x14,%esp

    out[0] = ebx;
c0107662:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107665:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107668:	89 10                	mov    %edx,(%eax)
    out[1] = edx;
c010766a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010766d:	8d 50 04             	lea    0x4(%eax),%edx
c0107670:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107673:	89 02                	mov    %eax,(%edx)
    out[2] = ecx;
c0107675:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107678:	8d 50 08             	lea    0x8(%eax),%edx
c010767b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010767e:	89 02                	mov    %eax,(%edx)
    model_out[12] = '\0';
c0107680:	8b 45 08             	mov    0x8(%ebp),%eax
c0107683:	83 c0 0c             	add    $0xc,%eax
c0107686:	c6 00 00             	movb   $0x0,(%eax)
}
c0107689:	90                   	nop
c010768a:	c9                   	leave  
c010768b:	c3                   	ret    

c010768c <cpu_brand_string_supported>:

#define BRAND_LEAF 0x80000000UL

int cpu_brand_string_supported() {
c010768c:	55                   	push   %ebp
c010768d:	89 e5                	mov    %esp,%ebp
c010768f:	83 ec 10             	sub    $0x10,%esp
    reg32 supported = __get_cpuid_max(BRAND_LEAF, 0);
c0107692:	6a 00                	push   $0x0
c0107694:	68 00 00 00 80       	push   $0x80000000
c0107699:	e8 cb fe ff ff       	call   c0107569 <__get_cpuid_max>
c010769e:	83 c4 08             	add    $0x8,%esp
c01076a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (supported >= 0x80000004UL);
c01076a4:	81 7d fc 03 00 00 80 	cmpl   $0x80000003,-0x4(%ebp)
c01076ab:	0f 97 c0             	seta   %al
c01076ae:	0f b6 c0             	movzbl %al,%eax
}
c01076b1:	c9                   	leave  
c01076b2:	c3                   	ret    

c01076b3 <cpu_get_brand>:

void cpu_get_brand(char* brand_out) {
c01076b3:	55                   	push   %ebp
c01076b4:	89 e5                	mov    %esp,%ebp
c01076b6:	83 ec 20             	sub    $0x20,%esp
    if(!cpu_brand_string_supported()) {
c01076b9:	e8 ce ff ff ff       	call   c010768c <cpu_brand_string_supported>
c01076be:	85 c0                	test   %eax,%eax
c01076c0:	75 0f                	jne    c01076d1 <cpu_get_brand+0x1e>
        brand_out[0] = '?';
c01076c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01076c5:	c6 00 3f             	movb   $0x3f,(%eax)
        brand_out[1] = '\0';
c01076c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01076cb:	83 c0 01             	add    $0x1,%eax
c01076ce:	c6 00 00             	movb   $0x0,(%eax)
    }
    uint32_t* out = (uint32_t*) brand_out;
c01076d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01076d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    reg32 eax, ebx, edx, ecx;
    for (uint32_t i = 2, j = 0; i < 5; i++)
c01076d7:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
c01076de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01076e5:	e9 83 00 00 00       	jmp    c010776d <cpu_get_brand+0xba>
    {
        __get_cpuid(BRAND_LEAF + i, &eax, &ebx, &ecx, &edx);
c01076ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01076ed:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
c01076f3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01076f6:	50                   	push   %eax
c01076f7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076fa:	50                   	push   %eax
c01076fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01076fe:	50                   	push   %eax
c01076ff:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107702:	50                   	push   %eax
c0107703:	52                   	push   %edx
c0107704:	e8 c8 fe ff ff       	call   c01075d1 <__get_cpuid>
c0107709:	83 c4 14             	add    $0x14,%esp
        out[j] = eax;
c010770c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010770f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107716:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107719:	01 c2                	add    %eax,%edx
c010771b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010771e:	89 02                	mov    %eax,(%edx)
        out[j + 1] = ebx;
c0107720:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107723:	83 c0 01             	add    $0x1,%eax
c0107726:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010772d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107730:	01 c2                	add    %eax,%edx
c0107732:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107735:	89 02                	mov    %eax,(%edx)
        out[j + 2] = ecx;
c0107737:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010773a:	83 c0 02             	add    $0x2,%eax
c010773d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107747:	01 c2                	add    %eax,%edx
c0107749:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010774c:	89 02                	mov    %eax,(%edx)
        out[j + 3] = edx;
c010774e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107751:	83 c0 03             	add    $0x3,%eax
c0107754:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010775b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010775e:	01 c2                	add    %eax,%edx
c0107760:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107763:	89 02                	mov    %eax,(%edx)
        j+=4;
c0107765:	83 45 f8 04          	addl   $0x4,-0x8(%ebp)
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0107769:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010776d:	83 7d fc 04          	cmpl   $0x4,-0x4(%ebp)
c0107771:	0f 86 73 ff ff ff    	jbe    c01076ea <cpu_get_brand+0x37>
    }
    brand_out[48] = '\0';
c0107777:	8b 45 08             	mov    0x8(%ebp),%eax
c010777a:	83 c0 30             	add    $0x30,%eax
c010777d:	c6 00 00             	movb   $0x0,(%eax)
}
c0107780:	90                   	nop
c0107781:	c9                   	leave  
c0107782:	c3                   	ret    

c0107783 <cpu_r_cr0>:

reg32 cpu_r_cr0() {
c0107783:	55                   	push   %ebp
c0107784:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr0, %eax");
c0107786:	0f 20 c0             	mov    %cr0,%eax
}
c0107789:	90                   	nop
c010778a:	5d                   	pop    %ebp
c010778b:	c3                   	ret    

c010778c <cpu_r_cr2>:

reg32 cpu_r_cr2() {
c010778c:	55                   	push   %ebp
c010778d:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr2, %eax");
c010778f:	0f 20 d0             	mov    %cr2,%eax
}
c0107792:	90                   	nop
c0107793:	5d                   	pop    %ebp
c0107794:	c3                   	ret    

c0107795 <cpu_r_cr3>:

reg32 cpu_r_cr3() {
c0107795:	55                   	push   %ebp
c0107796:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr3, %eax");
c0107798:	0f 20 d8             	mov    %cr3,%eax
}
c010779b:	90                   	nop
c010779c:	5d                   	pop    %ebp
c010779d:	c3                   	ret    

c010779e <cpu_w_cr0>:

void cpu_w_cr0(reg32 v) {
c010779e:	55                   	push   %ebp
c010779f:	89 e5                	mov    %esp,%ebp
    asm volatile (
c01077a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01077a4:	0f 22 c0             	mov    %eax,%cr0
        "mov %0, %%cr0"
        :: "r"(v)
    );
}
c01077a7:	90                   	nop
c01077a8:	5d                   	pop    %ebp
c01077a9:	c3                   	ret    

c01077aa <cpu_w_cr2>:

void cpu_w_cr2(reg32 v) {
c01077aa:	55                   	push   %ebp
c01077ab:	89 e5                	mov    %esp,%ebp
    asm volatile (
c01077ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01077b0:	0f 22 d0             	mov    %eax,%cr2
        "mov %0, %%cr2"
        :: "r"(v)
    );
}
c01077b3:	90                   	nop
c01077b4:	5d                   	pop    %ebp
c01077b5:	c3                   	ret    

c01077b6 <cpu_w_cr3>:

void cpu_w_cr3(reg32 v) {
c01077b6:	55                   	push   %ebp
c01077b7:	89 e5                	mov    %esp,%ebp
    asm volatile (
c01077b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01077bc:	0f 22 d8             	mov    %eax,%cr3
        "mov %0, %%cr3"
        :: "r"(v)
    );
}
c01077bf:	90                   	nop
c01077c0:	5d                   	pop    %ebp
c01077c1:	c3                   	ret    

c01077c2 <_set_gdt_entry>:
#define GDT_ENTRY 5

uint64_t _gdt[5];
uint16_t _gdt_limit = sizeof(_gdt) - 1;

void _set_gdt_entry(uint32_t index, uint32_t base, uint32_t limit, uint32_t flags) {
c01077c2:	55                   	push   %ebp
c01077c3:	89 e5                	mov    %esp,%ebp
c01077c5:	57                   	push   %edi
c01077c6:	56                   	push   %esi
c01077c7:	53                   	push   %ebx
c01077c8:	83 ec 0c             	sub    $0xc,%esp
    _gdt[index] = SEG_BASE_H(base) | flags | SEG_LIM_H(limit) | SEG_BASE_M(base);
c01077cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077ce:	25 00 00 00 ff       	and    $0xff000000,%eax
c01077d3:	0b 45 14             	or     0x14(%ebp),%eax
c01077d6:	89 c2                	mov    %eax,%edx
c01077d8:	8b 45 10             	mov    0x10(%ebp),%eax
c01077db:	25 00 00 0f 00       	and    $0xf0000,%eax
c01077e0:	09 c2                	or     %eax,%edx
c01077e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077e5:	c1 e8 10             	shr    $0x10,%eax
c01077e8:	0f b6 c0             	movzbl %al,%eax
c01077eb:	09 d0                	or     %edx,%eax
c01077ed:	ba 00 00 00 00       	mov    $0x0,%edx
c01077f2:	8b 75 08             	mov    0x8(%ebp),%esi
c01077f5:	89 04 f5 60 90 12 c0 	mov    %eax,-0x3fed6fa0(,%esi,8)
c01077fc:	89 14 f5 64 90 12 c0 	mov    %edx,-0x3fed6f9c(,%esi,8)
    _gdt[index] <<= 32;
c0107803:	8b 45 08             	mov    0x8(%ebp),%eax
c0107806:	8b 14 c5 64 90 12 c0 	mov    -0x3fed6f9c(,%eax,8),%edx
c010780d:	8b 04 c5 60 90 12 c0 	mov    -0x3fed6fa0(,%eax,8),%eax
c0107814:	89 c2                	mov    %eax,%edx
c0107816:	b8 00 00 00 00       	mov    $0x0,%eax
c010781b:	8b 75 08             	mov    0x8(%ebp),%esi
c010781e:	89 04 f5 60 90 12 c0 	mov    %eax,-0x3fed6fa0(,%esi,8)
c0107825:	89 14 f5 64 90 12 c0 	mov    %edx,-0x3fed6f9c(,%esi,8)
    _gdt[index] |= SEG_BASE_L(base) | SEG_LIM_L(limit);
c010782c:	8b 45 08             	mov    0x8(%ebp),%eax
c010782f:	8b 14 c5 64 90 12 c0 	mov    -0x3fed6f9c(,%eax,8),%edx
c0107836:	8b 04 c5 60 90 12 c0 	mov    -0x3fed6fa0(,%eax,8),%eax
c010783d:	8b 75 0c             	mov    0xc(%ebp),%esi
c0107840:	89 f7                	mov    %esi,%edi
c0107842:	c1 e7 10             	shl    $0x10,%edi
c0107845:	8b 75 10             	mov    0x10(%ebp),%esi
c0107848:	0f b7 f6             	movzwl %si,%esi
c010784b:	09 fe                	or     %edi,%esi
c010784d:	bf 00 00 00 00       	mov    $0x0,%edi
c0107852:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107855:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0107858:	09 f0                	or     %esi,%eax
c010785a:	89 c1                	mov    %eax,%ecx
c010785c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010785f:	09 f8                	or     %edi,%eax
c0107861:	89 c3                	mov    %eax,%ebx
c0107863:	8b 45 08             	mov    0x8(%ebp),%eax
c0107866:	89 0c c5 60 90 12 c0 	mov    %ecx,-0x3fed6fa0(,%eax,8)
c010786d:	89 1c c5 64 90 12 c0 	mov    %ebx,-0x3fed6f9c(,%eax,8)
}
c0107874:	90                   	nop
c0107875:	83 c4 0c             	add    $0xc,%esp
c0107878:	5b                   	pop    %ebx
c0107879:	5e                   	pop    %esi
c010787a:	5f                   	pop    %edi
c010787b:	5d                   	pop    %ebp
c010787c:	c3                   	ret    

c010787d <_init_gdt>:
// 
void
_init_gdt() {
c010787d:	55                   	push   %ebp
c010787e:	89 e5                	mov    %esp,%ebp
    _set_gdt_entry(0, 0, 0, 0);
c0107880:	6a 00                	push   $0x0
c0107882:	6a 00                	push   $0x0
c0107884:	6a 00                	push   $0x0
c0107886:	6a 00                	push   $0x0
c0107888:	e8 35 ff ff ff       	call   c01077c2 <_set_gdt_entry>
c010788d:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(1, 0, 0xfffff, SEG_R0_CODE);
c0107890:	68 00 9a c0 00       	push   $0xc09a00
c0107895:	68 ff ff 0f 00       	push   $0xfffff
c010789a:	6a 00                	push   $0x0
c010789c:	6a 01                	push   $0x1
c010789e:	e8 1f ff ff ff       	call   c01077c2 <_set_gdt_entry>
c01078a3:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(2, 0, 0xfffff, SEG_R0_DATA);
c01078a6:	68 00 92 c0 00       	push   $0xc09200
c01078ab:	68 ff ff 0f 00       	push   $0xfffff
c01078b0:	6a 00                	push   $0x0
c01078b2:	6a 02                	push   $0x2
c01078b4:	e8 09 ff ff ff       	call   c01077c2 <_set_gdt_entry>
c01078b9:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(3, 0, 0xfffff, SEG_R3_CODE);
c01078bc:	68 00 fa c0 00       	push   $0xc0fa00
c01078c1:	68 ff ff 0f 00       	push   $0xfffff
c01078c6:	6a 00                	push   $0x0
c01078c8:	6a 03                	push   $0x3
c01078ca:	e8 f3 fe ff ff       	call   c01077c2 <_set_gdt_entry>
c01078cf:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(4, 0, 0xfffff, SEG_R3_DATA);
c01078d2:	68 00 f2 c0 00       	push   $0xc0f200
c01078d7:	68 ff ff 0f 00       	push   $0xfffff
c01078dc:	6a 00                	push   $0x0
c01078de:	6a 04                	push   $0x4
c01078e0:	e8 dd fe ff ff       	call   c01077c2 <_set_gdt_entry>
c01078e5:	83 c4 10             	add    $0x10,%esp
c01078e8:	90                   	nop
c01078e9:	c9                   	leave  
c01078ea:	c3                   	ret    

c01078eb <_set_idt_entry>:
#define IDT_ENTRY 80

uint64_t _idt[IDT_ENTRY];
uint16_t _idt_limit = sizeof(_idt) - 1;

void _set_idt_entry(uint32_t vector, uint16_t seg_selector, void (*isr)(), uint8_t dpl) {
c01078eb:	55                   	push   %ebp
c01078ec:	89 e5                	mov    %esp,%ebp
c01078ee:	57                   	push   %edi
c01078ef:	56                   	push   %esi
c01078f0:	53                   	push   %ebx
c01078f1:	83 ec 24             	sub    $0x24,%esp
c01078f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078f7:	8b 55 14             	mov    0x14(%ebp),%edx
c01078fa:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c01078fe:	89 d0                	mov    %edx,%eax
c0107900:	88 45 d8             	mov    %al,-0x28(%ebp)
    uintptr_t offset = (uintptr_t)isr;
c0107903:	8b 45 10             	mov    0x10(%ebp),%eax
c0107906:	89 45 ec             	mov    %eax,-0x14(%ebp)
    _idt[vector] = (offset & 0xffff0000) | IDT_ATTR(dpl);
c0107909:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010790c:	66 b8 00 00          	mov    $0x0,%ax
c0107910:	89 c2                	mov    %eax,%edx
c0107912:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0107916:	c1 e0 0d             	shl    $0xd,%eax
c0107919:	25 00 60 00 00       	and    $0x6000,%eax
c010791e:	09 d0                	or     %edx,%eax
c0107920:	80 cc 8e             	or     $0x8e,%ah
c0107923:	ba 00 00 00 00       	mov    $0x0,%edx
c0107928:	8b 75 08             	mov    0x8(%ebp),%esi
c010792b:	89 04 f5 a0 90 12 c0 	mov    %eax,-0x3fed6f60(,%esi,8)
c0107932:	89 14 f5 a4 90 12 c0 	mov    %edx,-0x3fed6f5c(,%esi,8)
    _idt[vector] <<= 32;
c0107939:	8b 45 08             	mov    0x8(%ebp),%eax
c010793c:	8b 14 c5 a4 90 12 c0 	mov    -0x3fed6f5c(,%eax,8),%edx
c0107943:	8b 04 c5 a0 90 12 c0 	mov    -0x3fed6f60(,%eax,8),%eax
c010794a:	89 c2                	mov    %eax,%edx
c010794c:	b8 00 00 00 00       	mov    $0x0,%eax
c0107951:	8b 75 08             	mov    0x8(%ebp),%esi
c0107954:	89 04 f5 a0 90 12 c0 	mov    %eax,-0x3fed6f60(,%esi,8)
c010795b:	89 14 f5 a4 90 12 c0 	mov    %edx,-0x3fed6f5c(,%esi,8)
    _idt[vector] |= (seg_selector << 16) | (offset & 0x0000ffff);
c0107962:	8b 45 08             	mov    0x8(%ebp),%eax
c0107965:	8b 14 c5 a4 90 12 c0 	mov    -0x3fed6f5c(,%eax,8),%edx
c010796c:	8b 04 c5 a0 90 12 c0 	mov    -0x3fed6f60(,%eax,8),%eax
c0107973:	0f b7 75 dc          	movzwl -0x24(%ebp),%esi
c0107977:	c1 e6 10             	shl    $0x10,%esi
c010797a:	89 f7                	mov    %esi,%edi
c010797c:	8b 75 ec             	mov    -0x14(%ebp),%esi
c010797f:	0f b7 f6             	movzwl %si,%esi
c0107982:	09 fe                	or     %edi,%esi
c0107984:	bf 00 00 00 00       	mov    $0x0,%edi
c0107989:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010798c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010798f:	09 f0                	or     %esi,%eax
c0107991:	89 c1                	mov    %eax,%ecx
c0107993:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107996:	09 f8                	or     %edi,%eax
c0107998:	89 c3                	mov    %eax,%ebx
c010799a:	8b 45 08             	mov    0x8(%ebp),%eax
c010799d:	89 0c c5 a0 90 12 c0 	mov    %ecx,-0x3fed6f60(,%eax,8)
c01079a4:	89 1c c5 a4 90 12 c0 	mov    %ebx,-0x3fed6f5c(,%eax,8)
}
c01079ab:	90                   	nop
c01079ac:	83 c4 24             	add    $0x24,%esp
c01079af:	5b                   	pop    %ebx
c01079b0:	5e                   	pop    %esi
c01079b1:	5f                   	pop    %edi
c01079b2:	5d                   	pop    %ebp
c01079b3:	c3                   	ret    

c01079b4 <_init_idt>:

void _init_idt()
{
c01079b4:	55                   	push   %ebp
c01079b5:	89 e5                	mov    %esp,%ebp
c01079b7:	83 ec 10             	sub    $0x10,%esp
    _set_idt_entry(FAULT_DIVISION_ERROR, 0x08, divide_error, 0);
c01079ba:	6a 00                	push   $0x0
c01079bc:	68 fc 74 10 c0       	push   $0xc01074fc
c01079c1:	6a 08                	push   $0x8
c01079c3:	6a 00                	push   $0x0
c01079c5:	e8 21 ff ff ff       	call   c01078eb <_set_idt_entry>
c01079ca:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_TRAP_DEBUG_EXCEPTION, 0x08, debug, 0);
c01079cd:	6a 00                	push   $0x0
c01079cf:	68 03 75 10 c0       	push   $0xc0107503
c01079d4:	6a 08                	push   $0x8
c01079d6:	6a 01                	push   $0x1
c01079d8:	e8 0e ff ff ff       	call   c01078eb <_set_idt_entry>
c01079dd:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(INT_NMI, 0x08, nmi, 0);
c01079e0:	6a 00                	push   $0x0
c01079e2:	68 0a 75 10 c0       	push   $0xc010750a
c01079e7:	6a 08                	push   $0x8
c01079e9:	6a 02                	push   $0x2
c01079eb:	e8 fb fe ff ff       	call   c01078eb <_set_idt_entry>
c01079f0:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_BREAKPOINT, 0x08, int3, 0);
c01079f3:	6a 00                	push   $0x0
c01079f5:	68 11 75 10 c0       	push   $0xc0107511
c01079fa:	6a 08                	push   $0x8
c01079fc:	6a 03                	push   $0x3
c01079fe:	e8 e8 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a03:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_OVERFLOW, 0x08, overflow, 0);
c0107a06:	6a 00                	push   $0x0
c0107a08:	68 18 75 10 c0       	push   $0xc0107518
c0107a0d:	6a 08                	push   $0x8
c0107a0f:	6a 04                	push   $0x4
c0107a11:	e8 d5 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a16:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_BOUND_EXCEED, 0x08, bounds, 0);
c0107a19:	6a 00                	push   $0x0
c0107a1b:	68 1f 75 10 c0       	push   $0xc010751f
c0107a20:	6a 08                	push   $0x8
c0107a22:	6a 05                	push   $0x5
c0107a24:	e8 c2 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a29:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_OPCODE, 0x08, invalid_op, 0);
c0107a2c:	6a 00                	push   $0x0
c0107a2e:	68 26 75 10 c0       	push   $0xc0107526
c0107a33:	6a 08                	push   $0x8
c0107a35:	6a 06                	push   $0x6
c0107a37:	e8 af fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a3c:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_NO_MATH_PROCESSOR, 0x08, device_not_available, 0);
    //_set_idt_entry(ABORT_DOUBLE_FAULT, 0x08, double_fault, 0);
    _set_idt_entry(FAULT_RESERVED_0, 0x08, coprocessor_segment_overrun, 0);
c0107a3f:	6a 00                	push   $0x0
c0107a41:	68 30 75 10 c0       	push   $0xc0107530
c0107a46:	6a 08                	push   $0x8
c0107a48:	6a 09                	push   $0x9
c0107a4a:	e8 9c fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a4f:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_TSS, 0x08, invalid_TSS, 0);
c0107a52:	6a 00                	push   $0x0
c0107a54:	68 44 75 10 c0       	push   $0xc0107544
c0107a59:	6a 08                	push   $0x8
c0107a5b:	6a 0a                	push   $0xa
c0107a5d:	e8 89 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a62:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_SEG_NOT_PRESENT, 0x08, segment_not_present, 0);
c0107a65:	6a 00                	push   $0x0
c0107a67:	68 4b 75 10 c0       	push   $0xc010754b
c0107a6c:	6a 08                	push   $0x8
c0107a6e:	6a 0b                	push   $0xb
c0107a70:	e8 76 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a75:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_STACK_SEG_FAULT, 0x08, stack_segment, 0);
c0107a78:	6a 00                	push   $0x0
c0107a7a:	68 55 75 10 c0       	push   $0xc0107555
c0107a7f:	6a 08                	push   $0x8
c0107a81:	6a 0c                	push   $0xc
c0107a83:	e8 63 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a88:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_GENERAL_PROTECTION, 0x08, general_protection, 0);
c0107a8b:	6a 00                	push   $0x0
c0107a8d:	68 5f 75 10 c0       	push   $0xc010755f
c0107a92:	6a 08                	push   $0x8
c0107a94:	6a 0d                	push   $0xd
c0107a96:	e8 50 fe ff ff       	call   c01078eb <_set_idt_entry>
c0107a9b:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_PAGE_FAULT, 0x08, page_fault, 0);
    _set_idt_entry(FAULT_RESERVED_1, 0x08, reserved, 0);
c0107a9e:	6a 00                	push   $0x0
c0107aa0:	68 3a 75 10 c0       	push   $0xc010753a
c0107aa5:	6a 08                	push   $0x8
c0107aa7:	6a 0f                	push   $0xf
c0107aa9:	e8 3d fe ff ff       	call   c01078eb <_set_idt_entry>
c0107aae:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_X87_FAULT, 0x08, coprocessor_error, 0);
    for (int i=17;i<48;i++)
c0107ab1:	c7 45 fc 11 00 00 00 	movl   $0x11,-0x4(%ebp)
c0107ab8:	eb 19                	jmp    c0107ad3 <_init_idt+0x11f>
		_set_idt_entry(i, 0x08, reserved, 0);
c0107aba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107abd:	6a 00                	push   $0x0
c0107abf:	68 3a 75 10 c0       	push   $0xc010753a
c0107ac4:	6a 08                	push   $0x8
c0107ac6:	50                   	push   %eax
c0107ac7:	e8 1f fe ff ff       	call   c01078eb <_set_idt_entry>
c0107acc:	83 c4 10             	add    $0x10,%esp
    for (int i=17;i<48;i++)
c0107acf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0107ad3:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%ebp)
c0107ad7:	7e e1                	jle    c0107aba <_init_idt+0x106>
    //_set_idt_entry(45, 0x08, irq13, 0);
c0107ad9:	90                   	nop
c0107ada:	90                   	nop
c0107adb:	c9                   	leave  
c0107adc:	c3                   	ret    

c0107add <_kernel_start>:
c0107add:	e8 9b fd ff ff       	call   c010787d <_init_gdt>
c0107ae2:	68 60 90 12 c0       	push   $0xc0129060
c0107ae7:	66 ff 35 00 a0 12 c0 	pushw  0xc012a000
c0107aee:	0f 01 14 24          	lgdtl  (%esp)
c0107af2:	66 b9 10 00          	mov    $0x10,%cx
c0107af6:	8e c1                	mov    %ecx,%es
c0107af8:	8e d9                	mov    %ecx,%ds
c0107afa:	8e e1                	mov    %ecx,%fs
c0107afc:	8e e9                	mov    %ecx,%gs
c0107afe:	8e d1                	mov    %ecx,%ss
c0107b00:	66 6a 08             	pushw  $0x8
c0107b03:	68 09 7b 10 c0       	push   $0xc0107b09
c0107b08:	cb                   	lret   

c0107b09 <_after_gdt>:
c0107b09:	c7 04 24 00 10 10 00 	movl   $0x101000,(%esp)
c0107b10:	e8 08 e7 ff ff       	call   c010621d <_kernel_init>
c0107b15:	bc f0 ff bf ff       	mov    $0xffbffff0,%esp
c0107b1a:	e8 1d ea ff ff       	call   c010653c <_kernel_finnal_init>
c0107b1f:	83 ec 06             	sub    $0x6,%esp
c0107b22:	c7 44 24 02 a0 90 12 	movl   $0xc01290a0,0x2(%esp)
c0107b29:	c0 
c0107b2a:	66 a1 02 a0 12 c0    	mov    0xc012a002,%ax
c0107b30:	66 89 04 24          	mov    %ax,(%esp)
c0107b34:	0f 01 1c 24          	lidtl  (%esp)
c0107b38:	83 c4 06             	add    $0x6,%esp
c0107b3b:	e8 82 ea ff ff       	call   c01065c2 <_kernel_main>
c0107b40:	fa                   	cli    

c0107b41 <j_>:
c0107b41:	f4                   	hlt    
c0107b42:	eb fd                	jmp    c0107b41 <j_>

c0107b44 <io_inb>:

#include <stdint.h>

static inline uint8_t
io_inb(int port)
{
c0107b44:	55                   	push   %ebp
c0107b45:	89 e5                	mov    %esp,%ebp
c0107b47:	83 ec 10             	sub    $0x10,%esp
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a"(data) : "d"(port));
c0107b4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b4d:	89 c2                	mov    %eax,%edx
c0107b4f:	ec                   	in     (%dx),%al
c0107b50:	88 45 ff             	mov    %al,-0x1(%ebp)
    return data;
c0107b53:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
c0107b57:	c9                   	leave  
c0107b58:	c3                   	ret    

c0107b59 <io_outb>:
                 : "memory", "cc");
}

static inline void
io_outb(int port, uint8_t data)
{
c0107b59:	55                   	push   %ebp
c0107b5a:	89 e5                	mov    %esp,%ebp
c0107b5c:	83 ec 04             	sub    $0x4,%esp
c0107b5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b62:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0107b65:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0107b69:	8b 55 08             	mov    0x8(%ebp),%edx
c0107b6c:	ee                   	out    %al,(%dx)
}
c0107b6d:	90                   	nop
c0107b6e:	c9                   	leave  
c0107b6f:	c3                   	ret    

c0107b70 <cpu_delay>:
io_outl(int port, uint32_t data)
{
    asm volatile("outl %0,%w1" : : "a"(data), "d"(port));
}

static inline void cpu_delay(){
c0107b70:	55                   	push   %ebp
c0107b71:	89 e5                	mov    %esp,%ebp
    
        asm volatile (
c0107b73:	90                   	nop
c0107b74:	90                   	nop
c0107b75:	90                   	nop
        "nop\n"  // 执行空指令
        "nop\n"
        "nop\n"
    );
}
c0107b76:	90                   	nop
c0107b77:	5d                   	pop    %ebp
c0107b78:	c3                   	ret    

c0107b79 <init_8259>:
#include <kernel/cpu/cpu.h>
#include <init/idt.h>
#include <vga/vga.h>

void init_8259()
{
c0107b79:	55                   	push   %ebp
c0107b7a:	89 e5                	mov    %esp,%ebp
    //ICW1
    io_outb(0x20, 0x11);
c0107b7c:	6a 11                	push   $0x11
c0107b7e:	6a 20                	push   $0x20
c0107b80:	e8 d4 ff ff ff       	call   c0107b59 <io_outb>
c0107b85:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107b88:	e8 e3 ff ff ff       	call   c0107b70 <cpu_delay>
    io_outb(0xa0, 0x11);
c0107b8d:	6a 11                	push   $0x11
c0107b8f:	68 a0 00 00 00       	push   $0xa0
c0107b94:	e8 c0 ff ff ff       	call   c0107b59 <io_outb>
c0107b99:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107b9c:	e8 cf ff ff ff       	call   c0107b70 <cpu_delay>

    //ICW2
    io_outb(0x21, 0x20);
c0107ba1:	6a 20                	push   $0x20
c0107ba3:	6a 21                	push   $0x21
c0107ba5:	e8 af ff ff ff       	call   c0107b59 <io_outb>
c0107baa:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bad:	e8 be ff ff ff       	call   c0107b70 <cpu_delay>
    io_outb(0xa1, 0x28);
c0107bb2:	6a 28                	push   $0x28
c0107bb4:	68 a1 00 00 00       	push   $0xa1
c0107bb9:	e8 9b ff ff ff       	call   c0107b59 <io_outb>
c0107bbe:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bc1:	e8 aa ff ff ff       	call   c0107b70 <cpu_delay>

    //ICW3
    io_outb(0x21, 0x04);
c0107bc6:	6a 04                	push   $0x4
c0107bc8:	6a 21                	push   $0x21
c0107bca:	e8 8a ff ff ff       	call   c0107b59 <io_outb>
c0107bcf:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bd2:	e8 99 ff ff ff       	call   c0107b70 <cpu_delay>
    io_outb(0xa1, 0x02);
c0107bd7:	6a 02                	push   $0x2
c0107bd9:	68 a1 00 00 00       	push   $0xa1
c0107bde:	e8 76 ff ff ff       	call   c0107b59 <io_outb>
c0107be3:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107be6:	e8 85 ff ff ff       	call   c0107b70 <cpu_delay>

    //ICW4
    io_outb(0x21, 0x01);
c0107beb:	6a 01                	push   $0x1
c0107bed:	6a 21                	push   $0x21
c0107bef:	e8 65 ff ff ff       	call   c0107b59 <io_outb>
c0107bf4:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107bf7:	e8 74 ff ff ff       	call   c0107b70 <cpu_delay>
    io_outb(0xa1, 0x01);
c0107bfc:	6a 01                	push   $0x1
c0107bfe:	68 a1 00 00 00       	push   $0xa1
c0107c03:	e8 51 ff ff ff       	call   c0107b59 <io_outb>
c0107c08:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107c0b:	e8 60 ff ff ff       	call   c0107b70 <cpu_delay>

    //OCW1
    io_outb(0x21, 0xff);
c0107c10:	68 ff 00 00 00       	push   $0xff
c0107c15:	6a 21                	push   $0x21
c0107c17:	e8 3d ff ff ff       	call   c0107b59 <io_outb>
c0107c1c:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107c1f:	e8 4c ff ff ff       	call   c0107b70 <cpu_delay>
    io_outb(0xa1, 0xff);
c0107c24:	68 ff 00 00 00       	push   $0xff
c0107c29:	68 a1 00 00 00       	push   $0xa1
c0107c2e:	e8 26 ff ff ff       	call   c0107b59 <io_outb>
c0107c33:	83 c4 08             	add    $0x8,%esp
}
c0107c36:	90                   	nop
c0107c37:	c9                   	leave  
c0107c38:	c3                   	ret    

c0107c39 <ps2_post_cmd>:


static void ps2_post_cmd(uint8_t port, char cmd, uint16_t arg) {
c0107c39:	55                   	push   %ebp
c0107c3a:	89 e5                	mov    %esp,%ebp
c0107c3c:	83 ec 1c             	sub    $0x1c,%esp
c0107c3f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0107c42:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107c45:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c48:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0107c4b:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0107c4e:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    char result;
    // 等待PS/2输入缓冲区清空，这样我们才可以写入命令
    while((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_IFULL);
c0107c52:	90                   	nop
c0107c53:	6a 64                	push   $0x64
c0107c55:	e8 ea fe ff ff       	call   c0107b44 <io_inb>
c0107c5a:	83 c4 04             	add    $0x4,%esp
c0107c5d:	88 45 ff             	mov    %al,-0x1(%ebp)
c0107c60:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0107c64:	83 e0 02             	and    $0x2,%eax
c0107c67:	85 c0                	test   %eax,%eax
c0107c69:	75 e8                	jne    c0107c53 <ps2_post_cmd+0x1a>

    io_outb(port, cmd);
c0107c6b:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0107c6f:	0f b6 d0             	movzbl %al,%edx
c0107c72:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0107c76:	52                   	push   %edx
c0107c77:	50                   	push   %eax
c0107c78:	e8 dc fe ff ff       	call   c0107b59 <io_outb>
c0107c7d:	83 c4 08             	add    $0x8,%esp
    if (!(arg & PS2_NO_ARG)) {
c0107c80:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0107c84:	25 00 ff 00 00       	and    $0xff00,%eax
c0107c89:	85 c0                	test   %eax,%eax
c0107c8b:	75 12                	jne    c0107c9f <ps2_post_cmd+0x66>
        // 所有参数一律通过0x60传入。
        io_outb(PS2_PORT_ENC_CMDREG, (uint8_t)(arg & 0x00ff));
c0107c8d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0107c91:	0f b6 c0             	movzbl %al,%eax
c0107c94:	50                   	push   %eax
c0107c95:	6a 60                	push   $0x60
c0107c97:	e8 bd fe ff ff       	call   c0107b59 <io_outb>
c0107c9c:	83 c4 08             	add    $0x8,%esp
    }
}
c0107c9f:	90                   	nop
c0107ca0:	c9                   	leave  
c0107ca1:	c3                   	ret    

c0107ca2 <ps2_issue_cmd>:

static uint8_t ps2_issue_cmd(char cmd, uint16_t arg) {
c0107ca2:	55                   	push   %ebp
c0107ca3:	89 e5                	mov    %esp,%ebp
c0107ca5:	83 ec 18             	sub    $0x18,%esp
c0107ca8:	8b 55 08             	mov    0x8(%ebp),%edx
c0107cab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107cae:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0107cb1:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, cmd, arg);
c0107cb5:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0107cb9:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0107cbd:	52                   	push   %edx
c0107cbe:	50                   	push   %eax
c0107cbf:	6a 64                	push   $0x64
c0107cc1:	e8 73 ff ff ff       	call   c0107c39 <ps2_post_cmd>
c0107cc6:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0107cc9:	90                   	nop
c0107cca:	6a 64                	push   $0x64
c0107ccc:	e8 73 fe ff ff       	call   c0107b44 <io_inb>
c0107cd1:	83 c4 04             	add    $0x4,%esp
c0107cd4:	88 45 ff             	mov    %al,-0x1(%ebp)
c0107cd7:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0107cdb:	83 e0 01             	and    $0x1,%eax
c0107cde:	85 c0                	test   %eax,%eax
c0107ce0:	74 e8                	je     c0107cca <ps2_issue_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0107ce2:	6a 60                	push   $0x60
c0107ce4:	e8 5b fe ff ff       	call   c0107b44 <io_inb>
c0107ce9:	83 c4 04             	add    $0x4,%esp
}
c0107cec:	c9                   	leave  
c0107ced:	c3                   	ret    

c0107cee <ps2_issue_dev_cmd>:

static uint8_t ps2_issue_dev_cmd(char cmd, uint16_t arg) {
c0107cee:	55                   	push   %ebp
c0107cef:	89 e5                	mov    %esp,%ebp
c0107cf1:	83 ec 18             	sub    $0x18,%esp
c0107cf4:	8b 55 08             	mov    0x8(%ebp),%edx
c0107cf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107cfa:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0107cfd:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_ENC_CMDREG, cmd, arg);
c0107d01:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0107d05:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c0107d09:	52                   	push   %edx
c0107d0a:	50                   	push   %eax
c0107d0b:	6a 60                	push   $0x60
c0107d0d:	e8 27 ff ff ff       	call   c0107c39 <ps2_post_cmd>
c0107d12:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c0107d15:	90                   	nop
c0107d16:	6a 64                	push   $0x64
c0107d18:	e8 27 fe ff ff       	call   c0107b44 <io_inb>
c0107d1d:	83 c4 04             	add    $0x4,%esp
c0107d20:	88 45 ff             	mov    %al,-0x1(%ebp)
c0107d23:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0107d27:	83 e0 01             	and    $0x1,%eax
c0107d2a:	85 c0                	test   %eax,%eax
c0107d2c:	74 e8                	je     c0107d16 <ps2_issue_dev_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0107d2e:	6a 60                	push   $0x60
c0107d30:	e8 0f fe ff ff       	call   c0107b44 <io_inb>
c0107d35:	83 c4 04             	add    $0x4,%esp
}
c0107d38:	c9                   	leave  
c0107d39:	c3                   	ret    

c0107d3a <init_ps2k>:

void init_ps2k()
{
c0107d3a:	55                   	push   %ebp
c0107d3b:	89 e5                	mov    %esp,%ebp
c0107d3d:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0107d40:	fa                   	cli    

     // 1、禁用任何的PS/2设备
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_DISABLE, PS2_NO_ARG);
c0107d41:	68 00 ff 00 00       	push   $0xff00
c0107d46:	6a ad                	push   $0xffffffad
c0107d48:	6a 64                	push   $0x64
c0107d4a:	e8 ea fe ff ff       	call   c0107c39 <ps2_post_cmd>
c0107d4f:	83 c4 0c             	add    $0xc,%esp
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT2_DISABLE, PS2_NO_ARG);
c0107d52:	68 00 ff 00 00       	push   $0xff00
c0107d57:	6a a7                	push   $0xffffffa7
c0107d59:	6a 64                	push   $0x64
c0107d5b:	e8 d9 fe ff ff       	call   c0107c39 <ps2_post_cmd>
c0107d60:	83 c4 0c             	add    $0xc,%esp
    
    // 2、清空控制器缓冲区
    io_inb(PS2_PORT_ENC_DATA);
c0107d63:	6a 60                	push   $0x60
c0107d65:	e8 da fd ff ff       	call   c0107b44 <io_inb>
c0107d6a:	83 c4 04             	add    $0x4,%esp

    char result;

    // 3、屏蔽所有PS/2设备（端口1&2）IRQ，并且禁用键盘键码转换功能
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0107d6d:	68 00 ff 00 00       	push   $0xff00
c0107d72:	6a 20                	push   $0x20
c0107d74:	e8 29 ff ff ff       	call   c0107ca2 <ps2_issue_cmd>
c0107d79:	83 c4 08             	add    $0x8,%esp
c0107d7c:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result & ~(PS2_CFG_P1INT | PS2_CFG_P2INT | PS2_CFG_TRANSLATION);
c0107d7f:	80 65 f7 bc          	andb   $0xbc,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0107d83:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0107d88:	0f b7 c0             	movzwl %ax,%eax
c0107d8b:	50                   	push   %eax
c0107d8c:	6a 60                	push   $0x60
c0107d8e:	6a 64                	push   $0x64
c0107d90:	e8 a4 fe ff ff       	call   c0107c39 <ps2_post_cmd>
c0107d95:	83 c4 0c             	add    $0xc,%esp

    // 4、控制器自检
    result = ps2_issue_cmd(PS2_CMD_SELFTEST, PS2_NO_ARG);
c0107d98:	68 00 ff 00 00       	push   $0xff00
c0107d9d:	6a aa                	push   $0xffffffaa
c0107d9f:	e8 fe fe ff ff       	call   c0107ca2 <ps2_issue_cmd>
c0107da4:	83 c4 08             	add    $0x8,%esp
c0107da7:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != PS2_RESULT_TEST_OK) {
c0107daa:	80 7d f7 55          	cmpb   $0x55,-0x9(%ebp)
c0107dae:	74 12                	je     c0107dc2 <init_ps2k+0x88>
        kprintf("Controller self-test failed.");
c0107db0:	83 ec 0c             	sub    $0xc,%esp
c0107db3:	68 e0 b4 12 c0       	push   $0xc012b4e0
c0107db8:	e8 25 01 00 00       	call   c0107ee2 <kprintf>
c0107dbd:	83 c4 10             	add    $0x10,%esp
        goto done;
c0107dc0:	eb 72                	jmp    c0107e34 <init_ps2k+0xfa>
    }

    // 5、设备自检（端口1自检，通常是我们的键盘）
    result = ps2_issue_cmd(PS2_CMD_SELFTEST_PORT1, PS2_NO_ARG);
c0107dc2:	83 ec 08             	sub    $0x8,%esp
c0107dc5:	68 00 ff 00 00       	push   $0xff00
c0107dca:	6a ab                	push   $0xffffffab
c0107dcc:	e8 d1 fe ff ff       	call   c0107ca2 <ps2_issue_cmd>
c0107dd1:	83 c4 10             	add    $0x10,%esp
c0107dd4:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != 0) {
c0107dd7:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0107ddb:	74 12                	je     c0107def <init_ps2k+0xb5>
        kprintf("Interface test on port 1 failed.");
c0107ddd:	83 ec 0c             	sub    $0xc,%esp
c0107de0:	68 00 b5 12 c0       	push   $0xc012b500
c0107de5:	e8 f8 00 00 00       	call   c0107ee2 <kprintf>
c0107dea:	83 c4 10             	add    $0x10,%esp
        goto done;
c0107ded:	eb 45                	jmp    c0107e34 <init_ps2k+0xfa>
    }

    // 6、开启位于端口1的 IRQ，并启用端口1。不用理会端口2，那儿一般是鼠标。
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_ENABLE, PS2_NO_ARG);
c0107def:	83 ec 04             	sub    $0x4,%esp
c0107df2:	68 00 ff 00 00       	push   $0xff00
c0107df7:	6a ae                	push   $0xffffffae
c0107df9:	6a 64                	push   $0x64
c0107dfb:	e8 39 fe ff ff       	call   c0107c39 <ps2_post_cmd>
c0107e00:	83 c4 10             	add    $0x10,%esp
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0107e03:	83 ec 08             	sub    $0x8,%esp
c0107e06:	68 00 ff 00 00       	push   $0xff00
c0107e0b:	6a 20                	push   $0x20
c0107e0d:	e8 90 fe ff ff       	call   c0107ca2 <ps2_issue_cmd>
c0107e12:	83 c4 10             	add    $0x10,%esp
c0107e15:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result | PS2_CFG_P1INT;
c0107e18:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0107e1c:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0107e21:	0f b7 c0             	movzwl %ax,%eax
c0107e24:	83 ec 04             	sub    $0x4,%esp
c0107e27:	50                   	push   %eax
c0107e28:	6a 60                	push   $0x60
c0107e2a:	6a 64                	push   $0x64
c0107e2c:	e8 08 fe ff ff       	call   c0107c39 <ps2_post_cmd>
c0107e31:	83 c4 10             	add    $0x10,%esp

    // 至此，PS/2控制器和设备已完成初始化，可以正常使用。

done:
    asm volatile("sti");
c0107e34:	fb                   	sti    
}
c0107e35:	90                   	nop
c0107e36:	c9                   	leave  
c0107e37:	c3                   	ret    

c0107e38 <init_keyboard>:



void init_keyboard()
{
c0107e38:	55                   	push   %ebp
c0107e39:	89 e5                	mov    %esp,%ebp
c0107e3b:	83 ec 18             	sub    $0x18,%esp
    init_8259();
c0107e3e:	e8 36 fd ff ff       	call   c0107b79 <init_8259>

    uint8_t result = io_inb(0x21);
c0107e43:	6a 21                	push   $0x21
c0107e45:	e8 fa fc ff ff       	call   c0107b44 <io_inb>
c0107e4a:	83 c4 04             	add    $0x4,%esp
c0107e4d:	88 45 f7             	mov    %al,-0x9(%ebp)
    io_outb(0x21, result & 0xfd);
c0107e50:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0107e54:	25 fd 00 00 00       	and    $0xfd,%eax
c0107e59:	50                   	push   %eax
c0107e5a:	6a 21                	push   $0x21
c0107e5c:	e8 f8 fc ff ff       	call   c0107b59 <io_outb>
c0107e61:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0107e64:	e8 07 fd ff ff       	call   c0107b70 <cpu_delay>
    result = io_inb(0x21);
c0107e69:	6a 21                	push   $0x21
c0107e6b:	e8 d4 fc ff ff       	call   c0107b44 <io_inb>
c0107e70:	83 c4 04             	add    $0x4,%esp
c0107e73:	88 45 f7             	mov    %al,-0x9(%ebp)

    init_ps2k();
c0107e76:	e8 bf fe ff ff       	call   c0107d3a <init_ps2k>
    
    _set_idt_entry(0x21, 0x08, &handle_keywords, 0);
c0107e7b:	6a 00                	push   $0x0
c0107e7d:	68 91 7e 10 c0       	push   $0xc0107e91
c0107e82:	6a 08                	push   $0x8
c0107e84:	6a 21                	push   $0x21
c0107e86:	e8 60 fa ff ff       	call   c01078eb <_set_idt_entry>
c0107e8b:	83 c4 10             	add    $0x10,%esp
}
c0107e8e:	90                   	nop
c0107e8f:	c9                   	leave  
c0107e90:	c3                   	ret    

c0107e91 <handle_keywords>:

void handle_keywords()
{
c0107e91:	55                   	push   %ebp
c0107e92:	89 e5                	mov    %esp,%ebp
c0107e94:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0107e97:	fa                   	cli    
    char key;
    io_outb(0x61, 0x20);
c0107e98:	6a 20                	push   $0x20
c0107e9a:	6a 61                	push   $0x61
c0107e9c:	e8 b8 fc ff ff       	call   c0107b59 <io_outb>
c0107ea1:	83 c4 08             	add    $0x8,%esp
    key = io_inb(0x60);
c0107ea4:	6a 60                	push   $0x60
c0107ea6:	e8 99 fc ff ff       	call   c0107b44 <io_inb>
c0107eab:	83 c4 04             	add    $0x4,%esp
c0107eae:	88 45 f7             	mov    %al,-0x9(%ebp)

    vga_put_char(key);
c0107eb1:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c0107eb5:	83 ec 0c             	sub    $0xc,%esp
c0107eb8:	50                   	push   %eax
c0107eb9:	e8 60 e1 ff ff       	call   c010601e <vga_put_char>
c0107ebe:	83 c4 10             	add    $0x10,%esp

    io_outb(0x20, 0x20);
c0107ec1:	83 ec 08             	sub    $0x8,%esp
c0107ec4:	6a 20                	push   $0x20
c0107ec6:	6a 20                	push   $0x20
c0107ec8:	e8 8c fc ff ff       	call   c0107b59 <io_outb>
c0107ecd:	83 c4 10             	add    $0x10,%esp
    io_outb(0x20, 0x20);
c0107ed0:	83 ec 08             	sub    $0x8,%esp
c0107ed3:	6a 20                	push   $0x20
c0107ed5:	6a 20                	push   $0x20
c0107ed7:	e8 7d fc ff ff       	call   c0107b59 <io_outb>
c0107edc:	83 c4 10             	add    $0x10,%esp
c0107edf:	90                   	nop
c0107ee0:	c9                   	leave  
c0107ee1:	c3                   	ret    

c0107ee2 <kprintf>:
#include <libs/mstdio.h>
#include <vga/vga.h>
void kprintf (const char *format, ...)
{
c0107ee2:	55                   	push   %ebp
c0107ee3:	89 e5                	mov    %esp,%ebp
c0107ee5:	83 ec 38             	sub    $0x38,%esp
  char **arg = (char **) &format;
c0107ee8:	8d 45 08             	lea    0x8(%ebp),%eax
c0107eeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int c;
  char buf[20];

  arg++;
c0107eee:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  while ((c = *format++) != 0)
c0107ef2:	e9 83 01 00 00       	jmp    c010807a <kprintf+0x198>
    {
      if (c != '%')
c0107ef7:	83 7d f0 25          	cmpl   $0x25,-0x10(%ebp)
c0107efb:	74 17                	je     c0107f14 <kprintf+0x32>
        vga_put_char (c);
c0107efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f00:	0f be c0             	movsbl %al,%eax
c0107f03:	83 ec 0c             	sub    $0xc,%esp
c0107f06:	50                   	push   %eax
c0107f07:	e8 12 e1 ff ff       	call   c010601e <vga_put_char>
c0107f0c:	83 c4 10             	add    $0x10,%esp
c0107f0f:	e9 66 01 00 00       	jmp    c010807a <kprintf+0x198>
      else
        {
          char *p, *p2;
          int pad0 = 0, pad = 0;
c0107f14:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0107f1b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
          
          c = *format++;
c0107f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f25:	8d 50 01             	lea    0x1(%eax),%edx
c0107f28:	89 55 08             	mov    %edx,0x8(%ebp)
c0107f2b:	0f b6 00             	movzbl (%eax),%eax
c0107f2e:	0f be c0             	movsbl %al,%eax
c0107f31:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (c == '0')
c0107f34:	83 7d f0 30          	cmpl   $0x30,-0x10(%ebp)
c0107f38:	75 19                	jne    c0107f53 <kprintf+0x71>
            {
              pad0 = 1;
c0107f3a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
              c = *format++;
c0107f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f44:	8d 50 01             	lea    0x1(%eax),%edx
c0107f47:	89 55 08             	mov    %edx,0x8(%ebp)
c0107f4a:	0f b6 00             	movzbl (%eax),%eax
c0107f4d:	0f be c0             	movsbl %al,%eax
c0107f50:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          if (c >= '0' && c <= '9')
c0107f53:	83 7d f0 2f          	cmpl   $0x2f,-0x10(%ebp)
c0107f57:	7e 21                	jle    c0107f7a <kprintf+0x98>
c0107f59:	83 7d f0 39          	cmpl   $0x39,-0x10(%ebp)
c0107f5d:	7f 1b                	jg     c0107f7a <kprintf+0x98>
            {
              pad = c - '0';
c0107f5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f62:	83 e8 30             	sub    $0x30,%eax
c0107f65:	89 45 e0             	mov    %eax,-0x20(%ebp)
              c = *format++;
c0107f68:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f6b:	8d 50 01             	lea    0x1(%eax),%edx
c0107f6e:	89 55 08             	mov    %edx,0x8(%ebp)
c0107f71:	0f b6 00             	movzbl (%eax),%eax
c0107f74:	0f be c0             	movsbl %al,%eax
c0107f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          switch (c)
c0107f7a:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0107f7e:	74 2b                	je     c0107fab <kprintf+0xc9>
c0107f80:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c0107f84:	0f 8f d5 00 00 00    	jg     c010805f <kprintf+0x17d>
c0107f8a:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0107f8e:	74 1b                	je     c0107fab <kprintf+0xc9>
c0107f90:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c0107f94:	0f 8f c5 00 00 00    	jg     c010805f <kprintf+0x17d>
c0107f9a:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
c0107f9e:	74 0b                	je     c0107fab <kprintf+0xc9>
c0107fa0:	83 7d f0 73          	cmpl   $0x73,-0x10(%ebp)
c0107fa4:	74 2b                	je     c0107fd1 <kprintf+0xef>
c0107fa6:	e9 b4 00 00 00       	jmp    c010805f <kprintf+0x17d>
            {
            case 'd':
            case 'u':
            case 'x':
              itoa (buf, c, *((int *) arg++));
c0107fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fae:	8d 50 04             	lea    0x4(%eax),%edx
c0107fb1:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0107fb4:	8b 00                	mov    (%eax),%eax
c0107fb6:	83 ec 04             	sub    $0x4,%esp
c0107fb9:	50                   	push   %eax
c0107fba:	ff 75 f0             	push   -0x10(%ebp)
c0107fbd:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107fc0:	50                   	push   %eax
c0107fc1:	e8 d4 00 00 00       	call   c010809a <itoa>
c0107fc6:	83 c4 10             	add    $0x10,%esp
              p = buf;
c0107fc9:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107fcc:	89 45 ec             	mov    %eax,-0x14(%ebp)
              goto string;
c0107fcf:	eb 1e                	jmp    c0107fef <kprintf+0x10d>
              break;

            case 's':
              p = *arg++;
c0107fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fd4:	8d 50 04             	lea    0x4(%eax),%edx
c0107fd7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0107fda:	8b 00                	mov    (%eax),%eax
c0107fdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
              if (! p)
c0107fdf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107fe3:	75 09                	jne    c0107fee <kprintf+0x10c>
                p = "(null)";
c0107fe5:	c7 45 ec 21 b5 12 c0 	movl   $0xc012b521,-0x14(%ebp)
c0107fec:	eb 01                	jmp    c0107fef <kprintf+0x10d>

            string:
c0107fee:	90                   	nop
              for (p2 = p; *p2; p2++);
c0107fef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ff2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107ff5:	eb 04                	jmp    c0107ffb <kprintf+0x119>
c0107ff7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0107ffb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ffe:	0f b6 00             	movzbl (%eax),%eax
c0108001:	84 c0                	test   %al,%al
c0108003:	75 f2                	jne    c0107ff7 <kprintf+0x115>
              for (; p2 < p + pad; p2++)
c0108005:	eb 22                	jmp    c0108029 <kprintf+0x147>
                vga_put_char (pad0 ? '0' : ' ');
c0108007:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010800b:	74 07                	je     c0108014 <kprintf+0x132>
c010800d:	b8 30 00 00 00       	mov    $0x30,%eax
c0108012:	eb 05                	jmp    c0108019 <kprintf+0x137>
c0108014:	b8 20 00 00 00       	mov    $0x20,%eax
c0108019:	83 ec 0c             	sub    $0xc,%esp
c010801c:	50                   	push   %eax
c010801d:	e8 fc df ff ff       	call   c010601e <vga_put_char>
c0108022:	83 c4 10             	add    $0x10,%esp
              for (; p2 < p + pad; p2++)
c0108025:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0108029:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010802c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010802f:	01 d0                	add    %edx,%eax
c0108031:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108034:	72 d1                	jb     c0108007 <kprintf+0x125>
              while (*p)
c0108036:	eb 1b                	jmp    c0108053 <kprintf+0x171>
                vga_put_char (*p++);
c0108038:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010803b:	8d 50 01             	lea    0x1(%eax),%edx
c010803e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0108041:	0f b6 00             	movzbl (%eax),%eax
c0108044:	0f be c0             	movsbl %al,%eax
c0108047:	83 ec 0c             	sub    $0xc,%esp
c010804a:	50                   	push   %eax
c010804b:	e8 ce df ff ff       	call   c010601e <vga_put_char>
c0108050:	83 c4 10             	add    $0x10,%esp
              while (*p)
c0108053:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108056:	0f b6 00             	movzbl (%eax),%eax
c0108059:	84 c0                	test   %al,%al
c010805b:	75 db                	jne    c0108038 <kprintf+0x156>
              break;
c010805d:	eb 1b                	jmp    c010807a <kprintf+0x198>

            default:
              vga_put_char (*((int *) arg++));
c010805f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108062:	8d 50 04             	lea    0x4(%eax),%edx
c0108065:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108068:	8b 00                	mov    (%eax),%eax
c010806a:	0f be c0             	movsbl %al,%eax
c010806d:	83 ec 0c             	sub    $0xc,%esp
c0108070:	50                   	push   %eax
c0108071:	e8 a8 df ff ff       	call   c010601e <vga_put_char>
c0108076:	83 c4 10             	add    $0x10,%esp
              break;
c0108079:	90                   	nop
  while ((c = *format++) != 0)
c010807a:	8b 45 08             	mov    0x8(%ebp),%eax
c010807d:	8d 50 01             	lea    0x1(%eax),%edx
c0108080:	89 55 08             	mov    %edx,0x8(%ebp)
c0108083:	0f b6 00             	movzbl (%eax),%eax
c0108086:	0f be c0             	movsbl %al,%eax
c0108089:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010808c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108090:	0f 85 61 fe ff ff    	jne    c0107ef7 <kprintf+0x15>
            }
        }
    }
}
c0108096:	90                   	nop
c0108097:	90                   	nop
c0108098:	c9                   	leave  
c0108099:	c3                   	ret    

c010809a <itoa>:
#include <libs/mstdlib.h>

void
itoa (char *buf, int base, int d)
{
c010809a:	55                   	push   %ebp
c010809b:	89 e5                	mov    %esp,%ebp
c010809d:	83 ec 20             	sub    $0x20,%esp
  char *p = buf;
c01080a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01080a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  char *p1, *p2;
  unsigned long ud = d;
c01080a6:	8b 45 10             	mov    0x10(%ebp),%eax
c01080a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int divisor = 10;
c01080ac:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
  
  /* If %d is specified and D is minus, put ‘-’ in the head. */
  if (base == 'd' && d < 0)
c01080b3:	83 7d 0c 64          	cmpl   $0x64,0xc(%ebp)
c01080b7:	75 20                	jne    c01080d9 <itoa+0x3f>
c01080b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01080bd:	79 1a                	jns    c01080d9 <itoa+0x3f>
    {
      *p++ = '-';
c01080bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080c2:	8d 50 01             	lea    0x1(%eax),%edx
c01080c5:	89 55 fc             	mov    %edx,-0x4(%ebp)
c01080c8:	c6 00 2d             	movb   $0x2d,(%eax)
      buf++;
c01080cb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      ud = -d;
c01080cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01080d2:	f7 d8                	neg    %eax
c01080d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080d7:	eb 0d                	jmp    c01080e6 <itoa+0x4c>
    }
  else if (base == 'x')
c01080d9:	83 7d 0c 78          	cmpl   $0x78,0xc(%ebp)
c01080dd:	75 07                	jne    c01080e6 <itoa+0x4c>
    divisor = 16;
c01080df:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)

  /* Divide UD by DIVISOR until UD == 0. */
  do
    {
      int remainder = ud % divisor;
c01080e6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01080e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080ec:	ba 00 00 00 00       	mov    $0x0,%edx
c01080f1:	f7 f1                	div    %ecx
c01080f3:	89 d0                	mov    %edx,%eax
c01080f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
c01080f8:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
c01080fc:	7f 0a                	jg     c0108108 <itoa+0x6e>
c01080fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108101:	83 c0 30             	add    $0x30,%eax
c0108104:	89 c1                	mov    %eax,%ecx
c0108106:	eb 08                	jmp    c0108110 <itoa+0x76>
c0108108:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010810b:	83 c0 57             	add    $0x57,%eax
c010810e:	89 c1                	mov    %eax,%ecx
c0108110:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108113:	8d 50 01             	lea    0x1(%eax),%edx
c0108116:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0108119:	88 08                	mov    %cl,(%eax)
    }
  while (ud /= divisor);
c010811b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010811e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108121:	ba 00 00 00 00       	mov    $0x0,%edx
c0108126:	f7 f1                	div    %ecx
c0108128:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010812b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010812f:	75 b5                	jne    c01080e6 <itoa+0x4c>

  /* Terminate BUF. */
  *p = 0;
c0108131:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108134:	c6 00 00             	movb   $0x0,(%eax)
  
  /* Reverse BUF. */
  p1 = buf;
c0108137:	8b 45 08             	mov    0x8(%ebp),%eax
c010813a:	89 45 f8             	mov    %eax,-0x8(%ebp)
  p2 = p - 1;
c010813d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108140:	83 e8 01             	sub    $0x1,%eax
c0108143:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (p1 < p2)
c0108146:	eb 25                	jmp    c010816d <itoa+0xd3>
    {
      char tmp = *p1;
c0108148:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010814b:	0f b6 00             	movzbl (%eax),%eax
c010814e:	88 45 e7             	mov    %al,-0x19(%ebp)
      *p1 = *p2;
c0108151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108154:	0f b6 10             	movzbl (%eax),%edx
c0108157:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010815a:	88 10                	mov    %dl,(%eax)
      *p2 = tmp;
c010815c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010815f:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0108163:	88 10                	mov    %dl,(%eax)
      p1++;
c0108165:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
      p2--;
c0108169:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  while (p1 < p2)
c010816d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108170:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108173:	72 d3                	jb     c0108148 <itoa+0xae>
    }
c0108175:	90                   	nop
c0108176:	90                   	nop
c0108177:	c9                   	leave  
c0108178:	c3                   	ret    

c0108179 <memset>:
#include <libs/mstring.h>
#include <stdint.h>

void* memset(void* ptr, int value, size_t num)
{
c0108179:	55                   	push   %ebp
c010817a:	89 e5                	mov    %esp,%ebp
c010817c:	83 ec 10             	sub    $0x10,%esp
    uint8_t* c_ptr = (uint8_t*)ptr;
c010817f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108182:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (size_t i = 0; i < num; i++) {
c0108185:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010818c:	eb 11                	jmp    c010819f <memset+0x26>
        *(c_ptr + i) = (uint8_t)value;
c010818e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0108191:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108194:	01 d0                	add    %edx,%eax
c0108196:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108199:	88 10                	mov    %dl,(%eax)
    for (size_t i = 0; i < num; i++) {
c010819b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010819f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01081a2:	3b 45 10             	cmp    0x10(%ebp),%eax
c01081a5:	72 e7                	jb     c010818e <memset+0x15>
    }
    return ptr;
c01081a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01081aa:	c9                   	leave  
c01081ab:	c3                   	ret    
