
build/bin/melox.bin:     file format elf32-i386


Disassembly of section .virk_init_text:

00100000 <start-0xc>:
  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fb                   	sti    
  100009:	4f                   	dec    %edi
  10000a:	52                   	push   %edx
  10000b:	e4                   	.byte 0xe4

0010000c <start>:
  10000c:	bc 00 60 10 00       	mov    $0x106000,%esp
  100011:	68 00 10 10 00       	push   $0x101000
  100016:	53                   	push   %ebx
  100017:	e8 64 00 00 00       	call   100080 <save_multiboot_info>
  10001c:	58                   	pop    %eax
  10001d:	58                   	pop    %eax
  10001e:	68 00 60 00 00       	push   $0x6000
  100023:	68 00 c0 28 00       	push   $0x28c000
  100028:	e8 a4 02 00 00       	call   1002d1 <kerner_init>
  10002d:	8b 04 24             	mov    (%esp),%eax
  100030:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100035:	0f 22 d8             	mov    %eax,%cr3
  100038:	0f 20 c0             	mov    %cr0,%eax
  10003b:	0d 00 00 00 80       	or     $0x80000000,%eax
  100040:	0f 22 c0             	mov    %eax,%cr0
  100043:	58                   	pop    %eax
  100044:	58                   	pop    %eax
  100045:	68 ad 82 10 c0       	push   $0xc01082ad
  10004a:	c3                   	ret    

0010004b <_save_>:
extern uint8_t virkernel_start;
extern uint8_t virkernel_end ;
extern uint8_t __init_phykernel_end;
extern uint8_t _kernel_stack;

uint32_t _save_(uint8_t* destination, uint8_t* base, multiboot_uint32_t size) {
  10004b:	55                   	push   %ebp
  10004c:	89 e5                	mov    %esp,%ebp
  10004e:	83 ec 10             	sub    $0x10,%esp
    multiboot_uint32_t i = 0;
  100051:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (; i < size; i++)
  100058:	eb 19                	jmp    100073 <_save_+0x28>
    {
        *(destination + i) = *(base + i);
  10005a:	8b 55 0c             	mov    0xc(%ebp),%edx
  10005d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100060:	01 d0                	add    %edx,%eax
  100062:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100065:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100068:	01 ca                	add    %ecx,%edx
  10006a:	0f b6 00             	movzbl (%eax),%eax
  10006d:	88 02                	mov    %al,(%edx)
    for (; i < size; i++)
  10006f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100073:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100076:	3b 45 10             	cmp    0x10(%ebp),%eax
  100079:	72 df                	jb     10005a <_save_+0xf>
    }
    return i;
  10007b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10007e:	c9                   	leave  
  10007f:	c3                   	ret    

00100080 <save_multiboot_info>:

void save_multiboot_info(multiboot_info_t* mb_info, multiboot_uint8_t* dest)
{
  100080:	55                   	push   %ebp
  100081:	89 e5                	mov    %esp,%ebp
  100083:	53                   	push   %ebx
  100084:	83 ec 10             	sub    $0x10,%esp
    uint32_t current = 0;
  100087:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    uint8_t* info_b = (uint8_t*) mb_info;
  10008e:	8b 45 08             	mov    0x8(%ebp),%eax
  100091:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; current < sizeof(multiboot_info_t); current++)
  100094:	eb 19                	jmp    1000af <save_multiboot_info+0x2f>
    {
        *(dest + current) = *(info_b + current);
  100096:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100099:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10009c:	01 d0                	add    %edx,%eax
  10009e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1000a1:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000a4:	01 ca                	add    %ecx,%edx
  1000a6:	0f b6 00             	movzbl (%eax),%eax
  1000a9:	88 02                	mov    %al,(%edx)
    for (; current < sizeof(multiboot_info_t); current++)
  1000ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1000af:	83 7d f8 77          	cmpl   $0x77,-0x8(%ebp)
  1000b3:	76 e1                	jbe    100096 <save_multiboot_info+0x16>
    }

    ((multiboot_info_t*) dest)->mmap_addr = (uintptr_t)dest + current;
  1000b5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000bb:	01 c2                	add    %eax,%edx
  1000bd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000c0:	89 50 30             	mov    %edx,0x30(%eax)
    current += _save_(dest + current, (uint8_t*)mb_info->mmap_addr, mb_info->mmap_length);
  1000c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1000c6:	8b 40 2c             	mov    0x2c(%eax),%eax
  1000c9:	8b 55 08             	mov    0x8(%ebp),%edx
  1000cc:	8b 52 30             	mov    0x30(%edx),%edx
  1000cf:	89 d1                	mov    %edx,%ecx
  1000d1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1000d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1000d7:	01 da                	add    %ebx,%edx
  1000d9:	50                   	push   %eax
  1000da:	51                   	push   %ecx
  1000db:	52                   	push   %edx
  1000dc:	e8 6a ff ff ff       	call   10004b <_save_>
  1000e1:	83 c4 0c             	add    $0xc,%esp
  1000e4:	01 45 f8             	add    %eax,-0x8(%ebp)

    if (present(mb_info->flags, MULTIBOOT_INFO_DRIVE_INFO)) {
  1000e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1000ea:	8b 00                	mov    (%eax),%eax
  1000ec:	25 80 00 00 00       	and    $0x80,%eax
  1000f1:	85 c0                	test   %eax,%eax
  1000f3:	74 32                	je     100127 <save_multiboot_info+0xa7>
        ((multiboot_info_t*) dest)->drives_addr = (uintptr_t)dest + current;
  1000f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1000f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000fb:	01 c2                	add    %eax,%edx
  1000fd:	8b 45 0c             	mov    0xc(%ebp),%eax
  100100:	89 50 38             	mov    %edx,0x38(%eax)
        current += _save_(dest + current, (uint8_t*)mb_info->drives_addr, mb_info->drives_length);
  100103:	8b 45 08             	mov    0x8(%ebp),%eax
  100106:	8b 40 34             	mov    0x34(%eax),%eax
  100109:	8b 55 08             	mov    0x8(%ebp),%edx
  10010c:	8b 52 38             	mov    0x38(%edx),%edx
  10010f:	89 d1                	mov    %edx,%ecx
  100111:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  100114:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100117:	01 da                	add    %ebx,%edx
  100119:	50                   	push   %eax
  10011a:	51                   	push   %ecx
  10011b:	52                   	push   %edx
  10011c:	e8 2a ff ff ff       	call   10004b <_save_>
  100121:	83 c4 0c             	add    $0xc,%esp
  100124:	01 45 f8             	add    %eax,-0x8(%ebp)
    }
    multiboot_info_t* test = (multiboot_info_t*) dest;
  100127:	8b 45 0c             	mov    0xc(%ebp),%eax
  10012a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    multiboot_memory_map_t* testmap = (multiboot_memory_map_t*)mb_info->mmap_addr;
  10012d:	8b 45 08             	mov    0x8(%ebp),%eax
  100130:	8b 40 30             	mov    0x30(%eax),%eax
  100133:	89 45 ec             	mov    %eax,-0x14(%ebp)
}
  100136:	90                   	nop
  100137:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10013a:	c9                   	leave  
  10013b:	c3                   	ret    

0010013c <init_page>:

void init_page(ptd_t* pt)
{
  10013c:	55                   	push   %ebp
  10013d:	89 e5                	mov    %esp,%ebp
  10013f:	83 ec 30             	sub    $0x30,%esp
    SET_PDE(pt, 0, PDE(PG_PRESENT, pt + PG_MAX_ENTRIES));
  100142:	8b 45 08             	mov    0x8(%ebp),%eax
  100145:	05 00 10 00 00       	add    $0x1000,%eax
  10014a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10014f:	83 c8 01             	or     $0x1,%eax
  100152:	89 c2                	mov    %eax,%edx
  100154:	8b 45 08             	mov    0x8(%ebp),%eax
  100157:	89 10                	mov    %edx,(%eax)
    ptd_t * tmp_paged_phy_addr = pt;
  100159:	8b 45 08             	mov    0x8(%ebp),%eax
  10015c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptd_t * tmp_paget_phy_addr = pt + 1024;
  10015f:	8b 45 08             	mov    0x8(%ebp),%eax
  100162:	05 00 10 00 00       	add    $0x1000,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //identity map 1M memory
    for(uint32_t i = 0; i < 256; i++)
  10016a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100171:	eb 20                	jmp    100193 <init_page+0x57>
        *(tmp_paget_phy_addr + i) = (((i << 12) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100173:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100176:	c1 e0 0c             	shl    $0xc,%eax
  100179:	89 c2                	mov    %eax,%edx
  10017b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10017e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100185:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100188:	01 c8                	add    %ecx,%eax
  10018a:	83 ca 03             	or     $0x3,%edx
  10018d:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < 256; i++)
  10018f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100193:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
  10019a:	76 d7                	jbe    100173 <init_page+0x37>

    //identity map virkernel_init memory
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  10019c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001a3:	eb 29                	jmp    1001ce <init_page+0x92>
        *(tmp_paget_phy_addr + i + 256) = ((((i << 12) + MEM_1M) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  1001a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001a8:	c1 e0 0c             	shl    $0xc,%eax
  1001ab:	8d 90 00 00 10 00    	lea    0x100000(%eax),%edx
  1001b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001b4:	05 00 01 00 00       	add    $0x100,%eax
  1001b9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1001c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1001c3:	01 c8                	add    %ecx,%eax
  1001c5:	83 ca 03             	or     $0x3,%edx
  1001c8:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < LOADOS_PAGE_COUNT; i++)
  1001ca:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1001ce:	b8 00 60 10 00       	mov    $0x106000,%eax
  1001d3:	2d 01 f0 0f 00       	sub    $0xff001,%eax
  1001d8:	c1 e8 0c             	shr    $0xc,%eax
  1001db:	39 45 f8             	cmp    %eax,-0x8(%ebp)
  1001de:	72 c5                	jb     1001a5 <init_page+0x69>

    //now we map the kernel
    //calculate the virtrue kernrl page index
    uint32_t virk_pde_index = PD_INDEX(sym_val(virkernel_start));
  1001e0:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001e5:	c1 e8 16             	shr    $0x16,%eax
  1001e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t virk_pte_index = PT_INDEX(sym_val(virkernel_start));
  1001eb:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  1001f0:	c1 e8 0c             	shr    $0xc,%eax
  1001f3:	25 ff 03 00 00       	and    $0x3ff,%eax
  1001f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t virk_pg_counts = KERNEL_PAGE_COUNT;
  1001fb:	b8 00 20 29 c0       	mov    $0xc0292000,%eax
  100200:	05 00 10 00 00       	add    $0x1000,%eax
  100205:	83 e8 01             	sub    $0x1,%eax
  100208:	ba 00 60 10 c0       	mov    $0xc0106000,%edx
  10020d:	29 d0                	sub    %edx,%eax
  10020f:	c1 e8 0c             	shr    $0xc,%eax
  100212:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //regist the vir_kernel page to page direction
    //we give 3 pagetable to virkel, is 3 * 4 = 12 mib size
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  100215:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10021c:	eb 34                	jmp    100252 <init_page+0x116>
    {
        *(pt + virk_pde_index + i) = PDE(PG_PREM_RW, PT_ADDR(pt, PG_TABLE_KERNEL + i));
  10021e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100221:	83 c0 02             	add    $0x2,%eax
  100224:	c1 e0 0c             	shl    $0xc,%eax
  100227:	89 c2                	mov    %eax,%edx
  100229:	8b 45 08             	mov    0x8(%ebp),%eax
  10022c:	01 d0                	add    %edx,%eax
  10022e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100233:	89 c2                	mov    %eax,%edx
  100235:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100238:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10023b:	01 c8                	add    %ecx,%eax
  10023d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100244:	8b 45 08             	mov    0x8(%ebp),%eax
  100247:	01 c8                	add    %ecx,%eax
  100249:	83 ca 03             	or     $0x3,%edx
  10024c:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < PG_TABLE_STACK - PG_TABLE_KERNEL; i++)
  10024e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100252:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
  100256:	76 c6                	jbe    10021e <init_page+0xe2>
    }

    //avoid kernel size > prepared page count
    if(virk_pg_counts > (PG_TABLE_STACK - PG_TABLE_KERNEL) * 1024)
  100258:	81 7d dc 00 0c 00 00 	cmpl   $0xc00,-0x24(%ebp)
  10025f:	76 02                	jbe    100263 <init_page+0x127>
    {
        while(1);
  100261:	eb fe                	jmp    100261 <init_page+0x125>
    }

    //calcul the phy address
    uint32_t virk_phy_addr = V2P(&virkernel_start);
  100263:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
  100268:	05 00 00 00 40       	add    $0x40000000,%eax
  10026d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    //map virtrue kernel page
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  100270:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100277:	eb 36                	jmp    1002af <init_page+0x173>
    {
        *(tmp_paget_phy_addr + 1024 + virk_pte_index + i) = (((virk_phy_addr + (i << 12)) & 0xFFFFF000UL) | (PG_PREM_RW & 0xfff));
  100279:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10027c:	c1 e0 0c             	shl    $0xc,%eax
  10027f:	89 c2                	mov    %eax,%edx
  100281:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100284:	01 d0                	add    %edx,%eax
  100286:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10028b:	89 c2                	mov    %eax,%edx
  10028d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100290:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100293:	01 c8                	add    %ecx,%eax
  100295:	05 00 04 00 00       	add    $0x400,%eax
  10029a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  1002a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1002a4:	01 c8                	add    %ecx,%eax
  1002a6:	83 ca 03             	or     $0x3,%edx
  1002a9:	89 10                	mov    %edx,(%eax)
    for(uint32_t i = 0; i < virk_pg_counts; i++)
  1002ab:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1002af:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1002b2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1002b5:	72 c2                	jb     100279 <init_page+0x13d>
    }

    //self map pd, to give the pd virture address
    SET_PDE(pt, 1023, PDE(T_SELF_REF_PERM, pt));
  1002b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1002ba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1002bf:	89 c2                	mov    %eax,%edx
  1002c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1002c4:	05 fc 0f 00 00       	add    $0xffc,%eax
  1002c9:	83 ca 13             	or     $0x13,%edx
  1002cc:	89 10                	mov    %edx,(%eax)
}
  1002ce:	90                   	nop
  1002cf:	c9                   	leave  
  1002d0:	c3                   	ret    

001002d1 <kerner_init>:

void kerner_init(ptd_t* pt, uint32_t pt_size)
{
  1002d1:	55                   	push   %ebp
  1002d2:	89 e5                	mov    %esp,%ebp
  1002d4:	83 ec 10             	sub    $0x10,%esp
    uint8_t* kpg = (uint8_t*) pt;
  1002d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1002da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (uint32_t i = 0; i < pt_size; i++)
  1002dd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1002e4:	eb 0f                	jmp    1002f5 <kerner_init+0x24>
    {
        *(kpg + i) = 0;
  1002e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1002e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ec:	01 d0                	add    %edx,%eax
  1002ee:	c6 00 00             	movb   $0x0,(%eax)
    for (uint32_t i = 0; i < pt_size; i++)
  1002f1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1002f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1002fb:	72 e9                	jb     1002e6 <kerner_init+0x15>
    }
    init_page(pt);
  1002fd:	ff 75 08             	push   0x8(%ebp)
  100300:	e8 37 fe ff ff       	call   10013c <init_page>
  100305:	83 c4 04             	add    $0x4,%esp
  100308:	90                   	nop
  100309:	c9                   	leave  
  10030a:	c3                   	ret    

Disassembly of section .text:

c0106000 <init_vga_buffer>:
int XPOS = 0;

vga_attr *video;

void init_vga_buffer()
{
c0106000:	55                   	push   %ebp
c0106001:	89 e5                	mov    %esp,%ebp
    video = (vga_attr *) VIDEO;
c0106003:	c7 05 0c 90 10 c0 00 	movl   $0xb8000,0xc010900c
c010600a:	80 0b 00 
}
c010600d:	90                   	nop
c010600e:	5d                   	pop    %ebp
c010600f:	c3                   	ret    

c0106010 <set_vga_buffer>:

void set_vga_buffer(void* vga_buf)
{
c0106010:	55                   	push   %ebp
c0106011:	89 e5                	mov    %esp,%ebp
    video = (vga_attr*)vga_buf;
c0106013:	8b 45 08             	mov    0x8(%ebp),%eax
c0106016:	a3 0c 90 10 c0       	mov    %eax,0xc010900c
}
c010601b:	90                   	nop
c010601c:	5d                   	pop    %ebp
c010601d:	c3                   	ret    

c010601e <vga_put_char>:

void vga_put_char(char c)
{
c010601e:	55                   	push   %ebp
c010601f:	89 e5                	mov    %esp,%ebp
c0106021:	53                   	push   %ebx
c0106022:	83 ec 14             	sub    $0x14,%esp
c0106025:	8b 45 08             	mov    0x8(%ebp),%eax
c0106028:	88 45 f4             	mov    %al,-0xc(%ebp)
    if(c == '\n')
c010602b:	80 7d f4 0a          	cmpb   $0xa,-0xc(%ebp)
c010602f:	75 19                	jne    c010604a <vga_put_char+0x2c>
    {
        YPOS++;
c0106031:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106036:	83 c0 01             	add    $0x1,%eax
c0106039:	a3 04 90 10 c0       	mov    %eax,0xc0109004
        XPOS = 0;
c010603e:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c0106045:	00 00 00 
c0106048:	eb 54                	jmp    c010609e <vga_put_char+0x80>
    }else if(c == '\r')
c010604a:	80 7d f4 0d          	cmpb   $0xd,-0xc(%ebp)
c010604e:	75 0c                	jne    c010605c <vga_put_char+0x3e>
        XPOS = 0;
c0106050:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c0106057:	00 00 00 
c010605a:	eb 42                	jmp    c010609e <vga_put_char+0x80>
    else{
        *(video + XPOS + YPOS * WIDTH) = (theme_color | c);
c010605c:	66 0f be 55 f4       	movsbw -0xc(%ebp),%dx
c0106061:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c0106068:	09 c2                	or     %eax,%edx
c010606a:	8b 0d 0c 90 10 c0    	mov    0xc010900c,%ecx
c0106070:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106075:	89 c3                	mov    %eax,%ebx
c0106077:	89 d8                	mov    %ebx,%eax
c0106079:	c1 e0 02             	shl    $0x2,%eax
c010607c:	01 d8                	add    %ebx,%eax
c010607e:	c1 e0 04             	shl    $0x4,%eax
c0106081:	89 c3                	mov    %eax,%ebx
c0106083:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c0106088:	01 d8                	add    %ebx,%eax
c010608a:	01 c0                	add    %eax,%eax
c010608c:	01 c8                	add    %ecx,%eax
c010608e:	66 89 10             	mov    %dx,(%eax)
        XPOS++;
c0106091:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c0106096:	83 c0 01             	add    $0x1,%eax
c0106099:	a3 08 90 10 c0       	mov    %eax,0xc0109008
    }
    if (XPOS >= WIDTH)
c010609e:	a1 08 90 10 c0       	mov    0xc0109008,%eax
c01060a3:	83 f8 4f             	cmp    $0x4f,%eax
c01060a6:	7e 17                	jle    c01060bf <vga_put_char+0xa1>
    {
        YPOS++;
c01060a8:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c01060ad:	83 c0 01             	add    $0x1,%eax
c01060b0:	a3 04 90 10 c0       	mov    %eax,0xc0109004
        XPOS = 0;
c01060b5:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c01060bc:	00 00 00 
    }
    if(YPOS >= HIGHT)
c01060bf:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c01060c4:	83 f8 18             	cmp    $0x18,%eax
c01060c7:	7e 05                	jle    c01060ce <vga_put_char+0xb0>
        vga_scrollup();
c01060c9:	e8 be 00 00 00       	call   c010618c <vga_scrollup>
}
c01060ce:	90                   	nop
c01060cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01060d2:	c9                   	leave  
c01060d3:	c3                   	ret    

c01060d4 <vga_set_show>:

void vga_set_show(vga_attr flashing, vga_attr backgroud, vga_attr frontcolor)
{
c01060d4:	55                   	push   %ebp
c01060d5:	89 e5                	mov    %esp,%ebp
c01060d7:	83 ec 0c             	sub    $0xc,%esp
c01060da:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01060dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01060e3:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
c01060e7:	66 89 55 f8          	mov    %dx,-0x8(%ebp)
c01060eb:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    theme_color = (flashing << 7 | backgroud << 4 | frontcolor) << 8;
c01060ef:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01060f3:	c1 e0 07             	shl    $0x7,%eax
c01060f6:	89 c2                	mov    %eax,%edx
c01060f8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c01060fc:	c1 e0 04             	shl    $0x4,%eax
c01060ff:	09 c2                	or     %eax,%edx
c0106101:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0106105:	09 d0                	or     %edx,%eax
c0106107:	c1 e0 08             	shl    $0x8,%eax
c010610a:	66 a3 00 90 10 c0    	mov    %ax,0xc0109000
}
c0106110:	90                   	nop
c0106111:	c9                   	leave  
c0106112:	c3                   	ret    

c0106113 <vga_put_str>:

void vga_put_str(char* str)
{
c0106113:	55                   	push   %ebp
c0106114:	89 e5                	mov    %esp,%ebp
c0106116:	83 ec 08             	sub    $0x8,%esp
    while (*str != '\0')
c0106119:	eb 19                	jmp    c0106134 <vga_put_str+0x21>
    {
        vga_put_char(*str);
c010611b:	8b 45 08             	mov    0x8(%ebp),%eax
c010611e:	0f b6 00             	movzbl (%eax),%eax
c0106121:	0f be c0             	movsbl %al,%eax
c0106124:	83 ec 0c             	sub    $0xc,%esp
c0106127:	50                   	push   %eax
c0106128:	e8 f1 fe ff ff       	call   c010601e <vga_put_char>
c010612d:	83 c4 10             	add    $0x10,%esp
        str++;
c0106130:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*str != '\0')
c0106134:	8b 45 08             	mov    0x8(%ebp),%eax
c0106137:	0f b6 00             	movzbl (%eax),%eax
c010613a:	84 c0                	test   %al,%al
c010613c:	75 dd                	jne    c010611b <vga_put_str+0x8>
    }
}
c010613e:	90                   	nop
c010613f:	90                   	nop
c0106140:	c9                   	leave  
c0106141:	c3                   	ret    

c0106142 <vga_clear>:

void vga_clear()
{
c0106142:	55                   	push   %ebp
c0106143:	89 e5                	mov    %esp,%ebp
c0106145:	83 ec 10             	sub    $0x10,%esp
  
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106148:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010614f:	eb 1b                	jmp    c010616c <vga_clear+0x2a>
        *(video + i) = theme_color;
c0106151:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c0106157:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010615a:	01 c0                	add    %eax,%eax
c010615c:	01 c2                	add    %eax,%edx
c010615e:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c0106165:	66 89 02             	mov    %ax,(%edx)
    for(int i = 0; i < WIDTH * HIGHT; i++)
c0106168:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010616c:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
c0106173:	7e dc                	jle    c0106151 <vga_clear+0xf>

    XPOS = 0;
c0106175:	c7 05 08 90 10 c0 00 	movl   $0x0,0xc0109008
c010617c:	00 00 00 
    YPOS = 0;
c010617f:	c7 05 04 90 10 c0 00 	movl   $0x0,0xc0109004
c0106186:	00 00 00 
}
c0106189:	90                   	nop
c010618a:	c9                   	leave  
c010618b:	c3                   	ret    

c010618c <vga_scrollup>:

void vga_scrollup()
{
c010618c:	55                   	push   %ebp
c010618d:	89 e5                	mov    %esp,%ebp
c010618f:	83 ec 10             	sub    $0x10,%esp
    unsigned int last_line = WIDTH * (HIGHT - 1);
c0106192:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
    for (unsigned int i = 0; i < last_line; i++) {
c0106199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01061a0:	eb 27                	jmp    c01061c9 <vga_scrollup+0x3d>
        *(video + i) = *(video + WIDTH + i);
c01061a2:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c01061a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061ab:	83 c0 50             	add    $0x50,%eax
c01061ae:	01 c0                	add    %eax,%eax
c01061b0:	01 d0                	add    %edx,%eax
c01061b2:	8b 0d 0c 90 10 c0    	mov    0xc010900c,%ecx
c01061b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01061bb:	01 d2                	add    %edx,%edx
c01061bd:	01 ca                	add    %ecx,%edx
c01061bf:	0f b7 00             	movzwl (%eax),%eax
c01061c2:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < last_line; i++) {
c01061c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01061c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061cf:	72 d1                	jb     c01061a2 <vga_scrollup+0x16>
    }
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01061d8:	eb 20                	jmp    c01061fa <vga_scrollup+0x6e>
        *(video + i + last_line) = theme_color;
c01061da:	8b 15 0c 90 10 c0    	mov    0xc010900c,%edx
c01061e0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c01061e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061e6:	01 c8                	add    %ecx,%eax
c01061e8:	01 c0                	add    %eax,%eax
c01061ea:	01 c2                	add    %eax,%edx
c01061ec:	0f b7 05 00 90 10 c0 	movzwl 0xc0109000,%eax
c01061f3:	66 89 02             	mov    %ax,(%edx)
    for (unsigned int i = 0; i < WIDTH; i++) {
c01061f6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01061fa:	83 7d f8 4f          	cmpl   $0x4f,-0x8(%ebp)
c01061fe:	76 da                	jbe    c01061da <vga_scrollup+0x4e>
    }
    YPOS = YPOS == 0 ? 0 : HIGHT - 1;
c0106200:	a1 04 90 10 c0       	mov    0xc0109004,%eax
c0106205:	85 c0                	test   %eax,%eax
c0106207:	75 07                	jne    c0106210 <vga_scrollup+0x84>
c0106209:	b8 00 00 00 00       	mov    $0x0,%eax
c010620e:	eb 05                	jmp    c0106215 <vga_scrollup+0x89>
c0106210:	b8 18 00 00 00       	mov    $0x18,%eax
c0106215:	a3 04 90 10 c0       	mov    %eax,0xc0109004
c010621a:	90                   	nop
c010621b:	c9                   	leave  
c010621c:	c3                   	ret    

c010621d <_kernel_init>:

/* Forward declarations. */
void _kernel_init (unsigned long addr);

void _kernel_init(unsigned long addr)
{
c010621d:	55                   	push   %ebp
c010621e:	89 e5                	mov    %esp,%ebp
c0106220:	53                   	push   %ebx
c0106221:	83 ec 44             	sub    $0x44,%esp
    multiboot_info_t *mbi;
    mbi = (multiboot_info_t *) addr;
c0106224:	8b 45 08             	mov    0x8(%ebp),%eax
c0106227:	89 45 e8             	mov    %eax,-0x18(%ebp)
    multiboot_memory_map_t* map = (multiboot_memory_map_t*)mbi->mmap_addr;
c010622a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010622d:	8b 40 30             	mov    0x30(%eax),%eax
c0106230:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    _init_idt();
c0106233:	e8 4c 1f 00 00       	call   c0108184 <_init_idt>
    pmm_init(MEM_1MB + (mbi->mem_upper << 10));
c0106238:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010623b:	8b 40 08             	mov    0x8(%eax),%eax
c010623e:	c1 e0 0a             	shl    $0xa,%eax
c0106241:	05 00 00 10 00       	add    $0x100000,%eax
c0106246:	83 ec 0c             	sub    $0xc,%esp
c0106249:	50                   	push   %eax
c010624a:	e8 3c 04 00 00       	call   c010668b <pmm_init>
c010624f:	83 c4 10             	add    $0x10,%esp
    vmm_init();
c0106252:	e8 c3 0d 00 00       	call   c010701a <vmm_init>

    init_vga_buffer();
c0106257:	e8 a4 fd ff ff       	call   c0106000 <init_vga_buffer>
    vga_set_show(0,VGA_COLOR_BLACK,VGA_COLOR_LIGHT_WHITE);
c010625c:	83 ec 04             	sub    $0x4,%esp
c010625f:	6a 0f                	push   $0xf
c0106261:	6a 00                	push   $0x0
c0106263:	6a 00                	push   $0x0
c0106265:	e8 6a fe ff ff       	call   c01060d4 <vga_set_show>
c010626a:	83 c4 10             	add    $0x10,%esp
    /* Clear the screen. */
    vga_clear();
c010626d:	e8 d0 fe ff ff       	call   c0106142 <vga_clear>
    // }

    /* Set MBI to the address of the Multiboot information structure. */

    /* Print out the flags. */
    kprintf("flags = 0x%x\n", (unsigned) mbi->flags);
c0106272:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106275:	8b 00                	mov    (%eax),%eax
c0106277:	83 ec 08             	sub    $0x8,%esp
c010627a:	50                   	push   %eax
c010627b:	68 00 b0 28 c0       	push   $0xc028b000
c0106280:	e8 c1 26 00 00       	call   c0108946 <kprintf>
c0106285:	83 c4 10             	add    $0x10,%esp

    /* Are mem_* valid? */
    if (CHECK_FLAG(mbi->flags, 0))
c0106288:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010628b:	8b 00                	mov    (%eax),%eax
c010628d:	83 e0 01             	and    $0x1,%eax
c0106290:	85 c0                	test   %eax,%eax
c0106292:	74 1e                	je     c01062b2 <_kernel_init+0x95>
        kprintf("mem_lower = %uKB, mem_upper = %uKB\n",(unsigned) mbi->mem_lower, (unsigned) mbi->mem_upper);
c0106294:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106297:	8b 50 08             	mov    0x8(%eax),%edx
c010629a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010629d:	8b 40 04             	mov    0x4(%eax),%eax
c01062a0:	83 ec 04             	sub    $0x4,%esp
c01062a3:	52                   	push   %edx
c01062a4:	50                   	push   %eax
c01062a5:	68 10 b0 28 c0       	push   $0xc028b010
c01062aa:	e8 97 26 00 00       	call   c0108946 <kprintf>
c01062af:	83 c4 10             	add    $0x10,%esp
    
    unsigned int map_size = mbi->mmap_length / sizeof(multiboot_memory_map_t);
c01062b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01062b5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01062b8:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
c01062bd:	f7 e2                	mul    %edx
c01062bf:	89 d0                	mov    %edx,%eax
c01062c1:	c1 e8 04             	shr    $0x4,%eax
c01062c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    for (unsigned int i = 0; i < map_size; i++) {
c01062c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01062ce:	e9 1e 01 00 00       	jmp    c01063f1 <_kernel_init+0x1d4>
        multiboot_memory_map_t mmap = map[i];
c01062d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01062d6:	89 d0                	mov    %edx,%eax
c01062d8:	01 c0                	add    %eax,%eax
c01062da:	01 d0                	add    %edx,%eax
c01062dc:	c1 e0 03             	shl    $0x3,%eax
c01062df:	89 c2                	mov    %eax,%edx
c01062e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062e4:	01 d0                	add    %edx,%eax
c01062e6:	8b 10                	mov    (%eax),%edx
c01062e8:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01062eb:	8b 50 04             	mov    0x4(%eax),%edx
c01062ee:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01062f1:	8b 50 08             	mov    0x8(%eax),%edx
c01062f4:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01062f7:	8b 50 0c             	mov    0xc(%eax),%edx
c01062fa:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01062fd:	8b 50 10             	mov    0x10(%eax),%edx
c0106300:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0106303:	8b 40 14             	mov    0x14(%eax),%eax
c0106306:	89 45 d0             	mov    %eax,-0x30(%ebp)
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
               map[i].addr_low,
               map[i].len_low >> 10,
               map[i].type);
c0106309:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010630c:	89 d0                	mov    %edx,%eax
c010630e:	01 c0                	add    %eax,%eax
c0106310:	01 d0                	add    %edx,%eax
c0106312:	c1 e0 03             	shl    $0x3,%eax
c0106315:	89 c2                	mov    %eax,%edx
c0106317:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010631a:	01 d0                	add    %edx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c010631c:	8b 50 14             	mov    0x14(%eax),%edx
               map[i].len_low >> 10,
c010631f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0106322:	89 c8                	mov    %ecx,%eax
c0106324:	01 c0                	add    %eax,%eax
c0106326:	01 c8                	add    %ecx,%eax
c0106328:	c1 e0 03             	shl    $0x3,%eax
c010632b:	89 c1                	mov    %eax,%ecx
c010632d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106330:	01 c8                	add    %ecx,%eax
c0106332:	8b 40 0c             	mov    0xc(%eax),%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c0106335:	c1 e8 0a             	shr    $0xa,%eax
c0106338:	89 c3                	mov    %eax,%ebx
               map[i].addr_low,
c010633a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010633d:	89 c8                	mov    %ecx,%eax
c010633f:	01 c0                	add    %eax,%eax
c0106341:	01 c8                	add    %ecx,%eax
c0106343:	c1 e0 03             	shl    $0x3,%eax
c0106346:	89 c1                	mov    %eax,%ecx
c0106348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010634b:	01 c8                	add    %ecx,%eax
        kprintf("[MM] Base: 0x%x, len: %u KiB, type: %u\n",
c010634d:	8b 40 04             	mov    0x4(%eax),%eax
c0106350:	52                   	push   %edx
c0106351:	53                   	push   %ebx
c0106352:	50                   	push   %eax
c0106353:	68 34 b0 28 c0       	push   $0xc028b034
c0106358:	e8 e9 25 00 00       	call   c0108946 <kprintf>
c010635d:	83 c4 10             	add    $0x10,%esp
        if (mmap.type == MULTIBOOT_MEMORY_AVAILABLE) {
c0106360:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106363:	83 f8 01             	cmp    $0x1,%eax
c0106366:	0f 85 81 00 00 00    	jne    c01063ed <_kernel_init+0x1d0>
            // 整数向上取整除法
            uintptr_t pg = map[i].addr_low + 0x0fffU;
c010636c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010636f:	89 d0                	mov    %edx,%eax
c0106371:	01 c0                	add    %eax,%eax
c0106373:	01 d0                	add    %edx,%eax
c0106375:	c1 e0 03             	shl    $0x3,%eax
c0106378:	89 c2                	mov    %eax,%edx
c010637a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010637d:	01 d0                	add    %edx,%eax
c010637f:	8b 40 04             	mov    0x4(%eax),%eax
c0106382:	05 ff 0f 00 00       	add    $0xfff,%eax
c0106387:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            pmm_mark_chunk_free(pg >> 12, map[i].len_low >> 12);
c010638a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010638d:	89 d0                	mov    %edx,%eax
c010638f:	01 c0                	add    %eax,%eax
c0106391:	01 d0                	add    %edx,%eax
c0106393:	c1 e0 03             	shl    $0x3,%eax
c0106396:	89 c2                	mov    %eax,%edx
c0106398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010639b:	01 d0                	add    %edx,%eax
c010639d:	8b 40 0c             	mov    0xc(%eax),%eax
c01063a0:	c1 e8 0c             	shr    $0xc,%eax
c01063a3:	89 c2                	mov    %eax,%edx
c01063a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063a8:	c1 e8 0c             	shr    $0xc,%eax
c01063ab:	83 ec 08             	sub    $0x8,%esp
c01063ae:	52                   	push   %edx
c01063af:	50                   	push   %eax
c01063b0:	e8 bb 03 00 00       	call   c0106770 <pmm_mark_chunk_free>
c01063b5:	83 c4 10             	add    $0x10,%esp
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c01063b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01063c0:	89 c1                	mov    %eax,%ecx
                   map[i].len_low >> 12,
c01063c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01063c5:	89 d0                	mov    %edx,%eax
c01063c7:	01 c0                	add    %eax,%eax
c01063c9:	01 d0                	add    %edx,%eax
c01063cb:	c1 e0 03             	shl    $0x3,%eax
c01063ce:	89 c2                	mov    %eax,%edx
c01063d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d3:	01 d0                	add    %edx,%eax
c01063d5:	8b 40 0c             	mov    0xc(%eax),%eax
            kprintf("[MM] Freed %u pages start from 0x%x\n",
c01063d8:	c1 e8 0c             	shr    $0xc,%eax
c01063db:	83 ec 04             	sub    $0x4,%esp
c01063de:	51                   	push   %ecx
c01063df:	50                   	push   %eax
c01063e0:	68 5c b0 28 c0       	push   $0xc028b05c
c01063e5:	e8 5c 25 00 00       	call   c0108946 <kprintf>
c01063ea:	83 c4 10             	add    $0x10,%esp
    for (unsigned int i = 0; i < map_size; i++) {
c01063ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01063f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063f4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01063f7:	0f 82 d6 fe ff ff    	jb     c01062d3 <_kernel_init+0xb6>
                   pg & ~0x0fffU);
        }
    }

    // 将内核占据的页设为已占用
    size_t pg_count = (uintptr_t)(&virkernel_end  - &virkernel_start) >> 12;
c01063fd:	b8 00 20 29 c0       	mov    $0xc0292000,%eax
c0106402:	2d 00 60 10 c0       	sub    $0xc0106000,%eax
c0106407:	c1 e8 0c             	shr    $0xc,%eax
c010640a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    pmm_mark_chunk_occupied(KERNEL_PID, V2P(&virkernel_start) >> 12, pg_count, 0);
c010640d:	b8 00 60 10 c0       	mov    $0xc0106000,%eax
c0106412:	05 00 00 00 40       	add    $0x40000000,%eax
c0106417:	c1 e8 0c             	shr    $0xc,%eax
c010641a:	6a 00                	push   $0x0
c010641c:	ff 75 dc             	push   -0x24(%ebp)
c010641f:	50                   	push   %eax
c0106420:	6a ff                	push   $0xffffffff
c0106422:	e8 8c 03 00 00       	call   c01067b3 <pmm_mark_chunk_occupied>
c0106427:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Allocated %d pages for kernel.\n", pg_count);
c010642a:	83 ec 08             	sub    $0x8,%esp
c010642d:	ff 75 dc             	push   -0x24(%ebp)
c0106430:	68 84 b0 28 c0       	push   $0xc028b084
c0106435:	e8 0c 25 00 00       	call   c0108946 <kprintf>
c010643a:	83 c4 10             	add    $0x10,%esp

    size_t vga_buf_pgs = VGA_BUFFER_SIZE >> 12;
c010643d:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
    
    // 首先，标记VGA部分为已占用
    pmm_mark_chunk_occupied(KERNEL_PID, VIDEO >> 12, vga_buf_pgs, 0);
c0106444:	6a 00                	push   $0x0
c0106446:	ff 75 d8             	push   -0x28(%ebp)
c0106449:	68 b8 00 00 00       	push   $0xb8
c010644e:	6a ff                	push   $0xffffffff
c0106450:	e8 5e 03 00 00       	call   c01067b3 <pmm_mark_chunk_occupied>
c0106455:	83 c4 10             	add    $0x10,%esp
    
    // 重映射VGA文本缓冲区（以后会变成显存，i.e., framebuffer）
    for (size_t i = 0; i < vga_buf_pgs; i++)
c0106458:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010645f:	eb 2f                	jmp    c0106490 <_kernel_init+0x273>
    {
        vmm_map_page(KERNEL_PID, VGA_BUFFER_VADDR + (i << 12), VIDEO + (i << 12), PG_PREM_RW, PG_PREM_RW);
c0106461:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106464:	c1 e0 0c             	shl    $0xc,%eax
c0106467:	05 00 80 0b 00       	add    $0xb8000,%eax
c010646c:	89 c2                	mov    %eax,%edx
c010646e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106471:	c1 e0 0c             	shl    $0xc,%eax
c0106474:	2d 00 00 00 50       	sub    $0x50000000,%eax
c0106479:	83 ec 0c             	sub    $0xc,%esp
c010647c:	6a 03                	push   $0x3
c010647e:	6a 03                	push   $0x3
c0106480:	52                   	push   %edx
c0106481:	50                   	push   %eax
c0106482:	6a ff                	push   $0xffffffff
c0106484:	e8 52 0d 00 00       	call   c01071db <vmm_map_page>
c0106489:	83 c4 20             	add    $0x20,%esp
    for (size_t i = 0; i < vga_buf_pgs; i++)
c010648c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0106490:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106493:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c0106496:	72 c9                	jb     c0106461 <_kernel_init+0x244>
    }
    set_vga_buffer(VGA_BUFFER_VADDR);
c0106498:	83 ec 0c             	sub    $0xc,%esp
c010649b:	68 00 00 00 b0       	push   $0xb0000000
c01064a0:	e8 6b fb ff ff       	call   c0106010 <set_vga_buffer>
c01064a5:	83 c4 10             	add    $0x10,%esp
    kprintf("[MM] Mapped VGA to %x.\n", VGA_BUFFER_VADDR);
c01064a8:	83 ec 08             	sub    $0x8,%esp
c01064ab:	68 00 00 00 b0       	push   $0xb0000000
c01064b0:	68 a9 b0 28 c0       	push   $0xc028b0a9
c01064b5:	e8 8c 24 00 00       	call   c0108946 <kprintf>
c01064ba:	83 c4 10             	add    $0x10,%esp

    // 为内核创建一个专属栈空间。
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c01064bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01064c4:	eb 23                	jmp    c01064e9 <_kernel_init+0x2cc>
        vmm_alloc_page(KERNEL_PID, K_STACK_START + (i << 12), NULL, PG_PREM_RW, PG_PREM_RW);
c01064c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064c9:	c1 e0 0c             	shl    $0xc,%eax
c01064cc:	2d 00 00 50 00       	sub    $0x500000,%eax
c01064d1:	83 ec 0c             	sub    $0xc,%esp
c01064d4:	6a 03                	push   $0x3
c01064d6:	6a 03                	push   $0x3
c01064d8:	6a 00                	push   $0x0
c01064da:	50                   	push   %eax
c01064db:	6a ff                	push   $0xffffffff
c01064dd:	e8 9b 10 00 00       	call   c010757d <vmm_alloc_page>
c01064e2:	83 c4 20             	add    $0x20,%esp
    for (size_t i = 0; i < (K_STACK_SIZE >> 12); i++) {
c01064e5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01064e9:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%ebp)
c01064f0:	76 d4                	jbe    c01064c6 <_kernel_init+0x2a9>
    }
    kprintf("[MM] Allocated %d pages for stack start at %p\n", K_STACK_SIZE>>12, K_STACK_START);
c01064f2:	83 ec 04             	sub    $0x4,%esp
c01064f5:	68 00 00 b0 ff       	push   $0xffb00000
c01064fa:	68 00 01 00 00       	push   $0x100
c01064ff:	68 c4 b0 28 c0       	push   $0xc028b0c4
c0106504:	e8 3d 24 00 00       	call   c0108946 <kprintf>
c0106509:	83 c4 10             	add    $0x10,%esp

    //give malloc init
    mem_init();
c010650c:	e8 69 08 00 00       	call   c0106d7a <mem_init>
    kprintf("[MM] Malloc Init Success \n");
c0106511:	83 ec 0c             	sub    $0xc,%esp
c0106514:	68 f3 b0 28 c0       	push   $0xc028b0f3
c0106519:	e8 28 24 00 00       	call   c0108946 <kprintf>
c010651e:	83 c4 10             	add    $0x10,%esp
    kprintf("[KERNEL] === Initialization Done === \n\n");
c0106521:	83 ec 0c             	sub    $0xc,%esp
c0106524:	68 10 b1 28 c0       	push   $0xc028b110
c0106529:	e8 18 24 00 00       	call   c0108946 <kprintf>
c010652e:	83 c4 10             	add    $0x10,%esp

    vga_put_str("MELOX OS\n");
c0106531:	83 ec 0c             	sub    $0xc,%esp
c0106534:	68 38 b1 28 c0       	push   $0xc028b138
c0106539:	e8 d5 fb ff ff       	call   c0106113 <vga_put_str>
c010653e:	83 c4 10             	add    $0x10,%esp
     //__asm__("int $1");
}
c0106541:	90                   	nop
c0106542:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106545:	c9                   	leave  
c0106546:	c3                   	ret    

c0106547 <_kernel_finnal_init>:

void _kernel_finnal_init() {
c0106547:	55                   	push   %ebp
c0106548:	89 e5                	mov    %esp,%ebp
c010654a:	83 ec 18             	sub    $0x18,%esp
    //kprintf("[KERNEL] === Post Initialization === \n");
    size_t virk_init_pg_count = ((uintptr_t)(&__init_phykernel_end)) >> 12;
c010654d:	b8 00 60 10 00       	mov    $0x106000,%eax
c0106552:	c1 e8 0c             	shr    $0xc,%eax
c0106555:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("[MM] Releaseing %d pages from 0x0.\n", virk_init_pg_count);
c0106558:	83 ec 08             	sub    $0x8,%esp
c010655b:	ff 75 f0             	push   -0x10(%ebp)
c010655e:	68 44 b1 28 c0       	push   $0xc028b144
c0106563:	e8 de 23 00 00       	call   c0108946 <kprintf>
c0106568:	83 c4 10             	add    $0x10,%esp
    
    // // 清除 hhk_init 与前1MiB的映射
    for (size_t i = 0; i < virk_init_pg_count; i++) {
c010656b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106572:	eb 18                	jmp    c010658c <_kernel_finnal_init+0x45>

        vmm_unmap_page(KERNEL_PID, (i << 12));
c0106574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106577:	c1 e0 0c             	shl    $0xc,%eax
c010657a:	83 ec 08             	sub    $0x8,%esp
c010657d:	50                   	push   %eax
c010657e:	6a ff                	push   $0xffffffff
c0106580:	e8 b9 12 00 00       	call   c010783e <vmm_unmap_page>
c0106585:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < virk_init_pg_count; i++) {
c0106588:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010658c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010658f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106592:	72 e0                	jb     c0106574 <_kernel_finnal_init+0x2d>
    // }
    // for (size_t i = 256; i < virk_init_pg_count; i++) {

    //     vmm_unmap_page((i << 12));
    // }
    kprintf("[KERNEL] === Post Initialization Done === \n\n");
c0106594:	83 ec 0c             	sub    $0xc,%esp
c0106597:	68 68 b1 28 c0       	push   $0xc028b168
c010659c:	e8 a5 23 00 00       	call   c0108946 <kprintf>
c01065a1:	83 c4 10             	add    $0x10,%esp
}
c01065a4:	90                   	nop
c01065a5:	c9                   	leave  
c01065a6:	c3                   	ret    

c01065a7 <_kernel_main>:

void _kernel_main()
{
c01065a7:	55                   	push   %ebp
c01065a8:	89 e5                	mov    %esp,%ebp
c01065aa:	81 ec 18 01 00 00    	sub    $0x118,%esp
    char* buf[64];
    
    kprintf("We are now running in virtual address space!\n\n");
c01065b0:	83 ec 0c             	sub    $0xc,%esp
c01065b3:	68 98 b1 28 c0       	push   $0xc028b198
c01065b8:	e8 89 23 00 00       	call   c0108946 <kprintf>
c01065bd:	83 c4 10             	add    $0x10,%esp
    
    cpu_get_brand(buf);
c01065c0:	83 ec 0c             	sub    $0xc,%esp
c01065c3:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
c01065c9:	50                   	push   %eax
c01065ca:	e8 b4 18 00 00       	call   c0107e83 <cpu_get_brand>
c01065cf:	83 c4 10             	add    $0x10,%esp
    kprintf("CPU: %s\n\n", buf);
c01065d2:	83 ec 08             	sub    $0x8,%esp
c01065d5:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
c01065db:	50                   	push   %eax
c01065dc:	68 c7 b1 28 c0       	push   $0xc028b1c7
c01065e1:	e8 60 23 00 00       	call   c0108946 <kprintf>
c01065e6:	83 c4 10             	add    $0x10,%esp

    uintptr_t k_start = vmm_v2p(&virkernel_start);
c01065e9:	83 ec 0c             	sub    $0xc,%esp
c01065ec:	68 00 60 10 c0       	push   $0xc0106000
c01065f1:	e8 6a 13 00 00       	call   c0107960 <vmm_v2p>
c01065f6:	83 c4 10             	add    $0x10,%esp
c01065f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf("The kernel's base address mapping: %x->%x\n", &virkernel_start, k_start);
c01065fc:	83 ec 04             	sub    $0x4,%esp
c01065ff:	ff 75 f4             	push   -0xc(%ebp)
c0106602:	68 00 60 10 c0       	push   $0xc0106000
c0106607:	68 d4 b1 28 c0       	push   $0xc028b1d4
c010660c:	e8 35 23 00 00       	call   c0108946 <kprintf>
c0106611:	83 c4 10             	add    $0x10,%esp
    //__asm__("int $0");
    // test malloc & free

    uint8_t* big_ = k_malloc(1000);
c0106614:	83 ec 0c             	sub    $0xc,%esp
c0106617:	68 e8 03 00 00       	push   $0x3e8
c010661c:	e8 4b 09 00 00       	call   c0106f6c <k_malloc>
c0106621:	83 c4 10             	add    $0x10,%esp
c0106624:	89 45 f0             	mov    %eax,-0x10(%ebp)
    big_[0] = 123;
c0106627:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010662a:	c6 00 7b             	movb   $0x7b,(%eax)
    big_[1] = 23;
c010662d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106630:	83 c0 01             	add    $0x1,%eax
c0106633:	c6 00 17             	movb   $0x17,(%eax)
    big_[2] = 3;
c0106636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106639:	83 c0 02             	add    $0x2,%eax
c010663c:	c6 00 03             	movb   $0x3,(%eax)

    kprintf("malloc %d, %d, %d\n", big_[0], big_[1], big_[2]);
c010663f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106642:	83 c0 02             	add    $0x2,%eax
c0106645:	0f b6 00             	movzbl (%eax),%eax
c0106648:	0f b6 c8             	movzbl %al,%ecx
c010664b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010664e:	83 c0 01             	add    $0x1,%eax
c0106651:	0f b6 00             	movzbl (%eax),%eax
c0106654:	0f b6 d0             	movzbl %al,%edx
c0106657:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010665a:	0f b6 00             	movzbl (%eax),%eax
c010665d:	0f b6 c0             	movzbl %al,%eax
c0106660:	51                   	push   %ecx
c0106661:	52                   	push   %edx
c0106662:	50                   	push   %eax
c0106663:	68 ff b1 28 c0       	push   $0xc028b1ff
c0106668:	e8 d9 22 00 00       	call   c0108946 <kprintf>
c010666d:	83 c4 10             	add    $0x10,%esp
    malloc_free(big_);
c0106670:	83 ec 0c             	sub    $0xc,%esp
c0106673:	ff 75 f0             	push   -0x10(%ebp)
c0106676:	e8 ac 08 00 00       	call   c0106f27 <malloc_free>
c010667b:	83 c4 10             	add    $0x10,%esp

    timer_init();
c010667e:	e8 9c 13 00 00       	call   c0107a1f <timer_init>
    init_keyboard();
c0106683:	e8 95 1f 00 00       	call   c010861d <init_keyboard>
c0106688:	90                   	nop
c0106689:	c9                   	leave  
c010668a:	c3                   	ret    

c010668b <pmm_init>:

#ifdef MEMSTRUCT
static struct pp_struct pm_table[PM_BMP_MAX_SIZE];

void pmm_init(uintptr_t mem_upper_lim)
{
c010668b:	55                   	push   %ebp
c010668c:	89 e5                	mov    %esp,%ebp
c010668e:	83 ec 10             	sub    $0x10,%esp
    pg_lookup_ptr = LOOKUP_START;
c0106691:	c7 05 20 90 10 c0 01 	movl   $0x1,0xc0109020
c0106698:	00 00 00 
    max_pg = (PG_ALIGN(mem_upper_lim) >> 12);
c010669b:	8b 45 08             	mov    0x8(%ebp),%eax
c010669e:	c1 e8 0c             	shr    $0xc,%eax
c01066a1:	a3 24 90 10 c0       	mov    %eax,0xc0109024

    for (size_t i = 0; i < PM_BMP_MAX_SIZE; i++) {
c01066a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01066ad:	eb 49                	jmp    c01066f8 <pmm_init+0x6d>
        pm_table[i] = (struct pp_struct) {
c01066af:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01066b2:	89 d0                	mov    %edx,%eax
c01066b4:	01 c0                	add    %eax,%eax
c01066b6:	01 d0                	add    %edx,%eax
c01066b8:	c1 e0 02             	shl    $0x2,%eax
c01066bb:	05 40 90 10 c0       	add    $0xc0109040,%eax
c01066c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01066c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01066c9:	89 d0                	mov    %edx,%eax
c01066cb:	01 c0                	add    %eax,%eax
c01066cd:	01 d0                	add    %edx,%eax
c01066cf:	c1 e0 02             	shl    $0x2,%eax
c01066d2:	05 44 90 10 c0       	add    $0xc0109044,%eax
c01066d7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01066dd:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01066e0:	89 d0                	mov    %edx,%eax
c01066e2:	01 c0                	add    %eax,%eax
c01066e4:	01 d0                	add    %edx,%eax
c01066e6:	c1 e0 02             	shl    $0x2,%eax
c01066e9:	05 48 90 10 c0       	add    $0xc0109048,%eax
c01066ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < PM_BMP_MAX_SIZE; i++) {
c01066f4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01066f8:	81 7d fc ff ff 01 00 	cmpl   $0x1ffff,-0x4(%ebp)
c01066ff:	76 ae                	jbe    c01066af <pmm_init+0x24>
            .owner = 0,
            .attr = 0,
            .ref_counts = 1
        };
    }
}
c0106701:	90                   	nop
c0106702:	90                   	nop
c0106703:	c9                   	leave  
c0106704:	c3                   	ret    

c0106705 <pmm_mark_page_free>:

void pmm_mark_page_free(uintptr_t ppn)
{
c0106705:	55                   	push   %ebp
c0106706:	89 e5                	mov    %esp,%ebp
    pm_table[ppn].ref_counts = 0;
c0106708:	8b 55 08             	mov    0x8(%ebp),%edx
c010670b:	89 d0                	mov    %edx,%eax
c010670d:	01 c0                	add    %eax,%eax
c010670f:	01 d0                	add    %edx,%eax
c0106711:	c1 e0 02             	shl    $0x2,%eax
c0106714:	05 44 90 10 c0       	add    $0xc0109044,%eax
c0106719:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010671f:	90                   	nop
c0106720:	5d                   	pop    %ebp
c0106721:	c3                   	ret    

c0106722 <pmm_mark_page_occupied>:

void pmm_mark_page_occupied(pid_t owner, uintptr_t ppn, pp_attr_t attr)
{
c0106722:	55                   	push   %ebp
c0106723:	89 e5                	mov    %esp,%ebp
c0106725:	83 ec 10             	sub    $0x10,%esp
    pm_table[ppn] = (struct pp_struct) {
c0106728:	8b 55 0c             	mov    0xc(%ebp),%edx
c010672b:	89 d0                	mov    %edx,%eax
c010672d:	01 c0                	add    %eax,%eax
c010672f:	01 d0                	add    %edx,%eax
c0106731:	c1 e0 02             	shl    $0x2,%eax
c0106734:	8d 90 40 90 10 c0    	lea    -0x3fef6fc0(%eax),%edx
c010673a:	8b 45 08             	mov    0x8(%ebp),%eax
c010673d:	89 02                	mov    %eax,(%edx)
c010673f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106742:	89 d0                	mov    %edx,%eax
c0106744:	01 c0                	add    %eax,%eax
c0106746:	01 d0                	add    %edx,%eax
c0106748:	c1 e0 02             	shl    $0x2,%eax
c010674b:	05 44 90 10 c0       	add    $0xc0109044,%eax
c0106750:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0106756:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106759:	89 d0                	mov    %edx,%eax
c010675b:	01 c0                	add    %eax,%eax
c010675d:	01 d0                	add    %edx,%eax
c010675f:	c1 e0 02             	shl    $0x2,%eax
c0106762:	8d 90 48 90 10 c0    	lea    -0x3fef6fb8(%eax),%edx
c0106768:	8b 45 10             	mov    0x10(%ebp),%eax
c010676b:	89 02                	mov    %eax,(%edx)
        .owner = owner,
        .ref_counts = 1,
        .attr = attr
    };
}
c010676d:	90                   	nop
c010676e:	c9                   	leave  
c010676f:	c3                   	ret    

c0106770 <pmm_mark_chunk_free>:

void pmm_mark_chunk_free(uintptr_t start_ppn, size_t page_count)
{
c0106770:	55                   	push   %ebp
c0106771:	89 e5                	mov    %esp,%ebp
c0106773:	83 ec 10             	sub    $0x10,%esp
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c0106776:	8b 45 08             	mov    0x8(%ebp),%eax
c0106779:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010677c:	eb 1b                	jmp    c0106799 <pmm_mark_chunk_free+0x29>
    {
        pm_table[i].ref_counts = 0;
c010677e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106781:	89 d0                	mov    %edx,%eax
c0106783:	01 c0                	add    %eax,%eax
c0106785:	01 d0                	add    %edx,%eax
c0106787:	c1 e0 02             	shl    $0x2,%eax
c010678a:	05 44 90 10 c0       	add    $0xc0109044,%eax
c010678f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c0106795:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106799:	8b 55 08             	mov    0x8(%ebp),%edx
c010679c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010679f:	01 d0                	add    %edx,%eax
c01067a1:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01067a4:	73 0a                	jae    c01067b0 <pmm_mark_chunk_free+0x40>
c01067a6:	a1 24 90 10 c0       	mov    0xc0109024,%eax
c01067ab:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01067ae:	72 ce                	jb     c010677e <pmm_mark_chunk_free+0xe>
    }
}
c01067b0:	90                   	nop
c01067b1:	c9                   	leave  
c01067b2:	c3                   	ret    

c01067b3 <pmm_mark_chunk_occupied>:

void pmm_mark_chunk_occupied(pid_t owner, uint32_t start_ppn, size_t page_count, pp_attr_t attr)
{
c01067b3:	55                   	push   %ebp
c01067b4:	89 e5                	mov    %esp,%ebp
c01067b6:	83 ec 10             	sub    $0x10,%esp
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c01067b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01067bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01067bf:	eb 49                	jmp    c010680a <pmm_mark_chunk_occupied+0x57>
    {
        pm_table[i] = (struct pp_struct) {
c01067c1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01067c4:	89 d0                	mov    %edx,%eax
c01067c6:	01 c0                	add    %eax,%eax
c01067c8:	01 d0                	add    %edx,%eax
c01067ca:	c1 e0 02             	shl    $0x2,%eax
c01067cd:	8d 90 40 90 10 c0    	lea    -0x3fef6fc0(%eax),%edx
c01067d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01067d6:	89 02                	mov    %eax,(%edx)
c01067d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01067db:	89 d0                	mov    %edx,%eax
c01067dd:	01 c0                	add    %eax,%eax
c01067df:	01 d0                	add    %edx,%eax
c01067e1:	c1 e0 02             	shl    $0x2,%eax
c01067e4:	05 44 90 10 c0       	add    $0xc0109044,%eax
c01067e9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01067ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01067f2:	89 d0                	mov    %edx,%eax
c01067f4:	01 c0                	add    %eax,%eax
c01067f6:	01 d0                	add    %edx,%eax
c01067f8:	c1 e0 02             	shl    $0x2,%eax
c01067fb:	8d 90 48 90 10 c0    	lea    -0x3fef6fb8(%eax),%edx
c0106801:	8b 45 14             	mov    0x14(%ebp),%eax
c0106804:	89 02                	mov    %eax,(%edx)
    for (size_t i = start_ppn; i < start_ppn + page_count && i < max_pg; i++)
c0106806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010680a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010680d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106810:	01 d0                	add    %edx,%eax
c0106812:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0106815:	73 0a                	jae    c0106821 <pmm_mark_chunk_occupied+0x6e>
c0106817:	a1 24 90 10 c0       	mov    0xc0109024,%eax
c010681c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010681f:	72 a0                	jb     c01067c1 <pmm_mark_chunk_occupied+0xe>
            .owner = owner,
            .ref_counts = 1,
            .attr = attr
        };
    }
}
c0106821:	90                   	nop
c0106822:	c9                   	leave  
c0106823:	c3                   	ret    

c0106824 <pmm_alloc_page>:

void* pmm_alloc_page(pid_t owner, pp_attr_t attr)
{
c0106824:	55                   	push   %ebp
c0106825:	89 e5                	mov    %esp,%ebp
c0106827:	83 ec 20             	sub    $0x20,%esp
        // Next fit approach. Maximize the throughput!
    uintptr_t good_page_found = NULL;
c010682a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    size_t old_pg_ptr = pg_lookup_ptr;
c0106831:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106836:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t upper_lim = max_pg;
c0106839:	a1 24 90 10 c0       	mov    0xc0109024,%eax
c010683e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct pp_struct* pm;
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c0106841:	eb 7d                	jmp    c01068c0 <pmm_alloc_page+0x9c>
        pm = &pm_table[pg_lookup_ptr];
c0106843:	8b 15 20 90 10 c0    	mov    0xc0109020,%edx
c0106849:	89 d0                	mov    %edx,%eax
c010684b:	01 c0                	add    %eax,%eax
c010684d:	01 d0                	add    %edx,%eax
c010684f:	c1 e0 02             	shl    $0x2,%eax
c0106852:	05 40 90 10 c0       	add    $0xc0109040,%eax
c0106857:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // skip the fully occupied chunk, reduce # of iterations
        if (!pm->ref_counts) {
c010685a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010685d:	8b 40 04             	mov    0x4(%eax),%eax
c0106860:	85 c0                	test   %eax,%eax
c0106862:	75 28                	jne    c010688c <pmm_alloc_page+0x68>
                *pm = (struct pp_struct) {
c0106864:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106867:	8b 55 08             	mov    0x8(%ebp),%edx
c010686a:	89 10                	mov    %edx,(%eax)
c010686c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010686f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
c0106876:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106879:	8b 55 0c             	mov    0xc(%ebp),%edx
c010687c:	89 50 08             	mov    %edx,0x8(%eax)
                .attr = attr,
                .owner = owner,
                .ref_counts = 1
            };
            good_page_found = pg_lookup_ptr << 12;
c010687f:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106884:	c1 e0 0c             	shl    $0xc,%eax
c0106887:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010688a:	eb 34                	jmp    c01068c0 <pmm_alloc_page+0x9c>
        } else {
            pg_lookup_ptr ++;
c010688c:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c0106891:	83 c0 01             	add    $0x1,%eax
c0106894:	a3 20 90 10 c0       	mov    %eax,0xc0109020

            // We've searched the interval [old_pg_ptr, max_pg) but failed
            //   may be chances in [1, old_pg_ptr) ?
            // Let's find out!
            if (pg_lookup_ptr >= upper_lim && old_pg_ptr != LOOKUP_START) {
c0106899:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c010689e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01068a1:	77 1d                	ja     c01068c0 <pmm_alloc_page+0x9c>
c01068a3:	83 7d f8 01          	cmpl   $0x1,-0x8(%ebp)
c01068a7:	74 17                	je     c01068c0 <pmm_alloc_page+0x9c>
                upper_lim = old_pg_ptr;
c01068a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01068ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
                pg_lookup_ptr = LOOKUP_START;
c01068af:	c7 05 20 90 10 c0 01 	movl   $0x1,0xc0109020
c01068b6:	00 00 00 
                old_pg_ptr = LOOKUP_START;
c01068b9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
    while (!good_page_found && pg_lookup_ptr < upper_lim) {
c01068c0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01068c4:	75 0e                	jne    c01068d4 <pmm_alloc_page+0xb0>
c01068c6:	a1 20 90 10 c0       	mov    0xc0109020,%eax
c01068cb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01068ce:	0f 87 6f ff ff ff    	ja     c0106843 <pmm_alloc_page+0x1f>
        }
    }
    // if (!good_page_found) {
    //     __current->k_status = LXOUTOFMEM;
    // }
    return (void*)good_page_found;
c01068d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01068d7:	c9                   	leave  
c01068d8:	c3                   	ret    

c01068d9 <pmm_alloc_cpage>:

void* pmm_alloc_cpage(pid_t owner, size_t num_pages, pp_attr_t attr) {
c01068d9:	55                   	push   %ebp
c01068da:	89 e5                	mov    %esp,%ebp
c01068dc:	83 ec 10             	sub    $0x10,%esp
    size_t p1 = 0;
c01068df:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    size_t p2 = 0;
c01068e6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    while (p2 < max_pg && p2 - p1 < num_pages)
c01068ed:	eb 28                	jmp    c0106917 <pmm_alloc_cpage+0x3e>
    {
        (!(&pm_table[p2])->ref_counts) ? (p2++) : (p1 = p2);
c01068ef:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01068f2:	89 d0                	mov    %edx,%eax
c01068f4:	01 c0                	add    %eax,%eax
c01068f6:	01 d0                	add    %edx,%eax
c01068f8:	c1 e0 02             	shl    $0x2,%eax
c01068fb:	05 44 90 10 c0       	add    $0xc0109044,%eax
c0106900:	8b 00                	mov    (%eax),%eax
c0106902:	85 c0                	test   %eax,%eax
c0106904:	75 0b                	jne    c0106911 <pmm_alloc_cpage+0x38>
c0106906:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106909:	83 c0 01             	add    $0x1,%eax
c010690c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010690f:	eb 06                	jmp    c0106917 <pmm_alloc_cpage+0x3e>
c0106911:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106914:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (p2 < max_pg && p2 - p1 < num_pages)
c0106917:	a1 24 90 10 c0       	mov    0xc0109024,%eax
c010691c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c010691f:	73 0b                	jae    c010692c <pmm_alloc_cpage+0x53>
c0106921:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106924:	2b 45 fc             	sub    -0x4(%ebp),%eax
c0106927:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010692a:	77 c3                	ja     c01068ef <pmm_alloc_cpage+0x16>
    }

    if (p2 < max_pg) {
c010692c:	a1 24 90 10 c0       	mov    0xc0109024,%eax
c0106931:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c0106934:	73 07                	jae    c010693d <pmm_alloc_cpage+0x64>
        return NULL;
c0106936:	b8 00 00 00 00       	mov    $0x0,%eax
c010693b:	eb 1a                	jmp    c0106957 <pmm_alloc_cpage+0x7e>
    }

    pmm_mark_chunk_occupied(owner, p1, num_pages, attr);
c010693d:	ff 75 10             	push   0x10(%ebp)
c0106940:	ff 75 0c             	push   0xc(%ebp)
c0106943:	ff 75 fc             	push   -0x4(%ebp)
c0106946:	ff 75 08             	push   0x8(%ebp)
c0106949:	e8 65 fe ff ff       	call   c01067b3 <pmm_mark_chunk_occupied>
c010694e:	83 c4 10             	add    $0x10,%esp

    return p1 << 12;
c0106951:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106954:	c1 e0 0c             	shl    $0xc,%eax
}
c0106957:	c9                   	leave  
c0106958:	c3                   	ret    

c0106959 <pmm_free_page>:

int pmm_free_page(pid_t owner, void* page)
{
c0106959:	55                   	push   %ebp
c010695a:	89 e5                	mov    %esp,%ebp
c010695c:	83 ec 10             	sub    $0x10,%esp
    struct pp_struct* pm = &pm_table[(intptr_t)page >> 12];
c010695f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106962:	c1 f8 0c             	sar    $0xc,%eax
c0106965:	89 c2                	mov    %eax,%edx
c0106967:	89 d0                	mov    %edx,%eax
c0106969:	01 c0                	add    %eax,%eax
c010696b:	01 d0                	add    %edx,%eax
c010696d:	c1 e0 02             	shl    $0x2,%eax
c0106970:	05 40 90 10 c0       	add    $0xc0109040,%eax
c0106975:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    // Oops, double free!
    if (!(pm->ref_counts)) {
c0106978:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010697b:	8b 40 04             	mov    0x4(%eax),%eax
c010697e:	85 c0                	test   %eax,%eax
c0106980:	75 07                	jne    c0106989 <pmm_free_page+0x30>
        return 0;
c0106982:	b8 00 00 00 00       	mov    $0x0,%eax
c0106987:	eb 2e                	jmp    c01069b7 <pmm_free_page+0x5e>
    }

    // 检查权限，保证：1) 用户只能释放用户页； 2) 内核可释放所有页。
    if ((pm->owner & owner) == pm->owner) {
c0106989:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010698c:	8b 00                	mov    (%eax),%eax
c010698e:	23 45 08             	and    0x8(%ebp),%eax
c0106991:	89 c2                	mov    %eax,%edx
c0106993:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106996:	8b 00                	mov    (%eax),%eax
c0106998:	39 c2                	cmp    %eax,%edx
c010699a:	75 16                	jne    c01069b2 <pmm_free_page+0x59>
        pm->ref_counts--;
c010699c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010699f:	8b 40 04             	mov    0x4(%eax),%eax
c01069a2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01069a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069a8:	89 50 04             	mov    %edx,0x4(%eax)
        return 1;
c01069ab:	b8 01 00 00 00       	mov    $0x1,%eax
c01069b0:	eb 05                	jmp    c01069b7 <pmm_free_page+0x5e>
    }
    return 0;
c01069b2:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
c01069b7:	c9                   	leave  
c01069b8:	c3                   	ret    

c01069b9 <pmm_query>:

struct pp_struct* pmm_query(void* pa) {
c01069b9:	55                   	push   %ebp
c01069ba:	89 e5                	mov    %esp,%ebp
c01069bc:	83 ec 10             	sub    $0x10,%esp
    uint32_t ppn = (uintptr_t)pa >> 12;
c01069bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01069c2:	c1 e8 0c             	shr    $0xc,%eax
c01069c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    if (ppn >= PM_BMP_MAX_SIZE) {
c01069c8:	81 7d fc ff ff 01 00 	cmpl   $0x1ffff,-0x4(%ebp)
c01069cf:	76 07                	jbe    c01069d8 <pmm_query+0x1f>
        return NULL;
c01069d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01069d6:	eb 11                	jmp    c01069e9 <pmm_query+0x30>
    }

    return &pm_table[ppn];
c01069d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01069db:	89 d0                	mov    %edx,%eax
c01069dd:	01 c0                	add    %eax,%eax
c01069df:	01 d0                	add    %edx,%eax
c01069e1:	c1 e0 02             	shl    $0x2,%eax
c01069e4:	05 40 90 10 c0       	add    $0xc0109040,%eax
}
c01069e9:	c9                   	leave  
c01069ea:	c3                   	ret    

c01069eb <pmm_ref_page>:

int pmm_ref_page(pid_t owner, void* page) {
c01069eb:	55                   	push   %ebp
c01069ec:	89 e5                	mov    %esp,%ebp
c01069ee:	83 ec 10             	sub    $0x10,%esp
    (void*) owner;      // TODO: do smth with owner
    
    uint32_t ppn = (uintptr_t)page >> 12;
c01069f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069f4:	c1 e8 0c             	shr    $0xc,%eax
c01069f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    if (ppn >= PM_BMP_MAX_SIZE) {
c01069fa:	81 7d fc ff ff 01 00 	cmpl   $0x1ffff,-0x4(%ebp)
c0106a01:	76 07                	jbe    c0106a0a <pmm_ref_page+0x1f>
        return 0;
c0106a03:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a08:	eb 39                	jmp    c0106a43 <pmm_ref_page+0x58>
    }

    struct pp_struct* pm = &pm_table[ppn];
c0106a0a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106a0d:	89 d0                	mov    %edx,%eax
c0106a0f:	01 c0                	add    %eax,%eax
c0106a11:	01 d0                	add    %edx,%eax
c0106a13:	c1 e0 02             	shl    $0x2,%eax
c0106a16:	05 40 90 10 c0       	add    $0xc0109040,%eax
c0106a1b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (!pm->ref_counts) {
c0106a1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a21:	8b 40 04             	mov    0x4(%eax),%eax
c0106a24:	85 c0                	test   %eax,%eax
c0106a26:	75 07                	jne    c0106a2f <pmm_ref_page+0x44>
        return 0;
c0106a28:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a2d:	eb 14                	jmp    c0106a43 <pmm_ref_page+0x58>
    }

    pm->ref_counts++;
c0106a2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a32:	8b 40 04             	mov    0x4(%eax),%eax
c0106a35:	8d 50 01             	lea    0x1(%eax),%edx
c0106a38:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a3b:	89 50 04             	mov    %edx,0x4(%eax)
    return 1;
c0106a3e:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106a43:	c9                   	leave  
c0106a44:	c3                   	ret    

c0106a45 <extend_heap>:
 * @brief extend heap
 * 
 * @param extend size
 */
static void* extend_heap(size_t words)
{
c0106a45:	55                   	push   %ebp
c0106a46:	89 e5                	mov    %esp,%ebp
c0106a48:	83 ec 18             	sub    $0x18,%esp
    char* bp = mem_brk;
c0106a4b:	a1 48 90 28 c0       	mov    0xc0289048,%eax
c0106a50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size;
    //align
    size = (words % 2) ? words * WSIZE : (words + 1) * WSIZE;
c0106a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a56:	83 e0 01             	and    $0x1,%eax
c0106a59:	85 c0                	test   %eax,%eax
c0106a5b:	74 08                	je     c0106a65 <extend_heap+0x20>
c0106a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a60:	c1 e0 02             	shl    $0x2,%eax
c0106a63:	eb 09                	jmp    c0106a6e <extend_heap+0x29>
c0106a65:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a68:	83 c0 01             	add    $0x1,%eax
c0106a6b:	c1 e0 02             	shl    $0x2,%eax
c0106a6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_sbrk(size + WSIZE);
c0106a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a74:	83 c0 04             	add    $0x4,%eax
c0106a77:	83 ec 0c             	sub    $0xc,%esp
c0106a7a:	50                   	push   %eax
c0106a7b:	e8 64 03 00 00       	call   c0106de4 <mem_sbrk>
c0106a80:	83 c4 10             	add    $0x10,%esp

    //initialize free block header/footer and the epilogue header
    PUT(HDRP(bp), PACK(size, 0)); // free block header
c0106a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a86:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a8c:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0)); // free block foot //TODO CRUSH HERE, ADD ONE PAGE OUT OF RANGE, WE ONLY GIVE ONE PAGE, MEYBE PAGE FAULT
c0106a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a91:	83 e8 04             	sub    $0x4,%eax
c0106a94:	8b 00                	mov    (%eax),%eax
c0106a96:	83 e0 f8             	and    $0xfffffff8,%eax
c0106a99:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106a9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a9f:	01 c2                	add    %eax,%edx
c0106aa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aa4:	89 02                	mov    %eax,(%edx)
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); //NEW Epilogue header
c0106aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106aa9:	83 e8 04             	sub    $0x4,%eax
c0106aac:	8b 00                	mov    (%eax),%eax
c0106aae:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ab1:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ab7:	01 d0                	add    %edx,%eax
c0106ab9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //Coalesce if previous block is free
    return coalesce(bp);
c0106abf:	83 ec 0c             	sub    $0xc,%esp
c0106ac2:	ff 75 f4             	push   -0xc(%ebp)
c0106ac5:	e8 05 00 00 00       	call   c0106acf <coalesce>
c0106aca:	83 c4 10             	add    $0x10,%esp
}
c0106acd:	c9                   	leave  
c0106ace:	c3                   	ret    

c0106acf <coalesce>:
 * @brief Coalesce free blk
 * 
 * @param Coalesce bp pointer
 */
static void* coalesce(void* bp)
{
c0106acf:	55                   	push   %ebp
c0106ad0:	89 e5                	mov    %esp,%ebp
c0106ad2:	83 ec 10             	sub    $0x10,%esp
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
c0106ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ad8:	83 e8 04             	sub    $0x4,%eax
c0106adb:	8b 00                	mov    (%eax),%eax
c0106add:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ae0:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ae6:	01 d0                	add    %edx,%eax
c0106ae8:	8b 00                	mov    (%eax),%eax
c0106aea:	83 e0 01             	and    $0x1,%eax
c0106aed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
c0106af0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106af3:	83 e8 04             	sub    $0x4,%eax
c0106af6:	8b 00                	mov    (%eax),%eax
c0106af8:	83 e0 f8             	and    $0xfffffff8,%eax
c0106afb:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106afe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b01:	01 d0                	add    %edx,%eax
c0106b03:	8b 00                	mov    (%eax),%eax
c0106b05:	83 e0 01             	and    $0x1,%eax
c0106b08:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t size = GET_SIZE(HDRP(bp));
c0106b0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b0e:	83 e8 04             	sub    $0x4,%eax
c0106b11:	8b 00                	mov    (%eax),%eax
c0106b13:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b16:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(prev_alloc && next_alloc)
c0106b19:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b1d:	74 0e                	je     c0106b2d <coalesce+0x5e>
c0106b1f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b23:	74 08                	je     c0106b2d <coalesce+0x5e>
        return bp;
c0106b25:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b28:	e9 3e 01 00 00       	jmp    c0106c6b <coalesce+0x19c>

    else if(prev_alloc && !next_alloc)
c0106b2d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b31:	74 49                	je     c0106b7c <coalesce+0xad>
c0106b33:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b37:	75 43                	jne    c0106b7c <coalesce+0xad>
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
c0106b39:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b3c:	83 e8 04             	sub    $0x4,%eax
c0106b3f:	8b 00                	mov    (%eax),%eax
c0106b41:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b44:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b4a:	01 d0                	add    %edx,%eax
c0106b4c:	8b 00                	mov    (%eax),%eax
c0106b4e:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b51:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(HDRP(bp), PACK(size, 0));
c0106b54:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b57:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b5d:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(bp), PACK(size, 0));
c0106b5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b62:	83 e8 04             	sub    $0x4,%eax
c0106b65:	8b 00                	mov    (%eax),%eax
c0106b67:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b6a:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106b6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b70:	01 c2                	add    %eax,%edx
c0106b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b75:	89 02                	mov    %eax,(%edx)
c0106b77:	e9 ec 00 00 00       	jmp    c0106c68 <coalesce+0x199>
    }

    else if(!prev_alloc && next_alloc)
c0106b7c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0106b80:	75 6b                	jne    c0106bed <coalesce+0x11e>
c0106b82:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b86:	74 65                	je     c0106bed <coalesce+0x11e>
    {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));//TO DO ,THERE IS PEOBLEM, CRUSH HERE
c0106b88:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b8b:	83 e8 08             	sub    $0x8,%eax
c0106b8e:	8b 00                	mov    (%eax),%eax
c0106b90:	83 e0 f8             	and    $0xfffffff8,%eax
c0106b93:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106b98:	29 c2                	sub    %eax,%edx
c0106b9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b9d:	01 d0                	add    %edx,%eax
c0106b9f:	8b 00                	mov    (%eax),%eax
c0106ba1:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ba4:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(bp), PACK(size, 0));
c0106ba7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106baa:	83 e8 04             	sub    $0x4,%eax
c0106bad:	8b 00                	mov    (%eax),%eax
c0106baf:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bb2:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106bb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bb8:	01 c2                	add    %eax,%edx
c0106bba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bbd:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
c0106bbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bc2:	83 e8 08             	sub    $0x8,%eax
c0106bc5:	8b 00                	mov    (%eax),%eax
c0106bc7:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bca:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106bcf:	29 c2                	sub    %eax,%edx
c0106bd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bd4:	01 c2                	add    %eax,%edx
c0106bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bd9:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bde:	83 e8 08             	sub    $0x8,%eax
c0106be1:	8b 00                	mov    (%eax),%eax
c0106be3:	83 e0 f8             	and    $0xfffffff8,%eax
c0106be6:	f7 d8                	neg    %eax
c0106be8:	01 45 08             	add    %eax,0x8(%ebp)
c0106beb:	eb 7b                	jmp    c0106c68 <coalesce+0x199>
    }

    else{
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
c0106bed:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bf0:	83 e8 08             	sub    $0x8,%eax
c0106bf3:	8b 00                	mov    (%eax),%eax
c0106bf5:	83 e0 f8             	and    $0xfffffff8,%eax
c0106bf8:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
c0106bfd:	29 c2                	sub    %eax,%edx
c0106bff:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c02:	01 d0                	add    %edx,%eax
c0106c04:	8b 00                	mov    (%eax),%eax
c0106c06:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c09:	89 c2                	mov    %eax,%edx
c0106c0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c0e:	83 e8 04             	sub    $0x4,%eax
c0106c11:	8b 00                	mov    (%eax),%eax
c0106c13:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c16:	8d 48 f8             	lea    -0x8(%eax),%ecx
c0106c19:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c1c:	01 c8                	add    %ecx,%eax
c0106c1e:	8b 00                	mov    (%eax),%eax
c0106c20:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c23:	01 d0                	add    %edx,%eax
c0106c25:	01 45 f4             	add    %eax,-0xc(%ebp)
        PUT(FTRP(PREV_BLKP(bp)), PACK(size, 0));
c0106c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c2b:	83 e8 04             	sub    $0x4,%eax
c0106c2e:	8b 00                	mov    (%eax),%eax
c0106c30:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c33:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c39:	01 c2                	add    %eax,%edx
c0106c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c3e:	89 02                	mov    %eax,(%edx)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(size, 0));
c0106c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c43:	83 e8 04             	sub    $0x4,%eax
c0106c46:	8b 00                	mov    (%eax),%eax
c0106c48:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c4b:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c51:	01 c2                	add    %eax,%edx
c0106c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c56:	89 02                	mov    %eax,(%edx)
        bp = PREV_BLKP(bp);
c0106c58:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c5b:	83 e8 08             	sub    $0x8,%eax
c0106c5e:	8b 00                	mov    (%eax),%eax
c0106c60:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c63:	f7 d8                	neg    %eax
c0106c65:	01 45 08             	add    %eax,0x8(%ebp)
    }
    return bp;
c0106c68:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106c6b:	c9                   	leave  
c0106c6c:	c3                   	ret    

c0106c6d <find_fit>:
 * @brief find free blk
 * 
 * @param find size
 */
static void* find_fit(size_t asize)// we just traverse heap
{
c0106c6d:	55                   	push   %ebp
c0106c6e:	89 e5                	mov    %esp,%ebp
c0106c70:	83 ec 10             	sub    $0x10,%esp
    void* bp = heap_listp;
c0106c73:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106c78:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106c7b:	eb 2f                	jmp    c0106cac <find_fit+0x3f>
    {
        if(GET_SIZE(bp) != 0 && GET_ALLOC(bp) != 1)
c0106c7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c80:	8b 00                	mov    (%eax),%eax
c0106c82:	83 e0 f8             	and    $0xfffffff8,%eax
c0106c85:	85 c0                	test   %eax,%eax
c0106c87:	74 1c                	je     c0106ca5 <find_fit+0x38>
c0106c89:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c8c:	8b 00                	mov    (%eax),%eax
c0106c8e:	83 e0 01             	and    $0x1,%eax
c0106c91:	85 c0                	test   %eax,%eax
c0106c93:	75 10                	jne    c0106ca5 <find_fit+0x38>
            bp = NEXT_BLKP(bp);
c0106c95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c98:	83 e8 04             	sub    $0x4,%eax
c0106c9b:	8b 00                	mov    (%eax),%eax
c0106c9d:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ca0:	01 45 fc             	add    %eax,-0x4(%ebp)
c0106ca3:	eb 07                	jmp    c0106cac <find_fit+0x3f>
        else
            return NULL;
c0106ca5:	b8 00 00 00 00       	mov    $0x0,%eax
c0106caa:	eb 22                	jmp    c0106cce <find_fit+0x61>
    while(GET_ALLOC(HDRP(bp)) || (GET_SIZE(HDRP(bp)) < asize))
c0106cac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106caf:	83 e8 04             	sub    $0x4,%eax
c0106cb2:	8b 00                	mov    (%eax),%eax
c0106cb4:	83 e0 01             	and    $0x1,%eax
c0106cb7:	85 c0                	test   %eax,%eax
c0106cb9:	75 c2                	jne    c0106c7d <find_fit+0x10>
c0106cbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cbe:	83 e8 04             	sub    $0x4,%eax
c0106cc1:	8b 00                	mov    (%eax),%eax
c0106cc3:	83 e0 f8             	and    $0xfffffff8,%eax
c0106cc6:	39 45 08             	cmp    %eax,0x8(%ebp)
c0106cc9:	77 b2                	ja     c0106c7d <find_fit+0x10>
    }
    return bp;
c0106ccb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106cce:	c9                   	leave  
c0106ccf:	c3                   	ret    

c0106cd0 <place>:
 * @brief place the blk
 * 
 * @param blk,size
 */
static void place(void* bp, size_t asize)
{
c0106cd0:	55                   	push   %ebp
c0106cd1:	89 e5                	mov    %esp,%ebp
c0106cd3:	83 ec 10             	sub    $0x10,%esp
    size_t bp_allsize = GET_SIZE(HDRP(bp));
c0106cd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cd9:	83 e8 04             	sub    $0x4,%eax
c0106cdc:	8b 00                	mov    (%eax),%eax
c0106cde:	83 e0 f8             	and    $0xfffffff8,%eax
c0106ce1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t remain_size = bp_allsize - asize;
c0106ce4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ce7:	2b 45 0c             	sub    0xc(%ebp),%eax
c0106cea:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(remain_size >= 2*DSIZE)
c0106ced:	83 7d f8 0f          	cmpl   $0xf,-0x8(%ebp)
c0106cf1:	76 5b                	jbe    c0106d4e <place+0x7e>
    {
        PUT(HDRP(bp), PACK(asize, 1));
c0106cf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cf6:	83 e8 04             	sub    $0x4,%eax
c0106cf9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106cfc:	83 ca 01             	or     $0x1,%edx
c0106cff:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(asize, 1));
c0106d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d04:	83 e8 04             	sub    $0x4,%eax
c0106d07:	8b 00                	mov    (%eax),%eax
c0106d09:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d0c:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106d0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d12:	01 d0                	add    %edx,%eax
c0106d14:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106d17:	83 ca 01             	or     $0x1,%edx
c0106d1a:	89 10                	mov    %edx,(%eax)
        PUT(HDRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106d1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d1f:	83 e8 04             	sub    $0x4,%eax
c0106d22:	8b 00                	mov    (%eax),%eax
c0106d24:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d27:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106d2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d2d:	01 c2                	add    %eax,%edx
c0106d2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106d32:	89 02                	mov    %eax,(%edx)
        PUT(FTRP(NEXT_BLKP(bp)), PACK(remain_size, 0));
c0106d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d37:	83 e8 04             	sub    $0x4,%eax
c0106d3a:	8b 00                	mov    (%eax),%eax
c0106d3c:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d3f:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d45:	01 c2                	add    %eax,%edx
c0106d47:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106d4a:	89 02                	mov    %eax,(%edx)
    }else{
        PUT(HDRP(bp), PACK(bp_allsize, 1));
        PUT(FTRP(bp), PACK(bp_allsize, 1));
    }
}
c0106d4c:	eb 29                	jmp    c0106d77 <place+0xa7>
        PUT(HDRP(bp), PACK(bp_allsize, 1));
c0106d4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d51:	83 e8 04             	sub    $0x4,%eax
c0106d54:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106d57:	83 ca 01             	or     $0x1,%edx
c0106d5a:	89 10                	mov    %edx,(%eax)
        PUT(FTRP(bp), PACK(bp_allsize, 1));
c0106d5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d5f:	83 e8 04             	sub    $0x4,%eax
c0106d62:	8b 00                	mov    (%eax),%eax
c0106d64:	83 e0 f8             	and    $0xfffffff8,%eax
c0106d67:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d6d:	01 d0                	add    %edx,%eax
c0106d6f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106d72:	83 ca 01             	or     $0x1,%edx
c0106d75:	89 10                	mov    %edx,(%eax)
}
c0106d77:	90                   	nop
c0106d78:	c9                   	leave  
c0106d79:	c3                   	ret    

c0106d7a <mem_init>:

//following is head file function

void mem_init()
{
c0106d7a:	55                   	push   %ebp
c0106d7b:	89 e5                	mov    %esp,%ebp
c0106d7d:	83 ec 18             	sub    $0x18,%esp
    mem_heap = &__heap_start;
c0106d80:	c7 05 44 90 28 c0 00 	movl   $0xc0292000,0xc0289044
c0106d87:	20 29 c0 
    //mem_heap = (char*)Malloc(MAX_HEAP);
    mem_brk = mem_heap;
c0106d8a:	a1 44 90 28 c0       	mov    0xc0289044,%eax
c0106d8f:	a3 48 90 28 c0       	mov    %eax,0xc0289048
    //mem_max_addr = (char*)(mem_heap + MAX_HEAP);
    mem_max_addr = (char*)K_STACK_START;
c0106d94:	c7 05 4c 90 28 c0 00 	movl   $0xffb00000,0xc028904c
c0106d9b:	00 b0 ff 
    uint8_t* pgaddr = 0;
c0106d9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if((pgaddr = vmm_alloc_page(KERNEL_PID, mem_brk, NULL, PG_PREM_RW, PG_PREM_RW)) == NULL)
c0106da5:	a1 48 90 28 c0       	mov    0xc0289048,%eax
c0106daa:	83 ec 0c             	sub    $0xc,%esp
c0106dad:	6a 03                	push   $0x3
c0106daf:	6a 03                	push   $0x3
c0106db1:	6a 00                	push   $0x0
c0106db3:	50                   	push   %eax
c0106db4:	6a ff                	push   $0xffffffff
c0106db6:	e8 c2 07 00 00       	call   c010757d <vmm_alloc_page>
c0106dbb:	83 c4 20             	add    $0x20,%esp
c0106dbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106dc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106dc5:	74 1a                	je     c0106de1 <mem_init+0x67>
        return;
    kprintf("malloc init phy address is 0x%x\n", pgaddr);
c0106dc7:	83 ec 08             	sub    $0x8,%esp
c0106dca:	ff 75 f4             	push   -0xc(%ebp)
c0106dcd:	68 14 b2 28 c0       	push   $0xc028b214
c0106dd2:	e8 6f 1b 00 00       	call   c0108946 <kprintf>
c0106dd7:	83 c4 10             	add    $0x10,%esp
    malloc_init();
c0106dda:	e8 bb 00 00 00       	call   c0106e9a <malloc_init>
c0106ddf:	eb 01                	jmp    c0106de2 <mem_init+0x68>
        return;
c0106de1:	90                   	nop
}
c0106de2:	c9                   	leave  
c0106de3:	c3                   	ret    

c0106de4 <mem_sbrk>:

void* mem_sbrk(int incr)
{
c0106de4:	55                   	push   %ebp
c0106de5:	89 e5                	mov    %esp,%ebp
c0106de7:	83 ec 18             	sub    $0x18,%esp
    char* old = mem_brk;
c0106dea:	a1 48 90 28 c0       	mov    0xc0289048,%eax
c0106def:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if((incr < 0) || ((mem_brk + incr) > mem_max_addr))
c0106df2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106df6:	78 14                	js     c0106e0c <mem_sbrk+0x28>
c0106df8:	8b 15 48 90 28 c0    	mov    0xc0289048,%edx
c0106dfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e01:	01 c2                	add    %eax,%edx
c0106e03:	a1 4c 90 28 c0       	mov    0xc028904c,%eax
c0106e08:	39 c2                	cmp    %eax,%edx
c0106e0a:	76 0a                	jbe    c0106e16 <mem_sbrk+0x32>
    {
        return (void*)-1;
c0106e0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106e11:	e9 82 00 00 00       	jmp    c0106e98 <mem_sbrk+0xb4>
    }
    char* new = mem_brk + incr;
c0106e16:	8b 15 48 90 28 c0    	mov    0xc0289048,%edx
c0106e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e1f:	01 d0                	add    %edx,%eax
c0106e21:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned int diff = PG_ALIGN(new) - PG_ALIGN(old);
c0106e24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e2c:	89 c2                	mov    %eax,%edx
c0106e2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e31:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e36:	89 c1                	mov    %eax,%ecx
c0106e38:	89 d0                	mov    %edx,%eax
c0106e3a:	29 c8                	sub    %ecx,%eax
c0106e3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(diff)
c0106e3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106e43:	74 40                	je     c0106e85 <mem_sbrk+0xa1>
    {
        uint8_t* pgaddr = -1;
c0106e45:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
        if(!(pgaddr = vmm_alloc_page(KERNEL_PID, new, NULL, PG_PREM_RW,PG_PREM_RW)))
c0106e4c:	83 ec 0c             	sub    $0xc,%esp
c0106e4f:	6a 03                	push   $0x3
c0106e51:	6a 03                	push   $0x3
c0106e53:	6a 00                	push   $0x0
c0106e55:	ff 75 f0             	push   -0x10(%ebp)
c0106e58:	6a ff                	push   $0xffffffff
c0106e5a:	e8 1e 07 00 00       	call   c010757d <vmm_alloc_page>
c0106e5f:	83 c4 20             	add    $0x20,%esp
c0106e62:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106e65:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106e69:	75 07                	jne    c0106e72 <mem_sbrk+0x8e>
        {
            return NULL;
c0106e6b:	b8 00 00 00 00       	mov    $0x0,%eax
c0106e70:	eb 26                	jmp    c0106e98 <mem_sbrk+0xb4>
        }
        kprintf("head new page is 0x%x\n", pgaddr);
c0106e72:	83 ec 08             	sub    $0x8,%esp
c0106e75:	ff 75 e8             	push   -0x18(%ebp)
c0106e78:	68 35 b2 28 c0       	push   $0xc028b235
c0106e7d:	e8 c4 1a 00 00       	call   c0108946 <kprintf>
c0106e82:	83 c4 10             	add    $0x10,%esp
    }
    mem_brk += incr;
c0106e85:	8b 15 48 90 28 c0    	mov    0xc0289048,%edx
c0106e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8e:	01 d0                	add    %edx,%eax
c0106e90:	a3 48 90 28 c0       	mov    %eax,0xc0289048
    return (void*)old;
c0106e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106e98:	c9                   	leave  
c0106e99:	c3                   	ret    

c0106e9a <malloc_init>:

int malloc_init()
{
c0106e9a:	55                   	push   %ebp
c0106e9b:	89 e5                	mov    %esp,%ebp
c0106e9d:	83 ec 08             	sub    $0x8,%esp
    if((heap_listp = mem_sbrk(4 * WSIZE)) == (void*) - 1)
c0106ea0:	83 ec 0c             	sub    $0xc,%esp
c0106ea3:	6a 10                	push   $0x10
c0106ea5:	e8 3a ff ff ff       	call   c0106de4 <mem_sbrk>
c0106eaa:	83 c4 10             	add    $0x10,%esp
c0106ead:	a3 40 90 28 c0       	mov    %eax,0xc0289040
c0106eb2:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106eb7:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106eba:	75 07                	jne    c0106ec3 <malloc_init+0x29>
        return -1;
c0106ebc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106ec1:	eb 62                	jmp    c0106f25 <malloc_init+0x8b>
    PUT(heap_listp, 0);
c0106ec3:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106ec8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));
c0106ece:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106ed3:	83 c0 04             	add    $0x4,%eax
c0106ed6:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));
c0106edc:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106ee1:	83 c0 08             	add    $0x8,%eax
c0106ee4:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));
c0106eea:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106eef:	83 c0 0c             	add    $0xc,%eax
c0106ef2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    heap_listp += (2*WSIZE);
c0106ef8:	a1 40 90 28 c0       	mov    0xc0289040,%eax
c0106efd:	83 c0 08             	add    $0x8,%eax
c0106f00:	a3 40 90 28 c0       	mov    %eax,0xc0289040

    //extend free heap with free blk og CHUNKSIZE size
    //mem_sbrk((CHUNKSIZE - WSIZE));
    if(extend_heap((CHUNKSIZE - WSIZE)  / WSIZE) == NULL)
c0106f05:	83 ec 0c             	sub    $0xc,%esp
c0106f08:	68 ff 03 00 00       	push   $0x3ff
c0106f0d:	e8 33 fb ff ff       	call   c0106a45 <extend_heap>
c0106f12:	83 c4 10             	add    $0x10,%esp
c0106f15:	85 c0                	test   %eax,%eax
c0106f17:	75 07                	jne    c0106f20 <malloc_init+0x86>
        return -1;
c0106f19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0106f1e:	eb 05                	jmp    c0106f25 <malloc_init+0x8b>
    return 0;
c0106f20:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f25:	c9                   	leave  
c0106f26:	c3                   	ret    

c0106f27 <malloc_free>:

void malloc_free(void* bp)
{
c0106f27:	55                   	push   %ebp
c0106f28:	89 e5                	mov    %esp,%ebp
c0106f2a:	83 ec 10             	sub    $0x10,%esp
    size_t size = GET_SIZE(HDRP(bp));
c0106f2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f30:	83 e8 04             	sub    $0x4,%eax
c0106f33:	8b 00                	mov    (%eax),%eax
c0106f35:	83 e0 f8             	and    $0xfffffff8,%eax
c0106f38:	89 45 fc             	mov    %eax,-0x4(%ebp)

    PUT(HDRP(bp), PACK(size, 0));
c0106f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f3e:	8d 50 fc             	lea    -0x4(%eax),%edx
c0106f41:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f44:	89 02                	mov    %eax,(%edx)
    PUT(FTRP(bp), PACK(size, 0));
c0106f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f49:	83 e8 04             	sub    $0x4,%eax
c0106f4c:	8b 00                	mov    (%eax),%eax
c0106f4e:	83 e0 f8             	and    $0xfffffff8,%eax
c0106f51:	8d 50 f8             	lea    -0x8(%eax),%edx
c0106f54:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f57:	01 c2                	add    %eax,%edx
c0106f59:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f5c:	89 02                	mov    %eax,(%edx)
    coalesce(bp);
c0106f5e:	ff 75 08             	push   0x8(%ebp)
c0106f61:	e8 69 fb ff ff       	call   c0106acf <coalesce>
c0106f66:	83 c4 04             	add    $0x4,%esp
}
c0106f69:	90                   	nop
c0106f6a:	c9                   	leave  
c0106f6b:	c3                   	ret    

c0106f6c <k_malloc>:

void* k_malloc(size_t size)
{
c0106f6c:	55                   	push   %ebp
c0106f6d:	89 e5                	mov    %esp,%ebp
c0106f6f:	83 ec 18             	sub    $0x18,%esp
    size_t asize;
    size_t extendsize;
    char* bp;

    if(size == 0)
c0106f72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106f76:	75 0a                	jne    c0106f82 <k_malloc+0x16>
        return NULL;
c0106f78:	b8 00 00 00 00       	mov    $0x0,%eax
c0106f7d:	e9 8a 00 00 00       	jmp    c010700c <k_malloc+0xa0>
    
    //THE MIN blk is 2*DSIZE, ONE DSIZE means head and foot, one is align
    if(size <= DSIZE)
c0106f82:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0106f86:	77 09                	ja     c0106f91 <k_malloc+0x25>
        asize = 2 * DSIZE;
c0106f88:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c0106f8f:	eb 0e                	jmp    c0106f9f <k_malloc+0x33>
    else
        asize = DSIZE * ((size + DSIZE) + (DSIZE - 1)) / DSIZE; // Round up 
c0106f91:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f94:	83 c0 0f             	add    $0xf,%eax
c0106f97:	25 ff ff ff 1f       	and    $0x1fffffff,%eax
c0106f9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //search the free list of fit
    if((bp = find_fit(asize)) != NULL)
c0106f9f:	ff 75 f4             	push   -0xc(%ebp)
c0106fa2:	e8 c6 fc ff ff       	call   c0106c6d <find_fit>
c0106fa7:	83 c4 04             	add    $0x4,%esp
c0106faa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106fad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106fb1:	74 13                	je     c0106fc6 <k_malloc+0x5a>
    {
        place(bp, asize);
c0106fb3:	ff 75 f4             	push   -0xc(%ebp)
c0106fb6:	ff 75 f0             	push   -0x10(%ebp)
c0106fb9:	e8 12 fd ff ff       	call   c0106cd0 <place>
c0106fbe:	83 c4 08             	add    $0x8,%esp
        return bp;
c0106fc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fc4:	eb 46                	jmp    c010700c <k_malloc+0xa0>
    }

    //no fit found try to extend head mem
    extendsize = MAX(asize, CHUNKSIZE);
c0106fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fc9:	ba 00 10 00 00       	mov    $0x1000,%edx
c0106fce:	39 d0                	cmp    %edx,%eax
c0106fd0:	0f 42 c2             	cmovb  %edx,%eax
c0106fd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((bp = extend_heap(extendsize / WSIZE)) == NULL)
c0106fd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106fd9:	c1 e8 02             	shr    $0x2,%eax
c0106fdc:	83 ec 0c             	sub    $0xc,%esp
c0106fdf:	50                   	push   %eax
c0106fe0:	e8 60 fa ff ff       	call   c0106a45 <extend_heap>
c0106fe5:	83 c4 10             	add    $0x10,%esp
c0106fe8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106feb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106fef:	75 07                	jne    c0106ff8 <k_malloc+0x8c>
        return NULL;
c0106ff1:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ff6:	eb 14                	jmp    c010700c <k_malloc+0xa0>
    place(bp, asize);
c0106ff8:	83 ec 08             	sub    $0x8,%esp
c0106ffb:	ff 75 f4             	push   -0xc(%ebp)
c0106ffe:	ff 75 f0             	push   -0x10(%ebp)
c0107001:	e8 ca fc ff ff       	call   c0106cd0 <place>
c0107006:	83 c4 10             	add    $0x10,%esp
    return bp;
c0107009:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010700c:	c9                   	leave  
c010700d:	c3                   	ret    

c010700e <cpu_invplg>:

reg32 cpu_r_cr3();


static inline void cpu_invplg(void* va)
{
c010700e:	55                   	push   %ebp
c010700f:	89 e5                	mov    %esp,%ebp
    asm volatile("invlpg (%0)" ::"r"((unsigned int)va) : "memory");
c0107011:	8b 45 08             	mov    0x8(%ebp),%eax
c0107014:	0f 01 38             	invlpg (%eax)
};
c0107017:	90                   	nop
c0107018:	5d                   	pop    %ebp
c0107019:	c3                   	ret    

c010701a <vmm_init>:
#include <kernel/memory/vir_mem.h>
#include <libs/mstring.h>

void vmm_init() {
c010701a:	55                   	push   %ebp
c010701b:	89 e5                	mov    %esp,%ebp
    // TODO: something here?
}
c010701d:	90                   	nop
c010701e:	5d                   	pop    %ebp
c010701f:	c3                   	ret    

c0107020 <get_pd>:

// TODO: Move these nasty inline asm stuff into hal
//      These should be arch dependent
ptd_t* get_pd() {
c0107020:	55                   	push   %ebp
c0107021:	89 e5                	mov    %esp,%ebp
c0107023:	83 ec 10             	sub    $0x10,%esp
    ptd_t* pd;
    #ifdef __ARCH_IA32
    __asm__(
c0107026:	0f 20 d8             	mov    %cr3,%eax
c0107029:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010702e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        "movl %%cr3, %0\n"
        "andl $0xfffff000, %0"
        : "=r"(pd)
    );
    #endif
    return P2V(pd);
c0107031:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107034:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0107039:	c9                   	leave  
c010703a:	c3                   	ret    

c010703b <set_pd>:

void set_pd(ptd_t* pd) {
c010703b:	55                   	push   %ebp
c010703c:	89 e5                	mov    %esp,%ebp
    #ifdef __ARCH_IA32
    __asm__(
c010703e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107041:	89 c0                	mov    %eax,%eax
c0107043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107048:	0f 22 d8             	mov    %eax,%cr3
        "movl %%eax, %%cr3\n"
        :
        : "r" (pd)
    );
    #endif
}
c010704b:	90                   	nop
c010704c:	5d                   	pop    %ebp
c010704d:	c3                   	ret    

c010704e <vmm_init_pd>:

ptd_t* vmm_init_pd() {
c010704e:	55                   	push   %ebp
c010704f:	89 e5                	mov    %esp,%ebp
c0107051:	83 ec 18             	sub    $0x18,%esp
    ptd_t* dir = pmm_alloc_page(KERNEL_PID, PP_FGPERSIST);
c0107054:	83 ec 08             	sub    $0x8,%esp
c0107057:	6a 01                	push   $0x1
c0107059:	6a ff                	push   $0xffffffff
c010705b:	e8 c4 f7 ff ff       	call   c0106824 <pmm_alloc_page>
c0107060:	83 c4 10             	add    $0x10,%esp
c0107063:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (size_t i = 0; i < 1024; i++)
c0107066:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010706d:	eb 19                	jmp    c0107088 <vmm_init_pd+0x3a>
    {
        dir[i] = 0;
c010706f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107072:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107079:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010707c:	01 d0                	add    %edx,%eax
c010707e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (size_t i = 0; i < 1024; i++)
c0107084:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107088:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010708f:	76 de                	jbe    c010706f <vmm_init_pd+0x21>
    }
    
    // 自己映射自己，方便我们在软件层面进行查表地址转换
    dir[1023] = PDE(T_SELF_REF_PERM, dir);
c0107091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107094:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107099:	89 c2                	mov    %eax,%edx
c010709b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010709e:	05 fc 0f 00 00       	add    $0xffc,%eax
c01070a3:	83 ca 13             	or     $0x13,%edx
c01070a6:	89 10                	mov    %edx,(%eax)

    return dir;
c01070a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01070ab:	c9                   	leave  
c01070ac:	c3                   	ret    

c01070ad <__vmm_map_alloc>:
                   uint32_t l1_inx,
                   uint32_t l2_inx,
                   uintptr_t pa,
                   pt_attr attr,
                   int forced)
{
c01070ad:	55                   	push   %ebp
c01070ae:	89 e5                	mov    %esp,%ebp
c01070b0:	53                   	push   %ebx
c01070b1:	83 ec 14             	sub    $0x14,%esp
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01070b4:	c7 45 f4 00 f0 ff ff 	movl   $0xfffff000,-0xc(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(l1_inx);
c01070bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070be:	c1 e0 0c             	shl    $0xc,%eax
c01070c1:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01070c6:	89 45 f0             	mov    %eax,-0x10(%ebp)


    // See if attr make sense
    assert(attr <= 128);
c01070c9:	81 7d 18 80 00 00 00 	cmpl   $0x80,0x18(%ebp)
c01070d0:	76 1a                	jbe    c01070ec <__vmm_map_alloc+0x3f>
c01070d2:	83 ec 04             	sub    $0x4,%esp
c01070d5:	68 9e 00 00 00       	push   $0x9e
c01070da:	68 4c b2 28 c0       	push   $0xc028b24c
c01070df:	68 65 b2 28 c0       	push   $0xc028b265
c01070e4:	e8 24 18 00 00       	call   c010890d <__assert_fail>
c01070e9:	83 c4 10             	add    $0x10,%esp

    if (!ptd[l1_inx]) {
c01070ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01070f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070f9:	01 d0                	add    %edx,%eax
c01070fb:	8b 00                	mov    (%eax),%eax
c01070fd:	85 c0                	test   %eax,%eax
c01070ff:	75 6b                	jne    c010716c <__vmm_map_alloc+0xbf>
        uint8_t* new_pt_pa = pmm_alloc_page(pid, PP_FGPERSIST);
c0107101:	83 ec 08             	sub    $0x8,%esp
c0107104:	6a 01                	push   $0x1
c0107106:	ff 75 08             	push   0x8(%ebp)
c0107109:	e8 16 f7 ff ff       	call   c0106824 <pmm_alloc_page>
c010710e:	83 c4 10             	add    $0x10,%esp
c0107111:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 物理内存已满！
        if (!new_pt_pa) {
c0107114:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107118:	75 0a                	jne    c0107124 <__vmm_map_alloc+0x77>
            return 0;
c010711a:	b8 00 00 00 00       	mov    $0x0,%eax
c010711f:	e9 b2 00 00 00       	jmp    c01071d6 <__vmm_map_alloc+0x129>
        }

        // This must be writable
        ptd[l1_inx] = PDE(attr | PG_WRITE, new_pt_pa);
c0107124:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107127:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010712c:	89 c1                	mov    %eax,%ecx
c010712e:	8b 45 18             	mov    0x18(%ebp),%eax
c0107131:	83 c8 02             	or     $0x2,%eax
c0107134:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107139:	89 c2                	mov    %eax,%edx
c010713b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010713e:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c0107145:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107148:	01 d8                	add    %ebx,%eax
c010714a:	09 ca                	or     %ecx,%edx
c010714c:	89 10                	mov    %edx,(%eax)
        memset((void*)PT_VADDR(l1_inx), 0, PM_PAGE_SIZE);
c010714e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107151:	c1 e0 0c             	shl    $0xc,%eax
c0107154:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107159:	83 ec 04             	sub    $0x4,%esp
c010715c:	68 00 10 00 00       	push   $0x1000
c0107161:	6a 00                	push   $0x0
c0107163:	50                   	push   %eax
c0107164:	e8 74 1a 00 00       	call   c0108bdd <memset>
c0107169:	83 c4 10             	add    $0x10,%esp
    }

    if (pt[l2_inx]) {
c010716c:	8b 45 10             	mov    0x10(%ebp),%eax
c010716f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107176:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107179:	01 d0                	add    %edx,%eax
c010717b:	8b 00                	mov    (%eax),%eax
c010717d:	85 c0                	test   %eax,%eax
c010717f:	74 0d                	je     c010718e <__vmm_map_alloc+0xe1>
        if (!forced) {
c0107181:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0107185:	75 07                	jne    c010718e <__vmm_map_alloc+0xe1>
            return 0;
c0107187:	b8 00 00 00 00       	mov    $0x0,%eax
c010718c:	eb 48                	jmp    c01071d6 <__vmm_map_alloc+0x129>
        }
    }

    if ((HAS_FLAGS(attr, PG_PRESENT))) {
c010718e:	8b 45 18             	mov    0x18(%ebp),%eax
c0107191:	83 e0 01             	and    $0x1,%eax
c0107194:	85 c0                	test   %eax,%eax
c0107196:	74 12                	je     c01071aa <__vmm_map_alloc+0xfd>
        // add one on reference count, regardless of existence.
        pmm_ref_page(pid, pa);
c0107198:	8b 45 14             	mov    0x14(%ebp),%eax
c010719b:	83 ec 08             	sub    $0x8,%esp
c010719e:	50                   	push   %eax
c010719f:	ff 75 08             	push   0x8(%ebp)
c01071a2:	e8 44 f8 ff ff       	call   c01069eb <pmm_ref_page>
c01071a7:	83 c4 10             	add    $0x10,%esp
    }

    pt[l2_inx] = PTE(attr, pa);
c01071aa:	8b 45 14             	mov    0x14(%ebp),%eax
c01071ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01071b2:	89 c1                	mov    %eax,%ecx
c01071b4:	8b 45 18             	mov    0x18(%ebp),%eax
c01071b7:	25 ff 0f 00 00       	and    $0xfff,%eax
c01071bc:	89 c2                	mov    %eax,%edx
c01071be:	8b 45 10             	mov    0x10(%ebp),%eax
c01071c1:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01071c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071cb:	01 d8                	add    %ebx,%eax
c01071cd:	09 ca                	or     %ecx,%edx
c01071cf:	89 10                	mov    %edx,(%eax)

    return 1;
c01071d1:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01071d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01071d9:	c9                   	leave  
c01071da:	c3                   	ret    

c01071db <vmm_map_page>:

void* vmm_map_page(pid_t pid, void* va, void* pa, pt_attr dattr, pt_attr tattr) {
c01071db:	55                   	push   %ebp
c01071dc:	89 e5                	mov    %esp,%ebp
c01071de:	53                   	push   %ebx
c01071df:	83 ec 24             	sub    $0x24,%esp
    // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c01071e2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01071e6:	74 06                	je     c01071ee <vmm_map_page+0x13>
c01071e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01071ec:	75 0a                	jne    c01071f8 <vmm_map_page+0x1d>
        return NULL;
c01071ee:	b8 00 00 00 00       	mov    $0x0,%eax
c01071f3:	e9 d4 01 00 00       	jmp    c01073cc <vmm_map_page+0x1f1>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c01071f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01071fb:	c1 e8 16             	shr    $0x16,%eax
c01071fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c0107201:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107204:	c1 e8 0c             	shr    $0xc,%eax
c0107207:	25 ff 03 00 00       	and    $0x3ff,%eax
c010720c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c010720f:	c7 45 e4 00 f0 ff ff 	movl   $0xfffff000,-0x1c(%ebp)

    // 在页表与页目录中找到一个可用的空位进行映射（位于va或其附近）
    ptd_t* pde = ptd[pd_offset];
c0107216:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107219:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107220:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107223:	01 d0                	add    %edx,%eax
c0107225:	8b 00                	mov    (%eax),%eax
c0107227:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(pd_offset);
c010722a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010722d:	c1 e0 0c             	shl    $0xc,%eax
c0107230:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107235:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (pde && pd_offset < 1024) {
c0107238:	e9 9b 00 00 00       	jmp    c01072d8 <vmm_map_page+0xfd>
        if (pt_offset == 1024) {
c010723d:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
c0107244:	75 2d                	jne    c0107273 <vmm_map_page+0x98>
            pd_offset++;
c0107246:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            pt_offset = 0;
c010724a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
            pde = ptd[pd_offset];
c0107251:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107254:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010725b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010725e:	01 d0                	add    %edx,%eax
c0107260:	8b 00                	mov    (%eax),%eax
c0107262:	89 45 ec             	mov    %eax,-0x14(%ebp)
            pt = (pt_t*)PT_VADDR(pd_offset);
c0107265:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107268:	c1 e0 0c             	shl    $0xc,%eax
c010726b:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107270:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
        // 页表有空位，只需要开辟一个新的 PTE
        if (pt && !pt[pt_offset]) {
c0107273:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107277:	74 5b                	je     c01072d4 <vmm_map_page+0xf9>
c0107279:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010727c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107283:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107286:	01 d0                	add    %edx,%eax
c0107288:	8b 00                	mov    (%eax),%eax
c010728a:	85 c0                	test   %eax,%eax
c010728c:	75 46                	jne    c01072d4 <vmm_map_page+0xf9>
            pt[pt_offset] = PTE(tattr, pa);
c010728e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107291:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107296:	89 c1                	mov    %eax,%ecx
c0107298:	8b 45 18             	mov    0x18(%ebp),%eax
c010729b:	25 ff 0f 00 00       	and    $0xfff,%eax
c01072a0:	89 c2                	mov    %eax,%edx
c01072a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072a5:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01072ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072af:	01 d8                	add    %ebx,%eax
c01072b1:	09 ca                	or     %ecx,%edx
c01072b3:	89 10                	mov    %edx,(%eax)
            return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c01072b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072b8:	c1 e0 16             	shl    $0x16,%eax
c01072bb:	89 c2                	mov    %eax,%edx
c01072bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072c0:	c1 e0 0c             	shl    $0xc,%eax
c01072c3:	09 c2                	or     %eax,%edx
c01072c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01072c8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01072cd:	09 d0                	or     %edx,%eax
c01072cf:	e9 f8 00 00 00       	jmp    c01073cc <vmm_map_page+0x1f1>
        }
        pt_offset++;
c01072d4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    while (pde && pd_offset < 1024) {
c01072d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01072dc:	74 0d                	je     c01072eb <vmm_map_page+0x110>
c01072de:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c01072e5:	0f 86 52 ff ff ff    	jbe    c010723d <vmm_map_page+0x62>
    }
    
    // 页目录与所有页表已满！
    if (pd_offset > 1024) {
c01072eb:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%ebp)
c01072f2:	76 0a                	jbe    c01072fe <vmm_map_page+0x123>
        return NULL;
c01072f4:	b8 00 00 00 00       	mov    $0x0,%eax
c01072f9:	e9 ce 00 00 00       	jmp    c01073cc <vmm_map_page+0x1f1>
    }

    // 页目录有空位，需要开辟一个新的 PDE
    uint8_t* new_pt_pa = pmm_alloc_page(pid, PP_FGPERSIST);
c01072fe:	83 ec 08             	sub    $0x8,%esp
c0107301:	6a 01                	push   $0x1
c0107303:	ff 75 08             	push   0x8(%ebp)
c0107306:	e8 19 f5 ff ff       	call   c0106824 <pmm_alloc_page>
c010730b:	83 c4 10             	add    $0x10,%esp
c010730e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    
    // 物理内存已满！
    if (!new_pt_pa) {
c0107311:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107315:	75 0a                	jne    c0107321 <vmm_map_page+0x146>
        return NULL;
c0107317:	b8 00 00 00 00       	mov    $0x0,%eax
c010731c:	e9 ab 00 00 00       	jmp    c01073cc <vmm_map_page+0x1f1>
    }
    
    ptd[pd_offset] = PDE(dattr, new_pt_pa);
c0107321:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107324:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107329:	89 c1                	mov    %eax,%ecx
c010732b:	8b 45 14             	mov    0x14(%ebp),%eax
c010732e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107333:	89 c2                	mov    %eax,%edx
c0107335:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107338:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c010733f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107342:	01 d8                	add    %ebx,%eax
c0107344:	09 ca                	or     %ecx,%edx
c0107346:	89 10                	mov    %edx,(%eax)
    
    memset((void*)PT_VADDR(pd_offset), 0, PM_PAGE_SIZE);
c0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010734b:	c1 e0 0c             	shl    $0xc,%eax
c010734e:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107353:	83 ec 04             	sub    $0x4,%esp
c0107356:	68 00 10 00 00       	push   $0x1000
c010735b:	6a 00                	push   $0x0
c010735d:	50                   	push   %eax
c010735e:	e8 7a 18 00 00       	call   c0108bdd <memset>
c0107363:	83 c4 10             	add    $0x10,%esp


    if ((HAS_FLAGS(tattr, PG_PRESENT) && HAS_FLAGS(dattr, PG_PRESENT))) {
c0107366:	8b 45 18             	mov    0x18(%ebp),%eax
c0107369:	83 e0 01             	and    $0x1,%eax
c010736c:	85 c0                	test   %eax,%eax
c010736e:	74 1b                	je     c010738b <vmm_map_page+0x1b0>
c0107370:	8b 45 14             	mov    0x14(%ebp),%eax
c0107373:	83 e0 01             	and    $0x1,%eax
c0107376:	85 c0                	test   %eax,%eax
c0107378:	74 11                	je     c010738b <vmm_map_page+0x1b0>
        // add one on reference count, regardless of existence.
        pmm_ref_page(pid, pa);
c010737a:	83 ec 08             	sub    $0x8,%esp
c010737d:	ff 75 10             	push   0x10(%ebp)
c0107380:	ff 75 08             	push   0x8(%ebp)
c0107383:	e8 63 f6 ff ff       	call   c01069eb <pmm_ref_page>
c0107388:	83 c4 10             	add    $0x10,%esp
    }
    pt[pt_offset] = PTE(tattr, pa);
c010738b:	8b 45 10             	mov    0x10(%ebp),%eax
c010738e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107393:	89 c1                	mov    %eax,%ecx
c0107395:	8b 45 18             	mov    0x18(%ebp),%eax
c0107398:	25 ff 0f 00 00       	and    $0xfff,%eax
c010739d:	89 c2                	mov    %eax,%edx
c010739f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073a2:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01073a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073ac:	01 d8                	add    %ebx,%eax
c01073ae:	09 ca                	or     %ecx,%edx
c01073b0:	89 10                	mov    %edx,(%eax)

    return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c01073b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073b5:	c1 e0 16             	shl    $0x16,%eax
c01073b8:	89 c2                	mov    %eax,%edx
c01073ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073bd:	c1 e0 0c             	shl    $0xc,%eax
c01073c0:	09 c2                	or     %eax,%edx
c01073c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073c5:	25 ff 0f 00 00       	and    $0xfff,%eax
c01073ca:	09 d0                	or     %edx,%eax
}
c01073cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01073cf:	c9                   	leave  
c01073d0:	c3                   	ret    

c01073d1 <vmm_cover_map_page>:

void* vmm_cover_map_page(pid_t pid, void* va, void* pa, pt_attr dattr, pt_attr tattr)
{
c01073d1:	55                   	push   %ebp
c01073d2:	89 e5                	mov    %esp,%ebp
c01073d4:	53                   	push   %ebx
c01073d5:	83 ec 24             	sub    $0x24,%esp
        // 显然，对空指针进行映射没有意义。
    if (!pa || !va) {
c01073d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01073dc:	74 06                	je     c01073e4 <vmm_cover_map_page+0x13>
c01073de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01073e2:	75 0a                	jne    c01073ee <vmm_cover_map_page+0x1d>
        return NULL;
c01073e4:	b8 00 00 00 00       	mov    $0x0,%eax
c01073e9:	e9 8a 01 00 00       	jmp    c0107578 <vmm_cover_map_page+0x1a7>
    }

    uintptr_t pd_offset = PD_INDEX(va);
c01073ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073f1:	c1 e8 16             	shr    $0x16,%eax
c01073f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t pt_offset = PT_INDEX(va);
c01073f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073fa:	c1 e8 0c             	shr    $0xc,%eax
c01073fd:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107402:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c0107405:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    // 在页表与页目录中找到一个可用的空位进行映射（位于va或其附近）
    ptd_t* pde = ptd[pd_offset];
c010740c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010740f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107416:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107419:	01 d0                	add    %edx,%eax
c010741b:	8b 00                	mov    (%eax),%eax
c010741d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pt_t* pt = (uintptr_t)PT_VADDR(pd_offset); 
c0107420:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107423:	c1 e0 0c             	shl    $0xc,%eax
c0107426:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c010742b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(!pde)
c010742e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107432:	75 68                	jne    c010749c <vmm_cover_map_page+0xcb>
    {
        uint8_t* new_pt_pa = pmm_alloc_page(pid, PP_FGPERSIST);
c0107434:	83 ec 08             	sub    $0x8,%esp
c0107437:	6a 01                	push   $0x1
c0107439:	ff 75 08             	push   0x8(%ebp)
c010743c:	e8 e3 f3 ff ff       	call   c0106824 <pmm_alloc_page>
c0107441:	83 c4 10             	add    $0x10,%esp
c0107444:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!new_pt_pa) {
c0107447:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010744b:	75 0a                	jne    c0107457 <vmm_cover_map_page+0x86>
            return NULL;
c010744d:	b8 00 00 00 00       	mov    $0x0,%eax
c0107452:	e9 21 01 00 00       	jmp    c0107578 <vmm_cover_map_page+0x1a7>
        }

        ptd[pd_offset] = PDE(dattr, new_pt_pa);
c0107457:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010745a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010745f:	89 c1                	mov    %eax,%ecx
c0107461:	8b 45 14             	mov    0x14(%ebp),%eax
c0107464:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107469:	89 c2                	mov    %eax,%edx
c010746b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010746e:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c0107475:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107478:	01 d8                	add    %ebx,%eax
c010747a:	09 ca                	or     %ecx,%edx
c010747c:	89 10                	mov    %edx,(%eax)
        memset((void*)PT_VADDR(pd_offset), 0, PM_PAGE_SIZE);
c010747e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107481:	c1 e0 0c             	shl    $0xc,%eax
c0107484:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c0107489:	83 ec 04             	sub    $0x4,%esp
c010748c:	68 00 10 00 00       	push   $0x1000
c0107491:	6a 00                	push   $0x0
c0107493:	50                   	push   %eax
c0107494:	e8 44 17 00 00       	call   c0108bdd <memset>
c0107499:	83 c4 10             	add    $0x10,%esp

    }   

    // 页目录有空位，需要开辟一个新的 PDE
    uint8_t* new_pt_pa = pmm_alloc_page(pid, PP_FGPERSIST);
c010749c:	83 ec 08             	sub    $0x8,%esp
c010749f:	6a 01                	push   $0x1
c01074a1:	ff 75 08             	push   0x8(%ebp)
c01074a4:	e8 7b f3 ff ff       	call   c0106824 <pmm_alloc_page>
c01074a9:	83 c4 10             	add    $0x10,%esp
c01074ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
    
    // 物理内存已满！
    if (!new_pt_pa) {
c01074af:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01074b3:	75 0a                	jne    c01074bf <vmm_cover_map_page+0xee>
        return NULL;
c01074b5:	b8 00 00 00 00       	mov    $0x0,%eax
c01074ba:	e9 b9 00 00 00       	jmp    c0107578 <vmm_cover_map_page+0x1a7>
    }
    
    ptd[pd_offset] = PDE(dattr, new_pt_pa);
c01074bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01074c7:	89 c1                	mov    %eax,%ecx
c01074c9:	8b 45 14             	mov    0x14(%ebp),%eax
c01074cc:	25 ff 0f 00 00       	and    $0xfff,%eax
c01074d1:	89 c2                	mov    %eax,%edx
c01074d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074d6:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c01074dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074e0:	01 d8                	add    %ebx,%eax
c01074e2:	09 ca                	or     %ecx,%edx
c01074e4:	89 10                	mov    %edx,(%eax)
    
    memset((void*)PT_VADDR(pd_offset), 0, PM_PAGE_SIZE);
c01074e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074e9:	c1 e0 0c             	shl    $0xc,%eax
c01074ec:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01074f1:	83 ec 04             	sub    $0x4,%esp
c01074f4:	68 00 10 00 00       	push   $0x1000
c01074f9:	6a 00                	push   $0x0
c01074fb:	50                   	push   %eax
c01074fc:	e8 dc 16 00 00       	call   c0108bdd <memset>
c0107501:	83 c4 10             	add    $0x10,%esp

    if (HAS_FLAGS(tattr, PG_PRESENT) && HAS_FLAGS(dattr, PG_PRESENT)) {
c0107504:	8b 45 18             	mov    0x18(%ebp),%eax
c0107507:	83 e0 01             	and    $0x1,%eax
c010750a:	85 c0                	test   %eax,%eax
c010750c:	74 1b                	je     c0107529 <vmm_cover_map_page+0x158>
c010750e:	8b 45 14             	mov    0x14(%ebp),%eax
c0107511:	83 e0 01             	and    $0x1,%eax
c0107514:	85 c0                	test   %eax,%eax
c0107516:	74 11                	je     c0107529 <vmm_cover_map_page+0x158>
        // add one on reference count, regardless of existence.
        pmm_ref_page(pid, pa);
c0107518:	83 ec 08             	sub    $0x8,%esp
c010751b:	ff 75 10             	push   0x10(%ebp)
c010751e:	ff 75 08             	push   0x8(%ebp)
c0107521:	e8 c5 f4 ff ff       	call   c01069eb <pmm_ref_page>
c0107526:	83 c4 10             	add    $0x10,%esp
    }
    pt[pt_offset] = PTE(tattr, pa);
c0107529:	8b 45 10             	mov    0x10(%ebp),%eax
c010752c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107531:	89 c1                	mov    %eax,%ecx
c0107533:	8b 45 18             	mov    0x18(%ebp),%eax
c0107536:	25 ff 0f 00 00       	and    $0xfff,%eax
c010753b:	89 c2                	mov    %eax,%edx
c010753d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107540:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
c0107547:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010754a:	01 d8                	add    %ebx,%eax
c010754c:	09 ca                	or     %ecx,%edx
c010754e:	89 10                	mov    %edx,(%eax)

    cpu_invplg(va);
c0107550:	83 ec 0c             	sub    $0xc,%esp
c0107553:	ff 75 0c             	push   0xc(%ebp)
c0107556:	e8 b3 fa ff ff       	call   c010700e <cpu_invplg>
c010755b:	83 c4 10             	add    $0x10,%esp

    return V_ADDR(pd_offset, pt_offset, PG_OFFSET(va));
c010755e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107561:	c1 e0 16             	shl    $0x16,%eax
c0107564:	89 c2                	mov    %eax,%edx
c0107566:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107569:	c1 e0 0c             	shl    $0xc,%eax
c010756c:	09 c2                	or     %eax,%edx
c010756e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107571:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107576:	09 d0                	or     %edx,%eax
}
c0107578:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010757b:	c9                   	leave  
c010757c:	c3                   	ret    

c010757d <vmm_alloc_page>:

void* vmm_alloc_page(pid_t pid, void* vpn, void** pa, pt_attr dattr, pt_attr tattr)
{
c010757d:	55                   	push   %ebp
c010757e:	89 e5                	mov    %esp,%ebp
c0107580:	83 ec 18             	sub    $0x18,%esp
    void* pp = pmm_alloc_page(pid, tattr);
c0107583:	83 ec 08             	sub    $0x8,%esp
c0107586:	ff 75 18             	push   0x18(%ebp)
c0107589:	ff 75 08             	push   0x8(%ebp)
c010758c:	e8 93 f2 ff ff       	call   c0106824 <pmm_alloc_page>
c0107591:	83 c4 10             	add    $0x10,%esp
c0107594:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* result = vmm_map_page(pid, vpn, pp, dattr, tattr);
c0107597:	83 ec 0c             	sub    $0xc,%esp
c010759a:	ff 75 18             	push   0x18(%ebp)
c010759d:	ff 75 14             	push   0x14(%ebp)
c01075a0:	ff 75 f4             	push   -0xc(%ebp)
c01075a3:	ff 75 0c             	push   0xc(%ebp)
c01075a6:	ff 75 08             	push   0x8(%ebp)
c01075a9:	e8 2d fc ff ff       	call   c01071db <vmm_map_page>
c01075ae:	83 c4 20             	add    $0x20,%esp
c01075b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!result) {
c01075b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01075b8:	75 11                	jne    c01075cb <vmm_alloc_page+0x4e>
        pmm_free_page(pid, pp);
c01075ba:	83 ec 08             	sub    $0x8,%esp
c01075bd:	ff 75 f4             	push   -0xc(%ebp)
c01075c0:	ff 75 08             	push   0x8(%ebp)
c01075c3:	e8 91 f3 ff ff       	call   c0106959 <pmm_free_page>
c01075c8:	83 c4 10             	add    $0x10,%esp
    }
    pa ? (*pa = pp) : 0;
c01075cb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01075cf:	74 08                	je     c01075d9 <vmm_alloc_page+0x5c>
c01075d1:	8b 45 10             	mov    0x10(%ebp),%eax
c01075d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075d7:	89 10                	mov    %edx,(%eax)
    return result;
c01075d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01075dc:	c9                   	leave  
c01075dd:	c3                   	ret    

c01075de <vmm_alloc_pages>:

int vmm_alloc_pages(pid_t pid, void* va, size_t sz, pt_attr tattr, pp_attr_t pattr)
{
c01075de:	55                   	push   %ebp
c01075df:	89 e5                	mov    %esp,%ebp
c01075e1:	83 ec 28             	sub    $0x28,%esp
    assert((uintptr_t)va % PG_SIZE == 0) assert(sz % PG_SIZE == 0);
c01075e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075e7:	25 ff 0f 00 00       	and    $0xfff,%eax
c01075ec:	85 c0                	test   %eax,%eax
c01075ee:	74 1a                	je     c010760a <vmm_alloc_pages+0x2c>
c01075f0:	83 ec 04             	sub    $0x4,%esp
c01075f3:	68 32 01 00 00       	push   $0x132
c01075f8:	68 4c b2 28 c0       	push   $0xc028b24c
c01075fd:	68 71 b2 28 c0       	push   $0xc028b271
c0107602:	e8 06 13 00 00       	call   c010890d <__assert_fail>
c0107607:	83 c4 10             	add    $0x10,%esp
c010760a:	8b 45 10             	mov    0x10(%ebp),%eax
c010760d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107612:	85 c0                	test   %eax,%eax
c0107614:	74 1a                	je     c0107630 <vmm_alloc_pages+0x52>
c0107616:	83 ec 04             	sub    $0x4,%esp
c0107619:	68 32 01 00 00       	push   $0x132
c010761e:	68 4c b2 28 c0       	push   $0xc028b24c
c0107623:	68 8e b2 28 c0       	push   $0xc028b28e
c0107628:	e8 e0 12 00 00       	call   c010890d <__assert_fail>
c010762d:	83 c4 10             	add    $0x10,%esp

    void* va_ = va;
c0107630:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107633:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (size_t i = 0; i < (sz >> PG_SIZE_BITS); i++, va_ += PG_SIZE) {
c0107636:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010763d:	e9 97 00 00 00       	jmp    c01076d9 <vmm_alloc_pages+0xfb>
        void* pp = pmm_alloc_page(pid, pattr);
c0107642:	83 ec 08             	sub    $0x8,%esp
c0107645:	ff 75 18             	push   0x18(%ebp)
c0107648:	ff 75 08             	push   0x8(%ebp)
c010764b:	e8 d4 f1 ff ff       	call   c0106824 <pmm_alloc_page>
c0107650:	83 c4 10             	add    $0x10,%esp
c0107653:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t l1_index = PD_INDEX(va_);
c0107656:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107659:	c1 e8 16             	shr    $0x16,%eax
c010765c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        uint32_t l2_index = PT_INDEX(va_);
c010765f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107662:	c1 e8 0c             	shr    $0xc,%eax
c0107665:	25 ff 03 00 00       	and    $0x3ff,%eax
c010766a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!pp || !__vmm_map_alloc(
c010766d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107671:	74 21                	je     c0107694 <vmm_alloc_pages+0xb6>
c0107673:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107676:	83 ec 08             	sub    $0x8,%esp
c0107679:	6a 00                	push   $0x0
c010767b:	ff 75 14             	push   0x14(%ebp)
c010767e:	50                   	push   %eax
c010767f:	ff 75 e0             	push   -0x20(%ebp)
c0107682:	ff 75 e4             	push   -0x1c(%ebp)
c0107685:	ff 75 08             	push   0x8(%ebp)
c0107688:	e8 20 fa ff ff       	call   c01070ad <__vmm_map_alloc>
c010768d:	83 c4 20             	add    $0x20,%esp
c0107690:	85 c0                	test   %eax,%eax
c0107692:	75 3a                	jne    c01076ce <vmm_alloc_pages+0xf0>
                     pid,
                     l1_index, l2_index, (uintptr_t)pp, tattr, false)) {
            // if one failed, release previous allocated pages.
            va_ = va;
c0107694:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107697:	89 45 f4             	mov    %eax,-0xc(%ebp)
            for (size_t j = 0; j < i; j++, va_ += PG_SIZE) {
c010769a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076a1:	eb 1c                	jmp    c01076bf <vmm_alloc_pages+0xe1>
                vmm_unmap_page(pid, va_);
c01076a3:	83 ec 08             	sub    $0x8,%esp
c01076a6:	ff 75 f4             	push   -0xc(%ebp)
c01076a9:	ff 75 08             	push   0x8(%ebp)
c01076ac:	e8 8d 01 00 00       	call   c010783e <vmm_unmap_page>
c01076b1:	83 c4 10             	add    $0x10,%esp
            for (size_t j = 0; j < i; j++, va_ += PG_SIZE) {
c01076b4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076b8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01076bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076c2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01076c5:	72 dc                	jb     c01076a3 <vmm_alloc_pages+0xc5>
            }

            return false;
c01076c7:	b8 00 00 00 00       	mov    $0x0,%eax
c01076cc:	eb 1f                	jmp    c01076ed <vmm_alloc_pages+0x10f>
    for (size_t i = 0; i < (sz >> PG_SIZE_BITS); i++, va_ += PG_SIZE) {
c01076ce:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01076d2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01076d9:	8b 45 10             	mov    0x10(%ebp),%eax
c01076dc:	c1 e8 0c             	shr    $0xc,%eax
c01076df:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01076e2:	0f 82 5a ff ff ff    	jb     c0107642 <vmm_alloc_pages+0x64>
        }
    }

    return true;
c01076e8:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01076ed:	c9                   	leave  
c01076ee:	c3                   	ret    

c01076ef <vmm_set_mapping>:

int vmm_set_mapping(pid_t pid, void* va, void* pa, pt_attr attr)
{
c01076ef:	55                   	push   %ebp
c01076f0:	89 e5                	mov    %esp,%ebp
c01076f2:	83 ec 18             	sub    $0x18,%esp
    assert(((uintptr_t)va & 0xFFFU) == 0);
c01076f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076f8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01076fd:	85 c0                	test   %eax,%eax
c01076ff:	74 1a                	je     c010771b <vmm_set_mapping+0x2c>
c0107701:	83 ec 04             	sub    $0x4,%esp
c0107704:	68 4b 01 00 00       	push   $0x14b
c0107709:	68 4c b2 28 c0       	push   $0xc028b24c
c010770e:	68 a0 b2 28 c0       	push   $0xc028b2a0
c0107713:	e8 f5 11 00 00       	call   c010890d <__assert_fail>
c0107718:	83 c4 10             	add    $0x10,%esp

    uint32_t l1_index = PD_INDEX(va);
c010771b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010771e:	c1 e8 16             	shr    $0x16,%eax
c0107721:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c0107724:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107727:	c1 e8 0c             	shr    $0xc,%eax
c010772a:	25 ff 03 00 00       	and    $0x3ff,%eax
c010772f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // prevent map of recursive mapping region
    if (l1_index == 1023) {
c0107732:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0107739:	75 07                	jne    c0107742 <vmm_set_mapping+0x53>
        return 0;
c010773b:	b8 00 00 00 00       	mov    $0x0,%eax
c0107740:	eb 22                	jmp    c0107764 <vmm_set_mapping+0x75>
    }
    
    __vmm_map_alloc(pid, l1_index, l2_index, (uintptr_t)pa, attr, false);
c0107742:	8b 45 10             	mov    0x10(%ebp),%eax
c0107745:	83 ec 08             	sub    $0x8,%esp
c0107748:	6a 00                	push   $0x0
c010774a:	ff 75 14             	push   0x14(%ebp)
c010774d:	50                   	push   %eax
c010774e:	ff 75 f0             	push   -0x10(%ebp)
c0107751:	ff 75 f4             	push   -0xc(%ebp)
c0107754:	ff 75 08             	push   0x8(%ebp)
c0107757:	e8 51 f9 ff ff       	call   c01070ad <__vmm_map_alloc>
c010775c:	83 c4 20             	add    $0x20,%esp
    return 1;
c010775f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0107764:	c9                   	leave  
c0107765:	c3                   	ret    

c0107766 <__vmm_unmap_unalloc>:

void __vmm_unmap_unalloc(pid_t pid, void* va, int free_ppage)
{
c0107766:	55                   	push   %ebp
c0107767:	89 e5                	mov    %esp,%ebp
c0107769:	83 ec 28             	sub    $0x28,%esp
    assert(((uintptr_t)va & 0xFFFU) == 0);
c010776c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010776f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107774:	85 c0                	test   %eax,%eax
c0107776:	74 1a                	je     c0107792 <__vmm_unmap_unalloc+0x2c>
c0107778:	83 ec 04             	sub    $0x4,%esp
c010777b:	68 5b 01 00 00       	push   $0x15b
c0107780:	68 4c b2 28 c0       	push   $0xc028b24c
c0107785:	68 a0 b2 28 c0       	push   $0xc028b2a0
c010778a:	e8 7e 11 00 00       	call   c010890d <__assert_fail>
c010778f:	83 c4 10             	add    $0x10,%esp

    uint32_t l1_index = PD_INDEX(va);
c0107792:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107795:	c1 e8 16             	shr    $0x16,%eax
c0107798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c010779b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010779e:	c1 e8 0c             	shr    $0xc,%eax
c01077a1:	25 ff 03 00 00       	and    $0x3ff,%eax
c01077a6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // prevent unmap of recursive mapping region
    if (l1_index == 1023) {
c01077a9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c01077b0:	0f 84 85 00 00 00    	je     c010783b <__vmm_unmap_unalloc+0xd5>
        return;
    }

    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01077b6:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    if (ptd[l1_index]) {
c01077bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077c0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01077c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077ca:	01 d0                	add    %edx,%eax
c01077cc:	8b 00                	mov    (%eax),%eax
c01077ce:	85 c0                	test   %eax,%eax
c01077d0:	74 6a                	je     c010783c <__vmm_unmap_unalloc+0xd6>
        pt_t* pt = (uintptr_t)PT_VADDR(l1_index);
c01077d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077d5:	c1 e0 0c             	shl    $0xc,%eax
c01077d8:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01077dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        pt_t pte = pt[l2_index];
c01077e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01077ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077ed:	01 d0                	add    %edx,%eax
c01077ef:	8b 00                	mov    (%eax),%eax
c01077f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (IS_CACHED(pte) && free_ppage) {
c01077f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077f7:	83 e0 01             	and    $0x1,%eax
c01077fa:	85 c0                	test   %eax,%eax
c01077fc:	74 18                	je     c0107816 <__vmm_unmap_unalloc+0xb0>
c01077fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107802:	74 12                	je     c0107816 <__vmm_unmap_unalloc+0xb0>
            pmm_free_page(pid, (void*)pte);
c0107804:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107807:	83 ec 08             	sub    $0x8,%esp
c010780a:	50                   	push   %eax
c010780b:	ff 75 08             	push   0x8(%ebp)
c010780e:	e8 46 f1 ff ff       	call   c0106959 <pmm_free_page>
c0107813:	83 c4 10             	add    $0x10,%esp
        }
        cpu_invplg(va);
c0107816:	83 ec 0c             	sub    $0xc,%esp
c0107819:	ff 75 0c             	push   0xc(%ebp)
c010781c:	e8 ed f7 ff ff       	call   c010700e <cpu_invplg>
c0107821:	83 c4 10             	add    $0x10,%esp

        pt[l2_index] = 0;
c0107824:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107827:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010782e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107831:	01 d0                	add    %edx,%eax
c0107833:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0107839:	eb 01                	jmp    c010783c <__vmm_unmap_unalloc+0xd6>
        return;
c010783b:	90                   	nop
    }
}
c010783c:	c9                   	leave  
c010783d:	c3                   	ret    

c010783e <vmm_unmap_page>:

void vmm_unmap_page(pid_t pid, void* va)
{
c010783e:	55                   	push   %ebp
c010783f:	89 e5                	mov    %esp,%ebp
c0107841:	83 ec 08             	sub    $0x8,%esp
    __vmm_unmap_unalloc(pid, va, true);
c0107844:	83 ec 04             	sub    $0x4,%esp
c0107847:	6a 01                	push   $0x1
c0107849:	ff 75 0c             	push   0xc(%ebp)
c010784c:	ff 75 08             	push   0x8(%ebp)
c010784f:	e8 12 ff ff ff       	call   c0107766 <__vmm_unmap_unalloc>
c0107854:	83 c4 10             	add    $0x10,%esp
}
c0107857:	90                   	nop
c0107858:	c9                   	leave  
c0107859:	c3                   	ret    

c010785a <vmm_unset_mapping>:

void vmm_unset_mapping(void* va)
{
c010785a:	55                   	push   %ebp
c010785b:	89 e5                	mov    %esp,%ebp
c010785d:	83 ec 08             	sub    $0x8,%esp
    __vmm_unmap_unalloc(0, va, false);
c0107860:	83 ec 04             	sub    $0x4,%esp
c0107863:	6a 00                	push   $0x0
c0107865:	ff 75 08             	push   0x8(%ebp)
c0107868:	6a 00                	push   $0x0
c010786a:	e8 f7 fe ff ff       	call   c0107766 <__vmm_unmap_unalloc>
c010786f:	83 c4 10             	add    $0x10,%esp
}
c0107872:	90                   	nop
c0107873:	c9                   	leave  
c0107874:	c3                   	ret    

c0107875 <vmm_lookup>:

v_mapping vmm_lookup(void* va)
{
c0107875:	55                   	push   %ebp
c0107876:	89 e5                	mov    %esp,%ebp
c0107878:	83 ec 38             	sub    $0x38,%esp
    assert(((uintptr_t)va & 0xFFFU) == 0);
c010787b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010787e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107883:	85 c0                	test   %eax,%eax
c0107885:	74 1a                	je     c01078a1 <vmm_lookup+0x2c>
c0107887:	83 ec 04             	sub    $0x4,%esp
c010788a:	68 7f 01 00 00       	push   $0x17f
c010788f:	68 4c b2 28 c0       	push   $0xc028b24c
c0107894:	68 a0 b2 28 c0       	push   $0xc028b2a0
c0107899:	e8 6f 10 00 00       	call   c010890d <__assert_fail>
c010789e:	83 c4 10             	add    $0x10,%esp

    uint32_t l1_index = PD_INDEX(va);
c01078a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078a4:	c1 e8 16             	shr    $0x16,%eax
c01078a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t l2_index = PT_INDEX(va);
c01078aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078ad:	c1 e8 0c             	shr    $0xc,%eax
c01078b0:	25 ff 03 00 00       	and    $0x3ff,%eax
c01078b5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    ptd_t* ptd = (ptd_t*)PTD_BASE_VADDR;
c01078b8:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%ebp)

    v_mapping mapping = { .flags = 0, .pa = 0, .pn = 0 };
c01078bf:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c01078c6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c01078cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01078d4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    if (ptd[l1_index]) {
c01078db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01078e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078e8:	01 d0                	add    %edx,%eax
c01078ea:	8b 00                	mov    (%eax),%eax
c01078ec:	85 c0                	test   %eax,%eax
c01078ee:	74 4f                	je     c010793f <vmm_lookup+0xca>
        pt_t* pt = (uintptr_t)PT_VADDR(l1_index);
c01078f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078f3:	c1 e0 0c             	shl    $0xc,%eax
c01078f6:	0d 00 00 c0 ff       	or     $0xffc00000,%eax
c01078fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        pt_t* l2pte = &pt[l2_index];
c01078fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107901:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107908:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010790b:	01 d0                	add    %edx,%eax
c010790d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (l2pte) {
c0107910:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107914:	74 29                	je     c010793f <vmm_lookup+0xca>
            mapping.flags = PG_ENTRY_FLAGS(*l2pte);
c0107916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107919:	8b 00                	mov    (%eax),%eax
c010791b:	66 25 ff 0f          	and    $0xfff,%ax
c010791f:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
            mapping.pa = PG_ENTRY_ADDR(*l2pte);
c0107923:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107926:	8b 00                	mov    (%eax),%eax
c0107928:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010792d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            mapping.pn = mapping.pa >> PG_SIZE_BITS;
c0107930:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107933:	c1 e8 0c             	shr    $0xc,%eax
c0107936:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            mapping.pte = l2pte;
c0107939:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010793c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
    }

    return mapping;
c010793f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107942:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107945:	89 10                	mov    %edx,(%eax)
c0107947:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010794a:	89 50 04             	mov    %edx,0x4(%eax)
c010794d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107950:	89 50 08             	mov    %edx,0x8(%eax)
c0107953:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107956:	89 50 0c             	mov    %edx,0xc(%eax)
}
c0107959:	8b 45 08             	mov    0x8(%ebp),%eax
c010795c:	c9                   	leave  
c010795d:	c2 04 00             	ret    $0x4

c0107960 <vmm_v2p>:

void* vmm_v2p(void* va)
{
c0107960:	55                   	push   %ebp
c0107961:	89 e5                	mov    %esp,%ebp
c0107963:	83 ec 18             	sub    $0x18,%esp
    return (void*)vmm_lookup(va).pa;
c0107966:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107969:	83 ec 08             	sub    $0x8,%esp
c010796c:	ff 75 08             	push   0x8(%ebp)
c010796f:	50                   	push   %eax
c0107970:	e8 00 ff ff ff       	call   c0107875 <vmm_lookup>
c0107975:	83 c4 0c             	add    $0xc,%esp
c0107978:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c010797b:	c9                   	leave  
c010797c:	c3                   	ret    

c010797d <io_outb>:
                 : "memory", "cc");
}

static inline void
io_outb(int port, uint8_t data)
{
c010797d:	55                   	push   %ebp
c010797e:	89 e5                	mov    %esp,%ebp
c0107980:	83 ec 04             	sub    $0x4,%esp
c0107983:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107986:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0107989:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010798d:	8b 55 08             	mov    0x8(%ebp),%edx
c0107990:	ee                   	out    %al,(%dx)
}
c0107991:	90                   	nop
c0107992:	c9                   	leave  
c0107993:	c3                   	ret    

c0107994 <frequence_set>:
#define PIT_CONTROL_PORT 0X43

//WRITE COUNTER
static void frequence_set(uint8_t counter_port, uint8_t counter_no, 
                         uint8_t rwl, uint8_t counter_mode, uint16_t counter_value)
{
c0107994:	55                   	push   %ebp
c0107995:	89 e5                	mov    %esp,%ebp
c0107997:	57                   	push   %edi
c0107998:	56                   	push   %esi
c0107999:	53                   	push   %ebx
c010799a:	83 ec 14             	sub    $0x14,%esp
c010799d:	8b 75 08             	mov    0x8(%ebp),%esi
c01079a0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c01079a3:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01079a6:	8b 55 14             	mov    0x14(%ebp),%edx
c01079a9:	8b 7d 18             	mov    0x18(%ebp),%edi
c01079ac:	89 f0                	mov    %esi,%eax
c01079ae:	88 45 f0             	mov    %al,-0x10(%ebp)
c01079b1:	88 5d ec             	mov    %bl,-0x14(%ebp)
c01079b4:	88 4d e8             	mov    %cl,-0x18(%ebp)
c01079b7:	88 55 e4             	mov    %dl,-0x1c(%ebp)
c01079ba:	89 f8                	mov    %edi,%eax
c01079bc:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    io_outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c01079c0:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c01079c4:	c1 e0 06             	shl    $0x6,%eax
c01079c7:	89 c2                	mov    %eax,%edx
c01079c9:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c01079cd:	c1 e0 04             	shl    $0x4,%eax
c01079d0:	09 c2                	or     %eax,%edx
c01079d2:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01079d6:	01 c0                	add    %eax,%eax
c01079d8:	09 d0                	or     %edx,%eax
c01079da:	0f b6 c0             	movzbl %al,%eax
c01079dd:	50                   	push   %eax
c01079de:	6a 43                	push   $0x43
c01079e0:	e8 98 ff ff ff       	call   c010797d <io_outb>
c01079e5:	83 c4 08             	add    $0x8,%esp
    io_outb(counter_port, (uint8_t)counter_value);
c01079e8:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c01079ec:	0f b6 d0             	movzbl %al,%edx
c01079ef:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01079f3:	52                   	push   %edx
c01079f4:	50                   	push   %eax
c01079f5:	e8 83 ff ff ff       	call   c010797d <io_outb>
c01079fa:	83 c4 08             	add    $0x8,%esp
    io_outb(counter_port, (uint8_t)(counter_value >> 8));
c01079fd:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0107a01:	66 c1 e8 08          	shr    $0x8,%ax
c0107a05:	0f b6 d0             	movzbl %al,%edx
c0107a08:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0107a0c:	52                   	push   %edx
c0107a0d:	50                   	push   %eax
c0107a0e:	e8 6a ff ff ff       	call   c010797d <io_outb>
c0107a13:	83 c4 08             	add    $0x8,%esp
}
c0107a16:	90                   	nop
c0107a17:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107a1a:	5b                   	pop    %ebx
c0107a1b:	5e                   	pop    %esi
c0107a1c:	5f                   	pop    %edi
c0107a1d:	5d                   	pop    %ebp
c0107a1e:	c3                   	ret    

c0107a1f <timer_init>:

void timer_init(){
c0107a1f:	55                   	push   %ebp
c0107a20:	89 e5                	mov    %esp,%ebp
c0107a22:	83 ec 08             	sub    $0x8,%esp
    kprintf("timer intr start\n");
c0107a25:	83 ec 0c             	sub    $0xc,%esp
c0107a28:	68 be b2 28 c0       	push   $0xc028b2be
c0107a2d:	e8 14 0f 00 00       	call   c0108946 <kprintf>
c0107a32:	83 c4 10             	add    $0x10,%esp
    frequence_set(CURRENTR0_PORT, CURRENTR0_NO, READ_WRITE_LATCH, CURRENTR_MODE, CURRENTR0_VALUE);
c0107a35:	83 ec 0c             	sub    $0xc,%esp
c0107a38:	68 9b 2e 00 00       	push   $0x2e9b
c0107a3d:	6a 02                	push   $0x2
c0107a3f:	6a 03                	push   $0x3
c0107a41:	6a 00                	push   $0x0
c0107a43:	6a 40                	push   $0x40
c0107a45:	e8 4a ff ff ff       	call   c0107994 <frequence_set>
c0107a4a:	83 c4 20             	add    $0x20,%esp
    kprintf("timer init down\n");
c0107a4d:	83 ec 0c             	sub    $0xc,%esp
c0107a50:	68 d0 b2 28 c0       	push   $0xc028b2d0
c0107a55:	e8 ec 0e 00 00       	call   c0108946 <kprintf>
c0107a5a:	83 c4 10             	add    $0x10,%esp
c0107a5d:	90                   	nop
c0107a5e:	c9                   	leave  
c0107a5f:	c3                   	ret    

c0107a60 <_divide_err>:
#include <libs/mstdio.h>
#include <kernel/interrupt/interupt_fun.h>
#include <vga/vga.h>

void _divide_err(unsigned long addr, int err_code)
{
c0107a60:	55                   	push   %ebp
c0107a61:	89 e5                	mov    %esp,%ebp
c0107a63:	83 ec 08             	sub    $0x8,%esp
    vga_set_show(1,VGA_COLOR_BLACK,VGA_COLOR_BLUE);
c0107a66:	83 ec 04             	sub    $0x4,%esp
c0107a69:	6a 01                	push   $0x1
c0107a6b:	6a 00                	push   $0x0
c0107a6d:	6a 01                	push   $0x1
c0107a6f:	e8 60 e6 ff ff       	call   c01060d4 <vga_set_show>
c0107a74:	83 c4 10             	add    $0x10,%esp
    kprintf("divide err addr = 0x%x,err code = %d\n", addr,err_code);
c0107a77:	83 ec 04             	sub    $0x4,%esp
c0107a7a:	ff 75 0c             	push   0xc(%ebp)
c0107a7d:	ff 75 08             	push   0x8(%ebp)
c0107a80:	68 e4 b2 28 c0       	push   $0xc028b2e4
c0107a85:	e8 bc 0e 00 00       	call   c0108946 <kprintf>
c0107a8a:	83 c4 10             	add    $0x10,%esp
}
c0107a8d:	90                   	nop
c0107a8e:	c9                   	leave  
c0107a8f:	c3                   	ret    

c0107a90 <do_double_fault>:

void do_double_fault(unsigned long addr, int err_code)
{
c0107a90:	55                   	push   %ebp
c0107a91:	89 e5                	mov    %esp,%ebp
c0107a93:	83 ec 08             	sub    $0x8,%esp
	kprintf("double_fault addr = 0x%x,err code = %d\n", addr,err_code);
c0107a96:	83 ec 04             	sub    $0x4,%esp
c0107a99:	ff 75 0c             	push   0xc(%ebp)
c0107a9c:	ff 75 08             	push   0x8(%ebp)
c0107a9f:	68 0c b3 28 c0       	push   $0xc028b30c
c0107aa4:	e8 9d 0e 00 00       	call   c0108946 <kprintf>
c0107aa9:	83 c4 10             	add    $0x10,%esp
}
c0107aac:	90                   	nop
c0107aad:	c9                   	leave  
c0107aae:	c3                   	ret    

c0107aaf <do_general_protection>:

void do_general_protection(unsigned long addr, int err_code)
{
c0107aaf:	55                   	push   %ebp
c0107ab0:	89 e5                	mov    %esp,%ebp
c0107ab2:	83 ec 08             	sub    $0x8,%esp
	kprintf("general_protection addr = 0x%x,err code = %d\n", addr,err_code);
c0107ab5:	83 ec 04             	sub    $0x4,%esp
c0107ab8:	ff 75 0c             	push   0xc(%ebp)
c0107abb:	ff 75 08             	push   0x8(%ebp)
c0107abe:	68 34 b3 28 c0       	push   $0xc028b334
c0107ac3:	e8 7e 0e 00 00       	call   c0108946 <kprintf>
c0107ac8:	83 c4 10             	add    $0x10,%esp
}
c0107acb:	90                   	nop
c0107acc:	c9                   	leave  
c0107acd:	c3                   	ret    

c0107ace <do_int3>:


void do_int3(unsigned long addr, int err_code)
{
c0107ace:	55                   	push   %ebp
c0107acf:	89 e5                	mov    %esp,%ebp
c0107ad1:	83 ec 08             	sub    $0x8,%esp
    kprintf("int3 addr = 0x%x,err code = %d\n", addr,err_code);
c0107ad4:	83 ec 04             	sub    $0x4,%esp
c0107ad7:	ff 75 0c             	push   0xc(%ebp)
c0107ada:	ff 75 08             	push   0x8(%ebp)
c0107add:	68 64 b3 28 c0       	push   $0xc028b364
c0107ae2:	e8 5f 0e 00 00       	call   c0108946 <kprintf>
c0107ae7:	83 c4 10             	add    $0x10,%esp
}
c0107aea:	90                   	nop
c0107aeb:	c9                   	leave  
c0107aec:	c3                   	ret    

c0107aed <do_nmi>:

void do_nmi(unsigned long addr, int err_code)
{
c0107aed:	55                   	push   %ebp
c0107aee:	89 e5                	mov    %esp,%ebp
c0107af0:	83 ec 08             	sub    $0x8,%esp
	kprintf("nmi addr = 0x%x,err code = %d\n", addr,err_code);
c0107af3:	83 ec 04             	sub    $0x4,%esp
c0107af6:	ff 75 0c             	push   0xc(%ebp)
c0107af9:	ff 75 08             	push   0x8(%ebp)
c0107afc:	68 84 b3 28 c0       	push   $0xc028b384
c0107b01:	e8 40 0e 00 00       	call   c0108946 <kprintf>
c0107b06:	83 c4 10             	add    $0x10,%esp
}
c0107b09:	90                   	nop
c0107b0a:	c9                   	leave  
c0107b0b:	c3                   	ret    

c0107b0c <do_debug>:

void do_debug(unsigned long addr, int err_code)
{
c0107b0c:	55                   	push   %ebp
c0107b0d:	89 e5                	mov    %esp,%ebp
c0107b0f:	83 ec 08             	sub    $0x8,%esp
	kprintf("debug addr = 0x%x,err code = %d\n", addr,err_code);
c0107b12:	83 ec 04             	sub    $0x4,%esp
c0107b15:	ff 75 0c             	push   0xc(%ebp)
c0107b18:	ff 75 08             	push   0x8(%ebp)
c0107b1b:	68 a4 b3 28 c0       	push   $0xc028b3a4
c0107b20:	e8 21 0e 00 00       	call   c0108946 <kprintf>
c0107b25:	83 c4 10             	add    $0x10,%esp
}
c0107b28:	90                   	nop
c0107b29:	c9                   	leave  
c0107b2a:	c3                   	ret    

c0107b2b <do_overflow>:

void do_overflow(unsigned long addr, int err_code)
{
c0107b2b:	55                   	push   %ebp
c0107b2c:	89 e5                	mov    %esp,%ebp
c0107b2e:	83 ec 08             	sub    $0x8,%esp
	kprintf("overflow addr = 0x%x,err code = %d\n", addr,err_code);
c0107b31:	83 ec 04             	sub    $0x4,%esp
c0107b34:	ff 75 0c             	push   0xc(%ebp)
c0107b37:	ff 75 08             	push   0x8(%ebp)
c0107b3a:	68 c8 b3 28 c0       	push   $0xc028b3c8
c0107b3f:	e8 02 0e 00 00       	call   c0108946 <kprintf>
c0107b44:	83 c4 10             	add    $0x10,%esp
}
c0107b47:	90                   	nop
c0107b48:	c9                   	leave  
c0107b49:	c3                   	ret    

c0107b4a <do_bounds>:

void do_bounds(unsigned long addr, int err_code)
{
c0107b4a:	55                   	push   %ebp
c0107b4b:	89 e5                	mov    %esp,%ebp
c0107b4d:	83 ec 08             	sub    $0x8,%esp
	kprintf("bounds addr = 0x%x,err code = %d\n", addr,err_code);
c0107b50:	83 ec 04             	sub    $0x4,%esp
c0107b53:	ff 75 0c             	push   0xc(%ebp)
c0107b56:	ff 75 08             	push   0x8(%ebp)
c0107b59:	68 ec b3 28 c0       	push   $0xc028b3ec
c0107b5e:	e8 e3 0d 00 00       	call   c0108946 <kprintf>
c0107b63:	83 c4 10             	add    $0x10,%esp
}
c0107b66:	90                   	nop
c0107b67:	c9                   	leave  
c0107b68:	c3                   	ret    

c0107b69 <do_invalid_op>:

void do_invalid_op(unsigned long addr, int err_code)
{
c0107b69:	55                   	push   %ebp
c0107b6a:	89 e5                	mov    %esp,%ebp
c0107b6c:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_op addr = 0x%x,err code = %d\n", addr,err_code);
c0107b6f:	83 ec 04             	sub    $0x4,%esp
c0107b72:	ff 75 0c             	push   0xc(%ebp)
c0107b75:	ff 75 08             	push   0x8(%ebp)
c0107b78:	68 10 b4 28 c0       	push   $0xc028b410
c0107b7d:	e8 c4 0d 00 00       	call   c0108946 <kprintf>
c0107b82:	83 c4 10             	add    $0x10,%esp
}
c0107b85:	90                   	nop
c0107b86:	c9                   	leave  
c0107b87:	c3                   	ret    

c0107b88 <do_device_not_available>:

void do_device_not_available(unsigned long addr, int err_code)
{
c0107b88:	55                   	push   %ebp
c0107b89:	89 e5                	mov    %esp,%ebp
c0107b8b:	83 ec 08             	sub    $0x8,%esp
	kprintf("device_not_availabel addr = 0x%x,err code = %d\n", addr,err_code);
c0107b8e:	83 ec 04             	sub    $0x4,%esp
c0107b91:	ff 75 0c             	push   0xc(%ebp)
c0107b94:	ff 75 08             	push   0x8(%ebp)
c0107b97:	68 38 b4 28 c0       	push   $0xc028b438
c0107b9c:	e8 a5 0d 00 00       	call   c0108946 <kprintf>
c0107ba1:	83 c4 10             	add    $0x10,%esp
}
c0107ba4:	90                   	nop
c0107ba5:	c9                   	leave  
c0107ba6:	c3                   	ret    

c0107ba7 <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(unsigned long addr, int err_code)
{
c0107ba7:	55                   	push   %ebp
c0107ba8:	89 e5                	mov    %esp,%ebp
c0107baa:	83 ec 08             	sub    $0x8,%esp
	kprintf("coprprocessor_segment_overrun addr = 0x%x,err code = %d\n", addr,err_code);
c0107bad:	83 ec 04             	sub    $0x4,%esp
c0107bb0:	ff 75 0c             	push   0xc(%ebp)
c0107bb3:	ff 75 08             	push   0x8(%ebp)
c0107bb6:	68 68 b4 28 c0       	push   $0xc028b468
c0107bbb:	e8 86 0d 00 00       	call   c0108946 <kprintf>
c0107bc0:	83 c4 10             	add    $0x10,%esp
}
c0107bc3:	90                   	nop
c0107bc4:	c9                   	leave  
c0107bc5:	c3                   	ret    

c0107bc6 <do_invalid_TSS>:

void do_invalid_TSS(unsigned long addr, int err_code)
{
c0107bc6:	55                   	push   %ebp
c0107bc7:	89 e5                	mov    %esp,%ebp
c0107bc9:	83 ec 08             	sub    $0x8,%esp
	kprintf("invalid_TSS addr = 0x%x,err code = %d\n", addr,err_code);
c0107bcc:	83 ec 04             	sub    $0x4,%esp
c0107bcf:	ff 75 0c             	push   0xc(%ebp)
c0107bd2:	ff 75 08             	push   0x8(%ebp)
c0107bd5:	68 a4 b4 28 c0       	push   $0xc028b4a4
c0107bda:	e8 67 0d 00 00       	call   c0108946 <kprintf>
c0107bdf:	83 c4 10             	add    $0x10,%esp
}
c0107be2:	90                   	nop
c0107be3:	c9                   	leave  
c0107be4:	c3                   	ret    

c0107be5 <do_segment_not_present>:

void do_segment_not_present(unsigned long addr, int err_code)
{
c0107be5:	55                   	push   %ebp
c0107be6:	89 e5                	mov    %esp,%ebp
c0107be8:	83 ec 08             	sub    $0x8,%esp
	kprintf("segment not present addr = 0x%x,err code = %d\n", addr,err_code);
c0107beb:	83 ec 04             	sub    $0x4,%esp
c0107bee:	ff 75 0c             	push   0xc(%ebp)
c0107bf1:	ff 75 08             	push   0x8(%ebp)
c0107bf4:	68 cc b4 28 c0       	push   $0xc028b4cc
c0107bf9:	e8 48 0d 00 00       	call   c0108946 <kprintf>
c0107bfe:	83 c4 10             	add    $0x10,%esp
}
c0107c01:	90                   	nop
c0107c02:	c9                   	leave  
c0107c03:	c3                   	ret    

c0107c04 <do_stack_segment>:

void do_stack_segment(unsigned long addr, int err_code)
{
c0107c04:	55                   	push   %ebp
c0107c05:	89 e5                	mov    %esp,%ebp
c0107c07:	83 ec 08             	sub    $0x8,%esp
	kprintf("stack_segment addr = 0x%x,err code = %d\n", addr,err_code);
c0107c0a:	83 ec 04             	sub    $0x4,%esp
c0107c0d:	ff 75 0c             	push   0xc(%ebp)
c0107c10:	ff 75 08             	push   0x8(%ebp)
c0107c13:	68 fc b4 28 c0       	push   $0xc028b4fc
c0107c18:	e8 29 0d 00 00       	call   c0108946 <kprintf>
c0107c1d:	83 c4 10             	add    $0x10,%esp
}
c0107c20:	90                   	nop
c0107c21:	c9                   	leave  
c0107c22:	c3                   	ret    

c0107c23 <do_coprocessor_error>:

void do_coprocessor_error(unsigned long addr, int err_code)
{
c0107c23:	55                   	push   %ebp
c0107c24:	89 e5                	mov    %esp,%ebp
c0107c26:	83 ec 08             	sub    $0x8,%esp
    kprintf("coprocessor_err addr = 0x%x,err code = %d\n", addr,err_code);
c0107c29:	83 ec 04             	sub    $0x4,%esp
c0107c2c:	ff 75 0c             	push   0xc(%ebp)
c0107c2f:	ff 75 08             	push   0x8(%ebp)
c0107c32:	68 28 b5 28 c0       	push   $0xc028b528
c0107c37:	e8 0a 0d 00 00       	call   c0108946 <kprintf>
c0107c3c:	83 c4 10             	add    $0x10,%esp
}
c0107c3f:	90                   	nop
c0107c40:	c9                   	leave  
c0107c41:	c3                   	ret    

c0107c42 <do_reserved>:

void do_reserved(unsigned long addr, int err_code)
{
c0107c42:	55                   	push   %ebp
c0107c43:	89 e5                	mov    %esp,%ebp
c0107c45:	83 ec 08             	sub    $0x8,%esp
	kprintf("reserved addr = 0x%x,err code = %d\n", addr,err_code);
c0107c48:	83 ec 04             	sub    $0x4,%esp
c0107c4b:	ff 75 0c             	push   0xc(%ebp)
c0107c4e:	ff 75 08             	push   0x8(%ebp)
c0107c51:	68 54 b5 28 c0       	push   $0xc028b554
c0107c56:	e8 eb 0c 00 00       	call   c0108946 <kprintf>
c0107c5b:	83 c4 10             	add    $0x10,%esp
}
c0107c5e:	90                   	nop
c0107c5f:	c9                   	leave  
c0107c60:	c3                   	ret    

c0107c61 <_no_err_code>:
c0107c61:	87 04 24             	xchg   %eax,(%esp)
c0107c64:	53                   	push   %ebx
c0107c65:	51                   	push   %ecx
c0107c66:	52                   	push   %edx
c0107c67:	57                   	push   %edi
c0107c68:	56                   	push   %esi
c0107c69:	55                   	push   %ebp
c0107c6a:	1e                   	push   %ds
c0107c6b:	06                   	push   %es
c0107c6c:	0f a0                	push   %fs
c0107c6e:	6a 00                	push   $0x0
c0107c70:	8d 54 24 2c          	lea    0x2c(%esp),%edx
c0107c74:	52                   	push   %edx
c0107c75:	ba 10 00 00 00       	mov    $0x10,%edx
c0107c7a:	8e da                	mov    %edx,%ds
c0107c7c:	8e c2                	mov    %edx,%es
c0107c7e:	8e e2                	mov    %edx,%fs
c0107c80:	ff d0                	call   *%eax
c0107c82:	83 c4 08             	add    $0x8,%esp
c0107c85:	0f a1                	pop    %fs
c0107c87:	07                   	pop    %es
c0107c88:	1f                   	pop    %ds
c0107c89:	5d                   	pop    %ebp
c0107c8a:	5e                   	pop    %esi
c0107c8b:	5f                   	pop    %edi
c0107c8c:	5a                   	pop    %edx
c0107c8d:	59                   	pop    %ecx
c0107c8e:	5b                   	pop    %ebx
c0107c8f:	58                   	pop    %eax
c0107c90:	cf                   	iret   

c0107c91 <_err_code>:
c0107c91:	87 44 24 04          	xchg   %eax,0x4(%esp)
c0107c95:	87 1c 24             	xchg   %ebx,(%esp)
c0107c98:	51                   	push   %ecx
c0107c99:	52                   	push   %edx
c0107c9a:	57                   	push   %edi
c0107c9b:	56                   	push   %esi
c0107c9c:	55                   	push   %ebp
c0107c9d:	1e                   	push   %ds
c0107c9e:	06                   	push   %es
c0107c9f:	0f a0                	push   %fs
c0107ca1:	50                   	push   %eax
c0107ca2:	8d 44 24 2c          	lea    0x2c(%esp),%eax
c0107ca6:	50                   	push   %eax
c0107ca7:	b8 10 00 00 00       	mov    $0x10,%eax
c0107cac:	8e d8                	mov    %eax,%ds
c0107cae:	8e c0                	mov    %eax,%es
c0107cb0:	8e e0                	mov    %eax,%fs
c0107cb2:	ff d3                	call   *%ebx
c0107cb4:	83 c4 08             	add    $0x8,%esp
c0107cb7:	0f a1                	pop    %fs
c0107cb9:	07                   	pop    %es
c0107cba:	1f                   	pop    %ds
c0107cbb:	5d                   	pop    %ebp
c0107cbc:	5e                   	pop    %esi
c0107cbd:	5f                   	pop    %edi
c0107cbe:	5a                   	pop    %edx
c0107cbf:	59                   	pop    %ecx
c0107cc0:	5b                   	pop    %ebx
c0107cc1:	58                   	pop    %eax
c0107cc2:	cf                   	iret   

c0107cc3 <divide_error>:
c0107cc3:	68 60 7a 10 c0       	push   $0xc0107a60
c0107cc8:	eb 97                	jmp    c0107c61 <_no_err_code>

c0107cca <debug>:
c0107cca:	68 ce 7a 10 c0       	push   $0xc0107ace
c0107ccf:	eb 90                	jmp    c0107c61 <_no_err_code>

c0107cd1 <nmi>:
c0107cd1:	68 ed 7a 10 c0       	push   $0xc0107aed
c0107cd6:	eb 89                	jmp    c0107c61 <_no_err_code>

c0107cd8 <int3>:
c0107cd8:	68 ce 7a 10 c0       	push   $0xc0107ace
c0107cdd:	eb 82                	jmp    c0107c61 <_no_err_code>

c0107cdf <overflow>:
c0107cdf:	68 2b 7b 10 c0       	push   $0xc0107b2b
c0107ce4:	e9 78 ff ff ff       	jmp    c0107c61 <_no_err_code>

c0107ce9 <bounds>:
c0107ce9:	68 4a 7b 10 c0       	push   $0xc0107b4a
c0107cee:	e9 6e ff ff ff       	jmp    c0107c61 <_no_err_code>

c0107cf3 <invalid_op>:
c0107cf3:	68 69 7b 10 c0       	push   $0xc0107b69
c0107cf8:	e9 64 ff ff ff       	jmp    c0107c61 <_no_err_code>

c0107cfd <coprocessor_segment_overrun>:
c0107cfd:	68 a7 7b 10 c0       	push   $0xc0107ba7
c0107d02:	e9 5a ff ff ff       	jmp    c0107c61 <_no_err_code>

c0107d07 <reserved>:
c0107d07:	68 42 7c 10 c0       	push   $0xc0107c42
c0107d0c:	e9 50 ff ff ff       	jmp    c0107c61 <_no_err_code>

c0107d11 <invalid_TSS>:
c0107d11:	68 c6 7b 10 c0       	push   $0xc0107bc6
c0107d16:	e9 76 ff ff ff       	jmp    c0107c91 <_err_code>

c0107d1b <segment_not_present>:
c0107d1b:	68 e5 7b 10 c0       	push   $0xc0107be5
c0107d20:	e9 6c ff ff ff       	jmp    c0107c91 <_err_code>

c0107d25 <stack_segment>:
c0107d25:	68 04 7c 10 c0       	push   $0xc0107c04
c0107d2a:	e9 62 ff ff ff       	jmp    c0107c91 <_err_code>

c0107d2f <general_protection>:
c0107d2f:	68 af 7a 10 c0       	push   $0xc0107aaf
c0107d34:	e9 58 ff ff ff       	jmp    c0107c91 <_err_code>

c0107d39 <__get_cpuid_max>:
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
c0107d39:	55                   	push   %ebp
c0107d3a:	89 e5                	mov    %esp,%ebp
c0107d3c:	53                   	push   %ebx
c0107d3d:	83 ec 10             	sub    $0x10,%esp
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
c0107d40:	9c                   	pushf  
c0107d41:	9c                   	pushf  
c0107d42:	5a                   	pop    %edx
c0107d43:	89 d0                	mov    %edx,%eax
c0107d45:	81 f2 00 00 20 00    	xor    $0x200000,%edx
c0107d4b:	52                   	push   %edx
c0107d4c:	9d                   	popf   
c0107d4d:	9c                   	pushf  
c0107d4e:	5a                   	pop    %edx
c0107d4f:	9d                   	popf   
c0107d50:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0107d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
c0107d56:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107d59:	33 45 f4             	xor    -0xc(%ebp),%eax
c0107d5c:	25 00 00 20 00       	and    $0x200000,%eax
c0107d61:	85 c0                	test   %eax,%eax
c0107d63:	75 07                	jne    c0107d6c <__get_cpuid_max+0x33>
    return 0;
c0107d65:	b8 00 00 00 00       	mov    $0x0,%eax
c0107d6a:	eb 30                	jmp    c0107d9c <__get_cpuid_max+0x63>
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
c0107d6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d6f:	b9 00 00 00 00       	mov    $0x0,%ecx
c0107d74:	ba 00 00 00 00       	mov    $0x0,%edx
c0107d79:	89 cb                	mov    %ecx,%ebx
c0107d7b:	89 d1                	mov    %edx,%ecx
c0107d7d:	0f a2                	cpuid  
c0107d7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0107d82:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c0107d85:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0107d88:	89 55 ec             	mov    %edx,-0x14(%ebp)

  if (__sig)
c0107d8b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107d8f:	74 08                	je     c0107d99 <__get_cpuid_max+0x60>
    *__sig = __ebx;
c0107d91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107d97:	89 10                	mov    %edx,(%eax)

  return __eax;
c0107d99:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0107d9c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107d9f:	c9                   	leave  
c0107da0:	c3                   	ret    

c0107da1 <__get_cpuid>:

static __inline int
__get_cpuid (unsigned int __leaf,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
c0107da1:	55                   	push   %ebp
c0107da2:	89 e5                	mov    %esp,%ebp
c0107da4:	56                   	push   %esi
c0107da5:	53                   	push   %ebx
c0107da6:	83 ec 10             	sub    $0x10,%esp
  unsigned int __ext = __leaf & 0x80000000;
c0107da9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dac:	25 00 00 00 80       	and    $0x80000000,%eax
c0107db1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  unsigned int __maxlevel = __get_cpuid_max (__ext, 0);
c0107db4:	6a 00                	push   $0x0
c0107db6:	ff 75 f4             	push   -0xc(%ebp)
c0107db9:	e8 7b ff ff ff       	call   c0107d39 <__get_cpuid_max>
c0107dbe:	83 c4 08             	add    $0x8,%esp
c0107dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (__maxlevel == 0 || __maxlevel < __leaf)
c0107dc4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107dc8:	74 08                	je     c0107dd2 <__get_cpuid+0x31>
c0107dca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107dcd:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107dd0:	73 07                	jae    c0107dd9 <__get_cpuid+0x38>
    return 0;
c0107dd2:	b8 00 00 00 00       	mov    $0x0,%eax
c0107dd7:	eb 2c                	jmp    c0107e05 <__get_cpuid+0x64>

  __cpuid (__leaf, *__eax, *__ebx, *__ecx, *__edx);
c0107dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ddc:	b9 00 00 00 00       	mov    $0x0,%ecx
c0107de1:	ba 00 00 00 00       	mov    $0x0,%edx
c0107de6:	89 cb                	mov    %ecx,%ebx
c0107de8:	89 d1                	mov    %edx,%ecx
c0107dea:	0f a2                	cpuid  
c0107dec:	8b 75 0c             	mov    0xc(%ebp),%esi
c0107def:	89 06                	mov    %eax,(%esi)
c0107df1:	8b 45 10             	mov    0x10(%ebp),%eax
c0107df4:	89 18                	mov    %ebx,(%eax)
c0107df6:	8b 45 14             	mov    0x14(%ebp),%eax
c0107df9:	89 08                	mov    %ecx,(%eax)
c0107dfb:	8b 45 18             	mov    0x18(%ebp),%eax
c0107dfe:	89 10                	mov    %edx,(%eax)
  return 1;
c0107e00:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0107e05:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107e08:	5b                   	pop    %ebx
c0107e09:	5e                   	pop    %esi
c0107e0a:	5d                   	pop    %ebp
c0107e0b:	c3                   	ret    

c0107e0c <cpu_get_model>:
#include <kernel/cpu/cpu.h>
#include <stdint.h>
#include <cpuid.h>

void cpu_get_model(char* model_out) {
c0107e0c:	55                   	push   %ebp
c0107e0d:	89 e5                	mov    %esp,%ebp
c0107e0f:	83 ec 20             	sub    $0x20,%esp
    uint32_t* out = (uint32_t*)model_out;
c0107e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e15:	89 45 fc             	mov    %eax,-0x4(%ebp)
    reg32 eax, ebx, edx, ecx;
    
    __get_cpuid(0, &eax, &ebx, &ecx, &edx);
c0107e18:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e1b:	50                   	push   %eax
c0107e1c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107e1f:	50                   	push   %eax
c0107e20:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0107e23:	50                   	push   %eax
c0107e24:	8d 45 f8             	lea    -0x8(%ebp),%eax
c0107e27:	50                   	push   %eax
c0107e28:	6a 00                	push   $0x0
c0107e2a:	e8 72 ff ff ff       	call   c0107da1 <__get_cpuid>
c0107e2f:	83 c4 14             	add    $0x14,%esp

    out[0] = ebx;
c0107e32:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107e35:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e38:	89 10                	mov    %edx,(%eax)
    out[1] = edx;
c0107e3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e3d:	8d 50 04             	lea    0x4(%eax),%edx
c0107e40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e43:	89 02                	mov    %eax,(%edx)
    out[2] = ecx;
c0107e45:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e48:	8d 50 08             	lea    0x8(%eax),%edx
c0107e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e4e:	89 02                	mov    %eax,(%edx)
    model_out[12] = '\0';
c0107e50:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e53:	83 c0 0c             	add    $0xc,%eax
c0107e56:	c6 00 00             	movb   $0x0,(%eax)
}
c0107e59:	90                   	nop
c0107e5a:	c9                   	leave  
c0107e5b:	c3                   	ret    

c0107e5c <cpu_brand_string_supported>:

#define BRAND_LEAF 0x80000000UL

int cpu_brand_string_supported() {
c0107e5c:	55                   	push   %ebp
c0107e5d:	89 e5                	mov    %esp,%ebp
c0107e5f:	83 ec 10             	sub    $0x10,%esp
    reg32 supported = __get_cpuid_max(BRAND_LEAF, 0);
c0107e62:	6a 00                	push   $0x0
c0107e64:	68 00 00 00 80       	push   $0x80000000
c0107e69:	e8 cb fe ff ff       	call   c0107d39 <__get_cpuid_max>
c0107e6e:	83 c4 08             	add    $0x8,%esp
c0107e71:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (supported >= 0x80000004UL);
c0107e74:	81 7d fc 03 00 00 80 	cmpl   $0x80000003,-0x4(%ebp)
c0107e7b:	0f 97 c0             	seta   %al
c0107e7e:	0f b6 c0             	movzbl %al,%eax
}
c0107e81:	c9                   	leave  
c0107e82:	c3                   	ret    

c0107e83 <cpu_get_brand>:

void cpu_get_brand(char* brand_out) {
c0107e83:	55                   	push   %ebp
c0107e84:	89 e5                	mov    %esp,%ebp
c0107e86:	83 ec 20             	sub    $0x20,%esp
    if(!cpu_brand_string_supported()) {
c0107e89:	e8 ce ff ff ff       	call   c0107e5c <cpu_brand_string_supported>
c0107e8e:	85 c0                	test   %eax,%eax
c0107e90:	75 0f                	jne    c0107ea1 <cpu_get_brand+0x1e>
        brand_out[0] = '?';
c0107e92:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e95:	c6 00 3f             	movb   $0x3f,(%eax)
        brand_out[1] = '\0';
c0107e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e9b:	83 c0 01             	add    $0x1,%eax
c0107e9e:	c6 00 00             	movb   $0x0,(%eax)
    }
    uint32_t* out = (uint32_t*) brand_out;
c0107ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    reg32 eax, ebx, edx, ecx;
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0107ea7:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
c0107eae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0107eb5:	e9 83 00 00 00       	jmp    c0107f3d <cpu_get_brand+0xba>
    {
        __get_cpuid(BRAND_LEAF + i, &eax, &ebx, &ecx, &edx);
c0107eba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107ebd:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
c0107ec3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107ec6:	50                   	push   %eax
c0107ec7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107eca:	50                   	push   %eax
c0107ecb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107ece:	50                   	push   %eax
c0107ecf:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ed2:	50                   	push   %eax
c0107ed3:	52                   	push   %edx
c0107ed4:	e8 c8 fe ff ff       	call   c0107da1 <__get_cpuid>
c0107ed9:	83 c4 14             	add    $0x14,%esp
        out[j] = eax;
c0107edc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107edf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ee9:	01 c2                	add    %eax,%edx
c0107eeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107eee:	89 02                	mov    %eax,(%edx)
        out[j + 1] = ebx;
c0107ef0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107ef3:	83 c0 01             	add    $0x1,%eax
c0107ef6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107efd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f00:	01 c2                	add    %eax,%edx
c0107f02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107f05:	89 02                	mov    %eax,(%edx)
        out[j + 2] = ecx;
c0107f07:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107f0a:	83 c0 02             	add    $0x2,%eax
c0107f0d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f17:	01 c2                	add    %eax,%edx
c0107f19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107f1c:	89 02                	mov    %eax,(%edx)
        out[j + 3] = edx;
c0107f1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0107f21:	83 c0 03             	add    $0x3,%eax
c0107f24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f2e:	01 c2                	add    %eax,%edx
c0107f30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107f33:	89 02                	mov    %eax,(%edx)
        j+=4;
c0107f35:	83 45 f8 04          	addl   $0x4,-0x8(%ebp)
    for (uint32_t i = 2, j = 0; i < 5; i++)
c0107f39:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0107f3d:	83 7d fc 04          	cmpl   $0x4,-0x4(%ebp)
c0107f41:	0f 86 73 ff ff ff    	jbe    c0107eba <cpu_get_brand+0x37>
    }
    brand_out[48] = '\0';
c0107f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f4a:	83 c0 30             	add    $0x30,%eax
c0107f4d:	c6 00 00             	movb   $0x0,(%eax)
}
c0107f50:	90                   	nop
c0107f51:	c9                   	leave  
c0107f52:	c3                   	ret    

c0107f53 <cpu_r_cr0>:

reg32 cpu_r_cr0() {
c0107f53:	55                   	push   %ebp
c0107f54:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr0, %eax");
c0107f56:	0f 20 c0             	mov    %cr0,%eax
}
c0107f59:	90                   	nop
c0107f5a:	5d                   	pop    %ebp
c0107f5b:	c3                   	ret    

c0107f5c <cpu_r_cr2>:

reg32 cpu_r_cr2() {
c0107f5c:	55                   	push   %ebp
c0107f5d:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr2, %eax");
c0107f5f:	0f 20 d0             	mov    %cr2,%eax
}
c0107f62:	90                   	nop
c0107f63:	5d                   	pop    %ebp
c0107f64:	c3                   	ret    

c0107f65 <cpu_r_cr3>:

reg32 cpu_r_cr3() {
c0107f65:	55                   	push   %ebp
c0107f66:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %cr3, %eax");
c0107f68:	0f 20 d8             	mov    %cr3,%eax
}
c0107f6b:	90                   	nop
c0107f6c:	5d                   	pop    %ebp
c0107f6d:	c3                   	ret    

c0107f6e <cpu_w_cr0>:

void cpu_w_cr0(reg32 v) {
c0107f6e:	55                   	push   %ebp
c0107f6f:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0107f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f74:	0f 22 c0             	mov    %eax,%cr0
        "mov %0, %%cr0"
        :: "r"(v)
    );
}
c0107f77:	90                   	nop
c0107f78:	5d                   	pop    %ebp
c0107f79:	c3                   	ret    

c0107f7a <cpu_w_cr2>:

void cpu_w_cr2(reg32 v) {
c0107f7a:	55                   	push   %ebp
c0107f7b:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0107f7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f80:	0f 22 d0             	mov    %eax,%cr2
        "mov %0, %%cr2"
        :: "r"(v)
    );
}
c0107f83:	90                   	nop
c0107f84:	5d                   	pop    %ebp
c0107f85:	c3                   	ret    

c0107f86 <cpu_w_cr3>:

void cpu_w_cr3(reg32 v) {
c0107f86:	55                   	push   %ebp
c0107f87:	89 e5                	mov    %esp,%ebp
    asm volatile (
c0107f89:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f8c:	0f 22 d8             	mov    %eax,%cr3
        "mov %0, %%cr3"
        :: "r"(v)
    );
}
c0107f8f:	90                   	nop
c0107f90:	5d                   	pop    %ebp
c0107f91:	c3                   	ret    

c0107f92 <_set_gdt_entry>:
#define GDT_ENTRY 5

uint64_t _gdt[5];
uint16_t _gdt_limit = sizeof(_gdt) - 1;

void _set_gdt_entry(uint32_t index, uint32_t base, uint32_t limit, uint32_t flags) {
c0107f92:	55                   	push   %ebp
c0107f93:	89 e5                	mov    %esp,%ebp
c0107f95:	57                   	push   %edi
c0107f96:	56                   	push   %esi
c0107f97:	53                   	push   %ebx
c0107f98:	83 ec 0c             	sub    $0xc,%esp
    _gdt[index] = SEG_BASE_H(base) | flags | SEG_LIM_H(limit) | SEG_BASE_M(base);
c0107f9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f9e:	25 00 00 00 ff       	and    $0xff000000,%eax
c0107fa3:	0b 45 14             	or     0x14(%ebp),%eax
c0107fa6:	89 c2                	mov    %eax,%edx
c0107fa8:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fab:	25 00 00 0f 00       	and    $0xf0000,%eax
c0107fb0:	09 c2                	or     %eax,%edx
c0107fb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107fb5:	c1 e8 10             	shr    $0x10,%eax
c0107fb8:	0f b6 c0             	movzbl %al,%eax
c0107fbb:	09 d0                	or     %edx,%eax
c0107fbd:	ba 00 00 00 00       	mov    $0x0,%edx
c0107fc2:	8b 75 08             	mov    0x8(%ebp),%esi
c0107fc5:	89 04 f5 60 90 28 c0 	mov    %eax,-0x3fd76fa0(,%esi,8)
c0107fcc:	89 14 f5 64 90 28 c0 	mov    %edx,-0x3fd76f9c(,%esi,8)
    _gdt[index] <<= 32;
c0107fd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fd6:	8b 14 c5 64 90 28 c0 	mov    -0x3fd76f9c(,%eax,8),%edx
c0107fdd:	8b 04 c5 60 90 28 c0 	mov    -0x3fd76fa0(,%eax,8),%eax
c0107fe4:	89 c2                	mov    %eax,%edx
c0107fe6:	b8 00 00 00 00       	mov    $0x0,%eax
c0107feb:	8b 75 08             	mov    0x8(%ebp),%esi
c0107fee:	89 04 f5 60 90 28 c0 	mov    %eax,-0x3fd76fa0(,%esi,8)
c0107ff5:	89 14 f5 64 90 28 c0 	mov    %edx,-0x3fd76f9c(,%esi,8)
    _gdt[index] |= SEG_BASE_L(base) | SEG_LIM_L(limit);
c0107ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fff:	8b 14 c5 64 90 28 c0 	mov    -0x3fd76f9c(,%eax,8),%edx
c0108006:	8b 04 c5 60 90 28 c0 	mov    -0x3fd76fa0(,%eax,8),%eax
c010800d:	8b 75 0c             	mov    0xc(%ebp),%esi
c0108010:	89 f7                	mov    %esi,%edi
c0108012:	c1 e7 10             	shl    $0x10,%edi
c0108015:	8b 75 10             	mov    0x10(%ebp),%esi
c0108018:	0f b7 f6             	movzwl %si,%esi
c010801b:	09 fe                	or     %edi,%esi
c010801d:	bf 00 00 00 00       	mov    $0x0,%edi
c0108022:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108025:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0108028:	09 f0                	or     %esi,%eax
c010802a:	89 c1                	mov    %eax,%ecx
c010802c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010802f:	09 f8                	or     %edi,%eax
c0108031:	89 c3                	mov    %eax,%ebx
c0108033:	8b 45 08             	mov    0x8(%ebp),%eax
c0108036:	89 0c c5 60 90 28 c0 	mov    %ecx,-0x3fd76fa0(,%eax,8)
c010803d:	89 1c c5 64 90 28 c0 	mov    %ebx,-0x3fd76f9c(,%eax,8)
}
c0108044:	90                   	nop
c0108045:	83 c4 0c             	add    $0xc,%esp
c0108048:	5b                   	pop    %ebx
c0108049:	5e                   	pop    %esi
c010804a:	5f                   	pop    %edi
c010804b:	5d                   	pop    %ebp
c010804c:	c3                   	ret    

c010804d <_init_gdt>:
// 
void
_init_gdt() {
c010804d:	55                   	push   %ebp
c010804e:	89 e5                	mov    %esp,%ebp
    _set_gdt_entry(0, 0, 0, 0);
c0108050:	6a 00                	push   $0x0
c0108052:	6a 00                	push   $0x0
c0108054:	6a 00                	push   $0x0
c0108056:	6a 00                	push   $0x0
c0108058:	e8 35 ff ff ff       	call   c0107f92 <_set_gdt_entry>
c010805d:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(1, 0, 0xfffff, SEG_R0_CODE);
c0108060:	68 00 9a c0 00       	push   $0xc09a00
c0108065:	68 ff ff 0f 00       	push   $0xfffff
c010806a:	6a 00                	push   $0x0
c010806c:	6a 01                	push   $0x1
c010806e:	e8 1f ff ff ff       	call   c0107f92 <_set_gdt_entry>
c0108073:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(2, 0, 0xfffff, SEG_R0_DATA);
c0108076:	68 00 92 c0 00       	push   $0xc09200
c010807b:	68 ff ff 0f 00       	push   $0xfffff
c0108080:	6a 00                	push   $0x0
c0108082:	6a 02                	push   $0x2
c0108084:	e8 09 ff ff ff       	call   c0107f92 <_set_gdt_entry>
c0108089:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(3, 0, 0xfffff, SEG_R3_CODE);
c010808c:	68 00 fa c0 00       	push   $0xc0fa00
c0108091:	68 ff ff 0f 00       	push   $0xfffff
c0108096:	6a 00                	push   $0x0
c0108098:	6a 03                	push   $0x3
c010809a:	e8 f3 fe ff ff       	call   c0107f92 <_set_gdt_entry>
c010809f:	83 c4 10             	add    $0x10,%esp
    _set_gdt_entry(4, 0, 0xfffff, SEG_R3_DATA);
c01080a2:	68 00 f2 c0 00       	push   $0xc0f200
c01080a7:	68 ff ff 0f 00       	push   $0xfffff
c01080ac:	6a 00                	push   $0x0
c01080ae:	6a 04                	push   $0x4
c01080b0:	e8 dd fe ff ff       	call   c0107f92 <_set_gdt_entry>
c01080b5:	83 c4 10             	add    $0x10,%esp
c01080b8:	90                   	nop
c01080b9:	c9                   	leave  
c01080ba:	c3                   	ret    

c01080bb <_set_idt_entry>:
#define IDT_ENTRY 80

uint64_t _idt[IDT_ENTRY];
uint16_t _idt_limit = sizeof(_idt) - 1;

void _set_idt_entry(uint32_t vector, uint16_t seg_selector, void (*isr)(), uint8_t dpl) {
c01080bb:	55                   	push   %ebp
c01080bc:	89 e5                	mov    %esp,%ebp
c01080be:	57                   	push   %edi
c01080bf:	56                   	push   %esi
c01080c0:	53                   	push   %ebx
c01080c1:	83 ec 24             	sub    $0x24,%esp
c01080c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080c7:	8b 55 14             	mov    0x14(%ebp),%edx
c01080ca:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c01080ce:	89 d0                	mov    %edx,%eax
c01080d0:	88 45 d8             	mov    %al,-0x28(%ebp)
    uintptr_t offset = (uintptr_t)isr;
c01080d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01080d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    _idt[vector] = (offset & 0xffff0000) | IDT_ATTR(dpl);
c01080d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080dc:	66 b8 00 00          	mov    $0x0,%ax
c01080e0:	89 c2                	mov    %eax,%edx
c01080e2:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01080e6:	c1 e0 0d             	shl    $0xd,%eax
c01080e9:	25 00 60 00 00       	and    $0x6000,%eax
c01080ee:	09 d0                	or     %edx,%eax
c01080f0:	80 cc 8e             	or     $0x8e,%ah
c01080f3:	ba 00 00 00 00       	mov    $0x0,%edx
c01080f8:	8b 75 08             	mov    0x8(%ebp),%esi
c01080fb:	89 04 f5 a0 90 28 c0 	mov    %eax,-0x3fd76f60(,%esi,8)
c0108102:	89 14 f5 a4 90 28 c0 	mov    %edx,-0x3fd76f5c(,%esi,8)
    _idt[vector] <<= 32;
c0108109:	8b 45 08             	mov    0x8(%ebp),%eax
c010810c:	8b 14 c5 a4 90 28 c0 	mov    -0x3fd76f5c(,%eax,8),%edx
c0108113:	8b 04 c5 a0 90 28 c0 	mov    -0x3fd76f60(,%eax,8),%eax
c010811a:	89 c2                	mov    %eax,%edx
c010811c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108121:	8b 75 08             	mov    0x8(%ebp),%esi
c0108124:	89 04 f5 a0 90 28 c0 	mov    %eax,-0x3fd76f60(,%esi,8)
c010812b:	89 14 f5 a4 90 28 c0 	mov    %edx,-0x3fd76f5c(,%esi,8)
    _idt[vector] |= (seg_selector << 16) | (offset & 0x0000ffff);
c0108132:	8b 45 08             	mov    0x8(%ebp),%eax
c0108135:	8b 14 c5 a4 90 28 c0 	mov    -0x3fd76f5c(,%eax,8),%edx
c010813c:	8b 04 c5 a0 90 28 c0 	mov    -0x3fd76f60(,%eax,8),%eax
c0108143:	0f b7 75 dc          	movzwl -0x24(%ebp),%esi
c0108147:	c1 e6 10             	shl    $0x10,%esi
c010814a:	89 f7                	mov    %esi,%edi
c010814c:	8b 75 ec             	mov    -0x14(%ebp),%esi
c010814f:	0f b7 f6             	movzwl %si,%esi
c0108152:	09 fe                	or     %edi,%esi
c0108154:	bf 00 00 00 00       	mov    $0x0,%edi
c0108159:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010815c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010815f:	09 f0                	or     %esi,%eax
c0108161:	89 c1                	mov    %eax,%ecx
c0108163:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108166:	09 f8                	or     %edi,%eax
c0108168:	89 c3                	mov    %eax,%ebx
c010816a:	8b 45 08             	mov    0x8(%ebp),%eax
c010816d:	89 0c c5 a0 90 28 c0 	mov    %ecx,-0x3fd76f60(,%eax,8)
c0108174:	89 1c c5 a4 90 28 c0 	mov    %ebx,-0x3fd76f5c(,%eax,8)
}
c010817b:	90                   	nop
c010817c:	83 c4 24             	add    $0x24,%esp
c010817f:	5b                   	pop    %ebx
c0108180:	5e                   	pop    %esi
c0108181:	5f                   	pop    %edi
c0108182:	5d                   	pop    %ebp
c0108183:	c3                   	ret    

c0108184 <_init_idt>:

void _init_idt()
{
c0108184:	55                   	push   %ebp
c0108185:	89 e5                	mov    %esp,%ebp
c0108187:	83 ec 10             	sub    $0x10,%esp
    _set_idt_entry(FAULT_DIVISION_ERROR, 0x08, &divide_error, 0);
c010818a:	6a 00                	push   $0x0
c010818c:	68 c3 7c 10 c0       	push   $0xc0107cc3
c0108191:	6a 08                	push   $0x8
c0108193:	6a 00                	push   $0x0
c0108195:	e8 21 ff ff ff       	call   c01080bb <_set_idt_entry>
c010819a:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_TRAP_DEBUG_EXCEPTION, 0x08, &debug, 0);
c010819d:	6a 00                	push   $0x0
c010819f:	68 ca 7c 10 c0       	push   $0xc0107cca
c01081a4:	6a 08                	push   $0x8
c01081a6:	6a 01                	push   $0x1
c01081a8:	e8 0e ff ff ff       	call   c01080bb <_set_idt_entry>
c01081ad:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(INT_NMI, 0x08, &nmi, 0);
c01081b0:	6a 00                	push   $0x0
c01081b2:	68 d1 7c 10 c0       	push   $0xc0107cd1
c01081b7:	6a 08                	push   $0x8
c01081b9:	6a 02                	push   $0x2
c01081bb:	e8 fb fe ff ff       	call   c01080bb <_set_idt_entry>
c01081c0:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_BREAKPOINT, 0x08, &int3, 0);
c01081c3:	6a 00                	push   $0x0
c01081c5:	68 d8 7c 10 c0       	push   $0xc0107cd8
c01081ca:	6a 08                	push   $0x8
c01081cc:	6a 03                	push   $0x3
c01081ce:	e8 e8 fe ff ff       	call   c01080bb <_set_idt_entry>
c01081d3:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(TRAP_OVERFLOW, 0x08, &overflow, 0);
c01081d6:	6a 00                	push   $0x0
c01081d8:	68 df 7c 10 c0       	push   $0xc0107cdf
c01081dd:	6a 08                	push   $0x8
c01081df:	6a 04                	push   $0x4
c01081e1:	e8 d5 fe ff ff       	call   c01080bb <_set_idt_entry>
c01081e6:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_BOUND_EXCEED, 0x08, &bounds, 0);
c01081e9:	6a 00                	push   $0x0
c01081eb:	68 e9 7c 10 c0       	push   $0xc0107ce9
c01081f0:	6a 08                	push   $0x8
c01081f2:	6a 05                	push   $0x5
c01081f4:	e8 c2 fe ff ff       	call   c01080bb <_set_idt_entry>
c01081f9:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_OPCODE, 0x08, &invalid_op, 0);
c01081fc:	6a 00                	push   $0x0
c01081fe:	68 f3 7c 10 c0       	push   $0xc0107cf3
c0108203:	6a 08                	push   $0x8
c0108205:	6a 06                	push   $0x6
c0108207:	e8 af fe ff ff       	call   c01080bb <_set_idt_entry>
c010820c:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_NO_MATH_PROCESSOR, 0x08, &device_not_available, 0);
    //_set_idt_entry(ABORT_DOUBLE_FAULT, 0x08, &double_fault, 0);
    _set_idt_entry(FAULT_RESERVED_0, 0x08, &coprocessor_segment_overrun, 0);
c010820f:	6a 00                	push   $0x0
c0108211:	68 fd 7c 10 c0       	push   $0xc0107cfd
c0108216:	6a 08                	push   $0x8
c0108218:	6a 09                	push   $0x9
c010821a:	e8 9c fe ff ff       	call   c01080bb <_set_idt_entry>
c010821f:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_INVALID_TSS, 0x08, &invalid_TSS, 0);
c0108222:	6a 00                	push   $0x0
c0108224:	68 11 7d 10 c0       	push   $0xc0107d11
c0108229:	6a 08                	push   $0x8
c010822b:	6a 0a                	push   $0xa
c010822d:	e8 89 fe ff ff       	call   c01080bb <_set_idt_entry>
c0108232:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_SEG_NOT_PRESENT, 0x08, &segment_not_present, 0);
c0108235:	6a 00                	push   $0x0
c0108237:	68 1b 7d 10 c0       	push   $0xc0107d1b
c010823c:	6a 08                	push   $0x8
c010823e:	6a 0b                	push   $0xb
c0108240:	e8 76 fe ff ff       	call   c01080bb <_set_idt_entry>
c0108245:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_STACK_SEG_FAULT, 0x08, &stack_segment, 0);
c0108248:	6a 00                	push   $0x0
c010824a:	68 25 7d 10 c0       	push   $0xc0107d25
c010824f:	6a 08                	push   $0x8
c0108251:	6a 0c                	push   $0xc
c0108253:	e8 63 fe ff ff       	call   c01080bb <_set_idt_entry>
c0108258:	83 c4 10             	add    $0x10,%esp
    _set_idt_entry(FAULT_GENERAL_PROTECTION, 0x08, &general_protection, 0);
c010825b:	6a 00                	push   $0x0
c010825d:	68 2f 7d 10 c0       	push   $0xc0107d2f
c0108262:	6a 08                	push   $0x8
c0108264:	6a 0d                	push   $0xd
c0108266:	e8 50 fe ff ff       	call   c01080bb <_set_idt_entry>
c010826b:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_PAGE_FAULT, 0x08, page_fault, 0);
    _set_idt_entry(FAULT_RESERVED_1, 0x08, &reserved, 0);
c010826e:	6a 00                	push   $0x0
c0108270:	68 07 7d 10 c0       	push   $0xc0107d07
c0108275:	6a 08                	push   $0x8
c0108277:	6a 0f                	push   $0xf
c0108279:	e8 3d fe ff ff       	call   c01080bb <_set_idt_entry>
c010827e:	83 c4 10             	add    $0x10,%esp
    //_set_idt_entry(FAULT_X87_FAULT, 0x08, coprocessor_error, 0);
    for (int i=17;i < 48;i++)
c0108281:	c7 45 fc 11 00 00 00 	movl   $0x11,-0x4(%ebp)
c0108288:	eb 19                	jmp    c01082a3 <_init_idt+0x11f>
		  _set_idt_entry(i, 0x08, &reserved, 0);
c010828a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010828d:	6a 00                	push   $0x0
c010828f:	68 07 7d 10 c0       	push   $0xc0107d07
c0108294:	6a 08                	push   $0x8
c0108296:	50                   	push   %eax
c0108297:	e8 1f fe ff ff       	call   c01080bb <_set_idt_entry>
c010829c:	83 c4 10             	add    $0x10,%esp
    for (int i=17;i < 48;i++)
c010829f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01082a3:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%ebp)
c01082a7:	7e e1                	jle    c010828a <_init_idt+0x106>
    //_set_idt_entry(45, 0x08, irq13, 0);
c01082a9:	90                   	nop
c01082aa:	90                   	nop
c01082ab:	c9                   	leave  
c01082ac:	c3                   	ret    

c01082ad <_kernel_start>:
c01082ad:	e8 9b fd ff ff       	call   c010804d <_init_gdt>
c01082b2:	68 60 90 28 c0       	push   $0xc0289060
c01082b7:	66 ff 35 00 a0 28 c0 	pushw  0xc028a000
c01082be:	0f 01 14 24          	lgdtl  (%esp)
c01082c2:	66 b9 10 00          	mov    $0x10,%cx
c01082c6:	8e c1                	mov    %ecx,%es
c01082c8:	8e d9                	mov    %ecx,%ds
c01082ca:	8e e1                	mov    %ecx,%fs
c01082cc:	8e e9                	mov    %ecx,%gs
c01082ce:	8e d1                	mov    %ecx,%ss
c01082d0:	66 6a 08             	pushw  $0x8
c01082d3:	68 d9 82 10 c0       	push   $0xc01082d9
c01082d8:	cb                   	lret   

c01082d9 <_after_gdt>:
c01082d9:	c7 04 24 00 10 10 00 	movl   $0x101000,(%esp)
c01082e0:	e8 38 df ff ff       	call   c010621d <_kernel_init>
c01082e5:	bc f0 ff bf ff       	mov    $0xffbffff0,%esp
c01082ea:	e8 58 e2 ff ff       	call   c0106547 <_kernel_finnal_init>
c01082ef:	83 ec 06             	sub    $0x6,%esp
c01082f2:	c7 44 24 02 a0 90 28 	movl   $0xc02890a0,0x2(%esp)
c01082f9:	c0 
c01082fa:	66 a1 02 a0 28 c0    	mov    0xc028a002,%ax
c0108300:	66 89 04 24          	mov    %ax,(%esp)
c0108304:	0f 01 1c 24          	lidtl  (%esp)
c0108308:	83 c4 06             	add    $0x6,%esp
c010830b:	e8 97 e2 ff ff       	call   c01065a7 <_kernel_main>

c0108310 <j_>:
c0108310:	f4                   	hlt    
c0108311:	eb fd                	jmp    c0108310 <j_>

c0108313 <io_inb>:
{
c0108313:	55                   	push   %ebp
c0108314:	89 e5                	mov    %esp,%ebp
c0108316:	83 ec 10             	sub    $0x10,%esp
    asm volatile("inb %w1,%0" : "=a"(data) : "d"(port));
c0108319:	8b 45 08             	mov    0x8(%ebp),%eax
c010831c:	89 c2                	mov    %eax,%edx
c010831e:	ec                   	in     (%dx),%al
c010831f:	88 45 ff             	mov    %al,-0x1(%ebp)
    return data;
c0108322:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
c0108326:	c9                   	leave  
c0108327:	c3                   	ret    

c0108328 <io_outb>:
{
c0108328:	55                   	push   %ebp
c0108329:	89 e5                	mov    %esp,%ebp
c010832b:	83 ec 04             	sub    $0x4,%esp
c010832e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108331:	88 45 fc             	mov    %al,-0x4(%ebp)
    asm volatile("outb %0, %w1" : : "a"(data), "d"(port));
c0108334:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0108338:	8b 55 08             	mov    0x8(%ebp),%edx
c010833b:	ee                   	out    %al,(%dx)
}
c010833c:	90                   	nop
c010833d:	c9                   	leave  
c010833e:	c3                   	ret    

c010833f <cpu_delay>:
io_outl(int port, uint32_t data)
{
    asm volatile("outl %0,%w1" : : "a"(data), "d"(port));
}

static inline void cpu_delay(){
c010833f:	55                   	push   %ebp
c0108340:	89 e5                	mov    %esp,%ebp
c0108342:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; i < 3; i++);
c0108345:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010834c:	eb 04                	jmp    c0108352 <cpu_delay+0x13>
c010834e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0108352:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
c0108356:	7e f6                	jle    c010834e <cpu_delay+0xf>
}
c0108358:	90                   	nop
c0108359:	90                   	nop
c010835a:	c9                   	leave  
c010835b:	c3                   	ret    

c010835c <init_8259>:
//other keys tmp do not hand
};
#endif

void init_8259()
{
c010835c:	55                   	push   %ebp
c010835d:	89 e5                	mov    %esp,%ebp
    asm volatile("cli");
c010835f:	fa                   	cli    

    //ICW1
    io_outb(0x20, 0x11);
c0108360:	6a 11                	push   $0x11
c0108362:	6a 20                	push   $0x20
c0108364:	e8 bf ff ff ff       	call   c0108328 <io_outb>
c0108369:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c010836c:	e8 ce ff ff ff       	call   c010833f <cpu_delay>
    io_outb(0xa0, 0x11);
c0108371:	6a 11                	push   $0x11
c0108373:	68 a0 00 00 00       	push   $0xa0
c0108378:	e8 ab ff ff ff       	call   c0108328 <io_outb>
c010837d:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108380:	e8 ba ff ff ff       	call   c010833f <cpu_delay>

    //ICW2
    io_outb(0x21, 0x20);
c0108385:	6a 20                	push   $0x20
c0108387:	6a 21                	push   $0x21
c0108389:	e8 9a ff ff ff       	call   c0108328 <io_outb>
c010838e:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108391:	e8 a9 ff ff ff       	call   c010833f <cpu_delay>
    io_outb(0xa1, 0x28);
c0108396:	6a 28                	push   $0x28
c0108398:	68 a1 00 00 00       	push   $0xa1
c010839d:	e8 86 ff ff ff       	call   c0108328 <io_outb>
c01083a2:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01083a5:	e8 95 ff ff ff       	call   c010833f <cpu_delay>

    //ICW3
    io_outb(0x21, 0x04);
c01083aa:	6a 04                	push   $0x4
c01083ac:	6a 21                	push   $0x21
c01083ae:	e8 75 ff ff ff       	call   c0108328 <io_outb>
c01083b3:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01083b6:	e8 84 ff ff ff       	call   c010833f <cpu_delay>
    io_outb(0xa1, 0x02);
c01083bb:	6a 02                	push   $0x2
c01083bd:	68 a1 00 00 00       	push   $0xa1
c01083c2:	e8 61 ff ff ff       	call   c0108328 <io_outb>
c01083c7:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01083ca:	e8 70 ff ff ff       	call   c010833f <cpu_delay>

    //ICW4
    io_outb(0x21, 0x01);
c01083cf:	6a 01                	push   $0x1
c01083d1:	6a 21                	push   $0x21
c01083d3:	e8 50 ff ff ff       	call   c0108328 <io_outb>
c01083d8:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01083db:	e8 5f ff ff ff       	call   c010833f <cpu_delay>
    io_outb(0xa1, 0x01);
c01083e0:	6a 01                	push   $0x1
c01083e2:	68 a1 00 00 00       	push   $0xa1
c01083e7:	e8 3c ff ff ff       	call   c0108328 <io_outb>
c01083ec:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c01083ef:	e8 4b ff ff ff       	call   c010833f <cpu_delay>

    //OCW1
    io_outb(0x21, 0xff);
c01083f4:	68 ff 00 00 00       	push   $0xff
c01083f9:	6a 21                	push   $0x21
c01083fb:	e8 28 ff ff ff       	call   c0108328 <io_outb>
c0108400:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108403:	e8 37 ff ff ff       	call   c010833f <cpu_delay>
    io_outb(0xa1, 0xff);
c0108408:	68 ff 00 00 00       	push   $0xff
c010840d:	68 a1 00 00 00       	push   $0xa1
c0108412:	e8 11 ff ff ff       	call   c0108328 <io_outb>
c0108417:	83 c4 08             	add    $0x8,%esp

    asm volatile("sti");
c010841a:	fb                   	sti    
}
c010841b:	90                   	nop
c010841c:	c9                   	leave  
c010841d:	c3                   	ret    

c010841e <ps2_post_cmd>:


static void ps2_post_cmd(uint8_t port, char cmd, uint16_t arg) {
c010841e:	55                   	push   %ebp
c010841f:	89 e5                	mov    %esp,%ebp
c0108421:	83 ec 1c             	sub    $0x1c,%esp
c0108424:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0108427:	8b 55 0c             	mov    0xc(%ebp),%edx
c010842a:	8b 45 10             	mov    0x10(%ebp),%eax
c010842d:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0108430:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0108433:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    char result;
    // 等待PS/2输入缓冲区清空，这样我们才可以写入命令
    while((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_IFULL);
c0108437:	90                   	nop
c0108438:	6a 64                	push   $0x64
c010843a:	e8 d4 fe ff ff       	call   c0108313 <io_inb>
c010843f:	83 c4 04             	add    $0x4,%esp
c0108442:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108445:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c0108449:	83 e0 02             	and    $0x2,%eax
c010844c:	85 c0                	test   %eax,%eax
c010844e:	75 e8                	jne    c0108438 <ps2_post_cmd+0x1a>

    io_outb(port, cmd);
c0108450:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0108454:	0f b6 d0             	movzbl %al,%edx
c0108457:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010845b:	52                   	push   %edx
c010845c:	50                   	push   %eax
c010845d:	e8 c6 fe ff ff       	call   c0108328 <io_outb>
c0108462:	83 c4 08             	add    $0x8,%esp
    if (!(arg & PS2_NO_ARG)) {
c0108465:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0108469:	25 00 ff 00 00       	and    $0xff00,%eax
c010846e:	85 c0                	test   %eax,%eax
c0108470:	75 12                	jne    c0108484 <ps2_post_cmd+0x66>
        // 所有参数一律通过0x60传入。
        io_outb(PS2_PORT_ENC_CMDREG, (uint8_t)(arg & 0x00ff));
c0108472:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0108476:	0f b6 c0             	movzbl %al,%eax
c0108479:	50                   	push   %eax
c010847a:	6a 60                	push   $0x60
c010847c:	e8 a7 fe ff ff       	call   c0108328 <io_outb>
c0108481:	83 c4 08             	add    $0x8,%esp
    }
}
c0108484:	90                   	nop
c0108485:	c9                   	leave  
c0108486:	c3                   	ret    

c0108487 <ps2_issue_cmd>:

static uint8_t ps2_issue_cmd(char cmd, uint16_t arg) {
c0108487:	55                   	push   %ebp
c0108488:	89 e5                	mov    %esp,%ebp
c010848a:	83 ec 18             	sub    $0x18,%esp
c010848d:	8b 55 08             	mov    0x8(%ebp),%edx
c0108490:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108493:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0108496:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, cmd, arg);
c010849a:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010849e:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c01084a2:	52                   	push   %edx
c01084a3:	50                   	push   %eax
c01084a4:	6a 64                	push   $0x64
c01084a6:	e8 73 ff ff ff       	call   c010841e <ps2_post_cmd>
c01084ab:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c01084ae:	90                   	nop
c01084af:	6a 64                	push   $0x64
c01084b1:	e8 5d fe ff ff       	call   c0108313 <io_inb>
c01084b6:	83 c4 04             	add    $0x4,%esp
c01084b9:	88 45 ff             	mov    %al,-0x1(%ebp)
c01084bc:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c01084c0:	83 e0 01             	and    $0x1,%eax
c01084c3:	85 c0                	test   %eax,%eax
c01084c5:	74 e8                	je     c01084af <ps2_issue_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c01084c7:	6a 60                	push   $0x60
c01084c9:	e8 45 fe ff ff       	call   c0108313 <io_inb>
c01084ce:	83 c4 04             	add    $0x4,%esp
}
c01084d1:	c9                   	leave  
c01084d2:	c3                   	ret    

c01084d3 <ps2_issue_dev_cmd>:

static uint8_t ps2_issue_dev_cmd(char cmd, uint16_t arg) {
c01084d3:	55                   	push   %ebp
c01084d4:	89 e5                	mov    %esp,%ebp
c01084d6:	83 ec 18             	sub    $0x18,%esp
c01084d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01084dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084df:	88 55 ec             	mov    %dl,-0x14(%ebp)
c01084e2:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    ps2_post_cmd(PS2_PORT_ENC_CMDREG, cmd, arg);
c01084e6:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01084ea:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
c01084ee:	52                   	push   %edx
c01084ef:	50                   	push   %eax
c01084f0:	6a 60                	push   $0x60
c01084f2:	e8 27 ff ff ff       	call   c010841e <ps2_post_cmd>
c01084f7:	83 c4 0c             	add    $0xc,%esp

    char result;
    
    // 等待PS/2控制器返回。通过轮询（polling）状态寄存器的 bit 0
    // 如置位，则表明返回代码此时就在 0x60 IO口上等待读取。
    while(!((result = io_inb(PS2_PORT_CTRL_STATUS)) & PS2_STATUS_OFULL));
c01084fa:	90                   	nop
c01084fb:	6a 64                	push   $0x64
c01084fd:	e8 11 fe ff ff       	call   c0108313 <io_inb>
c0108502:	83 c4 04             	add    $0x4,%esp
c0108505:	88 45 ff             	mov    %al,-0x1(%ebp)
c0108508:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
c010850c:	83 e0 01             	and    $0x1,%eax
c010850f:	85 c0                	test   %eax,%eax
c0108511:	74 e8                	je     c01084fb <ps2_issue_dev_cmd+0x28>

    return io_inb(PS2_PORT_ENC_CMDREG);
c0108513:	6a 60                	push   $0x60
c0108515:	e8 f9 fd ff ff       	call   c0108313 <io_inb>
c010851a:	83 c4 04             	add    $0x4,%esp
}
c010851d:	c9                   	leave  
c010851e:	c3                   	ret    

c010851f <init_ps2k>:

void init_ps2k()
{
c010851f:	55                   	push   %ebp
c0108520:	89 e5                	mov    %esp,%ebp
c0108522:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0108525:	fa                   	cli    

     // 1、禁用任何的PS/2设备
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_DISABLE, PS2_NO_ARG);
c0108526:	68 00 ff 00 00       	push   $0xff00
c010852b:	6a ad                	push   $0xffffffad
c010852d:	6a 64                	push   $0x64
c010852f:	e8 ea fe ff ff       	call   c010841e <ps2_post_cmd>
c0108534:	83 c4 0c             	add    $0xc,%esp
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT2_DISABLE, PS2_NO_ARG);
c0108537:	68 00 ff 00 00       	push   $0xff00
c010853c:	6a a7                	push   $0xffffffa7
c010853e:	6a 64                	push   $0x64
c0108540:	e8 d9 fe ff ff       	call   c010841e <ps2_post_cmd>
c0108545:	83 c4 0c             	add    $0xc,%esp
    
    // 2、清空控制器缓冲区
    io_inb(PS2_PORT_ENC_DATA);
c0108548:	6a 60                	push   $0x60
c010854a:	e8 c4 fd ff ff       	call   c0108313 <io_inb>
c010854f:	83 c4 04             	add    $0x4,%esp

    char result;

    // 3、屏蔽所有PS/2设备（端口1&2）IRQ，并且禁用键盘键码转换功能
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c0108552:	68 00 ff 00 00       	push   $0xff00
c0108557:	6a 20                	push   $0x20
c0108559:	e8 29 ff ff ff       	call   c0108487 <ps2_issue_cmd>
c010855e:	83 c4 08             	add    $0x8,%esp
c0108561:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result & ~(PS2_CFG_P1INT | PS2_CFG_P2INT | PS2_CFG_TRANSLATION);
c0108564:	80 65 f7 bc          	andb   $0xbc,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0108568:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c010856d:	0f b7 c0             	movzwl %ax,%eax
c0108570:	50                   	push   %eax
c0108571:	6a 60                	push   $0x60
c0108573:	6a 64                	push   $0x64
c0108575:	e8 a4 fe ff ff       	call   c010841e <ps2_post_cmd>
c010857a:	83 c4 0c             	add    $0xc,%esp

    // 4、控制器自检
    result = ps2_issue_cmd(PS2_CMD_SELFTEST, PS2_NO_ARG);
c010857d:	68 00 ff 00 00       	push   $0xff00
c0108582:	6a aa                	push   $0xffffffaa
c0108584:	e8 fe fe ff ff       	call   c0108487 <ps2_issue_cmd>
c0108589:	83 c4 08             	add    $0x8,%esp
c010858c:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != PS2_RESULT_TEST_OK) {
c010858f:	80 7d f7 55          	cmpb   $0x55,-0x9(%ebp)
c0108593:	74 12                	je     c01085a7 <init_ps2k+0x88>
        kprintf("Controller self-test failed.");
c0108595:	83 ec 0c             	sub    $0xc,%esp
c0108598:	68 78 b5 28 c0       	push   $0xc028b578
c010859d:	e8 a4 03 00 00       	call   c0108946 <kprintf>
c01085a2:	83 c4 10             	add    $0x10,%esp
        goto done;
c01085a5:	eb 72                	jmp    c0108619 <init_ps2k+0xfa>
    }

    // 5、设备自检（端口1自检，通常是我们的键盘）
    result = ps2_issue_cmd(PS2_CMD_SELFTEST_PORT1, PS2_NO_ARG);
c01085a7:	83 ec 08             	sub    $0x8,%esp
c01085aa:	68 00 ff 00 00       	push   $0xff00
c01085af:	6a ab                	push   $0xffffffab
c01085b1:	e8 d1 fe ff ff       	call   c0108487 <ps2_issue_cmd>
c01085b6:	83 c4 10             	add    $0x10,%esp
c01085b9:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (result != 0) {
c01085bc:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01085c0:	74 12                	je     c01085d4 <init_ps2k+0xb5>
        kprintf("Interface test on port 1 failed.");
c01085c2:	83 ec 0c             	sub    $0xc,%esp
c01085c5:	68 98 b5 28 c0       	push   $0xc028b598
c01085ca:	e8 77 03 00 00       	call   c0108946 <kprintf>
c01085cf:	83 c4 10             	add    $0x10,%esp
        goto done;
c01085d2:	eb 45                	jmp    c0108619 <init_ps2k+0xfa>
    }

    // 6、开启位于端口1的 IRQ，并启用端口1。不用理会端口2，那儿一般是鼠标。
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_PORT1_ENABLE, PS2_NO_ARG);
c01085d4:	83 ec 04             	sub    $0x4,%esp
c01085d7:	68 00 ff 00 00       	push   $0xff00
c01085dc:	6a ae                	push   $0xffffffae
c01085de:	6a 64                	push   $0x64
c01085e0:	e8 39 fe ff ff       	call   c010841e <ps2_post_cmd>
c01085e5:	83 c4 10             	add    $0x10,%esp
    result = ps2_issue_cmd(PS2_CMD_READ_CFG, PS2_NO_ARG);
c01085e8:	83 ec 08             	sub    $0x8,%esp
c01085eb:	68 00 ff 00 00       	push   $0xff00
c01085f0:	6a 20                	push   $0x20
c01085f2:	e8 90 fe ff ff       	call   c0108487 <ps2_issue_cmd>
c01085f7:	83 c4 10             	add    $0x10,%esp
c01085fa:	88 45 f7             	mov    %al,-0x9(%ebp)
    result = result | PS2_CFG_P1INT;
c01085fd:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
    ps2_post_cmd(PS2_PORT_CTRL_CMDREG, PS2_CMD_WRITE_CFG, result);
c0108601:	66 0f be 45 f7       	movsbw -0x9(%ebp),%ax
c0108606:	0f b7 c0             	movzwl %ax,%eax
c0108609:	83 ec 04             	sub    $0x4,%esp
c010860c:	50                   	push   %eax
c010860d:	6a 60                	push   $0x60
c010860f:	6a 64                	push   $0x64
c0108611:	e8 08 fe ff ff       	call   c010841e <ps2_post_cmd>
c0108616:	83 c4 10             	add    $0x10,%esp

    // 至此，PS/2控制器和设备已完成初始化，可以正常使用。

done:
    asm volatile("sti");
c0108619:	fb                   	sti    
}
c010861a:	90                   	nop
c010861b:	c9                   	leave  
c010861c:	c3                   	ret    

c010861d <init_keyboard>:



void init_keyboard()
{
c010861d:	55                   	push   %ebp
c010861e:	89 e5                	mov    %esp,%ebp
c0108620:	83 ec 18             	sub    $0x18,%esp
    init_8259();
c0108623:	e8 34 fd ff ff       	call   c010835c <init_8259>

    uint8_t result = io_inb(0x21);
c0108628:	6a 21                	push   $0x21
c010862a:	e8 e4 fc ff ff       	call   c0108313 <io_inb>
c010862f:	83 c4 04             	add    $0x4,%esp
c0108632:	88 45 f7             	mov    %al,-0x9(%ebp)
    io_outb(0x21, result & 0xfd);
c0108635:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0108639:	25 fd 00 00 00       	and    $0xfd,%eax
c010863e:	50                   	push   %eax
c010863f:	6a 21                	push   $0x21
c0108641:	e8 e2 fc ff ff       	call   c0108328 <io_outb>
c0108646:	83 c4 08             	add    $0x8,%esp
    cpu_delay();
c0108649:	e8 f1 fc ff ff       	call   c010833f <cpu_delay>
    result = io_inb(0x21);
c010864e:	6a 21                	push   $0x21
c0108650:	e8 be fc ff ff       	call   c0108313 <io_inb>
c0108655:	83 c4 04             	add    $0x4,%esp
c0108658:	88 45 f7             	mov    %al,-0x9(%ebp)

    init_ps2k();
c010865b:	e8 bf fe ff ff       	call   c010851f <init_ps2k>
    
    _set_idt_entry(0x21, 0x08, &handle_keywords, 0);
c0108660:	6a 00                	push   $0x0
c0108662:	68 76 86 10 c0       	push   $0xc0108676
c0108667:	6a 08                	push   $0x8
c0108669:	6a 21                	push   $0x21
c010866b:	e8 4b fa ff ff       	call   c01080bb <_set_idt_entry>
c0108670:	83 c4 10             	add    $0x10,%esp
}
c0108673:	90                   	nop
c0108674:	c9                   	leave  
c0108675:	c3                   	ret    

c0108676 <handle_keywords>:

static void handle_keywords()
{
c0108676:	55                   	push   %ebp
c0108677:	89 e5                	mov    %esp,%ebp
c0108679:	83 ec 18             	sub    $0x18,%esp
    crtl_status, shift_status, alt_status, caps_lock_status, ext_scancode = 0;
c010867c:	c6 05 24 93 28 c0 00 	movb   $0x0,0xc0289324
    asm volatile("cli");
c0108683:	fa                   	cli    
    io_outb(0x61, 0x20);
c0108684:	6a 20                	push   $0x20
c0108686:	6a 61                	push   $0x61
c0108688:	e8 9b fc ff ff       	call   c0108328 <io_outb>
c010868d:	83 c4 08             	add    $0x8,%esp
    uint8_t ctrl_down_last = crtl_status;
c0108690:	0f b6 05 20 93 28 c0 	movzbl 0xc0289320,%eax
c0108697:	88 45 f4             	mov    %al,-0xc(%ebp)
    uint8_t shift_down_last = shift_status;
c010869a:	0f b6 05 21 93 28 c0 	movzbl 0xc0289321,%eax
c01086a1:	88 45 f3             	mov    %al,-0xd(%ebp)
    uint8_t caps_lock_last = caps_lock_status;
c01086a4:	0f b6 05 23 93 28 c0 	movzbl 0xc0289323,%eax
c01086ab:	88 45 f2             	mov    %al,-0xe(%ebp)

    uint8_t break_code;
    uint16_t scancode = io_inb(0x60);
c01086ae:	6a 60                	push   $0x60
c01086b0:	e8 5e fc ff ff       	call   c0108313 <io_inb>
c01086b5:	83 c4 04             	add    $0x4,%esp
c01086b8:	0f b6 c0             	movzbl %al,%eax
c01086bb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    
    if(scancode == 0xe0){
c01086bf:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c01086c5:	75 25                	jne    c01086ec <handle_keywords+0x76>
        ext_scancode = 1;
c01086c7:	c6 05 24 93 28 c0 01 	movb   $0x1,0xc0289324
        io_outb(0x20, 0x20);
c01086ce:	6a 20                	push   $0x20
c01086d0:	6a 20                	push   $0x20
c01086d2:	e8 51 fc ff ff       	call   c0108328 <io_outb>
c01086d7:	83 c4 08             	add    $0x8,%esp
        io_outb(0x20, 0x20);
c01086da:	6a 20                	push   $0x20
c01086dc:	6a 20                	push   $0x20
c01086de:	e8 45 fc ff ff       	call   c0108328 <io_outb>
c01086e3:	83 c4 08             	add    $0x8,%esp
        asm volatile("sti");
c01086e6:	fb                   	sti    
        return;
c01086e7:	e9 1a 02 00 00       	jmp    c0108906 <handle_keywords+0x290>
    }
    if(ext_scancode){
c01086ec:	0f b6 05 24 93 28 c0 	movzbl 0xc0289324,%eax
c01086f3:	84 c0                	test   %al,%al
c01086f5:	74 0d                	je     c0108704 <handle_keywords+0x8e>
        scancode = ((0xe000) | scancode);
c01086f7:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
        ext_scancode = 0;
c01086fd:	c6 05 24 93 28 c0 00 	movb   $0x0,0xc0289324
    }

    break_code = ((0x0080 & scancode) != 0);
c0108704:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108708:	66 25 80 00          	and    $0x80,%ax
c010870c:	66 85 c0             	test   %ax,%ax
c010870f:	0f 95 c0             	setne  %al
c0108712:	88 45 f1             	mov    %al,-0xf(%ebp)

    if(break_code)//tan qi ma
c0108715:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c0108719:	74 6d                	je     c0108788 <handle_keywords+0x112>
    {
        uint16_t make_code = (scancode & 0xff7f);
c010871b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010871f:	24 7f                	and    $0x7f,%al
c0108721:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

        if(make_code == crtl_l_make || make_code == crtl_r_make)
c0108725:	66 83 7d ec 1d       	cmpw   $0x1d,-0x14(%ebp)
c010872a:	74 08                	je     c0108734 <handle_keywords+0xbe>
c010872c:	66 81 7d ec 1d e0    	cmpw   $0xe01d,-0x14(%ebp)
c0108732:	75 09                	jne    c010873d <handle_keywords+0xc7>
        {
            crtl_status = 0;
c0108734:	c6 05 20 93 28 c0 00 	movb   $0x0,0xc0289320
c010873b:	eb 2d                	jmp    c010876a <handle_keywords+0xf4>
        }else if(make_code == shift_l_make || make_code == shift_r_make){
c010873d:	66 83 7d ec 2a       	cmpw   $0x2a,-0x14(%ebp)
c0108742:	74 07                	je     c010874b <handle_keywords+0xd5>
c0108744:	66 83 7d ec 36       	cmpw   $0x36,-0x14(%ebp)
c0108749:	75 09                	jne    c0108754 <handle_keywords+0xde>
            shift_status = 0;
c010874b:	c6 05 21 93 28 c0 00 	movb   $0x0,0xc0289321
c0108752:	eb 16                	jmp    c010876a <handle_keywords+0xf4>
        }else if(make_code == alt_l_make || make_code == alt_r_make){
c0108754:	66 83 7d ec 38       	cmpw   $0x38,-0x14(%ebp)
c0108759:	74 08                	je     c0108763 <handle_keywords+0xed>
c010875b:	66 81 7d ec 38 e0    	cmpw   $0xe038,-0x14(%ebp)
c0108761:	75 07                	jne    c010876a <handle_keywords+0xf4>
            alt_status = 0;
c0108763:	c6 05 22 93 28 c0 00 	movb   $0x0,0xc0289322
        }
        io_outb(0x20, 0x20);
c010876a:	6a 20                	push   $0x20
c010876c:	6a 20                	push   $0x20
c010876e:	e8 b5 fb ff ff       	call   c0108328 <io_outb>
c0108773:	83 c4 08             	add    $0x8,%esp
        io_outb(0x20, 0x20);
c0108776:	6a 20                	push   $0x20
c0108778:	6a 20                	push   $0x20
c010877a:	e8 a9 fb ff ff       	call   c0108328 <io_outb>
c010877f:	83 c4 08             	add    $0x8,%esp
        asm volatile("sti");
c0108782:	fb                   	sti    
        return;
c0108783:	e9 7e 01 00 00       	jmp    c0108906 <handle_keywords+0x290>
    }//if is common word, hand
    else if((scancode > 0x00 && scancode < 0x3b) ||\
c0108788:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c010878d:	74 07                	je     c0108796 <handle_keywords+0x120>
c010878f:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0108794:	76 14                	jbe    c01087aa <handle_keywords+0x134>
c0108796:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c010879c:	74 0c                	je     c01087aa <handle_keywords+0x134>
            (scancode == alt_r_make) || \
c010879e:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c01087a4:	0f 85 20 01 00 00    	jne    c01088ca <handle_keywords+0x254>
            (scancode == crtl_r_make)){
        uint8_t shift = 0;
c01087aa:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        if((scancode < 0x0e) || (scancode == 0x29) || \
c01087ae:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c01087b3:	76 3f                	jbe    c01087f4 <handle_keywords+0x17e>
c01087b5:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c01087ba:	74 38                	je     c01087f4 <handle_keywords+0x17e>
c01087bc:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c01087c1:	74 31                	je     c01087f4 <handle_keywords+0x17e>
           (scancode == 0x1a) || (scancode == 0x1b) ||\
c01087c3:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c01087c8:	74 2a                	je     c01087f4 <handle_keywords+0x17e>
c01087ca:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c01087cf:	74 23                	je     c01087f4 <handle_keywords+0x17e>
           (scancode == 0x2b) || (scancode == 0x27) ||\
c01087d1:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c01087d6:	74 1c                	je     c01087f4 <handle_keywords+0x17e>
c01087d8:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c01087dd:	74 15                	je     c01087f4 <handle_keywords+0x17e>
           (scancode == 0x28) || (scancode == 0x33) ||\
c01087df:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c01087e4:	74 0e                	je     c01087f4 <handle_keywords+0x17e>
c01087e6:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c01087eb:	74 07                	je     c01087f4 <handle_keywords+0x17e>
           (scancode == 0x34) || (scancode == 0x35)){
c01087ed:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c01087f2:	75 34                	jne    c0108828 <handle_keywords+0x1b2>
            if(shift_down_last)
c01087f4:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c01087f8:	74 06                	je     c0108800 <handle_keywords+0x18a>
                shift = 1;
c01087fa:	c6 45 f5 01          	movb   $0x1,-0xb(%ebp)
c01087fe:	eb 28                	jmp    c0108828 <handle_keywords+0x1b2>
            else{
                if(shift_down_last && caps_lock_last)
c0108800:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108804:	74 0c                	je     c0108812 <handle_keywords+0x19c>
c0108806:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c010880a:	74 06                	je     c0108812 <handle_keywords+0x19c>
                    shift = 0;
c010880c:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
c0108810:	eb 16                	jmp    c0108828 <handle_keywords+0x1b2>
                else if(shift_down_last || caps_lock_last)
c0108812:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0108816:	75 06                	jne    c010881e <handle_keywords+0x1a8>
c0108818:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c010881c:	74 06                	je     c0108824 <handle_keywords+0x1ae>
                    shift = 1;
c010881e:	c6 45 f5 01          	movb   $0x1,-0xb(%ebp)
c0108822:	eb 04                	jmp    c0108828 <handle_keywords+0x1b2>
                else
                    shift = 0;
c0108824:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
                }
           }
        uint8_t index = (scancode &= 0x00ff);
c0108828:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c010882e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0108832:	88 45 f0             	mov    %al,-0x10(%ebp)
        char cur_char = key_map[index][shift];
c0108835:	0f b6 55 f0          	movzbl -0x10(%ebp),%edx
c0108839:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010883d:	0f b6 84 50 20 a0 28 	movzbl -0x3fd75fe0(%eax,%edx,2),%eax
c0108844:	c0 
c0108845:	88 45 ef             	mov    %al,-0x11(%ebp)

        if(cur_char){
c0108848:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c010884c:	74 34                	je     c0108882 <handle_keywords+0x20c>
            vga_put_char(cur_char);
c010884e:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0108852:	83 ec 0c             	sub    $0xc,%esp
c0108855:	50                   	push   %eax
c0108856:	e8 c3 d7 ff ff       	call   c010601e <vga_put_char>
c010885b:	83 c4 10             	add    $0x10,%esp
            io_outb(0x20, 0x20);
c010885e:	83 ec 08             	sub    $0x8,%esp
c0108861:	6a 20                	push   $0x20
c0108863:	6a 20                	push   $0x20
c0108865:	e8 be fa ff ff       	call   c0108328 <io_outb>
c010886a:	83 c4 10             	add    $0x10,%esp
            io_outb(0x20, 0x20);
c010886d:	83 ec 08             	sub    $0x8,%esp
c0108870:	6a 20                	push   $0x20
c0108872:	6a 20                	push   $0x20
c0108874:	e8 af fa ff ff       	call   c0108328 <io_outb>
c0108879:	83 c4 10             	add    $0x10,%esp
            asm volatile("sti");
c010887c:	fb                   	sti    
            return;
c010887d:	e9 84 00 00 00       	jmp    c0108906 <handle_keywords+0x290>
        }

        if(scancode == crtl_l_make || scancode == crtl_r_make)
c0108882:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0108887:	74 08                	je     c0108891 <handle_keywords+0x21b>
c0108889:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c010888f:	75 09                	jne    c010889a <handle_keywords+0x224>
            crtl_status = 1;
c0108891:	c6 05 20 93 28 c0 01 	movb   $0x1,0xc0289320
c0108898:	eb 2e                	jmp    c01088c8 <handle_keywords+0x252>
        else if(scancode == shift_l_make || scancode == shift_r_make)
c010889a:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c010889f:	74 07                	je     c01088a8 <handle_keywords+0x232>
c01088a1:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c01088a6:	75 09                	jne    c01088b1 <handle_keywords+0x23b>
            shift_status = 1;
c01088a8:	c6 05 21 93 28 c0 01 	movb   $0x1,0xc0289321
c01088af:	eb 17                	jmp    c01088c8 <handle_keywords+0x252>
        else if(scancode == caps_lock_make)
c01088b1:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c01088b6:	75 4d                	jne    c0108905 <handle_keywords+0x28f>
            caps_lock_status = ~caps_lock_status;
c01088b8:	0f b6 05 23 93 28 c0 	movzbl 0xc0289323,%eax
c01088bf:	f7 d0                	not    %eax
c01088c1:	a2 23 93 28 c0       	mov    %al,0xc0289323
            (scancode == crtl_r_make)){
c01088c6:	eb 3d                	jmp    c0108905 <handle_keywords+0x28f>
c01088c8:	eb 3b                	jmp    c0108905 <handle_keywords+0x28f>
    }else{
        vga_put_char((char)(scancode && 0x00ff));
c01088ca:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c01088cf:	0f 95 c0             	setne  %al
c01088d2:	0f b6 c0             	movzbl %al,%eax
c01088d5:	0f be c0             	movsbl %al,%eax
c01088d8:	83 ec 0c             	sub    $0xc,%esp
c01088db:	50                   	push   %eax
c01088dc:	e8 3d d7 ff ff       	call   c010601e <vga_put_char>
c01088e1:	83 c4 10             	add    $0x10,%esp
        io_outb(0x20, 0x20);
c01088e4:	83 ec 08             	sub    $0x8,%esp
c01088e7:	6a 20                	push   $0x20
c01088e9:	6a 20                	push   $0x20
c01088eb:	e8 38 fa ff ff       	call   c0108328 <io_outb>
c01088f0:	83 c4 10             	add    $0x10,%esp
        io_outb(0x20, 0x20);
c01088f3:	83 ec 08             	sub    $0x8,%esp
c01088f6:	6a 20                	push   $0x20
c01088f8:	6a 20                	push   $0x20
c01088fa:	e8 29 fa ff ff       	call   c0108328 <io_outb>
c01088ff:	83 c4 10             	add    $0x10,%esp
        asm volatile("sti");
c0108902:	fb                   	sti    
c0108903:	eb 01                	jmp    c0108906 <handle_keywords+0x290>
            (scancode == crtl_r_make)){
c0108905:	90                   	nop
    }
c0108906:	c9                   	leave  
c0108907:	c3                   	ret    

c0108908 <spin>:
    if (!(cond)) {                                    \
        __assert_fail(#cond, __FILE__, __LINE__);     \
    }


inline static void spin() {
c0108908:	55                   	push   %ebp
c0108909:	89 e5                	mov    %esp,%ebp
    while(1);
c010890b:	eb fe                	jmp    c010890b <spin+0x3>

c010890d <__assert_fail>:
#include <common.h>
#include <libs/mstdio.h>

static char buffer[1024];

void __assert_fail(const char* expr, const char* file, unsigned int line) {
c010890d:	55                   	push   %ebp
c010890e:	89 e5                	mov    %esp,%ebp
c0108910:	57                   	push   %edi
c0108911:	83 ec 04             	sub    $0x4,%esp
    kprintf(buffer, "%s (%s:%u)", expr, file, line);
c0108914:	83 ec 0c             	sub    $0xc,%esp
c0108917:	ff 75 10             	push   0x10(%ebp)
c010891a:	ff 75 0c             	push   0xc(%ebp)
c010891d:	ff 75 08             	push   0x8(%ebp)
c0108920:	68 b9 b5 28 c0       	push   $0xc028b5b9
c0108925:	68 40 93 28 c0       	push   $0xc0289340
c010892a:	e8 17 00 00 00       	call   c0108946 <kprintf>
c010892f:	83 c4 20             	add    $0x20,%esp

    // Here we load the buffer's address into %edi ("D" constraint)
    //  This is a convention we made that the LUNAIX_SYS_PANIC syscall will
    //  print the panic message passed via %edi. (see kernel/asm/x86/interrupts.c)
    asm(
c0108932:	b8 40 93 28 c0       	mov    $0xc0289340,%eax
c0108937:	89 c7                	mov    %eax,%edi
c0108939:	cd 20                	int    $0x20
        "int %0"
        ::"i"(32), "D"(buffer)
    );

    spin();     // never reach
c010893b:	e8 c8 ff ff ff       	call   c0108908 <spin>
c0108940:	90                   	nop
c0108941:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0108944:	c9                   	leave  
c0108945:	c3                   	ret    

c0108946 <kprintf>:
#include <libs/mstdio.h>
#include <vga/vga.h>
void kprintf (const char *format, ...)
{
c0108946:	55                   	push   %ebp
c0108947:	89 e5                	mov    %esp,%ebp
c0108949:	83 ec 38             	sub    $0x38,%esp
  char **arg = (char **) &format;
c010894c:	8d 45 08             	lea    0x8(%ebp),%eax
c010894f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int c;
  char buf[20];

  arg++;
c0108952:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  while ((c = *format++) != 0)
c0108956:	e9 83 01 00 00       	jmp    c0108ade <kprintf+0x198>
    {
      if (c != '%')
c010895b:	83 7d f0 25          	cmpl   $0x25,-0x10(%ebp)
c010895f:	74 17                	je     c0108978 <kprintf+0x32>
        vga_put_char (c);
c0108961:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108964:	0f be c0             	movsbl %al,%eax
c0108967:	83 ec 0c             	sub    $0xc,%esp
c010896a:	50                   	push   %eax
c010896b:	e8 ae d6 ff ff       	call   c010601e <vga_put_char>
c0108970:	83 c4 10             	add    $0x10,%esp
c0108973:	e9 66 01 00 00       	jmp    c0108ade <kprintf+0x198>
      else
        {
          char *p, *p2;
          int pad0 = 0, pad = 0;
c0108978:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010897f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
          
          c = *format++;
c0108986:	8b 45 08             	mov    0x8(%ebp),%eax
c0108989:	8d 50 01             	lea    0x1(%eax),%edx
c010898c:	89 55 08             	mov    %edx,0x8(%ebp)
c010898f:	0f b6 00             	movzbl (%eax),%eax
c0108992:	0f be c0             	movsbl %al,%eax
c0108995:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (c == '0')
c0108998:	83 7d f0 30          	cmpl   $0x30,-0x10(%ebp)
c010899c:	75 19                	jne    c01089b7 <kprintf+0x71>
            {
              pad0 = 1;
c010899e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
              c = *format++;
c01089a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01089a8:	8d 50 01             	lea    0x1(%eax),%edx
c01089ab:	89 55 08             	mov    %edx,0x8(%ebp)
c01089ae:	0f b6 00             	movzbl (%eax),%eax
c01089b1:	0f be c0             	movsbl %al,%eax
c01089b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          if (c >= '0' && c <= '9')
c01089b7:	83 7d f0 2f          	cmpl   $0x2f,-0x10(%ebp)
c01089bb:	7e 21                	jle    c01089de <kprintf+0x98>
c01089bd:	83 7d f0 39          	cmpl   $0x39,-0x10(%ebp)
c01089c1:	7f 1b                	jg     c01089de <kprintf+0x98>
            {
              pad = c - '0';
c01089c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01089c6:	83 e8 30             	sub    $0x30,%eax
c01089c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
              c = *format++;
c01089cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01089cf:	8d 50 01             	lea    0x1(%eax),%edx
c01089d2:	89 55 08             	mov    %edx,0x8(%ebp)
c01089d5:	0f b6 00             	movzbl (%eax),%eax
c01089d8:	0f be c0             	movsbl %al,%eax
c01089db:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }

          switch (c)
c01089de:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c01089e2:	74 2b                	je     c0108a0f <kprintf+0xc9>
c01089e4:	83 7d f0 78          	cmpl   $0x78,-0x10(%ebp)
c01089e8:	0f 8f d5 00 00 00    	jg     c0108ac3 <kprintf+0x17d>
c01089ee:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c01089f2:	74 1b                	je     c0108a0f <kprintf+0xc9>
c01089f4:	83 7d f0 75          	cmpl   $0x75,-0x10(%ebp)
c01089f8:	0f 8f c5 00 00 00    	jg     c0108ac3 <kprintf+0x17d>
c01089fe:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
c0108a02:	74 0b                	je     c0108a0f <kprintf+0xc9>
c0108a04:	83 7d f0 73          	cmpl   $0x73,-0x10(%ebp)
c0108a08:	74 2b                	je     c0108a35 <kprintf+0xef>
c0108a0a:	e9 b4 00 00 00       	jmp    c0108ac3 <kprintf+0x17d>
            {
            case 'd':
            case 'u':
            case 'x':
              itoa (buf, c, *((int *) arg++));
c0108a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a12:	8d 50 04             	lea    0x4(%eax),%edx
c0108a15:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108a18:	8b 00                	mov    (%eax),%eax
c0108a1a:	83 ec 04             	sub    $0x4,%esp
c0108a1d:	50                   	push   %eax
c0108a1e:	ff 75 f0             	push   -0x10(%ebp)
c0108a21:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0108a24:	50                   	push   %eax
c0108a25:	e8 d4 00 00 00       	call   c0108afe <itoa>
c0108a2a:	83 c4 10             	add    $0x10,%esp
              p = buf;
c0108a2d:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0108a30:	89 45 ec             	mov    %eax,-0x14(%ebp)
              goto string;
c0108a33:	eb 1e                	jmp    c0108a53 <kprintf+0x10d>
              break;

            case 's':
              p = *arg++;
c0108a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a38:	8d 50 04             	lea    0x4(%eax),%edx
c0108a3b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108a3e:	8b 00                	mov    (%eax),%eax
c0108a40:	89 45 ec             	mov    %eax,-0x14(%ebp)
              if (! p)
c0108a43:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108a47:	75 09                	jne    c0108a52 <kprintf+0x10c>
                p = "(null)";
c0108a49:	c7 45 ec c4 b5 28 c0 	movl   $0xc028b5c4,-0x14(%ebp)
c0108a50:	eb 01                	jmp    c0108a53 <kprintf+0x10d>

            string:
c0108a52:	90                   	nop
              for (p2 = p; *p2; p2++);
c0108a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a56:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108a59:	eb 04                	jmp    c0108a5f <kprintf+0x119>
c0108a5b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0108a5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a62:	0f b6 00             	movzbl (%eax),%eax
c0108a65:	84 c0                	test   %al,%al
c0108a67:	75 f2                	jne    c0108a5b <kprintf+0x115>
              for (; p2 < p + pad; p2++)
c0108a69:	eb 22                	jmp    c0108a8d <kprintf+0x147>
                vga_put_char (pad0 ? '0' : ' ');
c0108a6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108a6f:	74 07                	je     c0108a78 <kprintf+0x132>
c0108a71:	b8 30 00 00 00       	mov    $0x30,%eax
c0108a76:	eb 05                	jmp    c0108a7d <kprintf+0x137>
c0108a78:	b8 20 00 00 00       	mov    $0x20,%eax
c0108a7d:	83 ec 0c             	sub    $0xc,%esp
c0108a80:	50                   	push   %eax
c0108a81:	e8 98 d5 ff ff       	call   c010601e <vga_put_char>
c0108a86:	83 c4 10             	add    $0x10,%esp
              for (; p2 < p + pad; p2++)
c0108a89:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0108a8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a93:	01 d0                	add    %edx,%eax
c0108a95:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108a98:	72 d1                	jb     c0108a6b <kprintf+0x125>
              while (*p)
c0108a9a:	eb 1b                	jmp    c0108ab7 <kprintf+0x171>
                vga_put_char (*p++);
c0108a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a9f:	8d 50 01             	lea    0x1(%eax),%edx
c0108aa2:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0108aa5:	0f b6 00             	movzbl (%eax),%eax
c0108aa8:	0f be c0             	movsbl %al,%eax
c0108aab:	83 ec 0c             	sub    $0xc,%esp
c0108aae:	50                   	push   %eax
c0108aaf:	e8 6a d5 ff ff       	call   c010601e <vga_put_char>
c0108ab4:	83 c4 10             	add    $0x10,%esp
              while (*p)
c0108ab7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108aba:	0f b6 00             	movzbl (%eax),%eax
c0108abd:	84 c0                	test   %al,%al
c0108abf:	75 db                	jne    c0108a9c <kprintf+0x156>
              break;
c0108ac1:	eb 1b                	jmp    c0108ade <kprintf+0x198>

            default:
              vga_put_char (*((int *) arg++));
c0108ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ac6:	8d 50 04             	lea    0x4(%eax),%edx
c0108ac9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108acc:	8b 00                	mov    (%eax),%eax
c0108ace:	0f be c0             	movsbl %al,%eax
c0108ad1:	83 ec 0c             	sub    $0xc,%esp
c0108ad4:	50                   	push   %eax
c0108ad5:	e8 44 d5 ff ff       	call   c010601e <vga_put_char>
c0108ada:	83 c4 10             	add    $0x10,%esp
              break;
c0108add:	90                   	nop
  while ((c = *format++) != 0)
c0108ade:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ae1:	8d 50 01             	lea    0x1(%eax),%edx
c0108ae4:	89 55 08             	mov    %edx,0x8(%ebp)
c0108ae7:	0f b6 00             	movzbl (%eax),%eax
c0108aea:	0f be c0             	movsbl %al,%eax
c0108aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108af0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108af4:	0f 85 61 fe ff ff    	jne    c010895b <kprintf+0x15>
            }
        }
    }
}
c0108afa:	90                   	nop
c0108afb:	90                   	nop
c0108afc:	c9                   	leave  
c0108afd:	c3                   	ret    

c0108afe <itoa>:
#include <libs/mstdlib.h>

void
itoa (char *buf, int base, int d)
{
c0108afe:	55                   	push   %ebp
c0108aff:	89 e5                	mov    %esp,%ebp
c0108b01:	83 ec 20             	sub    $0x20,%esp
  char *p = buf;
c0108b04:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b07:	89 45 fc             	mov    %eax,-0x4(%ebp)
  char *p1, *p2;
  unsigned long ud = d;
c0108b0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0108b0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int divisor = 10;
c0108b10:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
  
  /* If %d is specified and D is minus, put ‘-’ in the head. */
  if (base == 'd' && d < 0)
c0108b17:	83 7d 0c 64          	cmpl   $0x64,0xc(%ebp)
c0108b1b:	75 20                	jne    c0108b3d <itoa+0x3f>
c0108b1d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108b21:	79 1a                	jns    c0108b3d <itoa+0x3f>
    {
      *p++ = '-';
c0108b23:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b26:	8d 50 01             	lea    0x1(%eax),%edx
c0108b29:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0108b2c:	c6 00 2d             	movb   $0x2d,(%eax)
      buf++;
c0108b2f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      ud = -d;
c0108b33:	8b 45 10             	mov    0x10(%ebp),%eax
c0108b36:	f7 d8                	neg    %eax
c0108b38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108b3b:	eb 0d                	jmp    c0108b4a <itoa+0x4c>
    }
  else if (base == 'x')
c0108b3d:	83 7d 0c 78          	cmpl   $0x78,0xc(%ebp)
c0108b41:	75 07                	jne    c0108b4a <itoa+0x4c>
    divisor = 16;
c0108b43:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)

  /* Divide UD by DIVISOR until UD == 0. */
  do
    {
      int remainder = ud % divisor;
c0108b4a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0108b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108b50:	ba 00 00 00 00       	mov    $0x0,%edx
c0108b55:	f7 f1                	div    %ecx
c0108b57:	89 d0                	mov    %edx,%eax
c0108b59:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
c0108b5c:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
c0108b60:	7f 0a                	jg     c0108b6c <itoa+0x6e>
c0108b62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b65:	83 c0 30             	add    $0x30,%eax
c0108b68:	89 c1                	mov    %eax,%ecx
c0108b6a:	eb 08                	jmp    c0108b74 <itoa+0x76>
c0108b6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b6f:	83 c0 57             	add    $0x57,%eax
c0108b72:	89 c1                	mov    %eax,%ecx
c0108b74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b77:	8d 50 01             	lea    0x1(%eax),%edx
c0108b7a:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0108b7d:	88 08                	mov    %cl,(%eax)
    }
  while (ud /= divisor);
c0108b7f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0108b82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108b85:	ba 00 00 00 00       	mov    $0x0,%edx
c0108b8a:	f7 f1                	div    %ecx
c0108b8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108b8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108b93:	75 b5                	jne    c0108b4a <itoa+0x4c>

  /* Terminate BUF. */
  *p = 0;
c0108b95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b98:	c6 00 00             	movb   $0x0,(%eax)
  
  /* Reverse BUF. */
  p1 = buf;
c0108b9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b9e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  p2 = p - 1;
c0108ba1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108ba4:	83 e8 01             	sub    $0x1,%eax
c0108ba7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (p1 < p2)
c0108baa:	eb 25                	jmp    c0108bd1 <itoa+0xd3>
    {
      char tmp = *p1;
c0108bac:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108baf:	0f b6 00             	movzbl (%eax),%eax
c0108bb2:	88 45 e7             	mov    %al,-0x19(%ebp)
      *p1 = *p2;
c0108bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bb8:	0f b6 10             	movzbl (%eax),%edx
c0108bbb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108bbe:	88 10                	mov    %dl,(%eax)
      *p2 = tmp;
c0108bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bc3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0108bc7:	88 10                	mov    %dl,(%eax)
      p1++;
c0108bc9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
      p2--;
c0108bcd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  while (p1 < p2)
c0108bd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108bd4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108bd7:	72 d3                	jb     c0108bac <itoa+0xae>
    }
c0108bd9:	90                   	nop
c0108bda:	90                   	nop
c0108bdb:	c9                   	leave  
c0108bdc:	c3                   	ret    

c0108bdd <memset>:
#include <libs/mstring.h>
#include <stdint.h>

void* memset(void* ptr, int value, size_t num)
{
c0108bdd:	55                   	push   %ebp
c0108bde:	89 e5                	mov    %esp,%ebp
c0108be0:	83 ec 10             	sub    $0x10,%esp
    uint8_t* c_ptr = (uint8_t*)ptr;
c0108be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108be6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (size_t i = 0; i < num; i++) {
c0108be9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0108bf0:	eb 11                	jmp    c0108c03 <memset+0x26>
        *(c_ptr + i) = (uint8_t)value;
c0108bf2:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0108bf5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108bf8:	01 d0                	add    %edx,%eax
c0108bfa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108bfd:	88 10                	mov    %dl,(%eax)
    for (size_t i = 0; i < num; i++) {
c0108bff:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0108c03:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108c06:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108c09:	72 e7                	jb     c0108bf2 <memset+0x15>
    }
    return ptr;
c0108c0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c0e:	c9                   	leave  
c0108c0f:	c3                   	ret    
